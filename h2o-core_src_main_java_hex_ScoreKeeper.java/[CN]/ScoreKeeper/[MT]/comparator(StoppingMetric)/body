{
switch (criterion) {
case AUC:
    return new Comparator<ScoreKeeper>(){
      @Override public int compare(      ScoreKeeper o1,      ScoreKeeper o2){
        return (int)Math.signum(o2._AUC - o1._AUC);
      }
    }
;
case MSE:
  return new Comparator<ScoreKeeper>(){
    @Override public int compare(    ScoreKeeper o1,    ScoreKeeper o2){
      return (int)Math.signum(o1._mse - o2._mse);
    }
  }
;
case deviance:
return new Comparator<ScoreKeeper>(){
  @Override public int compare(  ScoreKeeper o1,  ScoreKeeper o2){
    return (int)Math.signum(o1._mean_residual_deviance - o2._mean_residual_deviance);
  }
}
;
case logloss:
return new Comparator<ScoreKeeper>(){
@Override public int compare(ScoreKeeper o1,ScoreKeeper o2){
  return (int)Math.signum(o1._logloss - o2._logloss);
}
}
;
case r2:
return new Comparator<ScoreKeeper>(){
@Override public int compare(ScoreKeeper o1,ScoreKeeper o2){
return (int)Math.signum(o2._r2 - o1._r2);
}
}
;
case misclassification:
return new Comparator<ScoreKeeper>(){
@Override public int compare(ScoreKeeper o1,ScoreKeeper o2){
return (int)Math.signum(o1._classError - o2._classError);
}
}
;
case mean_per_class_error:
return new Comparator<ScoreKeeper>(){
@Override public int compare(ScoreKeeper o1,ScoreKeeper o2){
return (int)Math.signum(o1._meanClassError - o2._meanClassError);
}
}
;
case lift_top_group:
return new Comparator<ScoreKeeper>(){
@Override public int compare(ScoreKeeper o1,ScoreKeeper o2){
return (int)Math.signum(o2._lift - o1._lift);
}
}
;
default :
throw H2O.unimpl("Undefined stopping criterion.");
}
}
