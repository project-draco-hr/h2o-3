{
  Frame trn=parse_test_file("smalldata/junit/mixcat_train.csv");
  AModel.AParms p=new AModel.AParms();
  AModel.AOutput o=new AModel.AOutput();
  o._names=trn.names();
  o._domains=trn.domains();
  trn.remove();
  AModel am=new AModel(Key.make(),p,o);
  Frame tst=parse_test_file("smalldata/junit/mixcat_test.csv");
  Frame adapt=new Frame(tst);
  String[] errs=am.adaptTestForTrain(adapt,true);
  Assert.assertTrue(ArrayUtils.find(errs,"Validation column Feature_1 has levels not trained on: [D]") != -1);
  Assert.assertTrue(ArrayUtils.find(errs,"Validation set is missing training column Const: substituting in a column of NAs") != -1);
  Assert.assertTrue(ArrayUtils.find(errs,"Validation set is missing training column Useless: substituting in a column of NAs") != -1);
  Assert.assertTrue(ArrayUtils.find(errs,"Validation column Response has levels not trained on: [W]") != -1);
  Assert.assertArrayEquals(adapt.vec("Feature_1").domain(),new String[]{"A","B","C","D"});
  Assert.assertTrue(adapt.vec("Const").isBad());
  Assert.assertTrue(adapt.vec("Useless").isBad());
  Assert.assertArrayEquals(adapt.vec("Feature_1").domain(),new String[]{"X","Y","Z","W"});
  Vec[] vecs=adapt.vecs();
  for (int i=0; i < vecs.length; i++)   if (tst.find(vecs[i]) != -1)   vecs[i]=null;
  adapt.delete();
  tst.remove();
}
