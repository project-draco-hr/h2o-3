{
  Frame trn=parse_test_file("smalldata/junit/mixcat_train.csv");
  AModel.AParms p=new AModel.AParms();
  AModel.AOutput o=new AModel.AOutput();
  o._names=trn.names();
  o._domains=trn.domains();
  trn.remove();
  AModel am=new AModel(Key.make(),p,o);
  Frame tst=parse_test_file("smalldata/junit/mixcat_test.csv");
  Frame adapt=new Frame(tst);
  String[] warns=am.adaptTestForTrain(adapt,true,true);
  Assert.assertTrue(ArrayUtils.find(warns,"Test/Validation dataset column 'Feature_1' has levels not trained on: [D]") != -1);
  Assert.assertTrue(ArrayUtils.find(warns,"Test/Validation dataset is missing training column 'Const': substituting in a column of NAs") != -1);
  Assert.assertTrue(ArrayUtils.find(warns,"Test/Validation dataset is missing training column 'Useless': substituting in a column of NAs") != -1);
  Assert.assertTrue(ArrayUtils.find(warns,"Test/Validation dataset column 'Response' has levels not trained on: [W]") != -1);
  Assert.assertArrayEquals(adapt.vec("Feature_1").domain(),new String[]{"A","B","C","D"});
  Assert.assertTrue(adapt.vec("Const").isBad());
  Assert.assertTrue(adapt.vec("Useless").isBad());
  Assert.assertArrayEquals(adapt.vec("Response").domain(),new String[]{"X","Y","Z","W"});
  Model.cleanup_adapt(adapt,tst);
  tst.remove();
}
