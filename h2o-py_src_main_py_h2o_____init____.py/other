'\nThis module provides access to the H2O JVM (and extensions thereof), its objects, its\nmachine-learning algorithms, and modeling support (basic munging and feature generation)\ncapabilities.\n\nThe H2O JVM sports a web server such that all communication occurs on a socket (specified\nby an IP address and a port) via a series of REST calls (see connection.py for the REST\nlayer implementation and details). There is a single active connection to the H2O JVM at\nany one time, and this handle is stashed in the __H2OCONN__ global object. The __H2OCONN__\nis not currently a singleton object (but it may become one in the future).\n\nWhat is H2O?\n============\n\nH2O is a piece of java software for data modeling and general computing. There are many\ndifferent views of the H2O software, but the primary view of H2O is that of a distributed\n(many machines), parallel (many CPUs), in memory (several hundred GBs Xmx) processing\n"engine". How H2O achieves within node parallelism and efficient horizontal scaling is\ndiscussed in detail elsewhere.\n\nH2O has a distributed key-value store (the "DKV"), which contains pointers to the various\nobjects that make up the H2O ecosystem. Briefly, these objects are:\n\n    Key:    A key is an entry in the DKV that maps to an object in H2O.\n    Frame:  A Frame is a collection of Vec objects. It is a 2D array of elements.\n    Vec:    A Vec is a collection of Chunk objects. It is a 1D array of elements.\n    Chunk:  A Chunk holds a fraction of the BigData. It is a 1D array of elements.\n    ModelMetrics:   A collection of metrics for a given category of model.\n    Model:  A model is an immutable object having `predict` and `metrics` methods.\n    Job:    A Job is a non-blocking task that performs a finite amount of work.\n\nH2O Objects\n===========\n\nblah blah blah h2o objects\n\n\n\n\n\nH2OFrame\n========\n\n\n\n\n\nH2OVec\n======\n\n\nModelBuilder\n============\n'
from h2o import *
from model import *
from frame import H2OFrame
from frame import H2OVec
