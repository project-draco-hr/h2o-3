def test2_glm_lambda_search(self):
    '\n        This test is used to test the lambda search.  Recall that lambda search enables efficient and\n        automatic search for the optimal value of the lambda parameter.  When lambda search is enabled,\n        GLM will first fit a model with maximum regularization and then keep decreasing it until\n        over-fitting occurs.  The resulting model is based on the best lambda value.  According to Tomas,\n        set alpha = 0.5 and enable validation but not cross-validation.\n        '
    print('*******************************************************************************************')
    print('Test2: tests the lambda search.')
    h2o.cluster_info()
    model_h2o_0p5 = H2OGeneralizedLinearEstimator(family=self.family, lambda_search=True, alpha=0.5, lambda_min_ratio=1e-20)
    model_h2o_0p5.train(x=self.x_indices, y=self.y_index, training_frame=self.training_data, validation_frame=self.valid_data)
    self.best_lambda = pyunit_utils.get_train_glm_params(model_h2o_0p5, 'best_lambda')
    h2o_model_0p5_test_metrics = model_h2o_0p5.model_performance(test_data=self.test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(model_h2o_0p5, h2o_model_0p5_test_metrics, self.family, '\nTest2 Done!', test_model=self.test1_model, test_model_metric=self.test1_model_metrics, compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training dataset ....', '\nComparing logloss from test dataset ....', '\nComparing confusion matrices from training dataset ....', '\nComparing confusion matrices from test dataset ...', '\nComparing accuracy from training dataset ....', '\nComparing accuracy from test dataset ....'], h2o_att_str=['H2O lambda search intercept and weights: \n', 'H2O lambda search logloss from training dataset: ', 'H2O lambda search logloss from test dataset', 'H2O lambda search confusion matrix from training dataset: \n', 'H2O lambda search confusion matrix from test dataset: \n', 'H2O lambda search accuracy from training dataset: ', 'H2O lambda search accuracy from test dataset: '], template_att_str=['H2O no regularization intercept and weights: \n', 'H2O no regularization logloss from training dataset: ', 'H2O no regularization logloss from test dataset: ', 'H2O no regularization confusion matrix from training dataset: \n', 'H2O no regularization confusion matrix from test dataset: \n', 'H2O no regularization accuracy from training dataset: ', 'H2O no regularization accuracy from test dataset: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training dataset differ too much!', 'Logloss from test dataset differ too much!', '', '', 'Accuracies from training dataset differ too much!', 'Accuracies from test dataset differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training dataset are close enough!', 'Logloss from test dataset are close enough!', '', '', 'Accuracies from training dataset are close enough!', 'Accuracies from test dataset are close enough!'], can_be_better_than_template=[True, False, True, True, True, True, True], just_print=[True, False, False, True, True, True, False], failed_test_number=self.test_failed, ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test2_glm_lambda_search', num_test_failed, self.test_failed)
    self.test_num += 1
