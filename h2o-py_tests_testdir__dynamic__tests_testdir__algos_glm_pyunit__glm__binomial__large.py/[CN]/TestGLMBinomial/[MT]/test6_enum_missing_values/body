def test6_enum_missing_values(self):
    '\n        Test parameter missing_values_handling="MeanImputation" with\n        mixed predictors (categorical/real value columns).  We first generate a data set that\n        contains a random number of columns of categorical and real value columns.  Next, we\n        encode the categorical columns.  Then, we generate the random data set using the formula\n        as before.  Next, we go into the predictor matrix and randomly\n        decide to change a value to be nan and create missing values.  Again, we build a Sklearn\n        logistic regression and compare our H2O models with it.\n        '
    print('*******************************************************************************************')
    print('Test6: test the GLM with enum/real values.')
    h2o.cluster_info()
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_binomial_result(self.training_data_file_enum_nans, self.test_data_file_enum_nans, True, False)
    training_data = h2o.import_file(pyunit_utils.locate(self.training_data_file_enum_nans))
    test_data = h2o.import_file(pyunit_utils.locate(self.test_data_file_enum_nans))
    for ind in range(self.enum_col):
        training_data[ind] = training_data[ind].round().asfactor()
        test_data[ind] = test_data[ind].round().asfactor()
    num_col = training_data.ncol
    y_index = (num_col - 1)
    x_indices = list(range(y_index))
    training_data[y_index] = training_data[y_index].round().asfactor()
    if (training_data[y_index].nlevels()[0] < self.class_number):
        print('Response classes are not represented in training dataset.')
        sys.exit(0)
    test_data[y_index] = test_data[y_index].round().asfactor()
    model_h2o = H2OGeneralizedLinearEstimator(family=self.family, Lambda=0, missing_values_handling='MeanImputation')
    model_h2o.train(x=x_indices, y=y_index, training_frame=training_data)
    h2o_model_test_metrics = model_h2o.model_performance(test_data=test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(model_h2o, h2o_model_test_metrics, self.family, '\nTest6 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training dataset ....', '\nComparing logloss from test dataset ....', '\nComparing confusion matrices from training dataset ....', '\nComparing confusion matrices from test dataset ...', '\nComparing accuracy from training dataset ....', '\nComparing accuracy from test dataset ....'], h2o_att_str=['H2O with enum/real values, no regularization and missing values intercept and weights: \n', 'H2O with enum/real values, no regularization and missing values logloss from training dataset: ', 'H2O with enum/real values, no regularization and missing values logloss from test dataset', 'H2O with enum/real values, no regularization and missing values confusion matrix from training dataset: \n', 'H2O with enum/real values, no regularization and missing values confusion matrix from test dataset: \n', 'H2O with enum/real values, no regularization and missing values accuracy from training dataset: ', 'H2O with enum/real values, no regularization and missing values accuracy from test dataset: '], template_att_str=['Sklearn missing values intercept and weights: \n', 'Sklearn with enum/real values, no regularization and missing values logloss from training dataset: ', 'Sklearn with enum/real values, no regularization and missing values logloss from test dataset: ', 'Sklearn with enum/real values, no regularization and missing values confusion matrix from training dataset: \n', 'Sklearn with enum/real values, no regularization and missing values confusion matrix from test dataset: \n', 'Sklearn with enum/real values, no regularization and missing values accuracy from training dataset: ', 'Sklearn with enum/real values, no regularization and missing values accuracy from test dataset: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training dataset differ too much!', 'Logloss from test dataset differ too much!', '', '', 'Accuracies from training dataset differ too much!', 'Accuracies from test dataset differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training dataset are close enough!', 'Logloss from test dataset are close enough!', '', '', 'Accuracies from training dataset are close enough!', 'Accuracies from test dataset are close enough!'], can_be_better_than_template=[True, True, True, True, True, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    h2o.cluster_info()
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test6_enum_missing_values', num_test_failed, self.test_failed)
    self.test_num += 1
