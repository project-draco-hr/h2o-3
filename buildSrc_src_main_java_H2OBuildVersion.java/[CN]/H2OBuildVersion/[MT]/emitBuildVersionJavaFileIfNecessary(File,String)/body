{
  try {
    String branchName=calcBranch();
    String lastCommitHash=calcLastCommitHash();
    String describe=calcDescribe();
    String compiledOn=calcCompiledOn();
    String compiledBy=calcCompiledBy();
    boolean needToEmit=false;
    if (!fileName.exists()) {
      System.out.print("NOTE: emitBuildVersionJava found no file, emitting new file");
      needToEmit=true;
    }
    int found=0;
    if (!needToEmit) {
      final String[][] stuffToCheck={{"branchName",branchName},{"lastCommitHash",lastCommitHash},{"projectVersion",projectVersion}};
      BufferedReader br=new BufferedReader(new FileReader(fileName));
      String line=br.readLine();
      while ((!needToEmit) && (line != null)) {
        for (        String[] feature : stuffToCheck) {
          String name=feature[0];
          String value=feature[1];
          Pattern p=Pattern.compile(".*" + name + ".*\"(.*)\";.*");
          Matcher m=p.matcher(line);
          boolean b=m.matches();
          if (b) {
            found++;
            String v=m.group(1);
            if (!value.equals(v)) {
              System.out.print("NOTE: emitBuildVersionJava found a mismatch, emitting new file (" + value + " not equal "+ v+ ")");
              needToEmit=true;
              break;
            }
          }
        }
        line=br.readLine();
      }
    }
    if ((!needToEmit) && (found != 3)) {
      System.out.print("NOTE: emitBuildVersionJava found too few things to check, emitting new file");
      needToEmit=true;
    }
    if (!needToEmit) {
      System.out.print("NOTE: emitBuildVersionJava found a match, nothing to do");
      return;
    }
    PrintWriter writer=new PrintWriter(fileName);
    writer.println("package water.init;");
    writer.println("");
    writer.println("public class BuildVersion extends AbstractBuildVersion {");
    writer.println("    public String branchName()     { return \"" + branchName + "\"; }");
    writer.println("    public String lastCommitHash() { return \"" + lastCommitHash + "\"; }");
    writer.println("    public String describe()       { return \"" + describe + "\"; }");
    writer.println("    public String projectVersion() { return \"" + projectVersion + "\"; }");
    writer.println("    public String compiledOn()     { return \"" + compiledOn + "\"; }");
    writer.println("    public String compiledBy()     { return \"" + compiledBy + "\"; }");
    writer.println("}");
    writer.close();
  }
 catch (  Exception e) {
    System.out.println("");
    System.out.println("ERROR:  H2OBuildVersion emitBuildVersionJavaFileIfNecessary failed");
    System.out.println("");
    System.out.println(e);
    System.out.println("");
    System.exit(1);
  }
}
