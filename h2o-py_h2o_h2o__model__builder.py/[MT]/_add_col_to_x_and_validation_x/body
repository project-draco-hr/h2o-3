def _add_col_to_x_and_validation_x(col_name, x, validation_x, kwargs, xval=False):
    "\n  Add column to x/validation_x, if it isn't already there. Grabs the column from the training_frame or\n  validation_frame parameters.\n\n  :param col_name: the name of the column to add\n  :param xval: if True, don't add folds_column to validation_x\n  :return: x and validation_x, with the respective columns added\n  "
    if (col_name not in x._col_names):
        if ('training_frame' not in kwargs.keys()):
            raise ValueError((('must specify `training_frame` argument if `' + col_name) + '`not part of `x`'))
        if (not (col_name in kwargs['training_frame'].col_names())):
            raise ValueError((('`' + col_name) + "` wasn't found in the training_frame. Only these columns were found: {0}".format(kwargs['training_frame'].col_names())))
        x[col_name] = kwargs['training_frame'][col_name]
    if ((validation_x is not None) and (not xval)):
        if (col_name not in validation_x._col_names):
            if ('validation_frame' not in kwargs.keys()):
                raise ValueError((('must specify `validation_frame` argument if `' + col_name) + '` not part of `validation_x`'))
            if (not (col_name in kwargs['validation_frame'].col_names())):
                raise ValueError((('`' + col_name) + "` wasn't found in the validation_frame. Only these columns were found: {0}".format(kwargs['validation_frame'].col_names())))
            validation_x[col_name] = kwargs['validation_frame'][col_name]
    return (x, validation_x)
