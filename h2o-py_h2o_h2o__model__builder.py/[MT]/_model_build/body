def _model_build(x, y, vx, vy, algo, offsets, weights, fold_column, kwargs):
    if (x is None):
        raise ValueError('Missing features')
    x = _check_frame(x, y, y)
    if (vx is not None):
        vx = _check_frame(vx, vy, y)
    if (offsets is not None):
        (x, vx) = _check_extra_col(x, vx, offsets)
    if (weights is not None):
        (x, vx) = _check_extra_col(x, vx, weights)
    if (fold_column is not None):
        (x, vx) = _check_extra_col(x, vx, fold_column)
    kwargs['training_frame'] = x._id
    if (vx is not None):
        kwargs['validation_frame'] = vx._id
    if (y is not None):
        kwargs['response_column'] = y._col_names[0]
    kwargs = dict([(k, (kwargs[k]._frame()._id if isinstance(kwargs[k], H2OFrame) else kwargs[k])) for k in kwargs if (kwargs[k] is not None)])
    do_future = (kwargs.pop('do_future') if ('do_future' in kwargs) else False)
    future_model = H2OModelFuture(H2OJob(H2OConnection.post_json(('ModelBuilders/' + algo), **kwargs), job_type=(algo + ' Model Build')), x)
    return (future_model if do_future else _resolve_model(future_model, **kwargs))
