{
  final int cols=100;
  final int rows=100000;
  final int rep=10;
  double[][] raw=new double[cols][rows];
  for (int j=0; j < cols; ++j) {
    for (int i=0; i < rows; ++i) {
switch (j % 3) {
case 0:
        raw[j][i]=i % 200;
      break;
case 1:
    raw[j][i]=i % 500;
  break;
case 2:
raw[j][i]=i == 17 ? 1 : 0;
break;
}
}
}
Chunk[] chunks=new Chunk[cols];
for (int j=0; j < cols; ++j) {
chunks[j]=new NewChunk(raw[j]).compress();
Log.info("Column " + j + " compressed into: "+ chunks[j].getClass().toString());
}
{
long start=0;
double sum=0;
for (int r=0; r < rep; ++r) {
if (r == rep / 10) start=System.currentTimeMillis();
for (int j=0; j < cols; ++j) {
for (int i=0; i < rows; ++i) {
sum+=raw[j][i];
}
}
}
long done=System.currentTimeMillis();
Log.info("Sum: " + sum);
Log.info("Data size: " + PrettyPrint.bytes(rows * cols * 8));
Log.info("Time to access raw double[]: " + PrettyPrint.msecs(done - start,true));
Log.info("");
}
{
long start=0;
double sum=0;
for (int r=0; r < rep; ++r) {
if (r == rep / 10) start=System.currentTimeMillis();
for (int j=0; j < cols; ++j) {
for (int i=0; i < rows; ++i) {
sum+=chunks[j].atd(i);
}
}
}
long done=System.currentTimeMillis();
Log.info("Sum: " + sum);
long siz=0;
for (int j=0; j < cols; ++j) {
siz+=chunks[j].byteSize();
}
Log.info("Data size: " + PrettyPrint.bytes(siz));
Log.info("Time to access via atd(): " + PrettyPrint.msecs(done - start,true));
Log.info("");
}
}
