def endpoints(raw=False):
    u'\n    Return the list of REST API endpoints. The data is enriched with the following fields:\n      class_name: which back-end class handles this endpoint (the class is derived from the URL);\n      ischema: input schema object (input_schema is the schema\'s name)\n      oschema: output schema object (output_schema is the schema\'s name)\n      algo: for special-cased calls (ModelBuilders/train and Grid/train) -- name of the ML algo requested\n      input_params: list of all input parameters (first path parameters, then all the others). The parameters are\n            given as objects, not just names. There is a flag "is_path_param" on each field.\n    Additionally certain buggy/deprecated endpoints are removed.\n    For Grid/train and ModelBuilders/train endpoints we fix the method name and parameters info (there is some mangling\n    of those on the server side).\n\n      :param raw: if True, then the complete untouched response to .../endpoints is returned (including the metadata)\n    '
    json = _request_or_exit(u'/LATEST/Metadata/endpoints')
    schmap = schemas_map()
    if raw:
        return json
    else:
        assert (u'routes' in json), u'Unexpected result from /LATEST/Metadata/endpoints call'
        for e in json[u'routes']:
            path = e[u'url_pattern']
            method = e[u'handler_method']
            if ((path in [u'/3/ModelMetrics/frames/{frame}/models/{model}', u'/3/ModelMetrics/frames/{frame}']) or e[u'api_name'].endswith(u'_deprecated')):
                e[u'ignore'] = True
                continue
            mm = classname_pattern.match(path)
            assert mm, (u'Cannot determine class name in URL ' + path)
            e[u'class_name'] = mm.group(1)
            assert (e[u'input_schema'] in schmap), (u'Encountered unknown schema %s in %s' % (e[u'input_schema'], path))
            assert (e[u'output_schema'] in schmap), (u'Encountered unknown schema %s in %s' % (e[u'output_schema'], path))
            e[u'ischema'] = schmap[e[u'input_schema']]
            e[u'oschema'] = schmap[e[u'output_schema']]
            if ((e[u'class_name'], method) in set([(u'Grid', u'train'), (u'ModelBuilders', u'train'), (u'ModelBuilders', u'validate_parameters')])):
                pieces = path.split(u'/')
                assert (len(pieces) >= 4), (u'Expected to see algo name in the path: ' + path)
                e[u'algo'] = pieces[3]
                method = (method + e[u'algo'].capitalize())
                e[u'handler_method'] = method
                for field in e[u'ischema'][u'fields']:
                    if (field[u'name'] == u'parameters'):
                        e[u'input_schema'] = field[u'schema_name']
                        e[u'ischema'] = schmap[e[u'input_schema']]
                        break
            e[u'input_params'] = []
            for parm in e[u'path_params']:
                fields = [field for field in e[u'ischema'][u'fields'] if (field[u'name'] == parm)]
                assert (len(fields) == 1), (u'Failed to find parameter: %s for endpoint: %r' % (parm, e))
                field = fields[0].copy()
                schema = (field[u'schema_name'] or u'')
                ftype = field[u'type']
                assert ((ftype == u'string') or (ftype == u'int') or schema.endswith(u'KeyV3') or (schema == u'ColSpecifierV3')), (u'Unexpected param %s of type %s (schema %s)' % (field[u'name'], field[u'type'], field[u'schema_name']))
                assert (field[u'direction'] != u'OUTPUT')
                field[u'is_path_param'] = True
                e[u'input_params'].append(field)
            for parm in e[u'ischema'][u'fields']:
                if ((parm[u'direction'] == u'OUTPUT') or (parm[u'name'] in e[u'path_params'])):
                    continue
                field = parm.copy()
                field[u'is_path_param'] = False
                e[u'input_params'].append(field)
        return [e for e in json[u'routes'] if (u'ignore' not in e)]
