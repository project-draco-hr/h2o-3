def binop_neq(ip, port):
    h2o.init(ip, port)
    iris = h2o.import_frame(path=h2o.locate('smalldata/iris/iris_wheader.csv'))
    (rows, cols) = iris.dim()
    iris.show()
    res = (iris != 4.7)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    new_rows = iris[res[0]].nrow()
    assert (new_rows == 148), 'wrong number of rows returned'
    res = (3.5 != iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    new_rows = iris[res[1]].nrow()
    assert (new_rows == 144), 'wrong number of rows returned'
    res = (iris[0] != iris[1])
    res_rows = len(res)
    assert (res_rows == rows), 'dimension mismatch'
    new_rows = iris[res].nrow()
    assert (new_rows == rows), 'wrong number of rows returned'
    res = (iris[2] != iris[2])
    res_rows = len(res)
    assert (res_rows == rows), 'dimension mismatch'
    new_rows = iris[res].nrow()
    assert (new_rows == 0), 'wrong number of rows returned'
    res = (iris[0] != 4.7)
    res_rows = len(res)
    assert (res_rows == rows), 'dimension mismatch'
    new_rows = iris[res].nrow()
    assert (new_rows == 148), 'wrong number of rows returned'
    res = (3.5 != iris[1])
    res_rows = len(res)
    assert (res_rows == rows), 'dimension mismatch'
    new_rows = iris[res].nrow()
    assert (new_rows == 144), 'wrong number of rows returned'
    res = (iris != iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    res = (iris[0:2] != iris[1:3])
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == 2)), 'dimension mismatch'
