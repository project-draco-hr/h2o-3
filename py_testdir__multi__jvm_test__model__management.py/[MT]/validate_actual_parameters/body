def validate_actual_parameters(input_parameters, actual_parameters, training_frame, validation_frame):
    '\n    Validate that the returned parameters list for a model build contains all the values we passed in as input.\n    '
    actuals_dict = list_to_dict(actual_parameters, 'name')
    for (k, expected) in input_parameters.iteritems():
        if (k is 'response_column'):
            continue
        if (k is 'training_frame'):
            continue
        assert (k in actuals_dict), (('FAIL: Expected key ' + k) + ' not found in actual parameters list.')
        actual = actuals_dict[k]['actual_value']
        if (actuals_dict[k]['type'] == 'boolean'):
            expected = bool(expected)
            actual = (True if ('true' == actual) else False)
        elif (actuals_dict[k]['type'] == 'int'):
            expected = int(expected)
            actual = int(actual)
        elif (actuals_dict[k]['type'] == 'long'):
            expected = long(expected)
            actual = long(actual)
        elif (actuals_dict[k]['type'] == 'string'):
            expected = str(expected)
            actual = str(actual)
        elif (actuals_dict[k]['type'] == 'double'):
            expected = float(expected)
            actual = float(actual)
        elif (actuals_dict[k]['type'] == 'float'):
            expected = float(expected)
            actual = float(actual)
        assert (expected == actual), (((((((((((('FAIL: Parameter with name: ' + k) + ' expected to have input value: ') + str(expected)) + ', instead has: ') + str(actual)) + ' cast from: ') + str(actuals_dict[k]['actual_value'])) + ' ( type of expected: ') + str(type(expected))) + ', type of actual: ') + str(type(actual))) + ')')
