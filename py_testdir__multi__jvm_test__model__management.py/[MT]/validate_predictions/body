def validate_predictions(result, model_name, frame_key, expected_rows):
    '\n    Validate a /Predictions result.\n    '
    assert (p is not None), ((('Got a null result for scoring: ' + model_name) + ' on: ') + frame_key)
    assert ('model_metrics' in p), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a model_metrics object.')
    mm = p['model_metrics'][0]
    h2o.H2O.verboseprint('mm: ', repr(mm))
    assert ('auc' in mm), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain an AUC.')
    assert ('cm' in mm), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a CM.')
    assert ('predictions' in mm), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain an predictions section.')
    assert ('key' in mm['predictions']), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a key.')
    assert ('name' in mm['predictions']['key']), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a key name.')
    predictions_key = mm['predictions']['key']['name']
    result = a_node.frames(key=predictions_key, find_compatible_models=True, len=5)
    frames = result['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    assert (predictions_key in frames_dict), (('Failed to find predictions key' + predictions_key) + ' in Frames list.')
    predictions = mm['predictions']
    h2o.H2O.verboseprint('p: ', repr(p))
    assert ('columns' in predictions), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain an columns section.')
    assert (len(predictions['columns']) > 0), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain any columns.')
    assert ('label' in predictions['columns'][0]), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' column 0 has no label element.')
    assert ('predict' == predictions['columns'][0]['label']), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + " column 0 is not 'predict'.")
    assert (expected_rows == predictions['rows']), (((('Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' has an unexpected number of rows.')
