import sys, pprint
sys.path.extend(['.', '..', 'py'])
import h2o, h2o_util
algos = ['example', 'kmeans', 'deeplearning', 'glm']
pp = pprint.PrettyPrinter(indent=4)
a_node = h2o.H2O('127.0.0.1', 54321)
if False:
    import_result = a_node.import_files(path='/Users/rpeck/Source/h2o2/smalldata/logreg/prostate.csv')
    parse_result = a_node.parse(key=import_result['keys'][0])
    prostate_key = parse_result['frames'][0]['key']['name']
    a_node.build_model(algo='kmeans', training_frame=prostate_key, parameters={'K': 2, }, timeoutSecs=240)
    sys.exit()
models = a_node.models()
print 'Models: '
pp.pprint(models)
frames = a_node.frames()
print 'Frames: '
pp.pprint(frames)
print 'Testing /ModelBuilders. . .'
model_builders = a_node.model_builders()
print 'ModelBuilders: '
pp.pprint(model_builders)
for algo in algos:
    assert (algo in model_builders['model_builders']), ('Failed to find algo: ' + algo)
    builder = model_builders['model_builders'][algo]
    validate_builder(builder)
print 'Testing /ModelBuilders/{algo}. . .'
for algo in algos:
    model_builder = a_node.model_builders(algo=algo)
    assert (algo in model_builder['model_builders']), ('Failed to find algo: ' + algo)
    builder = model_builders['model_builders'][algo]
    validate_builder(builder)
import_result = a_node.import_files(path='/Users/rpeck/Source/h2o2/smalldata/logreg/prostate.csv')
parse_result = a_node.parse(key=import_result['keys'][0])
pp.pprint(parse_result)
prostate_key = parse_result['frames'][0]['key']['name']
model_builders = a_node.model_builders()
pp.pprint(model_builders)
kmeans_builder = a_node.model_builders(algo='kmeans')['model_builders']['kmeans']
jobs = a_node.build_model(algo='kmeans', training_frame=prostate_key, parameters={'K': 2, }, timeoutSecs=240)
models = a_node.models()
print 'After Model build: Models: '
pp.pprint(models)
