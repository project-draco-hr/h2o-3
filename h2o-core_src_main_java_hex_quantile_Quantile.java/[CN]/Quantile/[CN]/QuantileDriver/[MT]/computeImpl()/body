{
  QuantileModel model=null;
  try {
    init(true);
    model=new QuantileModel(dest(),_parms,new QuantileModel.QuantileOutput(Quantile.this));
    model._output._parameters=_parms;
    model._output._quantiles=new double[_ncols][_parms._probs.length];
    model.delete_and_lock(_job);
    Vec vecs[]=train().vecs();
    for (int n=0; n < _ncols; n++) {
      if (stop_requested())       return;
      Vec vec=vecs[n];
      if (vec.isBad() || vec.isCategorical() || vec.isString()|| vec.isTime()|| vec.isUUID()) {
        model._output._quantiles[n]=new double[_parms._probs.length];
        Arrays.fill(model._output._quantiles[n],Double.NaN);
        continue;
      }
      double sumRows=_weights == null ? vec.length() - vec.naCnt() : new SumWeights().doAll(vec,_weights).sum;
      Histo h1=new Histo(vec.min(),vec.max(),0,sumRows,vec.isInt());
      h1=_weights == null ? h1.doAll(vec) : h1.doAll(vec,_weights);
      for (int p=0; p < _parms._probs.length; p++) {
        double prob=_parms._probs[p];
        Histo h=h1;
        model._output._iterations++;
        while (Double.isNaN(model._output._quantiles[n][p]=h.findQuantile(prob,_parms._combine_method))) {
          h=_weights == null ? h.refinePass(prob).doAll(vec) : h.refinePass(prob).doAll(vec,_weights);
          model._output._iterations++;
        }
        model.update(_job);
        _job.update(0);
      }
      StringBuilder sb=new StringBuilder();
      sb.append("Quantile: iter: ").append(model._output._iterations).append(" Qs=").append(Arrays.toString(model._output._quantiles[n]));
      Log.debug(sb);
    }
  }
  finally {
    if (model != null)     model.unlock(_job);
  }
}
