{
  init();
  Vec va=null, vp;
  try {
    va=vactual.toEnum();
    actual_domain=va.factors();
    vp=vpredict;
    if (!va.group().equals(vp.group())) {
      vp=va.align(vp);
    }
    if (thresholds != null) {
      if (_cms == null)       sort(thresholds);
      if (ArrayUtils.minValue(thresholds) < 0)       throw new IllegalArgumentException("Minimum threshold cannot be negative.");
      if (ArrayUtils.maxValue(thresholds) > 1)       throw new IllegalArgumentException("Maximum threshold cannot be greater than 1.");
    }
 else {
      HashSet hs=new HashSet();
      final int bins=(int)Math.min(vpredict.length(),200l);
      final long stride=Math.max(vpredict.length() / bins,1);
      for (int i=0; i < bins; ++i)       hs.add(new Float(vpredict.at(i * stride)));
      for (int i=0; i < 51; ++i)       hs.add(new Float(i / 50.));
      thresholds=new float[hs.size()];
      int i=0;
      for (      Object h : hs) {
        thresholds[i++]=(Float)h;
      }
      sort(thresholds);
    }
    if (_cms != null) {
      if (_cms.length != thresholds.length)       throw new IllegalArgumentException("Number of thresholds differs from number of confusion matrices.");
    }
 else {
      AUCTask at=new AUCTask(thresholds).doAll(va,vp);
      _cms=at.getCMs();
    }
    computeAUC();
    findBestThresholds();
    computeMetrics();
  }
  finally {
    if (va != null)     DKV.remove(va._key);
  }
}
