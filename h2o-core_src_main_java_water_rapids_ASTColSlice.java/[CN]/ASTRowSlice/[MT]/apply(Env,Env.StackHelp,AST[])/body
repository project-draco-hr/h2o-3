{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  Frame returningFrame;
  long nrows=fr.numRows();
  if (asts[2] instanceof ASTNumList) {
    final ASTNumList nums=(ASTNumList)asts[2];
    if (!nums._isSort && !nums.isEmpty())     throw new IllegalArgumentException("H2O does not currently reorder rows, please sort your row selection first");
    long[] rows=(nums._isList || nums.min() < 0) ? nums.expand8Sort() : null;
    if (rows != null) {
      if (rows.length == 0) {
      }
 else       if (rows[0] >= 0) {
        if (rows[rows.length - 1] > nrows)         throw new IllegalArgumentException("Row must be an integer from 0 to " + (nrows - 1));
      }
 else {
        if (rows[rows.length - 1] >= 0)         throw new IllegalArgumentException("Cannot mix negative and postive row selection");
        BitSet bs=new BitSet((int)nrows);
        for (int i=0; i < rows.length; i++) {
          int idx=(int)(-rows[i] - 1);
          if (idx >= 0 && idx < nrows)           bs.set(idx);
        }
        rows=new long[(int)nrows - bs.cardinality()];
        for (int i=bs.nextClearBit(0), j=0; i < nrows; i=bs.nextClearBit(i + 1))         rows[j++]=i;
      }
    }
    final long[] ls=rows;
    returningFrame=new MRTask(){
      @Override public void map(      Chunk[] cs,      NewChunk[] ncs){
        if (nums.cnt() == 0)         return;
        if (ls != null && ls.length == 0)         return;
        long start=cs[0].start();
        long end=start + cs[0]._len;
        long min=ls == null ? (long)nums.min() : ls[0], max=ls == null ? (long)nums.max() - 1 : ls[ls.length - 1];
        if (!(max < start || min > end)) {
          long startOffset=(min > start ? min : start);
          for (int i=(int)(startOffset - start); i < cs[0]._len; ++i) {
            if ((ls == null && nums.has(start + i)) || (ls != null && Arrays.binarySearch(ls,start + i) >= 0)) {
              for (int c=0; c < cs.length; ++c) {
                if (cs[c] instanceof CStrChunk)                 ncs[c].addStr(cs[c],i);
 else                 if (cs[c] instanceof C16Chunk)                 ncs[c].addUUID(cs[c],i);
 else                 if (cs[c].isNA(i))                 ncs[c].addNA();
 else                 ncs[c].addNum(cs[c].atd(i));
              }
            }
          }
        }
      }
    }
.doAll(fr.types(),fr).outputFrame(fr.names(),fr.domains());
  }
 else   if ((asts[2] instanceof ASTNum)) {
    long[] rows=new long[]{(long)(((ASTNum)asts[2])._v.getNum())};
    returningFrame=fr.deepSlice(rows,null);
  }
 else   if ((asts[2] instanceof ASTExec) || (asts[2] instanceof ASTId)) {
    Frame predVec=stk.track(asts[2].exec(env)).getFrame();
    if (predVec.numCols() != 1)     throw new IllegalArgumentException("Conditional Row Slicing Expression evaluated to " + predVec.numCols() + " columns.  Must be a boolean Vec.");
    returningFrame=fr.deepSlice(predVec,null);
  }
 else   throw new IllegalArgumentException("Row slicing requires a number-list as the last argument, but found a " + asts[2].getClass());
  return new ValFrame(returningFrame);
}
