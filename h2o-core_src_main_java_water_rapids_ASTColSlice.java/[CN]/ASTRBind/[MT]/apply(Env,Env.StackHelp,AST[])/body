{
  Frame fr=null;
  int nchks=0;
  Val vals[]=new Val[asts.length];
  for (int i=1; i < asts.length; i++) {
    vals[i]=stk.track(asts[i].exec(env));
    if (vals[i].isFrame()) {
      fr=vals[i].getFrame();
      nchks+=fr.anyVec().nChunks();
    }
 else     nchks++;
  }
  Vec zz=null;
  if (fr == null) {
    fr=new Frame(new String[]{Frame.defaultColName(0)},new Vec[]{zz=Vec.makeZero(0)});
    if (asts.length == 1)     return new ValFrame(fr);
  }
  final Frame frs[]=new Frame[asts.length];
  final byte[] types=fr.types();
  final int ncols=fr.numCols();
  final long[] espc=new long[nchks + 1];
  int coffset=0;
  for (int i=1; i < asts.length; i++) {
    Val val=vals[i];
    Frame fr0=val.isFrame() ? val.getFrame() : stk.track(new Frame(fr._names,Vec.makeCons(val.getNum(),1L,fr.numCols())));
    if (fr.numCols() != fr0.numCols())     throw new IllegalArgumentException("rbind frames must have all the same columns, found " + fr.numCols() + " and "+ fr0.numCols()+ " columns.");
    if (!Arrays.deepEquals(fr._names,fr0._names))     throw new IllegalArgumentException("rbind frames must have all the same column names, found " + Arrays.toString(fr._names) + " and "+ Arrays.toString(fr0._names));
    if (!Arrays.equals(types,fr0.types()))     throw new IllegalArgumentException("rbind frames must have all the same column types, found " + Arrays.toString(types) + " and "+ Arrays.toString(fr0.types()));
    frs[i]=fr0;
    long roffset=espc[coffset];
    long[] espc2=fr0.anyVec().get_espc();
    for (int j=1; j < espc2.length; j++)     espc[coffset + j]=(roffset + espc2[j]);
    coffset+=espc2.length - 1;
  }
  if (zz != null)   zz.remove();
  HashMap<String,Integer>[] dmap=new HashMap[types.length];
  String[][] domains=new String[types.length][];
  int[][][] emaps=new int[types.length][][];
  for (int k=0; k < types.length; ++k) {
    dmap[k]=new HashMap<>();
    int c=0;
    byte t=types[k];
    if (t == Vec.T_ENUM) {
      int[][] maps=new int[frs.length][];
      for (int i=1; i < frs.length; i++) {
        maps[i]=new int[frs[i].vec(k).domain().length];
        for (int j=0; j < maps[i].length; j++) {
          String s=frs[i].vec(k).domain()[j];
          if (!dmap[k].containsKey(s))           dmap[k].put(s,maps[i][j]=c++);
 else           maps[i][j]=dmap[k].get(s);
        }
      }
      emaps[k]=maps;
    }
 else {
      emaps[k]=new int[frs.length][];
    }
    domains[k]=c == 0 ? null : new String[c];
    for (    Map.Entry<String,Integer> e : dmap[k].entrySet())     domains[k][e.getValue()]=e.getKey();
  }
  Key<Vec>[] keys=fr.anyVec().group().addVecs(fr.numCols());
  Vec[] vecs=new Vec[fr.numCols()];
  for (int i=0; i < vecs.length; i++)   vecs[i]=new Vec(keys[i],espc,domains[i],types[i]);
  ParallelRbinds t;
  H2O.submitTask(t=new ParallelRbinds(frs,espc,vecs,emaps)).join();
  return new ValFrame(new Frame(fr.names(),t._vecs));
}
