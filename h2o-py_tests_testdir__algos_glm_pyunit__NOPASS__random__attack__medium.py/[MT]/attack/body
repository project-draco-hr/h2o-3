def attack(family, train, valid, x, y):
    kwargs = {}
    kwargs['family'] = family
    gaussian_links = ['inverse', 'log', 'identity']
    binomial_links = ['logit']
    poisson_links = ['log', 'identity']
    gamma_links = ['inverse', 'log', 'identity']
    if random.randint(0, 1):
        kwargs['max_iterations'] = random.randint(1, 50)
    if (random.random() > 0.8):
        kwargs['beta_epsilon'] = random.random()
    if random.randint(0, 1):
        kwargs['solver'] = ['IRLSM', 'L_BFGS'][random.randint(0, 1)]
    if random.randint(0, 1):
        kwargs['standardize'] = [True, False][random.randint(0, 1)]
    if random.randint(0, 1):
        if (family == 'gaussian'):
            kwargs['link'] = gaussian_links[random.randint(0, 2)]
        elif (family == 'binomial'):
            kwargs['link'] = binomial_links[random.randint(0, 0)]
        elif (family == 'poisson'):
            kwargs['link'] = poisson_links[random.randint(0, 1)]
        elif (family == 'gamma'):
            kwargs['link'] = gamma_links[random.randint(0, 2)]
    if random.randint(0, 1):
        kwargs['alpha'] = [random.random()]
    if (family == 'binomial'):
        if random.randint(0, 1):
            kwargs['prior'] = random.random()
    if random.randint(0, 1):
        kwargs['lambda_search'] = [True, False][random.randint(0, 1)]
    if ('lambda_search' in kwargs.keys()):
        if random.randint(0, 1):
            kwargs['nlambdas'] = random.randint(2, 10)
    do_validation = [True, False][random.randint(0, 1)]
    if random.randint(0, 1):
        bc = []
        for n in x:
            name = train.names()[n]
            lower_bound = random.uniform((-1), 1)
            upper_bound = (lower_bound + random.random())
            bc.append([name, lower_bound, upper_bound])
        beta_constraints = h2o.H2OFrame(python_obj=bc)
        beta_constraints.setNames(['names', 'lower_bounds', 'upper_bounds'])
        kwargs['beta_constraints'] = beta_constraints.send_frame()
    print '-----------------------'
    print 'x: {0}'.format(x)
    print 'y: {0}'.format(y)
    print 'validation: {0}'.format(do_validation)
    for (k, v) in zip(kwargs.keys(), kwargs.values()):
        if (k == 'beta_constraints'):
            print (k + ': ')
            beta_constraints.show()
        else:
            print (k + ': {0}'.format(v))
    if do_validation:
        h2o.glm(x=train[x], y=train[y], validation_x=valid[x], validation_y=valid[y], **kwargs)
    else:
        h2o.glm(x=train[x], y=train[y], **kwargs)
    print '-----------------------'
