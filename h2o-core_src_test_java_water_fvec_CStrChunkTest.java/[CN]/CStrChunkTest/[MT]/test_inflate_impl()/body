{
  for (int l=0; l < 2; ++l) {
    NewChunk nc=new NewChunk(null,0);
    BufferedString[] vals=new BufferedString[1000001];
    for (int i=0; i < vals.length; i++) {
      vals[i]=new BufferedString();
      vals[i].setTo("Foo" + i);
    }
    if (l == 1)     nc.addNA();
    for (    BufferedString v : vals)     nc.addStr(v);
    nc.addNA();
    Chunk cc=nc.compress();
    Assert.assertEquals(vals.length + 1 + l,cc._len);
    Assert.assertTrue(cc instanceof CStrChunk);
    if (l == 1)     Assert.assertTrue(cc.isNA(0));
    if (l == 1)     Assert.assertTrue(cc.isNA_abs(0));
    BufferedString vs=new BufferedString();
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc.atStr(vs,l + i));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc.atStr_abs(vs,l + i));
    Assert.assertTrue(cc.isNA(vals.length + l));
    Assert.assertTrue(cc.isNA_abs(vals.length + l));
    Chunk cc2=new CStrChunk();
    cc2.read(cc.write(new AutoBuffer()).flipForReading());
    Assert.assertEquals(vals.length + 1 + l,cc2._len);
    Assert.assertTrue(cc2 instanceof CStrChunk);
    if (l == 1)     Assert.assertTrue(cc2.isNA(0));
    if (l == 1)     Assert.assertTrue(cc2.isNA_abs(0));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc2.atStr(vs,l + i));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc2.atStr_abs(vs,l + i));
    Assert.assertTrue(cc2.isNA(vals.length + l));
    Assert.assertTrue(cc2.isNA_abs(vals.length + l));
    nc=cc.inflate_impl(new NewChunk(null,0));
    Assert.assertEquals(vals.length + 1 + l,nc._len);
    if (l == 1)     Assert.assertTrue(nc.isNA(0));
    if (l == 1)     Assert.assertTrue(nc.isNA_abs(0));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],nc.atStr(vs,l + i));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],nc.atStr_abs(vs,l + i));
    Assert.assertTrue(nc.isNA(vals.length + l));
    Assert.assertTrue(nc.isNA_abs(vals.length + l));
    cc2=nc.compress();
    Assert.assertEquals(vals.length + 1 + l,cc._len);
    Assert.assertTrue(cc2 instanceof CStrChunk);
    if (l == 1)     Assert.assertTrue(cc2.isNA(0));
    if (l == 1)     Assert.assertTrue(cc2.isNA_abs(0));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc2.atStr(vs,l + i));
    for (int i=0; i < vals.length; ++i)     Assert.assertEquals(vals[i],cc2.atStr_abs(vs,l + i));
    Assert.assertTrue(cc2.isNA(vals.length + l));
    Assert.assertTrue(cc2.isNA_abs(vals.length + l));
    Assert.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
