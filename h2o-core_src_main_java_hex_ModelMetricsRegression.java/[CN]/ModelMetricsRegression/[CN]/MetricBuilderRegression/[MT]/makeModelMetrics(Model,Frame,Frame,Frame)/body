{
  double mse=_sumsqe / _wcount;
  double mae=_abserror / _wcount;
  double rmsle=Math.sqrt(_rmslerror / _wcount);
  if (adaptedFrame == null)   adaptedFrame=f;
  double meanResDeviance=0;
  if (m != null && m._parms._distribution == DistributionFamily.huber) {
    assert(_sumdeviance == 0);
    if (preds != null) {
      Vec actual=adaptedFrame.vec(m._parms._response_column);
      Vec weight=adaptedFrame.vec(m._parms._weights_column);
      double huberDelta=computeHuberDelta(actual,preds.anyVec(),weight,m._parms._huber_alpha);
      _dist=new AutoBuffer().put(m._dist).flipForReading().get();
      _dist.setHuberDelta(huberDelta);
      meanResDeviance=new MeanResidualDeviance(_dist,preds.anyVec(),actual,weight).exec().meanResidualDeviance;
    }
  }
 else {
    meanResDeviance=_sumdeviance / _wcount;
  }
  ModelMetricsRegression mm=new ModelMetricsRegression(m,f,_count,mse,weightedSigma(),mae,rmsle,meanResDeviance);
  if (m != null)   m._output.addModelMetrics(mm);
  return mm;
}
