def _resolve_model(future_model, **kwargs):
    future_model.poll()
    rest_ver = (kwargs[u'_rest_version'] if (u'_rest_version' in kwargs) else 3)
    model_json = h2o.api((u'GET /%d/Models/%s' % (rest_ver, future_model.job.dest_key)))[u'models'][0]
    model_type = model_json[u'output'][u'model_category']
    if (model_type == u'Binomial'):
        model = H2OBinomialModel(future_model.job.dest_key, model_json)
    elif (model_type == u'Clustering'):
        model = H2OClusteringModel(future_model.job.dest_key, model_json)
    elif (model_type == u'Regression'):
        model = H2ORegressionModel(future_model.job.dest_key, model_json)
    elif (model_type == u'Multinomial'):
        model = H2OMultinomialModel(future_model.job.dest_key, model_json)
    elif (model_type == u'AutoEncoder'):
        model = H2OAutoEncoderModel(future_model.job.dest_key, model_json)
    elif (model_type == u'DimReduction'):
        model = H2ODimReductionModel(future_model.job.dest_key, model_json)
    else:
        raise NotImplementedError(model_type)
    return model
