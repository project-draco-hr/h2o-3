def poll(self):
    u'\n        Wait until the job finishes.\n\n        This method will continuously query the server about the status of the job, until the job reaches a\n        completion. During this time we will display (in stdout) a progress bar with % completion status.\n        '
    try:
        pb = ProgressBar((self._job_type + u' progress'))
        pb.execute(self._refresh_job_status)
    except StopIteration as e:
        if (str(e) == u'cancelled'):
            self.status = u'CANCELLED'
            h2o.api((u'POST /3/Jobs/%s/cancel' % self.job_key))
            print(u'Job {} was cancelled.'.format(self.job_key))
    if self.warnings:
        for w in self.warnings:
            warnings.warn(w)
    if (self.status == u'CANCELLED'):
        raise EnvironmentError(u'Job with key {} was cancelled by the user.'.format(self.job_key))
    if (self.status == u'FAILED'):
        if (isinstance(self.job, dict) and (u'stacktrace' in list(self.job))):
            raise EnvironmentError(u'Job with key {} failed with an exception: {}\nstacktrace: \n{}'.format(self.job_key, self.exception, self.job[u'stacktrace']))
        else:
            raise EnvironmentError((u'Job with key %s failed with an exception: %s' % (self.job_key, self.exception)))
    return self
