'\nThe H2O Python Module\n=====================\n\nThis module provides access to the H2O JVM (and extensions thereof), its objects, its\nmachine-learning algorithms, and modeling support (basic munging and feature generation)\ncapabilities.\n\nThe H2O JVM sports a web server such that all communication occurs on a socket (specified\nby an IP address and a port) via a series of REST calls (see connection.py for the REST\nlayer implementation and details). There is a single active connection to the H2O JVM at\nany one time, and this handle is stashed in the __H2OCONN__ global object. The __H2OCONN__\nis not currently a singleton object (but it may become one in the future).\n\nWhat is H2O?\n============\n\nH2O is a piece of java software for data modeling and general computing. There are many\ndifferent views of the H2O software, but the primary view of H2O is that of a distributed\n(many machines), parallel (many CPUs), in memory (several hundred GBs Xmx) processing\n"engine". How H2O achieves within node parallelism and efficient horizontal scaling is\ndiscussed in detail elsewhere, but it suffices to state that Doug Lea\'s Fork Join\nframework (which can be thought of as a classical recursive descent divide and conquer\napproach to doing "work") enables parallelism per JVM, and a distributed version of Cliff\nClick\'s non-blocking hash map enables coherency across nodes in a cluster allowing for\nlateral scaling.\n\nH2O sports a distributed key-value store (the "DKV"), which contains pointers to the\nvarious objects that make up the H2O ecosystem. Briefly, these objects are:\n\n    Key:    A key is an entry in the DKV that maps to an object in H2O.\n    Frame:  A Frame is a collection of Vec objects. It is a 2D array of elements.\n    Vec:    A Vec is a collection of Chunk objects. It is a 1D array of elements.\n    Chunk:  A Chunk holds a fraction of the BigData. It is a 1D array of elements.\n    ModelMetrics:   A collection of metrics for a given category of model.\n    Model:  A model is an immutable object having `predict` and `metrics` methods.\n    Job:    A Job is a non-blocking task that performs a finite amount of work.\n\nMany of these objects have no meaning to an end python user, but in order to make sense of\nthe objects available in this module it is helpful to understand how these objects map to\nobjects in the JVM (because after all, this module is merely a facade that allows the\nmanipulation of a distributed system).\n\nObjects In This Module\n======================\n\n\n\n\nH2OFrame\n========\n\n\n\n\n\nH2OVec\n======\n\n\n\nModel Builders\n============\n\n* How to create new models\n* The fit() method\n* train and validation data\n* parameter specification\n\n\nModel Results and Metrics\n=========================\n\n* After models are built: (show, summary, predict, performance)\n* Model categories: binomial, regression, multinomial, clustering\n\n\nFeature Generation and Extended Data Flows\n==========================================\n\n* Discuss Rapids\n# Data manipulation in python\n* Executing python functions in H2O via Rapids\n\n'
__version__ = '0.0.0a5'
