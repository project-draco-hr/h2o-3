{
  if (!route._handler_method.getName().equals("train"))   throw water.H2O.unimpl();
  String ss[]=route._url.split("/");
  String algoURLName=ss[3];
  String algoName=ModelBuilder.algoName(algoURLName);
  String schemaDir=ModelBuilder.schemaDirectory(algoURLName);
  int algoVersion=3;
  if (algoName.equals("SVD") || algoName.equals("Aggregator"))   algoVersion=99;
  String paramSchemaName=schemaDir + algoName + "V"+ algoVersion+ "$"+ ModelBuilder.paramName(algoURLName)+ "V"+ algoVersion;
  S gss=(S)new GridSearchSchema();
  gss.init_meta();
  gss.parameters=(P)TypeMap.newFreezable(paramSchemaName);
  gss.parameters.init_meta();
  gss.hyper_parameters=new IcedHashMap<>();
  ModelBuilder builder=ModelBuilder.make(algoURLName,null,null);
  gss.parameters.fillFromImpl(builder._parms);
  gss.fillFromParms(parms);
  validateHyperParams((P)gss.parameters,gss.hyper_parameters);
  MP params=(MP)gss.parameters.createAndFillImpl();
  Map<String,Object[]> sortedMap=new TreeMap<>(gss.hyper_parameters);
  if (sortedMap.containsKey("validation_frame")) {
    sortedMap.put("valid",sortedMap.get("validation_frame"));
    sortedMap.remove("validation_frame");
  }
  Key<Grid> destKey=gss.grid_id != null ? gss.grid_id.key() : null;
  Job<Grid> gsJob=GridSearch.startGridSearch(destKey,params,sortedMap,new DefaultModelParametersBuilderFactory<MP,P>(),(HyperSpaceSearchCriteria)gss.search_criteria.createAndFillImpl());
  gss.hyper_parameters=null;
  gss.total_models=gsJob._result.get().getModelCount();
  gss.job=new JobV3(gsJob);
  return gss;
}
