{
  final int K=1 << 18;
  for (  long l : new long[]{Long.MIN_VALUE,Long.MAX_VALUE,23420384l,0l,-23423423400023l}) {
    NewChunk nc=new NewChunk(null,0);
    for (int i=0; i < K; ++i)     nc.addNum(l,0);
    Assert.assertEquals(K,nc.len());
    if (l != 0l)     Assert.assertEquals(l == 0l ? 0 : K,nc.sparseLen());
    Chunk cc=nc.compress();
    Assert.assertEquals(K,cc.len());
    Assert.assertTrue(cc instanceof C0LChunk);
    for (int i=0; i < K; ++i)     Assert.assertEquals(l,cc.at80(i));
    nc=new NewChunk(null,0);
    cc.inflate_impl(nc);
    nc.values(0,nc.len());
    Assert.assertEquals(K,nc.len());
    Assert.assertEquals(l == 0 ? 0 : K,nc.sparseLen());
    Iterator<NewChunk.Value> it=nc.values(0,K);
    if (l != 0l) {
      for (int i=0; i < K; ++i)       Assert.assertTrue(it.next().rowId0() == i);
    }
    Assert.assertTrue(!it.hasNext());
    for (int i=0; i < K; ++i)     Assert.assertEquals(l,nc.at80(i));
    Chunk cc2=nc.compress();
    Assert.assertEquals(K,cc2.len());
    Assert.assertTrue(cc2 instanceof C0LChunk);
    for (int i=0; i < K; ++i)     Assert.assertEquals(l,cc2.at80(i));
    Assert.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
