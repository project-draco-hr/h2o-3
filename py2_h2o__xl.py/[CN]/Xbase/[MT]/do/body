def do(self, timeoutSecs=30):
    if (not isinstance(self, (Assign, Expr, Def, Key, KeyInit, KeyIndexed, Item, Fcn, If, IfElse, Return))):
        raise Exception((".do() Maybe you're trying to send a wrong instance to h2o? %s %s" % (type(self), self)))
    if self.execExpr:
        raise Exception((((((".do() Appears already .do()'ed this?\n" + "You may need 'do=False' param on an Assign to avoid the default do=True\n") + 'That causes .do() on all Assign inits.\n') + "Also, if you're using function objects multiple times, you should \n") + 'use copy.copy() to copy them to fresh instances, because of internal state in the objects (mutables)..\n') + ("Maybe I'll change this sometime \n    type self: %s \n    self.execExpr: %s" % (type(self), self.execExpr))))
    if self.execDone:
        debugprint('%s .do() already done:'(type(self, self.execExpr)))
        return
    self.execResult = None
    self.result = None
    if self.funs:
        self.execExpr = ('[%s]' % self)
    else:
        self.execExpr = ('%s' % self)
    h2p.green_print(('%s .do() ast: %s' % (type(self), self.execExpr)))
    if debugNoH2O:
        self.execResult = {'debug': True, }
        self.result = None
    else:
        (self.execResult, self.result) = h2e.exec_expr(execExpr=self.execExpr, doFuns=self.funs, timeoutSecs=timeoutSecs)
        if (self.execResult['key'] is not None):
            Xbase.keyWriteHistoryList.append(self.execExpr)
        self.numRows = self.execResult['num_rows']
        self.numCols = self.execResult['num_cols']
        Xbase.lastExecResult = self.execResult.copy()
        Xbase.lastResult = self.result
        if ((not self.funs) and (not isinstance(self, (If, IfElse, Return))) and (self.execResult['key'] is None)):
            scalar = self.execResult['scalar']
            debugprint(('Hacking scalar result %s into a key wth name I told h2o! %s' % (scalar, self.frame)))
            debugprint("FIX! Hacking scalar to int because rapids doesn't like reals?")
            if (scalar is not None):
                scalar = int(scalar)
                execExpr = ('(= !%s (c {#%s}))' % (self.frame, scalar))
            else:
                debugprint(('WARNING: %.do() is creating a zero-row result key, from %s' % type(self)))
                execExpr = ('(= !%s (is.na (c {#0})))' % self.frame)
            (execResult, result) = h2e.exec_expr(execExpr=execExpr)
            if (execResult['key'] is not None):
                Xbase.keyWriteHistoryList.append(self.execExpr)
            self.numRows = self.execResult['num_rows']
            self.numCols = self.execResult['num_cols']
    self.execDone = True
    if isinstance(self, Assign):
        self.assignDone = True
    return self.result
