def do(self, timeoutSecs=30):
    print 'enter .do()'
    if (not isinstance(self, (Assign, Expr, Def, Key, KeyInit, KeyIndexed, Item, Fcn, If, IfElse, Return))):
        raise Exception((".do() Maybe you're trying to send a wrong instance to h2o? %s %s" % (type(self), self)))
    if self.execExpr:
        raise Exception((((((".do() Appears already .do()'ed this?\n" + "You may need 'do=False' param on an Assign to avoid the default do=True\n") + 'That causes .do() on all Assign inits.\n') + "Also, if you're using function objects multiple times, you should \n") + 'use copy.copy() to copy them to fresh instances, because of internal state in the objects (mutables)..\n') + ("Maybe I'll change this sometime \n    type self: %s \n    self.execExpr: %s" % (type(self), self.execExpr))))
    if self.execDone:
        debugprint('%s .do() already done:'(type(self, self.execExpr)))
        return
    self.execResult = None
    self.result = None
    if self.funs:
        execExpr1 = ('[%s]' % self)
    else:
        execExpr1 = ('%s' % self)
    h2p.green_print(('%s .do() ast: %s' % (type(self), execExpr1)))
    if (not debugNoH2O):
        (execResult1, result1) = h2e.exec_expr(execExpr=execExpr1, doFuns=self.funs, timeoutSecs=timeoutSecs)
        if (execResult1['key'] is not None):
            Xbase.keyWriteHistoryList.append(execExpr1)
        self.numRows = execResult1['num_rows']
        self.numCols = execResult1['num_cols']
        self.scalar = execResult1['scalar']
        if (self.funs or isinstance(self, (If, IfElse, Return))):
            returnResult = None
        elif (execResult1['key'] is None):
            debugprint(('Hacking scalar result %s into a key. %s' % (self.scalar, self.frame)))
            if (self.scalar is None):
                debugprint(('WARNING: %.do() is creating a one-row/oneCol result key, for %s' % type(self)))
                assert ((self.numRows == 0) and (self.numCols == 0)), ('%s %s' % (self.numRows, self.numCols))
                execExpr2 = astForInit(self.frame)
            else:
                print "Hack scalar to int for new key for scalar, because rapids doesn't take reals yet"
                if math.isnan(float(self.scalar)):
                    print ("Rapids returned scalar result that's NaN. Using -1 instead: %s" % self.scalar)
                    execExpr2 = ('(= !%s (c {#-1 #-1}))' % self.frame)
                else:
                    execExpr2 = ('(= !%s (c {#%s}))' % (self.frame, int(self.scalar)))
            self.numRows = 1
            self.numCols = 1
            (execResult2, result2) = h2e.exec_expr(execExpr=execExpr2)
            assert (execResult2['key'] is not None), dump_json(execResult2)
            assert (self.numRows == execResult2['num_rows']), ('%s %s' % (self.numRows, execResult2['num_rows']))
            assert (self.numCols == execResult2['num_cols']), ('%s %s' % (self.numCols, execResult2['num_cols']))
            Xbase.keyWriteHistoryList.append(execExpr2)
            returnResult = self.scalar
        elif (self.numCols == 1):
            if (self.numRows <= 1024):
                co = h2o_cmd.runSummary(key=self.frame, column=0, noPrint=True)
                returnResult = co.data
            else:
                raise Exception(('Expr-caused Assign.do() wants to return a key with num_rows>1024\n' + ('Did you really mean it?. frame: %s numRows: %s numCols %s' % (self.frame, self.numRows, self.numCols))))
        elif ((self.numCols == 0) and (self.numRows == 0)):
            return None
        elif self.assignDisable:
            if (self.numCols > 1):
                h2p.red_print(('Expr-caused Assign.do()  wants to return a key with num_cols>1\n' + ('not supported. frame: %s numRows: %s numCols %s' % (self.frame, self.numRows, self.numCols))))
            returnResult = Key(key=self.frame)
        else:
            returnResult = Key(key=self.frame)
    if debugNoH2O:
        execResult1 = {'debug': True, }
        returnResult = None
    self.execResult = execResult1
    self.result = returnResult
    self.execExpr = execExpr1
    Xbase.lastExecResult = copy(execResult1)
    Xbase.lastResult = copy(returnResult)
    self.execDone = True
    if isinstance(self, Assign):
        self.assignDone = True
    return
