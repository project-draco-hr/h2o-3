def add_indexing(self, items):

    def indexer(item):
        debugprint(('Key item %-15s  %s' % (type(item), item)))
        if (type(item) is int):
            debugprint('Key item int', item)
            return Item(item)
        elif isinstance(item, Seq):
            debugprint('Key item Seq', Seq)
            return item
        elif isinstance(item, Colon):
            debugprint('Key item Colon', Colon)
            return item
        elif isinstance(item, (list, tuple)):
            if (len(item) > 1024):
                raise Exception(('Key is trying to index a h2o frame with a really long list (>1024)' + ("Probably don't want that? %s" % item)))
            return Seq(item)
        elif isinstance(item, basestring):
            raise Exception(('Key is trying to index a h2o frame with a string? %s' % item))
        elif isinstance(item, dict):
            raise Exception(('Key is trying to index a h2o frame with a dict? %s' % item))
        elif isinstance(item, slice):
            assert (item.step == None), ('Key assuming step should be None %s' % item.step)
            return Colon(item.start, item.stop)
        else:
            raise Exception(('Key.add_indexing item(%s) must be int/Seq/Colon/list/tuple/slice' % item))
    if isinstance(items, (list, tuple)):
        itemsList = list(items)
        if (len(itemsList) == 0):
            debugprint(('Key ignoring length 0 items list/tuple) %s' % itemsList))
        elif (len(itemsList) == 1):
            return KeyIndexed(frame=self.frame, row=indexer(itemsList[0]))
        elif (len(itemsList) == 2):
            return KeyIndexed(frame=self.frame, row=indexer(itemsList[0]), col=indexer(itemsList[1]))
        else:
            raise Exception(('Key itemsList is >2 %s' % itemsList))
    else:
        return KeyIndexed(frame=self.frame, row=indexer(items), dim=1)
    return self
