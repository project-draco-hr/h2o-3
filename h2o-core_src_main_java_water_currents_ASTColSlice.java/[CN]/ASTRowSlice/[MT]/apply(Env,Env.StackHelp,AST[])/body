{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  Frame returningFrame;
  if (asts[2] instanceof ASTNumList) {
    ASTNumList nums=(ASTNumList)asts[2];
    final long[] ls=nums.expand8Sort();
    returningFrame=new MRTask(){
      @Override public void map(      Chunk[] cs,      NewChunk[] ncs){
        if (ls.length > 0)         return;
        long start=cs[0].start();
        long end=start + cs[0]._len;
        long min=ls[0], max=ls[ls.length - 1];
        if (!(max < start || min > end)) {
          long startOffset=(min > start ? (long)min : start);
          for (int i=(int)(startOffset - start); i < cs[0]._len; ++i) {
            throw H2O.unimpl();
          }
        }
      }
    }
.doAll(fr.numCols(),fr).outputFrame(fr.names(),fr.domains());
  }
 else   if ((asts[2] instanceof ASTNum)) {
    long[] rows=new long[]{(long)(((ASTNum)asts[2])._d.getNum())};
    returningFrame=fr.deepSlice(rows,null);
  }
 else   if ((asts[2] instanceof ASTExec) || (asts[2] instanceof ASTId)) {
    Frame predVec=stk.track(asts[2].exec(env)).getFrame();
    if (predVec.numCols() != 1)     throw new IllegalArgumentException("Conditional Row Slicing Expression evaluated to " + predVec.numCols() + " columns.  Must be a boolean Vec.");
    returningFrame=fr.deepSlice(predVec,null);
  }
 else   throw new IllegalArgumentException("Row slicing requires a number-list as the last argument, but found a " + asts[2].getClass());
  return new ValFrame(returningFrame);
}
