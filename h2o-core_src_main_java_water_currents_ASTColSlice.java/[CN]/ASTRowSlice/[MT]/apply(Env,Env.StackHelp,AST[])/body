{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  Frame returningFrame;
  long[] rows;
  if (asts[2] instanceof ASTNumList) {
    final ASTNumList nums=(ASTNumList)asts[2];
    returningFrame=new MRTask(){
      @Override public void map(      Chunk[] cs,      NewChunk[] ncs){
        long start=cs[0].start();
        long end=start + cs[0]._len;
        double min=nums.min(), max=nums.max();
        if (!(max < start || min > end)) {
          int startOffset=(int)(min > start ? min : start);
          for (int i=startOffset; i < cs[0]._len; ++i) {
            if (nums.in(start + i)) {
              for (int c=0; c < cs.length; ++c) {
                if (cs[c] instanceof CStrChunk)                 ncs[c].addStr(cs[c],i);
 else                 if (cs[c] instanceof C16Chunk)                 ncs[c].addUUID(cs[c],i);
 else                 if (cs[c].isNA(i))                 ncs[c].addNA();
 else                 ncs[c].addNum(cs[c].atd(i));
              }
            }
          }
        }
      }
    }
.doAll(fr.numCols(),fr).outputFrame(fr.names(),fr.domains());
  }
 else   if ((asts[2] instanceof ASTNum)) {
    rows=new long[]{(long)(((ASTNum)asts[2])._d.getNum())};
    returningFrame=fr.deepSlice(rows,null);
  }
 else   throw new IllegalArgumentException("Row slicing requires a number-list as the last argument, but found a " + asts[2].getClass());
  return new ValFrame(returningFrame);
}
