{
  Val vals[]=new Val[asts.length];
  Key<Frame> kfrs[]=new Key[asts.length];
  double ds[]=new double[asts.length];
  Arrays.fill(ds,Double.NaN);
  Key<Frame>[] tkeys=new Key[asts.length];
  Frame fr=null;
  byte[] types=null;
  Vec.VectorGroup group=null;
  int nchks=0;
  for (int i=1; i < asts.length; i++) {
    Val val=stk.track(asts[i].exec(env));
    vals[i]=val;
    if (val.isFrame()) {
      Frame fr0=val.getFrame();
      kfrs[i]=fr0._key;
      if (fr0._key == null)       DKV.put(new Frame(kfrs[i]=tkeys[i]=Key.make(),fr0.names(),fr0.vecs()));
      if (fr == null) {
        fr=fr0;
        types=fr0.types();
      }
      if (fr.numCols() != fr0.numCols())       throw new IllegalArgumentException("rbind frames must have all the same columns, found " + fr.numCols() + " and "+ fr0.numCols()+ " columns.");
      if (!Arrays.deepEquals(fr._names,fr0._names))       throw new IllegalArgumentException("rbind frames must have all the same column names, found " + Arrays.toString(fr._names) + " and "+ Arrays.toString(fr0._names));
      if (!Arrays.equals(types,fr0.types()))       throw new IllegalArgumentException("rbind frames must have all the same column types, found " + Arrays.toString(types) + " and "+ Arrays.toString(fr0.types()));
      nchks+=fr0.anyVec().nChunks();
      Vec.VectorGroup gp1=fr0.anyVec().group();
      if (group == null || group == Vec.VectorGroup.VG_LEN1)       group=gp1;
    }
 else {
      ds[i]=val.getNum();
    }
  }
  long[] espc=new long[nchks + 1];
  int coffset=0;
  for (int i=1; i < vals.length; ++i) {
    long roffset=espc[coffset];
    if (vals[i].isFrame()) {
      long[] espc2=vals[i].getFrame().anyVec().get_espc();
      for (int j=1; j < espc2.length; j++)       espc[coffset + j]=roffset + espc2[j];
      coffset+=espc2.length - 1;
    }
 else {
      espc[coffset]=roffset + 1;
    }
  }
  Vec template=Vec.makeCon(0L,null,group,espc);
  Key<Vec>[] kvecs=group.addVecs(fr.numCols());
  String[][] domains=fr.domains();
  Vec[] vecs=new Vec[kvecs.length];
  for (int i=0; i < vecs.length; ++i)   vecs[i]=new Vec(kvecs[i],espc,domains[i],types[i]);
  new RbindTask(kfrs,ds,espc,kvecs).doAll(template);
  for (  Key<Frame> tkey : tkeys)   if (tkey != null)   DKV.remove(tkey);
  String[] names=fr == null ? new String[]{Frame.defaultColName(0)} : fr._names;
  return new ValFrame(new Frame(names,vecs));
}
