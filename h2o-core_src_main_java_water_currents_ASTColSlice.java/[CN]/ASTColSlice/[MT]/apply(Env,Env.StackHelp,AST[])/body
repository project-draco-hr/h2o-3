{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  Frame fr2=new Frame();
  if (asts[2] instanceof ASTNumList) {
    ASTNumList nums=(ASTNumList)asts[2];
    if (nums.min() >= 0) {
      for (      double dcol : nums.expand()) {
        int col=(int)dcol;
        if (col != dcol || col < 0 || col >= fr.numCols())         throw new IllegalArgumentException("Column must be an integer from 0 to " + (fr.numCols() - 1));
        fr2.add(fr.names()[col],fr.vecs()[col]);
      }
    }
 else {
      fr2=new Frame(fr);
      for (      double dcol : nums.expand()) {
        int col=(int)dcol;
        if (col != dcol || col < -fr.numCols() || col >= 0)         throw new IllegalArgumentException("Column must be an integer from " + (-fr.numCols()) + " to -1");
        fr2.remove(-col - 1);
      }
    }
  }
 else   if ((asts[2] instanceof ASTNum)) {
    int col=(int)(((ASTNum)asts[2])._d.getNum());
    if (col < 0)     fr2.add(fr).remove(-1 * col - 1);
 else     fr2.add(fr.names()[col],fr.vecs()[col]);
  }
 else   if ((asts[2] instanceof ASTStr)) {
    int col=fr.find(asts[2].str());
    if (col == -1)     throw new IllegalArgumentException("No column named '" + asts[2].str() + "' in Frame");
    fr2.add(fr.names()[col],fr.vecs()[col]);
  }
 else   if ((asts[2] instanceof ASTStrList)) {
    ASTStrList strs=(ASTStrList)asts[2];
    for (    String scol : strs._strs) {
      int col=fr.find(scol);
      if (col == -1)       throw new IllegalArgumentException("No column named '" + scol + "' in Frame");
      fr2.add(scol,fr.vecs()[col]);
    }
  }
 else   throw new IllegalArgumentException("Column slicing requires a number-list as the last argument, but found a " + asts[2].getClass());
  return new ValFrame(fr2);
}
