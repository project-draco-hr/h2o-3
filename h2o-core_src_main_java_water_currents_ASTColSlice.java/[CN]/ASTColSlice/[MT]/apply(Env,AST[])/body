{
  try (Env.StackHelp stk=env.stk()){
    Val vfr=stk.track(asts[1].exec(env));
    Frame fr=vfr.getFrame();
    if (!(asts[2] instanceof ASTNumList))     throw new IllegalArgumentException("Column slicing requires a number-list as the last argument, but found a " + asts[2].getClass());
    ASTNumList cols=(ASTNumList)asts[2];
    Frame fr2=new Frame();
    double[] bases=cols._bases;
    double[] strides=cols._strides;
    long[] cnts=cols._cnts;
    for (int i=0; i < bases.length; i++) {
      for (double d=bases[i]; d < bases[i] + cnts[i] * strides[i]; d+=strides[i]) {
        int col=(int)d;
        if (col != d || d < 0 || d >= fr.numCols())         throw new IllegalArgumentException("Column must be an integer from 0 to " + (fr.numCols() - 1));
        fr2.add(fr.names()[col],fr.vecs()[col]);
      }
    }
    return stk.returning(new ValFrame(fr2));
  }
 }
