{
  Frame dst=stk.track(asts[1].exec(env)).getFrame();
  ASTNumList rows;
  if (asts[3] instanceof ASTNumList) {
    rows=(ASTNumList)asts[3];
  }
 else   if ((asts[3] instanceof ASTNum)) {
    rows=new ASTNumList(asts[2].exec(env).getNum());
  }
 else   throw new IllegalArgumentException("Requires a number-list as the last argument, but found a " + asts[3].getClass());
  if (!(0 <= rows.min() && rows.max() <= dst.numRows()))   throw new IllegalArgumentException("Row must be an integer from 0 to " + (dst.numRows() - 1));
  Val vsrc=stk.track(asts[2].exec(env));
switch (vsrc.type()) {
case Val.NUM:
    assign_frame_scalar(stk,dst,rows,vsrc.getNum());
  break;
case Val.FRM:
assign_frame_frame(stk,dst,rows,vsrc.getFrame());
break;
default :
throw new IllegalArgumentException("Source must be a Frame or Number, but found a " + vsrc.getClass());
}
return new ValFrame(dst);
}
