{
  Frame dst=stk.track(asts[1].exec(env)).getFrame();
  Frame src=stk.track(asts[2].exec(env)).getFrame();
  if (dst.numCols() != src.numCols())   throw new IllegalArgumentException("Source and destination frames must have the same count and type of columns");
  Vec[] dvecs=dst.vecs();
  Vec[] svecs=src.vecs();
  for (int col=0; col < dvecs.length; col++)   if (dvecs[col].get_type() != svecs[col].get_type())   throw new IllegalArgumentException("Columns must be the same type; column " + col + ", \'"+ dst._names[col]+ "\', is of type "+ dvecs[col].get_type_str()+ " and the source is "+ svecs[col].get_type_str());
  long[] rows=null;
  if (asts[3] instanceof ASTNumList) {
    double[] drows=((ASTNumList)asts[3]).expand();
    rows=new long[drows.length];
    for (int i=0; i < drows.length; i++)     rows[i]=(long)drows[i];
  }
 else   if ((asts[3] instanceof ASTNum)) {
    rows=new long[]{(long)(((ASTNum)asts[2])._d.getNum())};
  }
 else   throw new IllegalArgumentException("Requires a number-list as the last argument, but found a " + asts[3].getClass());
  if (rows[rows.length - 1] >= dst.numRows())   throw new IllegalArgumentException("Row must be an integer from 0 to " + (dst.numRows() - 1));
  if (src.numRows() != rows.length)   throw new IllegalArgumentException("Requires same count of rows in the number-list (" + rows.length + ") as in the source ("+ src.numRows()+ ")");
  if (rows.length == 1) {
    replace_row(dvecs,rows[0],svecs,0);
    return new ValFrame(dst);
  }
  throw water.H2O.unimpl();
}
