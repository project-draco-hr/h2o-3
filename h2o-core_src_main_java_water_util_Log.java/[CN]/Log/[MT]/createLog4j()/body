{
  if (_logger != null)   return _logger;
  boolean launchedWithHadoopJar=H2O.ARGS.hdfs_skip;
  String log4jConfiguration=System.getProperty("log4j.configuration");
  boolean log4jConfigurationProvided=log4jConfiguration != null;
  if (!launchedWithHadoopJar && H2O.haveInheritedLog4jConfiguration()) {
  }
 else   if (!launchedWithHadoopJar && log4jConfigurationProvided) {
    PropertyConfigurator.configure(log4jConfiguration);
  }
 else {
    java.util.Properties p=new java.util.Properties();
    try {
      File dir;
      boolean windowsPath=H2O.ICE_ROOT.toString().matches("^[a-zA-Z]:.*");
      if (windowsPath)       dir=new File(H2O.ICE_ROOT.toString());
 else       if (H2O.ICE_ROOT.getScheme() == null || PersistManager.Schemes.FILE.equals(H2O.ICE_ROOT.getScheme()))       dir=new File(H2O.ICE_ROOT.getPath());
 else       dir=new File(H2O.DEFAULT_ICE_ROOT());
      setLog4jProperties(dir.toString(),p);
    }
 catch (    Exception e) {
      System.err.println("ERROR: failed in createLog4j, exiting now.");
      e.printStackTrace();
      H2O.exit(1);
    }
    PropertyConfigurator.configure(p);
  }
  return (_logger=LogManager.getLogger("water.default"));
}
