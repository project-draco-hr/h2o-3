{
  if (_logger != null)   return _logger;
  File dir=new File(H2O.ICE_ROOT.getScheme() == null || Persist.Schemes.FILE.equals(H2O.ICE_ROOT.getScheme()) ? H2O.ICE_ROOT.getPath() : H2O.DEFAULT_ICE_ROOT());
  String log4jConfiguration=System.getProperty("log4j.configuration");
  boolean launchedWithHadoopJar=H2O.ARGS.hdfs_skip;
  boolean log4jConfigurationProvided=log4jConfiguration != null;
  boolean useProvidedLog4jConfigurationFile=log4jConfigurationProvided && !launchedWithHadoopJar;
  if (useProvidedLog4jConfigurationFile) {
    PropertyConfigurator.configure(log4jConfiguration);
  }
 else {
    java.util.Properties p=new java.util.Properties();
    try {
      setLog4jProperties(dir.toString(),p);
    }
 catch (    Exception e) {
      System.err.println("ERROR: failed in createLog4j, exiting now.");
      e.printStackTrace();
      H2O.exit(1);
    }
    PropertyConfigurator.configure(p);
  }
  return (_logger=LogManager.getLogger(Log.class.getName()));
}
