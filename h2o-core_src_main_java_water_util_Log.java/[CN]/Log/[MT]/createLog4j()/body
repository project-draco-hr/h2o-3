{
  if (_logger != null)   return _logger;
  File dir=new File(H2O.ICE_ROOT.getScheme() == null || Persist.Schemes.FILE.equals(H2O.ICE_ROOT.getScheme()) ? H2O.ICE_ROOT.getPath() : H2O.DEFAULT_ICE_ROOT());
  String log4jProperties=System.getProperty("log4j.configuration");
  if (log4jProperties != null) {
    PropertyConfigurator.configure(log4jProperties);
  }
 else {
    LOG_DIR=dir.toString() + File.separator + "h2ologs";
    String ip=H2O.SELF_ADDRESS.getHostAddress();
    int port=H2O.H2O_PORT - 1;
    String portString=Integer.toString(port);
    String logPathFileName=LOG_DIR + File.separator + "h2o_"+ ip+ "_"+ portString+ ".log";
    java.util.Properties p=new java.util.Properties();
    p.setProperty("log4j.rootLogger","INFO, R");
    p.setProperty("log4j.appender.R","org.apache.log4j.RollingFileAppender");
    p.setProperty("log4j.appender.R.File",logPathFileName);
    p.setProperty("log4j.appender.R.MaxFileSize","256KB");
    p.setProperty("log4j.appender.R.MaxBackupIndex","5");
    p.setProperty("log4j.appender.R.layout","org.apache.log4j.PatternLayout");
    p.setProperty("log4j.logger.org.apache.http","WARN");
    p.setProperty("log4j.logger.com.amazonaws","WARN");
    p.setProperty("log4j.logger.org.apache.hadoop","WARN");
    p.setProperty("log4j.logger.org.jets3t.service","WARN");
    p.setProperty("log4j.appender.R.layout.ConversionPattern","%m%n");
    PropertyConfigurator.configure(p);
  }
  return (_logger=LogManager.getLogger(Log.class.getName()));
}
