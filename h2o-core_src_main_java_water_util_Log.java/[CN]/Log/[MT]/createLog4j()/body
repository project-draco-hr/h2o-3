{
  if (_logger != null)   return _logger;
  boolean launchedWithHadoopJar=H2O.ARGS.hdfs_skip;
  String log4jConfiguration=System.getProperty("h2o.log4j.configuration");
  boolean log4jConfigurationProvided=log4jConfiguration != null;
  if (log4jConfigurationProvided) {
    PropertyConfigurator.configure(log4jConfiguration);
  }
 else {
    java.util.Properties p=new java.util.Properties();
    try {
      File dir;
      if (H2O.ARGS.log_dir != null) {
        dir=new File(H2O.ARGS.log_dir);
      }
 else {
        boolean windowsPath=H2O.ICE_ROOT.toString().matches("^[a-zA-Z]:.*");
        if (windowsPath)         dir=new File(H2O.ICE_ROOT.toString());
 else         if (H2O.ICE_ROOT.getScheme() == null || PersistManager.Schemes.FILE.equals(H2O.ICE_ROOT.getScheme()))         dir=new File(H2O.ICE_ROOT.getPath());
 else         dir=new File(H2O.DEFAULT_ICE_ROOT());
        dir=new File(dir,"h2ologs");
      }
      setLog4jProperties(dir.toString(),p);
    }
 catch (    Exception e) {
      System.err.println("ERROR: failed in createLog4j, exiting now.");
      e.printStackTrace();
      H2O.exit(1);
    }
    if (!launchedWithHadoopJar && H2O.haveInheritedLog4jConfiguration()) {
      H2OPropertyConfigurator.configure(p);
    }
 else {
      PropertyConfigurator.configure(p);
    }
  }
  return (_logger=LogManager.getLogger("water.default"));
}
