u'\nPython 2 / 3 compatibility module.\n\nThis module gathers common declarations needed to ensure Python 2 / Python 3 compatibility.\nIt has to be imported from all other files, so that the common header looks like this:\n\nfrom __future__ import absolute_import, division, print_function, unicode_literals\nfrom h2o.utils.compatibility import *  # NOQA\n\n------------------------------------------------------------------------------------------------------------------------\n1. Strings\n    In Py2 `str` is a byte string (`bytes is str == True`), and `unicode` is a unicode string.\n    In Py3 `str` is a unicode string, `bytes` is a byte string, and symbol `unicode` is not defined.\n    Iterating over a `bytes` string in Py2 produces characters, in Py3 character codes.\n\n    For consistent results, use\n        is_str(s)  to test whether an argument is a string\n        bytes_iterator(s)  to iterate over byte-codes of strins s (which could be bytes or unicode)\n\n2. Integers\n    In Py2 there are two integer types: `int` and `long`. The latter has suffix "L" when stringified with repr().\n    In Py3 `int` is a single integer type, `long` doesn\'t exist.\n\n    For consistent results, use\n        is_int(x)  to test whether an argument is an integer\n        str(x)  to convert x to string (don\'t use repr()!)\n\n3. Iterators\n    In Py2 `range`, `filter`, `map` and `zip` produced lists.\n    In Py3 same functions return iterators.\n\n    This module backports these functions into Py2, so that they produce iterators both in Py2 and Py3.\n\n4. Dictionaries\n    There are multiple inconsistencies between Py2 and Py3 in the behavior of dict.keys(), dict.values(),\n    dict.iteritems() / dict.items(), etc.\n\n    This module installs methods `viewkeys`, `viewvalues`, `viewitems` that are preferrable for dict iteration /\n    manipulation. These have same semantic as in Py3.\n\n5. Obsolete functions\n    Several functions that existed in Py2 were removed in Py3. These are:\n        apply, cmp, coerce, execfile, file, long, raw_input, reduce, reload, unicode, xrange, StandardError\n\n    This module replaces all these functions with stubs that produce runtime errors when called. Do not use any of\n    these functions if you want your code to be compatible across Py2 / Py3!\n\n6. Miscellaneous\n    chr(): In Py2 returns a byte, in Py3 a unicode character.\n    input():\n    open(): Py3\'s `open` is equivalent to Py2\'s `io.open`.\n    next(): In Py3 invokes __next__ method of an object, in Py2 doesn\'t.\n    round(): In Py3 returns an integer, in Py2 a float.\n    super(): In Py3 a no-argument form is supported, not in Py2.\n\n    All these functions are redefined here to have Py3\'s behavior on Py2.\n\n------------------------------------------------------------------------------------------------------------------------\n:copyright: (c) 2016 H2O.ai\n:license:   Apache License Version 2.0 (see LICENSE for details)\n'
from __future__ import absolute_import, division, print_function, unicode_literals
from future.utils import PY2, PY3, with_metaclass
__all__ = (u'PY2', u'PY3', u'with_metaclass', u'bytes_iterator', u'range', u'filter', u'map', u'zip', u'viewitems', u'viewkeys', u'viewvalues', u'apply', u'cmp', u'coerce', u'execfile', u'file', u'long', u'raw_input', u'reduce', u'reload', u'unicode', u'xrange', u'StandardError', u'chr', u'input', u'open', u'next', u'round', u'super', u'csv_dict_writer')
if True:
    from future.builtins.iterators import range, filter, map, zip
    from future.utils import viewitems, viewkeys, viewvalues
if PY2:
    _native_unicode = unicode
    _native_long = long
apply = _disabled_function(u'apply')
cmp = _disabled_function(u'cmp')
coerce = _disabled_function(u'coerce')
execfile = _disabled_function(u'execfile')
file = _disabled_function(u'file')
long = _disabled_function(u'long')
raw_input = _disabled_function(u'raw_input')
reduce = _disabled_function(u'reduce')
reload = _disabled_function(u'reload')
unicode = _disabled_function(u'unicode')
xrange = _disabled_function(u'xrange')
StandardError = _disabled_function(u'StandardError')
if True:
    from future.builtins.misc import chr, input, open, next, round, super
