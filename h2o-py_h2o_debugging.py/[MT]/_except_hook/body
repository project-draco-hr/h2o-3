def _except_hook(exc_type, exc_value, exc_tb):
    u'\n    This is an advanced exception-handling hook function, that is designed to supercede the standard Python\'s\n    exception handler. It offers several enhancements:\n        * Clearer and more readable format for the exception message and the traceback.\n        * Decorators are filtered out from the traceback (if they declare their implementation function to\n          have name "decorator_invisible").\n        * Local variables in all execution frames are also printed out.\n        * Print out server-side stacktrace for exceptions that carry this information (e.g. H2OServerError).\n\n    Some documentation about the objects used herein:\n\n    "traceback" type (types.TracebackType):  -- stack traceback of an exception\n        tb_frame:  execution frame object at the current level\n        tb_lasti:  index of the last attempted instruction in the bytecode\n        tb_lineno: line number in the source code\n        tb_next:   next level in the traceback stack (towards the frame where exception occurred)\n\n    "frame" type (types.FrameType):  -- the execution frame\n        f_back: previous stack frame (toward the caller)\n        f_code: code object being executed\n        f_locals: dictionary of all local variables\n        f_globals: dictionary of all global variables\n        f_builtins: dictionary of built-in names\n        f_lineno: line number\n        f_lasti: current instruction being executed (index into the f_code.co_code)\n        f_restricted: ?\n        f_trace: (function) function called at the start of each code line (settable!)\n        f_exc_type, f_exc_value, f_exc_traceback: [Py2 only] most recent exception triple\n\n    "code" type (types.CodeType):  -- byte-compiled code\n        co_name: function name\n        co_argcount: number of positional arguments\n        co_nlocals: number of local variables inside the function\n        co_varnames: names of all local variables\n        co_cellvars: names of variables referenced by nested functions\n        co_freevars: names of free variables used by nested functions\n        co_code: raw bytecode\n        co_consts: literals used in the bytecode\n        co_names: names used in the bytecode\n        co_filename: name of the file that contains the function\n        co_firstlineno: line number where the function starts\n        co_lnotab: encoded offsets to line numbers within the bytecode\n        co_stacksize: required stack size\n        co_flags: function flags. Bit 2 = function uses *args; bit 3 = function uses **kwargs\n\n    Note that when the Python code re-raises an exception (by calling `raise` without arguments, which semantically\n    means "raise the exception again as if it wasn\'t caught"), then tb.tb_lineno will contain the line number of the\n    original exception, whereas tb.tb_frame.f_lineno will be the line number where the exception was re-raised.\n\n    :param exc_type: exception class\n    :param exc_value: the exception instance object\n    :param exc_tb: stacktrace at the point of the exception. The "traceback" type is actually a linked list,\n                   and this object represents the beginning of this list (i.e. corresponds to the execution\n                   frame of the outermost expression being evaluated). We need to walk down the list (by repeatedly\n                   moving to exc_tb.tb_next) in order to find the execution frame where the actual exception occurred.\n    '
    import linecache
    if (not exc_tb):
        sys.__excepthook__(exc_type, exc_value, exc_tb)
        return

    def err(msg=u''):
        print(msg, file=sys.stderr)
    err(u'\n================================ EXCEPTION INFO ================================\n')
    if (exc_type != type(exc_value)):
        err((u'Exception type(s): %s / %s' % (exc_type, type(exc_value))))
    for arg in exc_value.args:
        if hasattr(arg, u'stacktrace'):
            err(u'[SERVER STACKTRACE]')
            for line in arg.stacktrace:
                err((u'    %s' % line.strip()))
            err()
    err(u'[LOCAL FRAMES]')
    err(u'Omitted: imported modules, class declarations, __future__ features, None-valued')
    tb = exc_tb
    while tb:
        tb_line = tb.tb_lineno
        frame = tb.tb_frame
        frame_file = frame.f_code.co_filename
        frame_func = frame.f_code.co_name
        frame_locl = frame.f_locals
        tb = tb.tb_next
        if (frame_func == u'decorator_invisible'):
            continue
        if (frame_func == u'__getattribute__'):
            continue
        if (not frame_locl):
            continue
        err((u'\n  Within %s() line %s in file %s:' % (frame_func, tb_line, frame_file)))
        for key in sorted(frame_locl.keys(), reverse=True):
            if (key.startswith(u'__') and key.endswith(u'__')):
                continue
            value = frame_locl[key]
            if (value is None):
                continue
            if hasattr(value, u'__class__'):
                if (value.__class__ is ModuleType):
                    continue
                if (value.__class__ is type):
                    continue
                if (value.__class__ is print_function.__class__):
                    continue
            try:
                strval = str(value)
                n_lines = strval.count(u'\n')
                if (n_lines > 1):
                    strval = (u'%s... (+ %d line%s)' % (strval[:strval.index(u'\n')], (n_lines - 1), (u's' if (n_lines > 2) else u'')))
                err((u'%25s: %s' % (key, strval)))
            except:
                err((u'%25s: <UNABLE TO PRINT VALUE>' % key))
    err()
    err(u'[STACKTRACE]')
    last_file = None
    tb = exc_tb
    prev_info = None
    skip_frames = 0
    while tb:
        tb_lineno = tb.tb_lineno
        frame = tb.tb_frame
        frame_file = frame.f_code.co_filename
        frame_func = frame.f_code.co_name
        frame_glob = frame.f_globals
        tb = tb.tb_next
        if (frame_func == u'decorator_invisible'):
            continue
        if (frame_func == u'__getattribute__'):
            continue
        if ((tb_lineno, frame_file) == prev_info):
            skip_frames += 1
            continue
        else:
            if skip_frames:
                err((u'    %20s   ... +%d nested calls' % (u'', skip_frames)))
            skip_frames = 0
            prev_info = (tb_lineno, frame_file)
        if (frame_file != last_file):
            last_file = frame_file
            err((u'\n  File %s:' % frame_file))
        line_txt = linecache.getline(frame_file, tb_lineno, frame_glob)
        err((u'    %20s() #%04d  %s' % (frame_func, tb_lineno, line_txt.strip())))
    if skip_frames:
        err((u'    %20s   ... +%d nested calls' % (u'', skip_frames)))
    err()
    tb = exc_tb
    while tb.tb_next:
        tb = tb.tb_next
    print(u'[EXCEPTION]', file=sys.stderr)
    print((u'  %s: %s' % (exc_value.__class__.__name__, str(exc_value))), file=sys.stderr)
    print((u'  at line %d in %s\n' % (tb.tb_lineno, tb.tb_frame.f_code.co_filename)), file=sys.stderr)
    del tb
    del exc_tb
