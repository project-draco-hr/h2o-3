def validate_predictions(result, model_name, frame_key, expected_rows, destination_key=None):
    '\n    Validate a /Predictions result.\n    '
    assert (p is not None), ((('FAIL: Got a null result for scoring: ' + model_name) + ' on: ') + frame_key)
    assert ('model_metrics' in p), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a model_metrics object.')
    mm = p['model_metrics'][0]
    h2o.H2O.verboseprint('mm: ', repr(mm))
    assert ('predictions' in mm), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain an predictions section.')
    assert ('key' in mm['predictions']), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a key.')
    assert ('name' in mm['predictions']['key']), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain a key name.')
    predictions_key = mm['predictions']['key']['name']
    f = a_node.frames(key=predictions_key, find_compatible_models=True, len=5)
    frames = f['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    assert (predictions_key in frames_dict), (('FAIL: Failed to find predictions key' + predictions_key) + ' in Frames list.')
    predictions = mm['predictions']
    h2o.H2O.verboseprint('p: ', repr(p))
    assert ('columns' in predictions), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain an columns section.')
    assert (len(predictions['columns']) > 0), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' does not contain any columns.')
    assert ('label' in predictions['columns'][0]), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' column 0 has no label element.')
    assert ('predict' == predictions['columns'][0]['label']), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + " column 0 is not 'predict'.")
    assert (expected_rows == predictions['rows']), (((('FAIL: Predictions for scoring: ' + model_name) + ' on: ') + frame_key) + ' has an unexpected number of rows.')
    assert ('destination_key' in result), ("FAIL: failed to find 'destination_key' in predict result:" + h2o_util.dump_json(result))
    assert ('name' in result['destination_key']), ("FAIL: failed to find name in 'destination_key' in predict result:" + h2o_util.dump_json(result))
    if (destination_key is not None):
        assert (destination_key == result['destination_key']['name']), ((("FAIL: bad value for 'destination_key' in predict result; expected: " + destination_key) + ', got: ') + result['destination_key']['name'])
