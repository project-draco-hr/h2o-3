def execute(self, progress_fn):
    u'\n        Start the progress bar, and return only when the progress reaches 100%.\n\n        :param progress_fn: the executor function (or a generator). This function should take no arguments\n            and return either a single number -- the current progress level, or a tuple (progress level, delay),\n            where delay is the time interval for when the progress should be checked again. This function may at\n            any point raise the ``StopIteration(message)`` exception, which will interrupt the progress bar,\n            display the ``message`` in red font, and then re-raise the exception.\n        :raises StopIteration: if the job is interrupted. The reason for interruption is provided in the exception\'s\n            message. The message will say "cancelled" if the job was interrupted by the user by pressing Ctrl+C.\n        '
    assert_is_type(progress_fn, FunctionType, GeneratorType, MethodType)
    if isinstance(progress_fn, GeneratorType):
        progress_fn = (lambda g: (lambda : next(g)))(progress_fn)
    self._next_poll_time = 0
    self._t0 = time.time()
    self._x0 = 0
    self._v0 = 0.01
    self._ve = 0.01
    progress = 0
    status = None
    try:
        while True:
            now = time.time()
            if (self._next_poll_time <= now):
                res = progress_fn()
                assert_is_type(res, (numeric, numeric), numeric)
                if (not isinstance(res, tuple)):
                    res = (res, (-1))
                now = time.time()
                self._store_model_progress(res, now)
                self._recalculate_model_parameters(now)
            progress = min(self._compute_progress_at_time(now)[0], 1)
            if ((progress == 1) and (self._get_real_progress() >= 1)):
                break
            result = self._widget.render(progress)
            assert_is_type(result, RenderResult)
            time0 = result.next_time
            time1 = self._get_time_at_progress(result.next_progress)
            next_render_time = min(time0, time1)
            self._draw(result.rendered)
            wait_time = (min(next_render_time, self._next_poll_time) - now)
            if (wait_time > 0):
                time.sleep(wait_time)
    except KeyboardInterrupt:
        status = u'cancelled'
    except StopIteration as e:
        status = str(e)
    result = self._widget.render(progress=progress, status=status)
    self._draw(result.rendered, final=True)
    if (status == u'cancelled'):
        raise StopIteration(status)
