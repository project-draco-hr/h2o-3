{
  GLMParameters params=new GLMParameters(Family.binomial);
  params._response_column="CAPSULE";
  params._standardize=false;
  params._train=_prostateTrain._key;
  params._compute_p_values=true;
  params._objective_epsilon=0;
  params._missing_values_handling=MissingValuesHandling.Skip;
  params._lambda=new double[]{0};
  params._beta_epsilon=1e-4;
  GLM job0=null;
  try {
    job0=new GLM(params);
    params._solver=Solver.L_BFGS;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
  }
  try {
    job0=new GLM(params);
    params._solver=Solver.COORDINATE_DESCENT_NAIVE;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
  }
  try {
    job0=new GLM(params);
    params._solver=Solver.COORDINATE_DESCENT;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
  }
  params._solver=Solver.IRLSM;
  try {
    job0=new GLM(params);
    params._lambda=new double[]{1};
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with no regularization",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
  }
  params._lambda=new double[]{0};
  try {
    params._lambda_search=true;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with no regularization (i.e. no lambda search)",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
  }
  params._lambda_search=false;
  GLM job=new GLM(params);
  GLMModel model=null;
  try {
    model=job.trainModel().get();
    String[] names_expected=new String[]{"Intercept","ID","AGE","RACE.R2","RACE.R3","DPROS.b","DPROS.c","DPROS.d","DCAPS.b","PSA","VOL","GLEASON"};
    double[] stder_expected=new double[]{2.383945093,0.001376361,0.022369891,1.542397413,1.582718967,0.395088333,0.416197382,0.542651183,0.517959064,0.011148747,0.008753002,0.182282351};
    double[] zvals_expected=new double[]{-2.99223901,1.24208800,-0.14610616,0.04428674,-0.46826589,2.24843259,3.13779030,1.44550154,1.18227779,2.71377864,-1.11887108,4.67333842};
    double[] pvals_expected=new double[]{2.769394e-03,2.142041e-01,8.838376e-01,9.646758e-01,6.395945e-01,2.454862e-02,1.702266e-03,1.483171e-01,2.370955e-01,6.652060e-03,2.631951e-01,2.963429e-06};
    String[] names_actual=model._output.coefficientNames();
    System.out.println("names actual = " + Arrays.toString(names_actual));
    HashMap<String,Integer> coefMap=new HashMap<>();
    for (int i=0; i < names_expected.length; ++i)     coefMap.put(names_expected[i],i);
    double[] stder_actual=model._output.stdErr();
    double[] zvals_actual=model._output.zValues();
    double[] pvals_actual=model._output.pValues();
    for (int i=0; i < stder_expected.length; ++i) {
      int id=coefMap.get(names_actual[i]);
      assertEquals(stder_expected[id],stder_actual[i],stder_expected[id] * 1e-4);
      assertEquals(zvals_expected[id],zvals_actual[i],Math.abs(zvals_expected[id]) * 1e-4);
      assertEquals(pvals_expected[id],pvals_actual[i],pvals_expected[id] * 1e-3);
    }
  }
  finally {
    if (model != null)     model.delete();
  }
  params._standardize=true;
  job=new GLM(params);
  try {
    model=job.trainModel().get();
    String[] names_expected=new String[]{"Intercept","ID","AGE","RACE.R2","RACE.R3","DPROS.b","DPROS.c","DPROS.d","DCAPS.b","PSA","VOL","GLEASON"};
    double[] zvals_expected=new double[]{-0.81620723,1.24208800,-0.14610616,0.04428674,-0.46826589,2.24843259,3.13779030,1.44550154,1.18227779,2.71377864,-1.11887108,4.67333842};
    double[] pvals_expected=new double[]{4.143816e-01,2.142041e-01,8.838376e-01,9.646758e-01,6.395945e-01,2.454862e-02,1.702266e-03,1.483171e-01,2.370955e-01,6.652060e-03,2.631951e-01,2.963429e-06};
    String[] names_actual=model._output.coefficientNames();
    HashMap<String,Integer> coefMap=new HashMap<>();
    for (int i=0; i < names_expected.length; ++i)     coefMap.put(names_expected[i],i);
    double[] stder_actual=model._output.stdErr();
    double[] zvals_actual=model._output.zValues();
    double[] pvals_actual=model._output.pValues();
    for (int i=0; i < zvals_expected.length; ++i) {
      int id=coefMap.get(names_actual[i]);
      assertEquals(zvals_expected[id],zvals_actual[i],Math.abs(zvals_expected[id]) * 1e-4);
      assertEquals(pvals_expected[id],pvals_actual[i],pvals_expected[id] * 1e-3);
    }
  }
  finally {
    if (model != null)     model.delete();
  }
}
