{
  GLMModel model=null;
  String[] cfs1=new String[]{"AGE","DPROS.a","DPROS.b","DPROS.c","DPROS.d","PSA","VOL","GLEASON"};
  double[] vals=new double[]{-0.00743,-6.46499,-5.60120,-5.18213,-5.70027,0.02753,-0.01235,0.86122};
  GLMParameters params=new GLMParameters(Family.binomial);
  params._response_column="CAPSULE";
  params._ignored_columns=new String[]{"ID","RACE","DCAPS"};
  params._train=_prostateTrain._key;
  params._valid=_prostateTest._key;
  params._lambda=new double[]{0};
  params._alpha=new double[]{0};
  params._standardize=false;
  params._intercept=false;
  params._objective_epsilon=0;
  params._gradient_epsilon=1e-6;
  params._max_iterations=100;
  for (  Solver s : new Solver[]{Solver.AUTO,Solver.IRLSM,Solver.L_BFGS,Solver.COORDINATE_DESCENT_NAIVE,Solver.COORDINATE_DESCENT}) {
    Frame scoreTrain=null, scoreTest=null;
    try {
      params._solver=s;
      System.out.println("SOLVER = " + s);
      model=new GLM(params).trainModel().get();
      HashMap<String,Double> coefs=model.coefficients();
      System.out.println("coefs = " + coefs.toString());
      System.out.println("metrics = " + model._output._training_metrics);
      boolean CD=(s == Solver.COORDINATE_DESCENT || s == Solver.COORDINATE_DESCENT_NAIVE);
      for (int i=0; i < cfs1.length; ++i)       assertEquals(vals[i],coefs.get(cfs1[i]),CD ? 1e-1 : 1e-4);
      assertEquals(402,GLMTest.nullDeviance(model),1e-1);
      assertEquals(302.9,GLMTest.residualDeviance(model),1e-1);
      assertEquals(290,GLMTest.nullDOF(model),0);
      assertEquals(282,GLMTest.resDOF(model),0);
      assertEquals(318.9,GLMTest.aic(model),1e-1);
      System.out.println("VAL METRICS: " + model._output._validation_metrics);
      assertEquals(80.92923,GLMTest.residualDevianceTest(model),CD ? 1e-2 : 1e-4);
      assertEquals(124.7665,GLMTest.nullDevianceTest(model),1e-4);
      model.delete();
      scoreTrain=model.score(_prostateTrain);
      hex.ModelMetricsBinomial mm=hex.ModelMetricsBinomial.getFromDKV(model,_prostateTrain);
      hex.AUC2 adata=mm._auc;
      assertEquals(model._output._training_metrics.auc_obj()._auc,adata._auc,1e-8);
      assertEquals(model._output._training_metrics._MSE,mm._MSE,1e-8);
      assertEquals(((ModelMetricsBinomialGLM)model._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
      scoreTest=model.score(_prostateTest);
      mm=hex.ModelMetricsBinomial.getFromDKV(model,_prostateTest);
      adata=mm._auc;
      assertEquals(model._output._validation_metrics.auc_obj()._auc,adata._auc,1e-8);
      assertEquals(model._output._validation_metrics._MSE,mm._MSE,1e-8);
      assertEquals(((ModelMetricsBinomialGLM)model._output._validation_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
    }
  finally {
      if (model != null)       model.delete();
      if (scoreTrain != null)       scoreTrain.delete();
      if (scoreTest != null)       scoreTest.delete();
    }
  }
}
