{
  parseArgs(args);
  hex.genmodel.GenModel model;
  model=(hex.genmodel.GenModel)Class.forName(modelClassName).newInstance();
  BufferedReader input=new BufferedReader(new FileReader(inputCSVFileName));
  BufferedWriter output=new BufferedWriter(new FileWriter(outputCSVFileName));
  System.out.println("COLS " + model.getNumCols());
  HashMap<Integer,HashMap<String,Integer>> domainMap=new HashMap<Integer,HashMap<String,Integer>>();
  for (int i=0; i < model.getNumCols(); i++) {
    String[] domainValues=model.getDomainValues(i);
    if (domainValues != null) {
      HashMap<String,Integer> m=new HashMap<String,Integer>();
      for (int j=0; j < domainValues.length; j++) {
        System.out.println("Putting (" + i + ","+ j+ ","+ domainValues[j]+ ")");
        m.put(domainValues[j],new Integer(j));
      }
      domainMap.put(i,m);
    }
  }
  if (model.isAutoEncoder()) {
    output.write(model.getHeader());
  }
 else {
    output.write("predict");
    for (int i=0; model.isClassifier() && i < model.getNumResponseClasses(); i++) {
      output.write(",");
      output.write(model.getDomainValues(model.getResponseIdx())[i]);
    }
  }
  output.write("\n");
  int lineno=0;
  String line=null;
  double[] preds=new double[model.getPredsSize()];
  while ((line=input.readLine()) != null) {
    lineno++;
    if (skipFirstLine > 0) {
      skipFirstLine=0;
      String[] names=line.trim().split(",");
      String[] modelNames=model.getNames();
      for (int i=0; i < Math.min(names.length,modelNames.length); i++) {
        if (!names[i].equals(modelNames[i])) {
          System.out.println("ERROR: Column names does not match: input column " + i + ". "+ names[i]+ " != model column "+ modelNames[i]);
          System.exit(1);
        }
      }
      continue;
    }
    String trimmedLine=line.trim();
    String[] inputColumnsArray=trimmedLine.split(",");
    int numInputColumns=model.getNames().length;
    if (inputColumnsArray.length != numInputColumns) {
      System.out.println("WARNING: Line " + lineno + " has "+ inputColumnsArray.length+ " columns (expected "+ numInputColumns+ ")");
    }
    double[] row=new double[numInputColumns];
    int j=0;
    for (j=0; j < inputColumnsArray.length; j++) {
      String cellString=inputColumnsArray[j];
      String[] domainValues=model.getDomainValues(j);
      if (cellString.equals("") || (domainValues == null) && (cellString.equals("NA") || cellString.equals("N/A") || cellString.equals("-"))) {
        row[j]=Double.NaN;
      }
 else {
        if (domainValues != null) {
          HashMap m=(HashMap<String,Integer>)domainMap.get(j);
          assert(m != null);
          Integer cellOrdinalValue=(Integer)m.get(cellString);
          if (cellOrdinalValue == null) {
            System.out.println("WARNING: Line " + lineno + " column ("+ model.getNames()[j]+ " == "+ j+ ") has unknown categorical value ("+ cellString+ ")");
            row[j]=Double.NaN;
          }
 else {
            row[j]=(double)cellOrdinalValue.intValue();
          }
        }
 else {
          try {
            double value=Double.parseDouble(cellString);
            row[j]=value;
          }
 catch (          java.lang.NumberFormatException e) {
            row[j]=Double.NaN;
          }
        }
      }
    }
    for (; j < numInputColumns; j++)     row[j]=Double.NaN;
    preds=model.score0(row,preds);
    for (int i=0; i < preds.length; i++) {
      if (i == 0 && model.isClassifier()) {
        String[] domainValues=model.getDomainValues(model.getResponseIdx());
        if (domainValues != null) {
          double value=preds[i];
          int valueAsInt=(int)value;
          if (value != (int)valueAsInt) {
            System.out.println("ERROR: Line " + lineno + " has non-integer output for classification ("+ value+ ")");
            System.exit(1);
          }
          String predictedOutputClassLevel=domainValues[valueAsInt];
          output.write(predictedOutputClassLevel);
        }
      }
 else {
        if (i > 0)         output.write(",");
        output.write(Double.toHexString(preds[i]));
        if (!model.isClassifier() && !model.isAutoEncoder())         break;
      }
    }
    output.write("\n");
  }
  output.close();
  input.close();
  System.exit(0);
}
