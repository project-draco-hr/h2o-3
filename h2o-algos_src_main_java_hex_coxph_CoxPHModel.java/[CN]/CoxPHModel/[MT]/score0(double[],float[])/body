{
  final int n_offsets=(_parms.offset_columns == null) ? 0 : _parms.offset_columns.length;
  final int n_time=_output.time.length;
  final int n_coef=_output.coef.length;
  final int n_cats=_output.data_info._cats;
  final int n_nums=_output.data_info._nums;
  final int n_data=n_cats + n_nums;
  final int n_full=n_coef + n_offsets;
  final int numStart=_output.data_info.numStart();
  boolean catsAllNA=true;
  boolean catsHasNA=false;
  boolean numsHasNA=false;
  for (int j=0; j < n_cats; ++j) {
    catsAllNA&=Double.isNaN(data[j]);
    catsHasNA|=Double.isNaN(data[j]);
  }
  for (int j=n_cats; j < n_data; ++j)   numsHasNA|=Double.isNaN(data[j]);
  if (numsHasNA || (catsHasNA && !catsAllNA)) {
    for (int i=1; i <= 2 * n_time; ++i)     preds[i]=Float.NaN;
  }
 else {
    double[] full_data=MemoryManager.malloc8d(n_full);
    for (int j=0; j < n_cats; ++j)     if (Double.isNaN(data[j])) {
      final int kst=_output.data_info._catOffsets[j];
      final int klen=_output.data_info._catOffsets[j + 1] - kst;
      System.arraycopy(_output.x_mean_cat,kst,full_data,kst,klen);
    }
 else     if (data[j] != 0)     full_data[_output.data_info._catOffsets[j] + (int)(data[j] - 1)]=1;
    for (int j=0; j < n_nums; ++j)     full_data[numStart + j]=data[n_cats + j] - _output.data_info._normSub[j];
    double logRisk=0;
    for (int j=0; j < n_coef; ++j)     logRisk+=full_data[j] * _output.coef[j];
    for (int j=n_coef; j < full_data.length; ++j)     logRisk+=full_data[j];
    final double risk=Math.exp(logRisk);
    for (int t=0; t < n_time; ++t)     preds[t + 1]=(float)(risk * _output.cumhaz_0[t]);
    for (int t=0; t < n_time; ++t) {
      final double cumhaz_0_t=_output.cumhaz_0[t];
      double var_cumhaz_2_t=0;
      for (int j=0; j < n_coef; ++j) {
        double sum=0;
        for (int k=0; k < n_coef; ++k)         sum+=_output.var_coef[j][k] * (full_data[k] * cumhaz_0_t - _output.var_cumhaz_2[t][k]);
        var_cumhaz_2_t+=(full_data[j] * cumhaz_0_t - _output.var_cumhaz_2[t][j]) * sum;
      }
      preds[t + 1 + n_time]=(float)(risk * Math.sqrt(_output.var_cumhaz_1[t] + var_cumhaz_2_t));
    }
  }
  preds[0]=Float.NaN;
  return preds;
}
