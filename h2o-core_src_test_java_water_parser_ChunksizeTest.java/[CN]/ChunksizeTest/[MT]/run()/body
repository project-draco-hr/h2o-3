{
  FileWriter fw=new FileWriter("/tmp/chunksize.csv");
  String header="\t" + String.format("%10s","cloudSize") + "\t"+ String.format("%8s","cores")+ "\t"+ String.format("%8s","numCols")+ "\t"+ String.format("%8s","numRows")+ "\t"+ String.format("%16s","maxLineLength")+ "\t"+ String.format("%13s","totalSize")+ "\t"+ String.format("%13s","chunkSize")+ "\t"+ String.format("%15s","parseChunkCount")+ "\t"+ String.format("%20s","bytesPerChunkPOJO")+ "\t"+ String.format("%15s","totalChunks")+ "\n";
  int[] toosmall=new int[2];
  int[] toolarge=new int[2];
  int[] toofew=new int[2];
  int[] toomany=new int[2];
  int[] counter=new int[2];
  int[] failed=new int[2];
  for (  int oldheuristic : new int[]{0,1}) {
    for (    int cloudSize : new int[]{1,2,4,8,16,32,64,128,256,512,1024}) {
      for (      int cores : new int[]{2,4,8,16,32,64}) {
        for (        int numCols : new int[]{1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768}) {
          for (          long maxLineLength : new long[]{10,100,1000,10000,1000000}) {
            for (            double totalSize : new double[]{1e4,1e5,1e6,1e7,1e8,1e9,1e10,1e11,1e12}) {
              int numRows=(int)(totalSize / maxLineLength);
              if (maxLineLength > totalSize)               continue;
              if ((double)maxLineLength / numCols < 3)               continue;
              if ((double)maxLineLength / numCols > 100)               continue;
              if (totalSize / (numCols * cores * cloudSize) > 1e9)               continue;
              if (totalSize / cloudSize > 2e11)               continue;
              int chunkSize=FileVec.calcOptimalChunkSize((long)totalSize,numCols,maxLineLength,cores,cloudSize,oldheuristic == 1);
              int parseChunkCount=(int)Math.max(1,totalSize / chunkSize);
              int parseChunkCountPerNode=parseChunkCount / cloudSize;
              double bytesPerChunkPOJO=totalSize / parseChunkCount / numCols;
              long totalChunks=(long)(totalSize / bytesPerChunkPOJO);
              String log="\t" + String.format("%10s",cloudSize) + "\t"+ String.format("%8s",cores)+ "\t"+ String.format("%8s",numCols)+ "\t"+ String.format("%8s",numRows)+ "\t"+ String.format("%16s",maxLineLength)+ "\t"+ String.format("%13s",totalSize)+ "\t"+ String.format("%13s",chunkSize)+ "\t"+ String.format("%15s",parseChunkCount)+ "\t"+ String.format("%20s",bytesPerChunkPOJO)+ "\t"+ String.format("%15s",totalChunks);
              boolean fail=false;
              String msg="\n" + header + log+ "                  <- TOO ";
              if (chunkSize < 10 * maxLineLength) {
                msg+="SMALL ";
                FileVec.calcOptimalChunkSize((long)totalSize,numCols,maxLineLength,cores,cloudSize,oldheuristic == 1);
                toosmall[oldheuristic]++;
                fail=true;
              }
              if (bytesPerChunkPOJO >= Value.MAX / 2) {
                msg+="LARGE ";
                FileVec.calcOptimalChunkSize((long)totalSize,numCols,maxLineLength,cores,cloudSize,oldheuristic == 1);
                toolarge[oldheuristic]++;
                fail=true;
              }
              if (parseChunkCountPerNode < cores) {
                if (numRows * numCols > 100000 * cloudSize && totalSize / cloudSize / numCols/ (4 * cores) > 1000) {
                  msg+="FEW ";
                  FileVec.calcOptimalChunkSize((long)totalSize,numCols,maxLineLength,cores,cloudSize,oldheuristic == 1);
                  toofew[oldheuristic]++;
                  fail=true;
                }
              }
              if (parseChunkCountPerNode * numCols > (1 << 22)) {
                msg+="MANY ";
                FileVec.calcOptimalChunkSize((long)totalSize,numCols,maxLineLength,cores,cloudSize,oldheuristic == 1);
                toomany[oldheuristic]++;
                fail=true;
              }
              if (fail) {
                Log.info(msg + (oldheuristic == 0 ? "(New Heuristic)" : "(Old Heuristic)"));
                failed[oldheuristic]++;
              }
              counter[oldheuristic]++;
            }
          }
        }
      }
    }
  }
  fw.close();
  for (  int i : new int[]{0,1}) {
    Log.info((i == 1 ? "Old" : "New") + " heuristic:");
    Log.info("Total: " + counter[i]);
    Log.info("Failure rate: " + PrettyPrint.formatPct((double)failed[i] / counter[i]));
    Log.info("Too small: " + PrettyPrint.formatPct((double)toosmall[i] / counter[i]));
    Log.info("Too large: " + PrettyPrint.formatPct((double)toolarge[i] / counter[i]));
    Log.info("Too few: " + PrettyPrint.formatPct((double)toofew[i] / counter[i]));
    Log.info("Too many: " + PrettyPrint.formatPct((double)toomany[i] / counter[i]));
    if (i == 0) {
      Assert.assertTrue("Too small means that files cannot be parsed",toosmall[i] == 0);
      Assert.assertTrue("Too large means that chunks cannot fit in the DKV",toolarge[i] == 0);
      Assert.assertTrue("Too few means that cores aren't utilized",toofew[i] == 0);
      Assert.assertTrue("Too many means that each node has to store more than 4M chunks in its KV store",toomany[i] == 0);
    }
  }
}
