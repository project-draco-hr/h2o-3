'\nTest h2o initialization / startup options.\n\nCurrently, our R/Python test suite is executed against an established h2o cluster (run.py sets up the cluster).\nHowever, we ignore the mode of operation where the h2o cluster is created by the client. Consequently, we may not\nrecognize bugs in h2o.init() for this mode of operation.\n\nFor this ticket, I think we should create a set of tests that check that h2o.init() is successful for each\nOS/client interface combination.\n'
from __future__ import print_function
import sys
sys.path.insert(0, '../..')
import h2o
from h2o.backend import H2OLocalServer
from h2o.exceptions import H2OConnectionError
PORT = 55330
try:
    conn = h2o.connect(ip='localhost', port=PORT)
    conn.cluster.shutdown(prompt=False)
except H2OConnectionError:
    pass
print('Start a server with max_mem_size = 1Gb')
h2o.init(max_mem_size='1g', port=10101)
h2o.cluster().shutdown()
print('Starting a server with min_mem_size = 314Mb')
h2o.init(min_mem_size='314M', port=20202)
h2o.cluster().shutdown()
print('Starting a server explicitly')
server = H2OLocalServer.start(port=(str(PORT) + '+'))
conn = h2o.connect(server=server)
cluster_up = conn.cluster.is_running()
cluster_healthy = all((node['healthy'] for node in conn.cluster.nodes))
if (cluster_healthy and cluster_up):
    print('Cluster is up and healthy')
elif ((not cluster_healthy) and cluster_up):
    raise ValueError('Cluster is up but not healthy')
else:
    raise ValueError('Cluster is not up and is not healthy')
