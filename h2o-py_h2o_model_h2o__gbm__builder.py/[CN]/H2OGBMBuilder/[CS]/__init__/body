def __init__(self, x=None, y=None, training_frame=None, key=None, loss=('AUTO', 'bernoulli'), ntrees=50, max_depth=5, learn_rate=0.1, nbins=20, group_split=True, variable_importance=False, validation_frame=None, balance_classes=False, max_after_balance_size=1, seed=None):
    '\n        Instantiate a GBMBuilder.\n        :param x: Predictor columns (may be indices or strings)\n        :param y: Response column (may be an index or a string)\n        :param training_frame: An object of type H2OFrame\n        :param key: The output name of the model.\n        :param loss: Bernoulli for binary outcomes, AUTO for multinomial and regression\n        :param ntrees:  The number of trees in the GBM.\n        :param max_depth:   The maximum depth a tree will grow to.\n        :param learn_rate:  The learning rate (also called shrinkage).\n        :param nbins:   The bins per histogram. (Numeric columns are binned)\n        :param group_split: Group splitting on categorical columns.\n        :param variable_importance: Compute variable importance\n        :param validation_frame: Score on a validation frame.\n        :param balance_classes: Balance response classes.\n        :param max_after_balance_size:  Maximum size of the dataset after balancing.\n        :param seed: A random seed.\n        :return: A new GBMBuilder.\n        '
    super(H2OGBMBuilder, self).__init__(locals(), self.SELF, training_frame)
    self.__dict__.update(locals())
    self.loss = ('AUTO' if isinstance(loss, tuple) else loss)
