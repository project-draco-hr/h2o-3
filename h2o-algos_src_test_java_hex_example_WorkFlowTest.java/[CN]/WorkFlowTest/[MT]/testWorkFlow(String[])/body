{
  try {
    Scope.enter();
    Frame data=load_files("data.hex",files);
    if (data == null)     return;
    data.remove("start station id").remove();
    data.remove("end station id").remove();
    data.remove("bikeid").remove();
    data.remove("start station latitude").remove();
    data.remove("end station latitude").remove();
    data.remove("start station longitude").remove();
    data.remove("end station longitude").remove();
    Vec startime=data.remove("starttime");
    data.add(new TimeSplit().doIt(startime,"s"));
    startime.remove();
    Vec stoptime=data.remove("stoptime");
    data.add(new TimeSplit().doIt(stoptime,"e"));
    stoptime.remove();
    Key[] keys=new Key[]{Key.make("train.hex"),Key.make("test.hex"),Key.make("hold.hex")};
    double[] ratios=new double[]{0.6,0.3,0.1};
    Frame[] frs=ShuffleSplitFrame.shuffleSplitFrame(data,keys,ratios,1234567689L);
    Frame train=frs[0];
    Frame test=frs[1];
    Frame hold=frs[2];
    data.remove();
    System.out.println(train);
    System.out.println(test);
    GLMModel.GLMParameters glm_parms=new GLMModel.GLMParameters(GLMModel.GLMParameters.Family.gaussian);
    glm_parms._train=train._key;
    glm_parms._valid=test._key;
    glm_parms._score_each_iteration=false;
    glm_parms._response_column="tripduration";
    glm_parms._convert_to_enum=false;
    glm_parms._use_all_factor_levels=true;
    Job<GLMModel> job=new GLM(glm_parms).trainModel();
    GLMModel glm=job.get();
    job.remove();
    System.out.println(glm._output._coefficients_table);
    glm.remove();
    train.remove();
    test.remove();
    hold.remove();
  }
  finally {
    Scope.exit();
  }
}
