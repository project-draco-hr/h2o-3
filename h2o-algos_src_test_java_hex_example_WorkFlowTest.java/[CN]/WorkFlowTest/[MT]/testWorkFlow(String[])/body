{
  try {
    Scope.enter();
    Frame data=load_files("data.hex",files);
    if (data == null)     return;
    Vec startime=data.vec("starttime");
    data.add(new TimeSplit().doIt(startime));
    Vec days=data.vec("Days");
    long start=System.currentTimeMillis();
    Frame bph=new CountBikes(days).doAll(days,data.vec("start station name")).makeFrame(Key.make("bph.hex"));
    System.out.println("Groupby took " + (System.currentTimeMillis() - start));
    System.out.println(bph);
    System.out.println(bph.toString(10000,20));
    data.remove();
    QuantileModel.QuantileParameters quantile_parms=new QuantileModel.QuantileParameters();
    quantile_parms._train=bph._key;
    Job<QuantileModel> job2=new Quantile(quantile_parms).trainModel();
    QuantileModel quantile=job2.get();
    job2.remove();
    System.out.println(Arrays.deepToString(quantile._output._quantiles));
    quantile.remove();
    Key[] keys=new Key[]{Key.make("train.hex"),Key.make("test.hex"),Key.make("hold.hex")};
    double[] ratios=new double[]{0.6,0.3,0.1};
    Frame[] frs=ShuffleSplitFrame.shuffleSplitFrame(bph,keys,ratios,1234567689L);
    Frame train=frs[0];
    Frame test=frs[1];
    Frame hold=frs[2];
    bph.remove();
    System.out.println(train);
    System.out.println(test);
    GBMModel.GBMParameters gbm_parms=new GBMModel.GBMParameters();
    gbm_parms._train=train._key;
    gbm_parms._valid=test._key;
    gbm_parms._score_each_iteration=false;
    gbm_parms._response_column="bikes";
    gbm_parms._ntrees=500;
    gbm_parms._max_depth=6;
    gbm_parms._min_rows=10;
    gbm_parms._nbins=20;
    gbm_parms._distribution=DistributionFamily.gaussian;
    gbm_parms._learn_rate=0.1f;
    Job<GBMModel> job=new GBM(gbm_parms).trainModel();
    GBMModel gbm=job.get();
    job.remove();
    GLMModel.GLMParameters glm_parms=new GLMModel.GLMParameters(GLMModel.GLMParameters.Family.gaussian);
    glm_parms._train=train._key;
    glm_parms._valid=test._key;
    glm_parms._score_each_iteration=false;
    glm_parms._response_column="bikes";
    glm_parms._use_all_factor_levels=true;
    Job<GLMModel> glm_job=new GLM(glm_parms).trainModel();
    GLMModel glm=glm_job.get();
    glm_job.remove();
    gbm.score(train).remove();
    glm.score(train).remove();
    train.remove();
    test.remove();
    hold.remove();
  }
  finally {
    Scope.exit();
  }
}
