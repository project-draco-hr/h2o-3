def translate_args(fun):
    u'\n    This decorator ensures that arguments supplied to a function are Python-3 compatible.\n    The problem that it tries to solve is the following: the code in the h2o-py module is written with the\n    unicode_literals future import, and Py3 compatibility layer (which replaces some of the builtin types in Python2\n    with custom objects that are Python3-compatible). However when h2o module is imported from within the "old-style"\n    Python 2 environment, then this enviroment will provide h2o functions with incompatible arguments.\n    For example, when Python 2 environment invokes\n        h2o.connect(ip="localhost", port=12345)\n    then the `ip` argument will be of "native" Python 2 str type, instead of the augmented `str` type provided by\n    this module. As a result, simple check such as `isinstance(ip, str)` will fail, a\n\n    :param fun: Function target of the decorator\n    '
    if PY3:
        return fun
    strings = (native_str, native_bytes, native_unicode)
    lists = (native_list, list)
    dicts = (native_dict, dict)

    def translate_list(arr):
        newarr = list(arr)
        for (i, a) in enumerate(newarr):
            if (type(a) is type):
                continue
            elif isinstance(a, strings):
                newarr[i] = str(a)
            elif isinstance(a, lists):
                newarr[i] = translate_list(a)
            elif isinstance(a, dicts):
                newarr[i] = translate_dict(a)
            elif isinstance(a, tuple):
                newarr[i] = tuple(translate_list(a))
        return newarr

    def translate_dict(d):
        newdict = dict()
        for (k, v) in viewitems(d):
            kk = str(k)
            if (type(v) is type):
                newdict[kk] = v
            elif isinstance(v, strings):
                newdict[kk] = str(v)
            elif isinstance(v, lists):
                newdict[kk] = translate_list(v)
            elif isinstance(v, dicts):
                newdict[kk] = translate_dict(v)
            elif isinstance(v, tuple):
                newdict[kk] = tuple(translate_list(v))
            else:
                newdict[kk] = v
        return newdict

    @wraps(fun)
    def decorator_invisible(*args, **kwargs):
        newargs = translate_list(args)
        newkwargs = translate_dict(kwargs)
        return fun(*newargs, **newkwargs)
    return decorator_invisible
