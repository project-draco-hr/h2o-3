{
  if (env.isAry()) {
    final Frame fr=env.pop0Ary();
    if (fr.numCols() == 1) {
      Vec v=Vec.makeRepSeq((long)_length,fr.numRows());
      new MRTask(){
        @Override public void map(        Chunk c){
          for (int i=0; i < c.len(); ++i)           c.set0(i,fr.anyVec().at((long)c.at0(i)));
        }
      }
.doAll(v);
      v.set_factors(fr.anyVec().factors());
      Frame f=new Frame(new String[]{"C1"},new Vec[]{v});
      env.cleanup(fr);
      env.push(new ValFrame(f));
    }
 else {
      String[] col_names=new String[(int)_length];
      for (int i=0; i < col_names.length; ++i)       col_names[i]="C" + (i + 1);
      Frame f=new Frame(col_names,new Vec[(int)_length]);
      for (int i=0; i < f.numCols(); ++i)       f.add(fr.vec(i % fr.numCols()));
      env.cleanup(fr);
      env.push(new ValFrame(f));
    }
  }
 else {
    int len=(int)_length;
    if (len <= 0)     throw new IllegalArgumentException("Error in rep_len: argument length.out must be coercible to a positive integer");
    if (env.isStr()) {
      Frame fr=new Frame(new String[]{"C1"},new Vec[]{Vec.makeConSeq(0,len)});
      fr.anyVec().set_factors(new String[]{env.popStr()});
      env.push(new ValFrame(fr));
    }
 else     if (env.isNum()) {
      Frame fr=new Frame(new String[]{"C1"},new Vec[]{Vec.makeConSeq(env.popDbl(),len)});
      env.push(new ValFrame(fr));
    }
 else     throw new IllegalArgumentException("Unkown input. Type: " + env.peekType() + " Stack: "+ env.toString());
  }
}
