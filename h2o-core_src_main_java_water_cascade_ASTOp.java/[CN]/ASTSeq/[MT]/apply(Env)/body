{
  double delta=_to - _from;
  if (delta == 0 && _to == 0)   env.push(new ValNum(_to));
 else {
    double n=delta / _by;
    if (n < 0)     throw new IllegalArgumentException("wrong sign in 'by' argument");
 else     if (n > Double.MAX_VALUE)     throw new IllegalArgumentException("'by' argument is much too small");
    double dd=Math.abs(delta) / Math.max(Math.abs(_from),Math.abs(_to));
    if (dd < 100 * Double.MIN_VALUE)     env.push(new ValNum(_from));
 else {
      Futures fs=new Futures();
      AppendableVec av=new AppendableVec(Vec.newKey());
      NewChunk nc=new NewChunk(av,0);
      int len=(int)n + 1;
      for (int r=0; r < len; r++)       nc.addNum(_from + r * _by);
      nc.close(0,fs);
      Vec vec=av.close(fs);
      fs.blockForPending();
      Frame fr=new Frame(new String[]{"C1"},new Vec[]{vec});
      env.push(new ValFrame(fr));
    }
  }
}
