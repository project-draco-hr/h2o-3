{
  final long seed=_seed == -1 ? (new Random().nextLong()) : _seed;
  Frame fr=env.pop0Ary();
  long[] espc=fr.anyVec().espc();
  long rem=fr.numRows();
  if (rem > espc[espc.length - 1])   throw H2O.unimpl();
  for (int i=0; i < espc.length; ++i) {
    if (rem <= espc[i]) {
      espc=Arrays.copyOf(espc,i + 1);
      break;
    }
  }
  espc[espc.length - 1]=rem;
  Vec randVec=new Vec(fr.anyVec().group().addVecs(1)[0],espc);
  Futures fs=new Futures();
  DKV.put(randVec._key,randVec,fs);
  for (int i=0; i < espc.length - 1; ++i)   DKV.put(randVec.chunkKey(i),new C0DChunk(0,(int)(espc[i + 1] - espc[i])),fs);
  fs.blockForPending();
  new MRTask(){
    @Override public void map(    Chunk c){
      Random rng=new Random(seed * c.cidx());
      for (int i=0; i < c.len(); ++i)       c.set0(i,(float)rng.nextDouble());
    }
  }
.doAll(randVec);
  Frame f=new Frame(new String[]{"rnd"},new Vec[]{randVec});
  env.cleanup(fr);
  env.push(new ValFrame(f));
}
