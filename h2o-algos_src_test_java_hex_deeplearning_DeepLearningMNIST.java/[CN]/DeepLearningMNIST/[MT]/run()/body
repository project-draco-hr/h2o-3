{
  Scope.enter();
  Frame frame=null;
  Frame vframe=null;
  try {
    File file=find_test_file("bigdata/laptop/mnist/train.csv.gz");
    File valid=find_test_file("bigdata/laptop/mnist/test.csv.gz");
    if (file != null) {
      NFSFileVec trainfv=NFSFileVec.make(file);
      frame=ParseDataset.parse(Key.make(),trainfv._key);
      NFSFileVec validfv=NFSFileVec.make(valid);
      vframe=ParseDataset.parse(Key.make(),validfv._key);
      DeepLearningParameters p=new DeepLearningParameters();
      p._train=frame._key;
      p._valid=vframe._key;
      p._response_column="C785";
      p._activation=DeepLearningParameters.Activation.RectifierWithDropout;
      p._hidden=new int[]{128,128,128};
      p._input_dropout_ratio=0.0;
      p._score_training_samples=0;
      p._adaptive_rate=false;
      p._rate=0.005;
      p._rate_annealing=0;
      p._momentum_start=0;
      p._momentum_stable=0;
      p._mini_batch_size=1;
      p._train_samples_per_iteration=-1;
      p._shuffle_training_data=true;
      p._max_w2=1;
      p._epochs=20;
      p._sparse=true;
      int ci=frame.find("C785");
      Scope.track(frame.replace(ci,frame.vecs()[ci].toCategoricalVec()));
      Scope.track(vframe.replace(ci,vframe.vecs()[ci].toCategoricalVec()));
      DKV.put(frame);
      DKV.put(vframe);
      p._replicate_training_data=true;
      p._overwrite_with_best_model=true;
      p._classification_stop=-1;
      p._score_training_samples=10000;
      DeepLearning dl=new DeepLearning(p,Key.<DeepLearningModel>make("dl_mnist_model"));
      DeepLearningModel model=dl.trainModel().get();
      if (model != null)       model.delete();
    }
 else {
      Log.info("Please run ./gradlew syncBigDataLaptop in the top-level directory of h2o-3.");
    }
  }
  finally {
    Scope.exit();
    if (vframe != null)     vframe.remove();
    if (frame != null)     frame.remove();
  }
}
