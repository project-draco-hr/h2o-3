def test_GBMGrid_basic_many(self):
    trainFilename = 'prostate.csv'
    train_key = 'prostate.hex'
    timeoutSecs = 300
    csvPathname = ('logreg/' + trainFilename)
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=train_key, schema='put')
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    labelListUsed = list(labelList)
    numColsUsed = numCols
    parameters = {'validation_frame': train_key, 'ignored_columns': "['ID']", 'response_column': 'CAPSULE', 'ntrees': 8, 'max_depth': 8, 'min_rows': 1, 'nbins': 40, 'learn_rate': 0.1, }
    jobs = []
    start = time.time()
    totalGBMGridJobs = 0
    for i in range(5):
        modelKey = ('GBMGrid_prostate_%s', i)
        bmResult = h2o.n0.build_model(algo='gbm', model_id=modelKey, training_frame=parse_key, parameters=parameters, timeoutSecs=60)
        bm = OutputObj(bmResult, 'bm')
        print 'GBMResult:', h2o.dump_json(bm)
        job_key = bm.jobs[0].key.name
        model_key = bm.jobs[0].dest.name
        jobs.append((job_key, model_key))
        totalGBMGridJobs += 1
    h2o_jobs.pollWaitJobs(timeoutSecs=300)
    elapsed = (time.time() - start)
    print 'All GBM jobs completed in', elapsed, 'seconds.'
    print 'totalGBMGridJobs:', totalGBMGridJobs
    for (job_key, model_key) in jobs:
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        print '\nLook!, can use dot notation: cmm.cm.confusion.matrix', cmm.cm.confusion_matrix, '\n'
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mmResultShort = mmResult['model_metrics'][0]
        del mmResultShort['frame']
        mm = OutputObj(mmResultShort, 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
