{
  Frame l=env.popAry();
  System.out.println(l);
  Frame r=env.popAry();
  System.out.println(r);
  System.out.println(_allLeft + " " + _allRite);
  int ncols=0;
  for (int i=0; i < l._names.length; i++) {
    int idx=r.find(l._names[i]);
    if (idx != -1) {
      l.swap(i,ncols);
      r.swap(idx,ncols);
      Vec lv=l.vecs()[ncols];
      Vec rv=r.vecs()[ncols];
      if (lv.get_type() != rv.get_type())       throw new IllegalArgumentException("Merging columns must be the same type, column " + l._names[ncols] + " found types "+ lv.get_type_str()+ " and "+ rv.get_type_str());
      if (lv.isString())       throw new IllegalArgumentException("Cannot merge Strings; flip toEnum first");
      ncols++;
    }
  }
  if (ncols == 0)   throw new IllegalArgumentException("Frames must have at least one column in common to merge them");
  long lsize=0, rsize=0;
  for (int i=ncols; i < l.numCols(); i++)   lsize+=l.vecs()[i].byteSize();
  for (int i=ncols; i < r.numCols(); i++)   rsize+=r.vecs()[i].byteSize();
  Frame small=lsize < rsize ? l : r;
  Frame large=lsize < rsize ? r : l;
  int[][] enum_maps=new int[ncols][];
  int[][] id_maps=new int[ncols][];
  for (int i=0; i < ncols; i++) {
    Vec lv=large.vecs()[i];
    if (lv.isEnum()) {
      EnumWrappedVec ewv=new EnumWrappedVec(lv.domain(),small.vecs()[i].domain());
      int[] ids=enum_maps[i]=ewv.enum_map();
      DKV.remove(ewv._key);
      id_maps[i]=new int[ids.length];
      for (int j=0; j < ids.length; j++)       id_maps[i][j]=j;
    }
  }
  Key uniq=new MergeSet(ncols,id_maps,small).doAllNodes()._uniq;
  new DoJoin(ncols,uniq,enum_maps).doAll(small.numCols() - ncols,large);
  throw H2O.unimpl();
}
