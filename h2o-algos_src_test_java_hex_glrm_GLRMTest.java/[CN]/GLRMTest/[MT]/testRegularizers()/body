{
  Frame init=ArrayUtils.frame(ard(ard(13.2,236,58,21.2),ard(10.0,263,48,44.5),ard(8.1,294,80,31.0),ard(8.8,190,50,19.5)));
  GLRM job=null;
  GLRMModel model=null;
  Frame train=null;
  long seed=1234;
  try {
    Scope.enter();
    train=parse_test_file(Key.make("arrests.hex"),"smalldata/pca_test/USArrests.csv");
    GLRMParameters parms=new GLRMParameters();
    parms._train=train._key;
    parms._k=4;
    parms._init=GLRM.Initialization.User;
    parms._user_y=init._key;
    parms._transform=DataInfo.TransformType.NONE;
    parms._recover_svd=false;
    parms._max_iterations=1000;
    parms._seed=seed;
    Log.info("\nNon-negative matrix factorization");
    parms._gamma_x=parms._gamma_y=1;
    parms._regularization_x=GLRMParameters.Regularizer.NonNegative;
    parms._regularization_y=GLRMParameters.Regularizer.NonNegative;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes:\n" + model._output._archetypes.toString());
      model.score(train).delete();
      ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
  finally {
      if (model != null)       model.delete();
    }
    Log.info("\nOrthogonal non-negative matrix factorization");
    parms._gamma_x=parms._gamma_y=1;
    parms._regularization_x=GLRMParameters.Regularizer.OneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.NonNegative;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes:\n" + model._output._archetypes.toString());
      model.score(train).delete();
      ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
  finally {
      if (model != null)       model.delete();
    }
    Log.info("\nQuadratic clustering (k-means)");
    parms._gamma_x=1;
    parms._gamma_y=0;
    parms._regularization_x=GLRMParameters.Regularizer.UnitOneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.None;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes:\n" + model._output._archetypes.toString());
      model.score(train).delete();
      ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
  finally {
      if (model != null)       model.delete();
    }
    Log.info("\nQuadratic mixture (soft k-means)");
    parms._gamma_x=1;
    parms._gamma_y=0;
    parms._regularization_x=GLRMParameters.Regularizer.UnitOneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.None;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes:\n" + model._output._archetypes.toString());
      model.score(train).delete();
      ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
  finally {
      if (model != null)       model.delete();
    }
  }
  finally {
    init.delete();
    if (train != null)     train.delete();
    Scope.exit();
  }
}
