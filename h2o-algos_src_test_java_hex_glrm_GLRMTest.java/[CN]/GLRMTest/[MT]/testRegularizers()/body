{
  Frame init=frame(ard(ard(13.2,236,58,21.2),ard(10.0,263,48,44.5),ard(8.1,294,80,31.0),ard(8.8,190,50,19.5)));
  GLRM job=null;
  GLRMModel model=null;
  Frame train=null, score=null;
  long seed=1234;
  try {
    train=parse_test_file(Key.make("arrests.hex"),"smalldata/pca_test/USArrests.csv");
    GLRMParameters parms=new GLRMParameters();
    parms._train=train._key;
    parms._k=4;
    parms._init=GLRM.Initialization.User;
    parms._user_points=init._key;
    parms._transform=DataInfo.TransformType.NONE;
    parms._recover_svd=false;
    parms._max_iterations=1000;
    parms._seed=seed;
    Log.info("\nNon-negative matrix factorization");
    parms._gamma_x=parms._gamma_y=1;
    parms._regularization_x=GLRMParameters.Regularizer.NonNegative;
    parms._regularization_y=GLRMParameters.Regularizer.NonNegative;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes (Y'):\n" + ArrayUtils.pprint(model._output._archetypes));
      score=model.score(train);
      ModelMetricsGLRM mm=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
      if (score != null)       score.delete();
      if (model != null) {
        model._parms._loading_key.get().delete();
        model.delete();
      }
    }
    Log.info("\nOrthogonal non-negative matrix factorization");
    parms._gamma_x=parms._gamma_y=1;
    parms._regularization_x=GLRMParameters.Regularizer.OneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.NonNegative;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes (Y'):\n" + ArrayUtils.pprint(model._output._archetypes));
      score=model.score(train);
      ModelMetricsGLRM mm=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
      if (score != null)       score.delete();
      if (model != null) {
        model._parms._loading_key.get().delete();
        model.delete();
      }
    }
    Log.info("\nQuadratic clustering (k-means)");
    parms._gamma_x=1;
    parms._gamma_y=0;
    parms._regularization_x=GLRMParameters.Regularizer.UnitOneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.None;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes (Y'):\n" + ArrayUtils.pprint(model._output._archetypes));
      score=model.score(train);
      ModelMetricsGLRM mm=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
      if (score != null)       score.delete();
      if (model != null) {
        model._parms._loading_key.get().delete();
        model.delete();
      }
    }
    Log.info("\nQuadratic mixture (soft k-means)");
    parms._gamma_x=1;
    parms._gamma_y=0;
    parms._regularization_x=GLRMParameters.Regularizer.UnitOneSparse;
    parms._regularization_y=GLRMParameters.Regularizer.None;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      Log.info("Archetypes (Y'):\n" + ArrayUtils.pprint(model._output._archetypes));
      score=model.score(train);
      ModelMetricsGLRM mm=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
      if (score != null)       score.delete();
      if (model != null) {
        model._parms._loading_key.get().delete();
        model.delete();
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    init.delete();
    if (train != null)     train.delete();
  }
}
