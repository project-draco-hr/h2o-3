{
  Frame yinit=ArrayUtils.frame(ard(ard(1.24256408,0.7828393,-0.5209066,-0.003416473),ard(0.50786248,1.1068225,-1.2117642,2.484202941),ard(0.07163341,1.4788032,0.9989801,1.042878388),ard(0.23234938,0.2308680,-1.0735927,-0.184916602)));
  double[] sval=new double[]{11.024148,6.964086,4.179904,2.915146};
  double[][] eigvec=ard(ard(-0.5358995,0.4181809,-0.3412327,0.64922780),ard(-0.5831836,0.1879856,-0.2681484,-0.74340748),ard(-0.2781909,-0.8728062,-0.3780158,0.13387773),ard(-0.5434321,-0.1673186,0.8177779,0.08902432));
  GLRMModel model=null;
  Frame train=null;
  try {
    train=parse_test_file(Key.make("arrests.hex"),"smalldata/pca_test/USArrests.csv");
    GLRMParameters parms=new GLRMParameters();
    parms._train=train._key;
    parms._k=4;
    parms._transform=DataInfo.TransformType.STANDARDIZE;
    parms._init=GLRM.Initialization.User;
    parms._user_y=yinit._key;
    parms._max_iterations=1000;
    parms._min_step_size=1e-8;
    parms._recover_svd=true;
    GLRM job=new GLRM(parms);
    model=job.trainModel().get();
    Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
    model.score(train).delete();
    ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
    Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    Assert.assertEquals(model._output._objective,mm._numerr,TOLERANCE);
  }
  finally {
    yinit.delete();
    if (train != null)     train.delete();
    if (model != null)     model.delete();
  }
}
