u'\nCollection of methods for communication with H2O servers.\n\n`H2OConnection` is the main class of this module, and it handles the connection itself:\n    hc = H2OConnection.open() : open a new connection\n    hc.request(endpoint, [data|json|filename]) : make a REST API request to the server\n    hc.info() : return information about the current connection\n    hc.close() : close the connection\n    hc.session_id : current session id\n\n`H2OLocalServer` allows to start H2O servers on your local machine:\n    hs = H2OLocalServer.start() : start a new local server\n    hs.is_running() : check if the server is running\n    hs.shutdown() : shut down the server\n\n:copyright: (c) 2016 H2O.ai\n:license:   Apache License Version 2.0 (see LICENSE for details)\n'
from __future__ import absolute_import, division, print_function, unicode_literals
import atexit
import os
import subprocess
import sys
import tempfile
import time
from random import choice
from sysconfig import get_config_var
from warnings import warn
import requests
from requests.auth import AuthBase
from ..schemas.cloud import H2OCluster
from ..schemas.error import H2OErrorV3, H2OModelBuilderErrorV3
from ..two_dim_table import H2OTwoDimTable
from ..utils.backward_compatibility import backwards_compatible, CallableString
from ..utils.compatibility import *
from ..utils.shared_utils import stringify_list
__all__ = (u'H2OConnection', u'H2OLocalServer', u'H2OStartupError', u'H2OConnectionError', u'H2OServerError', u'H2OResponseError')
(JSONDecodeError, _r) = (None, None)
try:
    _r = requests.Response()
    _r._content = 'haha'
    _r.json()
except Exception as exc:
    JSONDecodeError = type(exc)
    del _r
__H2OCONN__ = H2OConnection()
__H2O_REST_API_VERSION__ = 3
