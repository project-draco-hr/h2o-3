u'\nClass for communication with an H2O server.\n\n`H2OConnection` is the main class of this module, and it handles the connection itself:\n    hc = H2OConnection.open() : open a new connection\n    hc.request(endpoint, [data|json|filename]) : make a REST API request to the server\n    hc.info() : return information about the current connection\n    hc.close() : close the connection\n    hc.session_id : current session id\n\n:copyright: (c) 2016 H2O.ai\n:license:   Apache License Version 2.0 (see LICENSE for details)\n'
from __future__ import absolute_import, division, print_function, unicode_literals
import atexit
import os
import sys
import tempfile
import time
from warnings import warn
import requests
from requests.auth import AuthBase
from h2o.backend import H2OCluster, H2OLocalServer
from h2o.exceptions import H2OConnectionError, H2OServerError, H2OResponseError, H2OValueError
from h2o.schemas.error import H2OErrorV3, H2OModelBuilderErrorV3
from h2o.two_dim_table import H2OTwoDimTable
from h2o.utils.backward_compatibility import backwards_compatible, CallableString
from h2o.utils.compatibility import *
from h2o.utils.shared_utils import stringify_list, print2
from h2o.utils.typechecks import assert_is_type, assert_matches, assert_satisfies, is_type, numeric
from h2o.model.metrics_base import H2ORegressionModelMetrics, H2OClusteringModelMetrics, H2OBinomialModelMetrics, H2OMultinomialModelMetrics, H2OAutoEncoderModelMetrics
__all__ = (u'H2OConnection',)
(JSONDecodeError, _r) = (None, None)
try:
    _r = requests.Response()
    _r._content = 'haha'
    _r.json()
except Exception as exc:
    JSONDecodeError = type(exc)
    del _r
__H2OCONN__ = H2OConnection()
__H2O_REST_API_VERSION__ = 3
