def request(self, endpoint, data=None, json=None, filename=None):
    u'\n        Perform a REST API request to the backend H2O server.\n\n        :param endpoint: (str) The endpoint\'s URL, for example "GET /4/schemas/KeyV4"\n        :param data: data payload for POST (and sometimes GET) requests. This should be a dictionary of simple\n            key/value pairs (values can also be arrays), which will be sent over in x-www-form-encoded format.\n        :param json: also data payload, but it will be sent as a JSON body. Cannot be used together with `data`.\n        :param filename: file to upload to the server. Cannot be used with `data` or `json`.\n\n        :returns: an H2OResponse object representing the server\'s response\n        :raises ValueError: if the endpoint\'s URL is invalid\n        :raises H2OConnectionError: if the H2O server cannot be reached (or connection is not initialized)\n        :raises H2OServerError: if there was a server error (http 500), or server returned malformed JSON\n        :raises H2OResponseError: if the server returned an H2OErrorV3 response (e.g. if the parameters were invalid)\n        '
    if (self._stage == 0):
        raise H2OConnectionError(u'Connection not initialized; run .connect() first.')
    if (self._stage == (-1)):
        raise H2OConnectionError(u'Connection was closed, and can no longer be used.')
    assert_is_type(endpoint, str)
    match = assert_matches(str(endpoint), u'^(GET|POST|PUT|DELETE|PATCH|HEAD) (/.*)$')
    method = match.group(1)
    urltail = match.group(2)
    url = (self._base_url + urltail)
    if (filename is not None):
        assert_is_type(filename, str)
        assert_is_type(json, None, u'Argument `json` should be None when `filename` is used.')
        assert_is_type(data, None, u'Argument `data` should be None when `filename` is used.')
        assert_satisfies(method, (method == u'POST'), (u'File uploads can only be done via POST method, got %s' % method))
    elif (data is not None):
        assert_is_type(data, dict)
        assert_is_type(json, None, u'Argument `json` should be None when `data` is used.')
    elif (json is not None):
        assert_is_type(json, dict)
    data = self._prepare_data_payload(data)
    files = self._prepare_file_payload(filename)
    params = None
    if ((method == u'GET') and data):
        params = data
        data = None
    start_time = time.time()
    try:
        self._log_start_transaction(endpoint, data, json, files, params)
        headers = {u'User-Agent': (u'H2O Python client/' + sys.version.replace(u'\n', u'')), u'X-Cluster': self._cluster_name, }
        resp = requests.request(method=method, url=url, data=data, json=json, files=files, params=params, headers=headers, timeout=self._timeout, auth=self._auth, verify=self._verify_ssl_cert, proxies=self._proxies)
        self._log_end_transaction(start_time, resp)
        return self._process_response(resp)
    except (requests.exceptions.ConnectionError, requests.exceptions.HTTPError) as e:
        if (self._local_server and (not self._local_server.is_running())):
            self._log_end_exception(u'Local server has died.')
            raise H2OConnectionError(u'Local server has died unexpectedly. RIP.')
        else:
            self._log_end_exception(e)
            raise H2OConnectionError((u'Unexpected HTTP error: %s' % e))
    except requests.exceptions.Timeout as e:
        self._log_end_exception(e)
        elapsed_time = (time.time() - start_time)
        raise H2OConnectionError((u'Timeout after %.3fs' % elapsed_time))
    except H2OResponseError as e:
        err = e.args[0]
        err.endpoint = endpoint
        err.payload = (data, json, files, params)
        raise
