@staticmethod
def open(server=None, url=None, ip=None, port=None, https=None, auth=None, verify_ssl_certificates=True, proxy=None, cluster_name=None, verbose=True):
    u'\n        Establish connection to an existing H2O server.\n\n        The connection is not kept alive, so what this method actually does is it attempts to connect to the\n        specified server, and checks that the server is healthy and responds to REST API requests. If the H2O server\n        cannot be reached, an :class:`H2OConnectionError` will be raised. On success this method returns a new\n        :class:`H2OConnection` object, and it is the only "official" way to create instances of this class.\n\n        There are 3 ways to specify the target to connect to (these settings are mutually exclusive):\n\n            * pass a ``server`` option,\n            * pass the full ``url`` for the connection,\n            * provide a triple of parameters ``ip``, ``port``, ``https``.\n\n        :param H2OLocalServer server: connect to the specified local server instance. There is a slight difference\n            between connecting to a local server by specifying its ip and address, and connecting through\n            an H2OLocalServer instance: if the server becomes unresponsive, then having access to its process handle\n            will allow us to query the server status through OS, and potentially provide snapshot of the server\'s\n            error log in the exception information.\n        :param url: full url of the server to connect to.\n        :param ip: target server\'s IP address or hostname (default "localhost").\n        :param port: H2O server\'s port (default 54321).\n        :param https: if True then connect using https instead of http (default False).\n        :param verify_ssl_certificates: if False then SSL certificate checking will be disabled (default True). This\n            setting should rarely be disabled, as it makes your connection vulnerable to man-in-the-middle attacks. When\n            used, it will generate a warning from the requests library. Has no effect when ``https`` is False.\n        :param auth: authentication token for connecting to the remote server. This can be either a\n            (username, password) tuple, or an authenticator (AuthBase) object. Please refer to the documentation in\n            the ``requests.auth`` module.\n        :param proxy: url address of a proxy server. If you do not specify the proxy, then the requests module\n            will attempt to use a proxy specified in the environment (in HTTP_PROXY / HTTPS_PROXY variables). We\n            check for the presence of these variables and issue a warning if they are found. In order to suppress\n            that warning and use proxy from the environment, pass ``proxy="(default)"``.\n        :param cluster_name: name of the H2O cluster to connect to. This option is used from Steam only.\n        :param verbose: if True, then connection progress info will be printed to the stdout.\n\n        :returns: A new :class:`H2OConnection` instance.\n        :raises H2OConnectionError: if the server cannot be reached.\n        :raises H2OServerError: if the server is in an unhealthy state (although this might be a recoverable error, the\n            client itself should decide whether it wants to retry or not).\n        '
    if (server is not None):
        assert_is_type(server, H2OLocalServer)
        assert_is_type(ip, None, u'`ip` should be None when `server` parameter is supplied')
        assert_is_type(url, None, u'`ip` should be None when `server` parameter is supplied')
        if (not server.is_running()):
            raise H2OConnectionError(u'Unable to connect to server which is not running')
        ip = server.ip
        port = server.port
        scheme = server.scheme
    elif (url is not None):
        assert_is_type(url, str)
        assert_is_type(ip, None, u'`ip` should be None when `url` parameter is supplied')
        parts = url.rstrip(u'/').split(u':')
        assert ((len(parts) == 3) and (parts[0] in {u'http', u'https'}) and parts[2].isdigit()), (u"Invalid URL parameter '%s'" % url)
        scheme = parts[0]
        ip = parts[1][2:]
        port = int(parts[2])
    else:
        if (ip is None):
            ip = str(u'localhost')
        if (port is None):
            port = 54321
        if (https is None):
            https = False
        if (is_str(port) and port.isdigit()):
            port = int(port)
        assert_is_type(ip, str)
        assert_is_type(port, int)
        assert_is_type(https, bool)
        assert (1 <= port <= 65535), (u'Invalid `port` number: %d' % port)
        scheme = (u'https' if https else u'http')
    if (verify_ssl_certificates is None):
        verify_ssl_certificates = True
    assert_is_type(verify_ssl_certificates, bool)
    assert_is_type(proxy, (str, None))
    assert ((auth is None) or (isinstance(auth, tuple) and (len(auth) == 2)) or isinstance(auth, AuthBase)), (u'Invalid authentication token of type %s' % type(auth))
    assert_is_type(cluster_name, (str, None))
    conn = H2OConnection()
    conn._verbose = bool(verbose)
    conn._local_server = server
    conn._base_url = (u'%s://%s:%d' % (scheme, ip, port))
    conn._verify_ssl_cert = bool(verify_ssl_certificates)
    conn._auth = auth
    conn._cluster_name = cluster_name
    conn._proxies = None
    if (proxy and (proxy != u'(default)')):
        conn._proxies = {scheme: proxy, }
    elif (not proxy):
        for name in os.environ:
            if (name.lower() == (scheme + u'_proxy')):
                warn((u'Proxy is defined in the environment: %s. This may interfere with your H2O Connection.' % os.environ[name]))
    try:
        retries = (20 if server else 5)
        conn._stage = 1
        conn._timeout = 3.0
        conn._cluster_info = conn._test_connection(retries)
        conn._timeout = None
        atexit.register((lambda : conn.close()))
    except:
        conn._stage = 0
        raise
    return conn
