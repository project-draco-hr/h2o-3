@staticmethod
def _process_response(response, save_to):
    u'\n        Given a response object, prepare it to be handed over to the external caller.\n\n        Preparation steps include:\n           * detect if the response has error status, and convert it to an appropriate exception;\n           * detect Content-Type, and based on that either parse the response as JSON or return as plain text.\n        '
    status_code = response.status_code
    if ((status_code == 200) and save_to):
        if (os.path.isdir(save_to) or save_to.endswith(os.path.sep)):
            dirname = os.path.abspath(save_to)
            filename = H2OConnection._find_file_name(response)
        else:
            (dirname, filename) = os.path.split(os.path.abspath(save_to))
        fullname = os.path.join(dirname, filename)
        try:
            if (not os.path.exists(dirname)):
                os.makedirs(dirname)
            with open(fullname, u'wb') as f:
                for chunk in response.iter_content(chunk_size=65536):
                    if chunk:
                        f.write(chunk)
        except OSError as e:
            raise H2OValueError((u'Cannot write to file %s: %s' % (fullname, e)))
        return fullname
    content_type = response.headers.get(u'Content-Type', u'')
    if (u';' in content_type):
        content_type = content_type[:content_type.index(u';')]
    if (content_type == u'application/json'):
        try:
            data = response.json(object_pairs_hook=H2OResponse)
        except (JSONDecodeError, requests.exceptions.ContentDecodingError) as e:
            raise H2OServerError((u'Malformed JSON from server (%s):\n%s' % (str(e), response.text)))
    else:
        data = response.text
    if (status_code in {200, 201, 202, 204}):
        return data
    if ((status_code in {400, 404, 412}) and isinstance(data, (H2OErrorV3, H2OModelBuilderErrorV3))):
        raise H2OResponseError(data)
    raise H2OServerError((u'HTTP %d %s:\n%r' % (status_code, response.reason, data)))
