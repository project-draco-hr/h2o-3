def __new__(cls, keyvals):
    schema = None
    for (k, v) in keyvals:
        if ((k == u'__meta') and isinstance(v, dict)):
            schema = v[u'schema_name']
            break
        if ((k == u'__schema') and is_str(v)):
            schema = v
            break
    if (schema == u'CloudV3'):
        return H2OCluster.from_kvs(keyvals)
    if (schema == u'H2OErrorV3'):
        return H2OErrorV3(keyvals)
    if (schema == u'H2OModelBuilderErrorV3'):
        return H2OModelBuilderErrorV3(keyvals)
    if (schema == u'TwoDimTableV3'):
        return H2OTwoDimTable.make(keyvals)
    if (schema == u'ModelMetricsRegressionV3'):
        return H2ORegressionModelMetrics.make(keyvals)
    if (schema == u'ModelMetricsClusteringV3'):
        return H2OClusteringModelMetrics.make(keyvals)
    if (schema == u'ModelMetricsBinomialV3'):
        return H2OBinomialModelMetrics.make(keyvals)
    if (schema == u'ModelMetricsMultinomialV3'):
        return H2OMultinomialModelMetrics.make(keyvals)
    if (schema == u'ModelMetricsAutoEncoderV3'):
        return H2OAutoEncoderModelMetrics.make(keyvals)
    return super(H2OResponse, cls).__new__(cls, keyvals)
