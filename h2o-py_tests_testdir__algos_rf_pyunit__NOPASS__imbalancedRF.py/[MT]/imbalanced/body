def imbalanced(ip, port):
    h2o.init(ip, port)
    covtype = h2o.import_frame(path=h2o.locate('smalldata/covtype/covtype.20k.data'))
    covtype[54] = covtype[54].asfactor()
    imbalanced = h2o.random_forest(x=covtype[0:54], y=covtype[54], ntrees=50, balance_classes=False, nfolds=10)
    imbalanced_perf = imbalanced.model_performance(covtype)
    imbalanced_perf.show()
    balanced = h2o.random_forest(x=covtype[0:54], y=covtype[54], ntrees=50, balance_classes=True, nfolds=10)
    balanced_perf = balanced.model_performance(covtype)
    balanced_perf.show()
    class_6_err_imbalanced = imbalanced_perf.error()[6]
    class_6_err_balanced = balanced_perf.error()[6]
    if (class_6_err_imbalanced < class_6_err_balanced):
        print '--------------------'
        print ''
        print 'FAIL, balanced error greater than imbalanced error'
        print ''
        print ''
        print 'class_6_err_imbalanced'
        print class_6_err_imbalanced
        print ''
        print 'class_6_err_balanced'
        print class_6_err_balanced
        print ''
        print '--------------------'
    assert (class_6_err_imbalanced >= (0.9 * class_6_err_balanced)), 'balance_classes makes it at least 10% worse!'
