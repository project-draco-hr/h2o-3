{
  if (null == dest || null == origin)   return;
  Field[] dest_fields=Weaver.getWovenFields(dest.getClass());
  Field[] orig_fields=Weaver.getWovenFields(origin.getClass());
  for (  Field orig_field : orig_fields) {
    String origin_name=orig_field.getName();
    String dest_name=field_naming.toDest(origin_name);
    if (skip_fields != null && (ArrayUtils.contains(skip_fields,origin_name) || ArrayUtils.contains(skip_fields,dest_name)))     continue;
    if (only_fields != null && !(ArrayUtils.contains(only_fields,origin_name) || ArrayUtils.contains(only_fields,dest_name)))     continue;
    try {
      Field dest_field=null;
      for (      Field fd : dest_fields) {
        if (fd.getName().equals(dest_name)) {
          dest_field=fd;
          break;
        }
      }
      if (dest_field != null) {
        dest_field.setAccessible(true);
        orig_field.setAccessible(true);
        if (null == orig_field.get(origin)) {
          dest_field.set(dest,null);
        }
 else         if (dest_field.getType().isArray() && orig_field.getType().isArray() && (dest_field.getType().getComponentType() != orig_field.getType().getComponentType())) {
          if (dest_field.getType().getComponentType() == double.class && orig_field.getType().getComponentType() == Double.class) {
            double[] copy=(double[])orig_field.get(origin);
            dest_field.set(dest,copy);
          }
 else           if (dest_field.getType().getComponentType() == Double.class && orig_field.getType().getComponentType() == double.class) {
            Double[] copy=(Double[])orig_field.get(origin);
            dest_field.set(dest,copy);
          }
 else           if (dest_field.getType().getComponentType() == int.class && orig_field.getType().getComponentType() == Integer.class) {
            int[] copy=(int[])orig_field.get(origin);
            dest_field.set(dest,copy);
          }
 else           if (dest_field.getType().getComponentType() == Integer.class && orig_field.getType().getComponentType() == int.class) {
            Integer[] copy=(Integer[])orig_field.get(origin);
            dest_field.set(dest,copy);
          }
 else           if (Schema.class.isAssignableFrom(dest_field.getType().getComponentType()) && (Schema.getImplClass((Class<? extends Schema>)dest_field.getType().getComponentType())).isAssignableFrom(orig_field.getType().getComponentType())) {
            Class dest_component_class=dest_field.getType().getComponentType();
            Iced[] orig_array=(Iced[])orig_field.get(origin);
            int length=orig_array.length;
            Iced[] orig_array_copy=Arrays.copyOf(orig_array,length);
            Schema[] translation=(Schema[])Array.newInstance(dest_component_class,length);
            int version=((Schema)dest).getSchemaVersion();
            for (int i=0; i < length; i++) {
              Iced impl=orig_array_copy[i];
              if (null == impl) {
                translation[i++]=null;
              }
 else {
                Schema s=null;
                try {
                  s=SchemaServer.schema(version,impl);
                }
 catch (                H2ONotFoundArgumentException e) {
                  s=((Schema)dest_field.getType().getComponentType().newInstance());
                }
                translation[i]=s.fillFromImpl(impl);
              }
            }
            dest_field.set(dest,translation);
          }
 else           if (Schema.class.isAssignableFrom(orig_field.getType().getComponentType()) && Iced.class.isAssignableFrom(dest_field.getType().getComponentType())) {
            Class dest_component_class=dest_field.getType().getComponentType();
            Schema[] orig_array=(Schema[])orig_field.get(origin);
            int length=orig_array.length;
            Schema[] orig_array_copy=Arrays.copyOf(orig_array,length);
            Iced[] translation=(Iced[])Array.newInstance(dest_component_class,length);
            for (int i=0; i < length; i++) {
              Schema s=orig_array_copy[i];
              translation[i]=s == null ? null : s.createAndFillImpl();
            }
            dest_field.set(dest,translation);
          }
 else {
            throw H2O.fail("Don't know how to cast an array of: " + orig_field.getType().getComponentType() + " to an array of: "+ dest_field.getType().getComponentType());
          }
        }
 else         if (dest_field.getType() == Key.class && Keyed.class.isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,((Keyed)orig_field.get(origin))._key);
        }
 else         if (orig_field.getType() == Key.class && Keyed.class.isAssignableFrom(dest_field.getType())) {
          Value v=DKV.get((Key)orig_field.get(origin));
          dest_field.set(dest,(null == v ? null : v.get()));
        }
 else         if (KeyV3.class.isAssignableFrom(dest_field.getType()) && Keyed.class.isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,KeyV3.make(((Class<? extends KeyV3>)dest_field.getType()),((Keyed)orig_field.get(origin))._key));
        }
 else         if (KeyV3.class.isAssignableFrom(orig_field.getType()) && Keyed.class.isAssignableFrom(dest_field.getType())) {
          KeyV3 k=(KeyV3)orig_field.get(origin);
          Value v=DKV.get(Key.make(k.name));
          dest_field.set(dest,(null == v ? null : v.get()));
        }
 else         if (KeyV3.class.isAssignableFrom(dest_field.getType()) && Key.class.isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,KeyV3.make(((Class<? extends KeyV3>)dest_field.getType()),(Key)orig_field.get(origin)));
        }
 else         if (KeyV3.class.isAssignableFrom(orig_field.getType()) && Key.class.isAssignableFrom(dest_field.getType())) {
          KeyV3 k=(KeyV3)orig_field.get(origin);
          dest_field.set(dest,(null == k.name ? null : Key.make(k.name)));
        }
 else         if (dest_field.getType() == Pattern.class && String.class.isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,Pattern.compile((String)orig_field.get(origin)));
        }
 else         if (orig_field.getType() == Pattern.class && String.class.isAssignableFrom(dest_field.getType())) {
          dest_field.set(dest,orig_field.get(origin).toString());
        }
 else         if (dest_field.getType() == FrameV3.ColSpecifierV3.class && String.class.isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,new FrameV3.ColSpecifierV3((String)orig_field.get(origin)));
        }
 else         if (orig_field.getType() == FrameV3.ColSpecifierV3.class && String.class.isAssignableFrom(dest_field.getType())) {
          dest_field.set(dest,((FrameV3.ColSpecifierV3)orig_field.get(origin)).column_name);
        }
 else         if (Enum.class.isAssignableFrom(dest_field.getType()) && String.class.isAssignableFrom(orig_field.getType())) {
          Class<Enum> dest_class=(Class<Enum>)dest_field.getType();
          dest_field.set(dest,Enum.valueOf(dest_class,(String)orig_field.get(origin)));
        }
 else         if (Enum.class.isAssignableFrom(orig_field.getType()) && String.class.isAssignableFrom(dest_field.getType())) {
          Object o=orig_field.get(origin);
          dest_field.set(dest,(o == null ? null : o.toString()));
        }
 else         if (Schema.class.isAssignableFrom(dest_field.getType()) && Schema.getImplClass((Class<? extends Schema>)dest_field.getType()).isAssignableFrom(orig_field.getType())) {
          dest_field.set(dest,SchemaServer.schema(3,(Class<? extends Iced>)orig_field.get(origin).getClass()).fillFromImpl((Iced)orig_field.get(origin)));
        }
 else         if (Schema.class.isAssignableFrom(orig_field.getType()) && Schema.getImplClass((Class<? extends Schema>)orig_field.getType()).isAssignableFrom(dest_field.getType())) {
          Schema s=((Schema)orig_field.get(origin));
          dest_field.set(dest,s.fillImpl(s.createImpl()));
        }
 else         if ((Schema.class.isAssignableFrom(dest_field.getType()) && Key.class.isAssignableFrom(orig_field.getType()))) {
          Key origin_key=(Key)orig_field.get(origin);
          Value v=DKV.get(origin_key);
          if (null == v || null == v.get()) {
            dest_field.set(dest,null);
          }
 else {
            if (((Schema)dest_field.get(dest)).getImplClass().isAssignableFrom(v.get().getClass())) {
              Schema s=((Schema)dest_field.get(dest));
              dest_field.set(dest,SchemaServer.schema(s.getSchemaVersion(),s.getImplClass()).fillFromImpl(v.get()));
            }
 else {
              Log.err("Can't fill Schema of type: " + dest_field.getType() + " with value of type: "+ v.getClass()+ " fetched from Key: "+ origin_key);
              dest_field.set(dest,null);
            }
          }
        }
 else         if (Schema.class.isAssignableFrom(orig_field.getType()) && Keyed.class.isAssignableFrom(dest_field.getType())) {
          Schema s=((Schema)orig_field.get(origin));
          dest_field.set(dest,((Keyed)s.fillImpl(s.createImpl()))._key);
        }
 else {
          dest_field.set(dest,orig_field.get(origin));
        }
      }
    }
 catch (    IllegalAccessException e) {
      Log.err("Illegal access exception trying to copy field: " + origin_name + " of class: "+ origin.getClass()+ " to field: "+ dest_name+ " of class: "+ dest.getClass());
    }
catch (    InstantiationException e) {
      Log.err("Instantiation exception trying to copy field: " + origin_name + " of class: "+ origin.getClass()+ " to field: "+ dest_name+ " of class: "+ dest.getClass());
    }
catch (    Exception e) {
      Log.err(e.getClass().getCanonicalName() + " Exception: " + origin_name+ " of class: "+ origin.getClass()+ " to field: "+ dest_name+ " of class: "+ dest.getClass());
      throw e;
    }
  }
}
