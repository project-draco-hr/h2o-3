{
  if (null == excludes || "".equals(excludes))   return;
  if (null != includes)   throw new H2OIllegalArgumentException("_include_fields","filterFields",includes);
  String[] exclude_paths=excludes.split(",");
  for (  String path : exclude_paths) {
    int slash=path.indexOf("/");
    if (-1 == slash || slash == path.length()) {
      Field f=ReflectionUtils.findNamedField(o,path);
      if (null == f)       throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
      try {
        f.set(o,null);
      }
 catch (      IllegalAccessException e) {
        throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
      }
    }
 else {
      String first=path.substring(0,slash);
      String rest=path.substring(slash + 1);
      Field f=ReflectionUtils.findNamedField(o,first);
      if (null == f)       throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
      if (f.getType().isArray() && Object.class.isAssignableFrom(f.getType().getComponentType())) {
        try {
          Object[] field_value=(Object[])f.get(o);
          for (          Object child : field_value) {
            filterFields(child,null,rest);
          }
        }
 catch (        IllegalAccessException e) {
          throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
        }
      }
 else       if (Object.class.isAssignableFrom(f.getType())) {
        try {
          Object field_value=f.get(o);
          filterFields(field_value,null,rest);
        }
 catch (        IllegalAccessException e) {
          throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
        }
      }
 else {
        throw new H2OIllegalArgumentException("_exclude_fields","filterFields",path);
      }
    }
  }
}
