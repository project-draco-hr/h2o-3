{
  for (int l=0; l < 2; ++l) {
    NewChunk nc=new NewChunk(null,0);
    long[] man=new long[]{Integer.MIN_VALUE + 1,0,215,188001238,Integer.MAX_VALUE};
    int[] exp=new int[]{-9,1,-6,-8,-9};
    if (l == 1)     nc.addNA();
    for (int i=0; i < man.length; ++i)     nc.addNum(man[i],exp[i]);
    nc.addNA();
    Chunk cc=nc.compress();
    Assert.assertEquals(man.length + 1 + l,cc._len);
    Assert.assertTrue(cc instanceof C4SChunk);
    if (l == 1) {
      Assert.assertTrue(cc.isNA(0));
      Assert.assertTrue(cc.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc.atd(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc.atd(l + i)) < 1e-10);
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc.at_abs(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc.at_abs(l + i)) < 1e-10);
    }
    Assert.assertTrue(cc.isNA(man.length + l));
    Assert.assertTrue(cc.isNA_abs(man.length + l));
    nc=cc.inflate_impl(new NewChunk(null,0));
    nc.values(0,nc._len);
    Assert.assertEquals(man.length + 1 + l,nc._len);
    if (l == 1) {
      Assert.assertTrue(nc.isNA(0));
      Assert.assertTrue(nc.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + nc.atd(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - nc.atd(l + i)) < 1e-10);
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + nc.at_abs(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - nc.at_abs(l + i)) < 1e-10);
    }
    Assert.assertTrue(nc.isNA(man.length + l));
    Assert.assertTrue(nc.isNA_abs(man.length + l));
    Chunk cc2=nc.compress();
    Assert.assertEquals(man.length + 1 + l,cc._len);
    if (l == 1) {
      Assert.assertTrue(cc2.isNA(0));
      Assert.assertTrue(cc2.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc2.atd(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc2.atd(l + i)) < 1e-10);
      Assert.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc2.at_abs(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc2.at_abs(l + i)) < 1e-10);
    }
    Assert.assertTrue(cc2.isNA(man.length + l));
    Assert.assertTrue(cc2.isNA_abs(man.length + l));
    Assert.assertTrue(cc2 instanceof C4SChunk);
    Assert.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
