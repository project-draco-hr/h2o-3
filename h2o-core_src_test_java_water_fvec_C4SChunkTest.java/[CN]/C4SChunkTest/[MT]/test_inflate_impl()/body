{
  for (int l=0; l < 1; ++l) {
    NewChunk nc=new NewChunk(null,0);
    long[] man=new long[]{-2147483647,0,215,188001238,2147483647};
    int[] exp=new int[]{-9,1,-6,-8,-9};
    if (l == 1)     nc.addNA();
    for (int i=0; i < man.length; ++i)     nc.addNum(man[i],exp[i]);
    nc.addNA();
    Chunk cc=nc.compress();
    AssertJUnit.assertEquals(man.length + 1 + l,cc.len());
    AssertJUnit.assertTrue(cc instanceof C4SChunk);
    if (l == 1)     AssertJUnit.assertTrue(cc.isNA0(0));
    for (int i=0; i < man.length; ++i)     AssertJUnit.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc.at0(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc.at0(l + i)) < 1e-10);
    AssertJUnit.assertTrue(cc.isNA0(man.length + l));
    Chunk cc2=cc.inflate_impl(new NewChunk(null,0)).compress();
    AssertJUnit.assertEquals(man.length + 1 + l,cc.len());
    if (l == 1)     AssertJUnit.assertTrue(cc2.isNA0(0));
    for (int i=0; i < man.length; ++i)     AssertJUnit.assertTrue("Expected: " + man[i] * Math.pow(10,exp[i]) + ", but is " + cc2.at0(l + i),Math.abs((man[i] * Math.pow(10,exp[i])) - cc2.at0(l + i)) < 1e-10);
    AssertJUnit.assertTrue(cc2.isNA0(man.length + l));
    AssertJUnit.assertTrue(cc2 instanceof C4SChunk);
    AssertJUnit.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
