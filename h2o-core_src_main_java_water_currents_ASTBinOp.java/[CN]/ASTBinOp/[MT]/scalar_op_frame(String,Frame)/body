{
  Frame res=new MRTask(){
    @Override public void map(    Chunk[] chks,    NewChunk[] cress){
      ValueString vstr=new ValueString();
      for (int c=0; c < chks.length; c++) {
        Chunk chk=chks[c];
        NewChunk cres=cress[c];
        Vec vec=chk.vec();
        if (vec.isString()) {
          final ValueString conStr=new ValueString(str);
          for (int i=0; i < chk._len; i++)           cres.addNum(str_op(conStr,chk.atStr(vstr,i)));
        }
 else         if (vec.isEnum()) {
          final double d=(double)ArrayUtils.find(vec.domain(),str);
          for (int i=0; i < chk._len; i++)           cres.addNum(op(d,chk.atd(i)));
        }
 else {
        }
      }
    }
  }
.doAll(fr.numCols(),fr).outputFrame(fr._names,null);
  final Vec oldvecs[]=fr.vecs();
  final Vec newvecs[]=res.vecs();
  for (int i=0; i < oldvecs.length; i++)   if (!oldvecs[i].isString() && !oldvecs[i].isEnum())   newvecs[i]=newvecs[i].makeCon(Double.NaN);
  return new ValFrame(res);
}
