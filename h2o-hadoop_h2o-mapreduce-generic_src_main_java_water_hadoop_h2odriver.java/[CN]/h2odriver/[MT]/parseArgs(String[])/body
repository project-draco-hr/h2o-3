{
  int i=0;
  while (true) {
    if (i >= args.length) {
      break;
    }
    String s=args[i];
    if (s.equals("-h") || s.equals("help") || s.equals("-help")|| s.equals("--help")) {
      usage();
    }
 else     if (s.equals("-n") || s.equals("-nodes")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      numNodes=Integer.parseInt(args[i]);
    }
 else     if (s.equals("-o") || s.equals("-output")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      outputPath=args[i];
    }
 else     if (s.equals("-jobname")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      jobtrackerName=args[i];
    }
 else     if (s.equals("-mapperXmx")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      mapperXmx=args[i];
    }
 else     if (s.equals("-extramempercent")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      extraMemPercent=Integer.parseInt(args[i]);
    }
 else     if (s.equals("-mapperPermSize")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      mapperPermSize=args[i];
    }
 else     if (s.equals("-driverif")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      driverCallbackIp=args[i];
    }
 else     if (s.equals("-driverport")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      driverCallbackPort=Integer.parseInt(args[i]);
    }
 else     if (s.equals("-network")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      network=args[i];
    }
 else     if (s.equals("-timeout")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      cloudFormationTimeoutSeconds=Integer.parseInt(args[i]);
    }
 else     if (s.equals("-disown")) {
      disown=true;
    }
 else     if (s.equals("-notify")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      clusterReadyFileName=args[i];
    }
 else     if (s.equals("-nthreads")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      nthreads=Integer.parseInt(args[i]);
    }
 else     if (s.equals("-baseport")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      basePort=Integer.parseInt(args[i]);
      if ((basePort < 0) || (basePort > 65535)) {
        error("Base port must be between 1 and 65535");
      }
    }
 else     if (s.equals("-beta")) {
      beta=true;
    }
 else     if (s.equals("-random_udp_drop")) {
      enableRandomUdpDrop=true;
    }
 else     if (s.equals("-ea")) {
      enableExceptions=true;
    }
 else     if (s.equals("-verbose:gc")) {
      enableVerboseGC=true;
    }
 else     if (s.equals("-verbose:class")) {
      enableVerboseClass=true;
    }
 else     if (s.equals("-XX:+PrintCompilation")) {
      enablePrintCompilation=true;
    }
 else     if (s.equals("-exclude")) {
      enableExcludeMethods=true;
    }
 else     if (s.equals("-Dlog4j.defaultInitOverride=true")) {
      enableLog4jDefaultInitOverride=true;
    }
 else     if (s.equals("-debug")) {
      enableDebug=true;
    }
 else     if (s.equals("-suspend")) {
      enableSuspend=true;
    }
 else     if (s.equals("-debugport")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      debugPort=Integer.parseInt(args[i]);
      if ((debugPort < 0) || (debugPort > 65535)) {
        error("Debug port must be between 1 and 65535");
      }
    }
 else     if (s.equals("-XX:+PrintGCDetails")) {
      enablePrintGCDetails=true;
    }
 else     if (s.equals("-XX:+PrintGCTimeStamps")) {
      enablePrintGCTimeStamps=true;
    }
 else     if (s.equals("-gc")) {
      enableVerboseGC=true;
      enablePrintGCDetails=true;
      enablePrintGCTimeStamps=true;
    }
 else     if (s.equals("-nogc")) {
      enableVerboseGC=false;
      enablePrintGCDetails=false;
      enablePrintGCTimeStamps=false;
    }
 else     if (s.equals("-flow_dir")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      flowDir=args[i];
    }
 else     if (s.equals("-J")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      extraArguments.add(args[i]);
    }
 else     if (s.equals("-JJ")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      extraJvmArguments.add(args[i]);
    }
 else     if (s.equals("-jks")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      jksFileName=args[i];
    }
 else     if (s.equals("-jks_pass")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      jksPass=args[i];
    }
 else     if (s.equals("-hash_login")) {
      hashLogin=true;
    }
 else     if (s.equals("-ldap_login")) {
      ldapLogin=true;
    }
 else     if (s.equals("-kerberos_login")) {
      kerberosLogin=true;
    }
 else     if (s.equals("-login_conf")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      loginConfFileName=args[i];
    }
 else     if (s.equals("-user_name")) {
      i++;
      if (i >= args.length) {
        usage();
      }
      userName=args[i];
    }
 else {
      error("Unrecognized option " + s);
    }
    i++;
  }
}
