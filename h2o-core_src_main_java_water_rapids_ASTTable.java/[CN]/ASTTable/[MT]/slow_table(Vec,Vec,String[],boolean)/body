{
  if (v2 == null) {
    SlowCnt sc=new SlowCnt().doAll(v1,v1);
    double dcols[]=collectDomain(sc._col0s);
    Frame res=new Frame();
    Vec rowlabel=Vec.makeVec(dcols,Vec.VectorGroup.VG_LEN1.addVec());
    rowlabel.setDomain(v1.domain());
    res.add(colnames[0],rowlabel);
    long cnts[]=new long[dcols.length];
    for (int col=0; col < dcols.length; col++) {
      long lkey=Double.doubleToRawLongBits(dcols[col]);
      NonBlockingHashMapLong<AtomicLong> colx=sc._col0s.get(lkey);
      AtomicLong al=colx.get(lkey);
      cnts[col]=al.get();
    }
    Vec vec=Vec.makeVec(cnts,null,Vec.VectorGroup.VG_LEN1.addVec());
    res.add("Counts",vec);
    return new ValFrame(res);
  }
  Frame res=new Frame();
  if (!dense) {
    SlowCnt sc=new SlowCnt().doAll(v2,v1);
    double dcols[]=collectDomain(sc._col0s);
    NonBlockingHashMapLong<AtomicLong> rows=new NonBlockingHashMapLong<>();
    for (NonBlockingHashMapLong.IteratorLong i=iter(sc._col0s); i.hasNext(); )     rows.putAll(sc._col0s.get(i.nextLong()));
    double drows[]=collectDomain(rows);
    Vec rowlabel=Vec.makeVec(drows,Vec.VectorGroup.VG_LEN1.addVec());
    rowlabel.setDomain(v1.domain());
    res.add(colnames[0],rowlabel);
    long cnts[]=new long[drows.length];
    for (int col=0; col < dcols.length; col++) {
      NonBlockingHashMapLong<AtomicLong> colx=sc._col0s.get(Double.doubleToRawLongBits(dcols[col]));
      for (int row=0; row < drows.length; row++) {
        AtomicLong al=colx.get(Double.doubleToRawLongBits(drows[row]));
        cnts[row]=al == null ? 0 : al.get();
      }
      Vec vec=Vec.makeVec(cnts,null,Vec.VectorGroup.VG_LEN1.addVec());
      res.add(v2.isCategorical() ? v2.domain()[col] : Double.toString(dcols[col]),vec);
    }
  }
 else {
    SlowCnt sc=new SlowCnt().doAll(v1,v2);
    double dcols[]=collectDomain(sc._col0s);
    NonBlockingHashMapLong<AtomicLong> rows=new NonBlockingHashMapLong<>();
    for (NonBlockingHashMapLong.IteratorLong i=iter(sc._col0s); i.hasNext(); )     rows.putAll(sc._col0s.get(i.nextLong()));
    double drows[]=collectDomain(rows);
    int x=0;
    int sz=0;
    for (NonBlockingHashMapLong.IteratorLong i=iter(sc._col0s); i.hasNext(); ) {
      sz+=sc._col0s.get(i.nextLong()).size();
    }
    long cnts[]=new long[sz];
    double[] left_categ=new double[sz];
    double[] right_categ=new double[sz];
    for (    double dcol : dcols) {
      NonBlockingHashMapLong<AtomicLong> colx=sc._col0s.get(Double.doubleToRawLongBits(dcol));
      for (      double drow : drows) {
        AtomicLong al=colx.get(Double.doubleToRawLongBits(drow));
        if (al != null) {
          left_categ[x]=dcol;
          right_categ[x]=drow;
          cnts[x]=al.get();
          x++;
        }
      }
    }
    Vec vec=Vec.makeVec(left_categ,Vec.VectorGroup.VG_LEN1.addVec());
    if (v1.isCategorical())     vec.setDomain(v1.domain());
    res.add(colnames[0],vec);
    vec=Vec.makeVec(right_categ,Vec.VectorGroup.VG_LEN1.addVec());
    if (v2.isCategorical())     vec.setDomain(v2.domain());
    res.add(colnames[1],vec);
    vec=Vec.makeVec(cnts,null,Vec.VectorGroup.VG_LEN1.addVec());
    res.add("Counts",vec);
  }
  return new ValFrame(res);
}
