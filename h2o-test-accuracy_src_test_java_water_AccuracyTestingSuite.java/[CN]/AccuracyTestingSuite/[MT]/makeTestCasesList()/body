{
  String[] algorithms=filterForAlgos(testCasesFilterString);
  String[] testCases=filterForTestCases(testCasesFilterString);
  List<String> testCaseEntries=null;
  try {
    summaryLog.println("Reading test cases from: " + testCasesCSVPath);
    File testCasesFile=AccuracyTestingUtil.find_test_file_static(this.testCasesCSVPath);
    testCaseEntries=Files.readAllLines(testCasesFile.toPath(),Charset.defaultCharset());
  }
 catch (  Exception e) {
    summaryLog.println("Cannot read the test cases from: " + testCasesCSVPath);
    writeStackTrace(e,summaryLog);
    System.exit(-1);
  }
  testCaseEntries.remove(0);
  ArrayList<TestCase> testCaseArray=new ArrayList<>();
  String[] testCaseEntry;
  for (  String t : testCaseEntries) {
    testCaseEntry=t.trim().split(",",-1);
    if (null != algorithms) {
      if (!Arrays.asList(algorithms).contains(testCaseEntry[1])) {
        continue;
      }
    }
 else     if (null != testCases) {
      if (!Arrays.asList(testCases).contains(testCaseEntry[0])) {
        continue;
      }
    }
    summaryLog.println("Creating test case: " + t);
    try {
      testCaseArray.add(new TestCase(Integer.parseInt(testCaseEntry[0]),testCaseEntry[1],testCaseEntry[2],testCaseEntry[3].equals("1"),testCaseEntry[4],testCaseEntry[5],testCaseEntry[6].equals("1"),Integer.parseInt(testCaseEntry[7]),Integer.parseInt(testCaseEntry[8]),testCaseEntry[9]));
    }
 catch (    Exception e) {
      summaryLog.println("Couldn't create test case: " + t);
      writeStackTrace(e,summaryLog);
      System.exit(-1);
    }
  }
  return testCaseArray;
}
