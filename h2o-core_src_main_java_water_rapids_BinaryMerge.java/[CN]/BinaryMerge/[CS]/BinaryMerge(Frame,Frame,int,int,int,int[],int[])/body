{
  SingleThreadRadixOrder.MSBHeader leftMSBHeader=DKV.getGet(getMSBHeaderKey(leftFrame._key,leftMSB));
  SingleThreadRadixOrder.MSBHeader rightMSBHeader=DKV.getGet(getMSBHeaderKey(rightFrame._key,rightMSB));
  if (leftMSBHeader == null || rightMSBHeader == null)   return;
  _leftBatchSize=leftMSBHeader._batchSize;
  _rightBatchSize=rightMSBHeader._batchSize;
  _leftKey=new byte[leftMSBHeader._nBatch][];
  _leftOrder=new long[leftMSBHeader._nBatch][];
  for (int b=0; b < leftMSBHeader._nBatch; ++b) {
    MoveByFirstByte.OXbatch oxLeft=DKV.getGet(MoveByFirstByte.getOXbatchKey(leftFrame._key,leftMSB,leftNodeIdx,b));
    _leftKey[b]=oxLeft._x;
    _leftOrder[b]=oxLeft._o;
  }
  _leftN=leftMSBHeader._numRows;
  _rightKey=new byte[rightMSBHeader._nBatch][];
  _rightOrder=new long[rightMSBHeader._nBatch][];
  for (int b=0; b < rightMSBHeader._nBatch; ++b) {
    MoveByFirstByte.OXbatch oxRight=DKV.getGet(MoveByFirstByte.getOXbatchKey(rightFrame._key,rightMSB,H2O.SELF.index(),b));
    _rightKey[b]=oxRight._x;
    _rightOrder[b]=oxRight._o;
  }
  _rightN=rightMSBHeader._numRows;
  _retFirst=new long[(int)_leftN];
  _retLen=new long[(int)_leftN];
  _leftNodeIdx=leftNodeIdx;
  _leftFieldSizes=leftFieldSizes;
  _rightFieldSizes=rightFieldSizes;
  _leftKeyNCol=_leftFieldSizes.length;
  _rightKeyNCol=_rightFieldSizes.length;
  _leftKeySize=ArrayUtils.sum(leftFieldSizes);
  _rightKeySize=ArrayUtils.sum(rightFieldSizes);
  _numJoinCols=Math.min(_leftKeyNCol,_rightKeyNCol);
}
