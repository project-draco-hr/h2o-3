{
  byte xbatch[]=x[(int)(xi / _leftBatchSize)];
  byte ybatch[]=y[(int)(yi / _rightBatchSize)];
  int xoff=(int)(xi % _leftBatchSize) * _leftKeySize;
  int yoff=(int)(yi % _rightBatchSize) * _rightKeySize;
  long xval=0, yval=0;
  int i=0;
  while (i < _numJoinCols && xval == yval) {
    int xlen=_leftFieldSizes[i];
    int ylen=_rightFieldSizes[i];
    xval=xbatch[xoff] & 0xFFL;
    while (xlen > 1) {
      xval<<=8;
      xval|=xbatch[++xoff] & 0xFFL;
      xlen--;
    }
    xoff++;
    yval=ybatch[yoff] & 0xFFL;
    while (ylen > 1) {
      yval<<=8;
      yval|=ybatch[++yoff] & 0xFFL;
      ylen--;
    }
    yoff++;
    xval=xval == 0 ? Long.MIN_VALUE : xval - 1 + _leftBase[i];
    yval=yval == 0 ? Long.MIN_VALUE : yval - 1 + _rightBase[i];
    i++;
  }
  long diff=xval - yval;
  if (xval > yval) {
    return ((diff < 0 | diff > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)diff);
  }
 else {
    return ((diff > 0 | diff < Integer.MIN_VALUE + 1) ? Integer.MIN_VALUE + 1 : (int)diff);
  }
}
