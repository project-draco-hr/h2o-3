{
  byte xbatch[]=xss[(int)(xi / _leftKO._batchSize)];
  byte ybatch[]=yss[(int)(yi / _riteKO._batchSize)];
  int xoff=(int)(xi % _leftKO._batchSize) * _leftSB._keySize;
  int yoff=(int)(yi % _riteKO._batchSize) * _riteSB._keySize;
  long xval=0, yval=0;
  int i=0;
  while (i < _numJoinCols && xval == yval) {
    int xlen=_leftSB._fieldSizes[i];
    int ylen=_riteSB._fieldSizes[i];
    xval=xbatch[xoff] & 0xFFL;
    while (xlen > 1) {
      xval<<=8;
      xval|=xbatch[++xoff] & 0xFFL;
      xlen--;
    }
    xoff++;
    yval=ybatch[yoff] & 0xFFL;
    while (ylen > 1) {
      yval<<=8;
      yval|=ybatch[++yoff] & 0xFFL;
      ylen--;
    }
    yoff++;
    xval=xval == 0 ? Long.MIN_VALUE : xval - 1 + _leftSB._base[i];
    yval=yval == 0 ? Long.MIN_VALUE : yval - 1 + _riteSB._base[i];
    i++;
  }
  long diff=xval - yval;
  if (xval > yval) {
    return ((diff < 0 | diff > Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)diff);
  }
 else {
    return ((diff > 0 | diff < Integer.MIN_VALUE + 1) ? Integer.MIN_VALUE + 1 : (int)diff);
  }
}
