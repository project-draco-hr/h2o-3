{
  SingleThreadRadixOrder.OXHeader leftSortedOXHeader=DKV.getGet(getSortedOXHeaderKey(_leftFrame._key,_leftMSB));
  if (leftSortedOXHeader == null) {
    if (_allRight)     throw H2O.unimpl();
    tryComplete();
    return;
  }
  SingleThreadRadixOrder.OXHeader rightSortedOXHeader=DKV.getGet(getSortedOXHeaderKey(_rightFrame._key,_rightMSB));
  if (rightSortedOXHeader == null) {
    if (_allLeft == false) {
      tryComplete();
      return;
    }
    rightSortedOXHeader=new SingleThreadRadixOrder.OXHeader(0,0,0);
  }
  _leftBatchSize=leftSortedOXHeader._batchSize;
  _rightBatchSize=rightSortedOXHeader._batchSize;
  _leftKey=new byte[leftSortedOXHeader._nBatch][];
  _leftOrder=new long[leftSortedOXHeader._nBatch][];
  _retFirst=new long[leftSortedOXHeader._nBatch][];
  _retLen=new long[leftSortedOXHeader._nBatch][];
  for (int b=0; b < leftSortedOXHeader._nBatch; ++b) {
    MoveByFirstByte.OXbatch oxLeft=DKV.getGet(MoveByFirstByte.getSortedOXbatchKey(_leftFrame._key,_leftMSB,b));
    _leftKey[b]=oxLeft._x;
    _leftOrder[b]=oxLeft._o;
    _retFirst[b]=new long[oxLeft._o.length];
    _retLen[b]=new long[oxLeft._o.length];
  }
  _leftN=leftSortedOXHeader._numRows;
  _rightKey=new byte[rightSortedOXHeader._nBatch][];
  _rightOrder=new long[rightSortedOXHeader._nBatch][];
  for (int b=0; b < rightSortedOXHeader._nBatch; ++b) {
    MoveByFirstByte.OXbatch oxRight=DKV.getGet(MoveByFirstByte.getSortedOXbatchKey(_rightFrame._key,_rightMSB,b));
    _rightKey[b]=oxRight._x;
    _rightOrder[b]=oxRight._o;
  }
  _rightN=rightSortedOXHeader._numRows;
  _leftKeyNCol=_leftFieldSizes.length;
  _rightKeyNCol=_rightFieldSizes.length;
  _leftKeySize=ArrayUtils.sum(_leftFieldSizes);
  _rightKeySize=ArrayUtils.sum(_rightFieldSizes);
  _numJoinCols=Math.min(_leftKeyNCol,_rightKeyNCol);
  if ((_leftN != 0 || _allRight) && (_rightN != 0 || _allLeft)) {
    bmerge_r(-1,_leftN,-1,_rightN);
    if (_numRowsInResult > 0)     createChunksInDKV();
  }
  tryComplete();
}
