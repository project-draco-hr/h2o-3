{
  assert(_rows != null);
  assert(_chk == null);
  long t0=System.nanoTime();
  _chk=MemoryManager.malloc8d(_fr.numCols(),_rows.length);
  int cidx[]=MemoryManager.malloc4(_rows.length);
  int offset[]=MemoryManager.malloc4(_rows.length);
  Vec anyVec=_fr.anyVec();
  for (int row=0; row < _rows.length; row++) {
    cidx[row]=anyVec.elem2ChunkIdx(_rows[row]);
    offset[row]=(int)(_rows[row] - anyVec.espc()[cidx[row]]);
  }
  Chunk c[]=new Chunk[anyVec.nChunks()];
  for (int col=0; col < _fr.numCols(); col++) {
    Vec v=_fr.vec(col);
    for (int i=0; i < c.length; i++)     c[i]=v.chunkKey(i).home() ? v.chunkForChunkIdx(i) : null;
    for (int row=0; row < _rows.length; row++) {
      _chk[col][row]=c[cidx[row]].atd(offset[row]);
    }
  }
  _rows=null;
  _fr=null;
  assert(_chk != null);
  timeTaken=(System.nanoTime() - t0) / 1e9;
  tryComplete();
}
