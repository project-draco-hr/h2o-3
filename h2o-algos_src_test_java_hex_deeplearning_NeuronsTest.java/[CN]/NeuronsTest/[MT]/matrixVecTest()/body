{
  int rows=2048;
  int cols=8192;
  int loops=5;
  int warmup_loops=5;
  long seed=0x533D;
  float nnz_ratio_vec=0.01f;
  float nnz_ratio_mat=0.1f;
  float[] a=new float[rows * cols];
  float[] x=new float[cols];
  float[] y=new float[rows];
  float[] res=new float[rows];
  byte[] bits=new byte[rows];
  for (int row=0; row < rows; ++row) {
    y[row]=0;
    res[row]=0;
    bits[row]=(byte)("abcdefghijklmnopqrstuvwxyz".toCharArray()[row % 26]);
  }
  Random rng=new Random(seed);
  for (int col=0; col < cols; ++col)   if (rng.nextFloat() < nnz_ratio_vec)   x[col]=((float)col) / cols;
  for (int row=0; row < rows; ++row) {
    int off=row * cols;
    for (int col=0; col < cols; ++col) {
      if (rng.nextFloat() < nnz_ratio_mat)       a[off + col]=((float)(row + col)) / cols;
    }
  }
  DenseRowMatrix dra=new DenseRowMatrix(a,rows,cols);
  DenseColMatrix dca=new DenseColMatrix(dra,rows,cols);
  SparseRowMatrix sra=new SparseRowMatrix(dra,rows,cols);
  SparseColMatrix sca=new SparseColMatrix(dca,rows,cols);
  DenseVector dx=new DenseVector(x);
  DenseVector dy=new DenseVector(y);
  DenseVector dres=new DenseVector(res);
  SparseVector sx=new SparseVector(x);
  System.out.println("warming up.");
  float sum=0;
  for (int l=0; l < warmup_loops; ++l) {
    gemv_naive(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv_naive(dres,dra,dx,dy,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv_row_optimized(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv(dres,dca,dx,dy,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv(dres,dra,sx,dy,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv(dres,dca,sx,dy,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv(dres,sra,sx,dy,bits);
    sum+=res[rows / 2];
  }
  for (int l=0; l < warmup_loops; ++l) {
    gemv(dres,sca,sx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("\nstarting naive.");
  sum=0;
  long start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv_naive(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("naive time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting dense row * dense.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv_naive(dres,dra,dx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("dense row * dense time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting optimized dense row * dense.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv_row_optimized(res,a,x,y,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("optimized dense row * dense time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting dense col * dense.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(dres,dca,dx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("dense col * dense time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting dense row * sparse.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(dres,dra,sx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("dense row * sparse time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting dense col * sparse.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(dres,dca,sx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("dense col * sparse time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting sparse row * sparse.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(dres,sra,sx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("sparse row * sparse time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
  System.out.println("\nstarting sparse col * sparse.");
  sum=0;
  start=System.currentTimeMillis();
  for (int l=0; l < loops; ++l) {
    gemv(dres,sca,sx,dy,bits);
    sum+=res[rows / 2];
  }
  System.out.println("result: " + sum + " and "+ ArrayUtils.sum(res));
  System.out.println("sparse col * sparse time: " + PrettyPrint.msecs(System.currentTimeMillis() - start,true));
}
