{
  super.scoreAllTrees(row,preds,_effective_n_classes);
  if (_nclasses == 1) {
    preds[0]/=_ntrees;
  }
 else {
    if (_nclasses == 2 && !_binomial_double_trees) {
      preds[1]/=_ntrees;
      preds[2]=1.0 - preds[1];
    }
 else {
      double sum=0;
      for (int i=1; i <= _nclasses; i++) {
        sum+=preds[i];
      }
      if (sum > 0)       for (int i=1; i <= _nclasses; i++) {
        preds[i]/=sum;
      }
    }
    if (_balanceClasses)     GenModel.correctProbabilities(preds,_priorClassDistrib,_modelClassDistrib);
    preds[0]=GenModel.getPrediction(preds,_priorClassDistrib,row,_defaultThreshold);
  }
  return preds;
}
