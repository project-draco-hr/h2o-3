import sys, pprint, argparse, errno, re, string
sys.path.insert(1, '../../py')
import h2o
import os
here = os.path.dirname(os.path.realpath(__file__))
parser = argparse.ArgumentParser(description='Attach to an H2O instance and call its REST API to generate the Java REST API bindings docs and write them to the filesystem.')
parser.add_argument('--verbose', '-v', help='verbose output', action='store_true')
parser.add_argument('--usecloud', help='ip:port to attach to', default='')
parser.add_argument('--host', help='hostname to attach to', default='localhost')
parser.add_argument('--port', help='port to attach to', type=int, default=54321)
parser.add_argument('--dest', help='destination directory', default=(here + '/../build/src-gen/main/java'))
args = parser.parse_args()
h2o.H2O.verbose = (True if args.verbose else False)
pp = pprint.PrettyPrinter(indent=4)
if (len(args.usecloud) > 0):
    arr = args.usecloud.split(':')
    args.host = arr[0]
    args.port = int(arr[1])
h2o.H2O.verboseprint('connecting to: ', args.host, ':', args.port)
a_node = h2o.H2O(args.host, args.port)
print 'creating the Java bindings in {}. . .'.format(args.dest)
enums = {}
all_schemas = a_node.schemas()['schemas']
all_schemas_map = {}
for schema in all_schemas:
    if ('void' == schema['name']):
        continue
    schema_name = schema['name']
    pojo_name = schema_name
    all_schemas_map[schema_name] = schema
    save_full = ((((args.dest + os.sep) + 'water/bindings/pojos/') + pojo_name) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in generate_pojo(schema, pojo_name):
            the_file.write(('%s\n' % line))
for (name, values) in enums.items():
    pojo_name = name
    save_full = ((((args.dest + os.sep) + 'water/bindings/pojos/') + pojo_name) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in generate_enum(name, values):
            the_file.write(('%s\n' % line))
endpoints_result = a_node.endpoints()
endpoints = endpoints_result['routes']
if h2o.H2O.verbose:
    print 'Endpoints: '
    pp.pprint(endpoints)
endpoints_meta = []
for num in range(len(endpoints)):
    meta = a_node.endpoint_by_number(num)['routes'][0]
    endpoints_meta.append(meta)
retrofitProxies = generate_retrofit_proxies(endpoints_meta, all_schemas_map)
for (entity, proxy) in retrofitProxies.items():
    save_full = ((((args.dest + os.sep) + 'water/bindings/proxies/retrofit/') + entity) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in proxy:
            the_file.write(('%s\n' % line))
retrofit_example = 'package water.bindings.proxies.retrofit;\n\nimport water.bindings.pojos.*;\nimport com.google.gson.*;\nimport retrofit2.*;\nimport retrofit2.http.*;\nimport retrofit2.converter.gson.GsonConverterFactory;\nimport retrofit2.Call;\nimport java.io.IOException;\nimport java.lang.reflect.Type;\n\npublic class Example {\n\n    private static class KeySerializer implements JsonSerializer<KeyV3> {\n        public JsonElement serialize(KeyV3 key, Type typeOfKey, JsonSerializationContext context) {\n            return new JsonPrimitive(key.name);\n        }\n    }\n\n    public static void main (String[] args) {\n        Gson gson = new GsonBuilder().registerTypeAdapter(KeyV3.class, new KeySerializer()).create();\n\n        Retrofit retrofit = new Retrofit.Builder()\n        .baseUrl("http://localhost:54321/") // note trailing slash for Retrofit 2\n        .addConverterFactory(GsonConverterFactory.create(gson))\n        .build();\n\n        CreateFrame createFrameService = retrofit.create(CreateFrame.class);\n        Frames framesService = retrofit.create(Frames.class);\n        Models modelsService = retrofit.create(Models.class);\n\n        try {\n            // NOTE: the Call objects returned by the service can\'t be reused, but they can be cloned.\n            Response<FramesV3> all_frames_response = framesService.list().execute();\n            Response<ModelsV3> all_models_response = modelsService.list().execute();\n\n            if (all_frames_response.isSuccessful()) {\n                FramesV3 all_frames = all_frames_response.body();\n                System.out.println("All Frames: ");\n                System.out.println(all_frames);\n            } else {\n                System.err.println("framesService.list() failed");\n            }\n            if (all_models_response.isSuccessful()) {\n                ModelsV3 all_models = all_models_response.body();\n                System.out.println("All Models: ");\n                System.out.println(all_models);\n            } else {\n                System.err.println("modelsService.list() failed");\n            }\n\n            Response<JobV3> create_frame_response = createFrameService.run(null, 1000, 100, 42, 42, true, 0, 100000, 0.2, 100, 0.2, 32767, 0.2, 0.5, 0.2, 0, 0.2, 2, true, null).execute();\n            if (create_frame_response.isSuccessful()) {\n                JobV3 job = create_frame_response.body(); // TODO: poll\n                try { Thread.sleep(30000); } catch (InterruptedException e) {}\n                KeyV3 new_frame = job.dest;\n                System.out.println("Created frame: " + new_frame);\n\n                all_frames_response = framesService.list().execute();\n                if (all_frames_response.isSuccessful()) {\n                    FramesV3 all_frames = all_frames_response.body();\n                    System.out.println("All Frames (after createFrame): ");\n                    System.out.println(all_frames);\n                } else {\n                    System.err.println("framesService.list() failed");\n                }\n\n                Response<FramesV3> one_frame_response = framesService.fetch(new_frame.name).execute();\n                if (one_frame_response.isSuccessful()) {\n                    FramesV3 one_frames = one_frame_response.body();\n                    System.out.println("One Frame (after createFrame): ");\n                    System.out.println(one_frames);\n                } else {\n                    System.err.println("framesService.fetch() failed");\n                }\n\n            } else {\n                System.err.println("createFrameService.run() failed");\n            }\n        }\n        catch (IOException e) {\n            System.err.println("Caught exception: " + e);\n        }\n    }\n}\n'
save_full = ((((args.dest + os.sep) + 'water/bindings/proxies/retrofit/') + 'Example') + '.java')
save_dir = os.path.dirname(save_full)
try:
    os.makedirs(save_dir)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
with open(save_full, 'w') as the_file:
    the_file.write(('%s\n' % retrofit_example))
