import sys, pprint, argparse, errno, re, string
sys.path.insert(1, '../../py')
import h2o
import os
here = os.path.dirname(os.path.realpath(__file__))
parser = argparse.ArgumentParser(description='Attach to an H2O instance and call its REST API to generate the Java REST API bindings docs and write them to the filesystem.')
parser.add_argument('--verbose', '-v', help='verbose output', action='store_true')
parser.add_argument('--usecloud', help='ip:port to attach to', default='')
parser.add_argument('--host', help='hostname to attach to', default='localhost')
parser.add_argument('--port', help='port to attach to', type=int, default=54321)
parser.add_argument('--dest', help='destination directory', default=(here + '/../src-gen/main/java'))
args = parser.parse_args()
h2o.H2O.verbose = (True if args.verbose else False)
pp = pprint.PrettyPrinter(indent=4)
if (len(args.usecloud) > 0):
    arr = args.usecloud.split(':')
    args.host = arr[0]
    args.port = int(arr[1])
h2o.H2O.verboseprint('connecting to: ', args.host, ':', args.port)
a_node = h2o.H2O(args.host, args.port)
print 'creating the Java bindings in {}. . .'.format(args.dest)
model_builders_map = a_node.model_builders()['model_builders']
enums = {}
all_schemas = a_node.schemas()['schemas']
all_schemas_map = {}
for schema in all_schemas:
    if ('void' == schema['name']):
        continue
    schema_name = schema['name']
    pojo_name = schema_name
    all_schemas_map[schema_name] = schema
    save_full = ((((args.dest + os.sep) + 'water/bindings/pojos/') + pojo_name) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in generate_pojo(schema, pojo_name, model_builders_map):
            the_file.write(('%s\n' % line))
for (name, values) in enums.items():
    pojo_name = name
    save_full = ((((args.dest + os.sep) + 'water/bindings/pojos/') + pojo_name) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in generate_enum(name, values):
            the_file.write(('%s\n' % line))
endpoints_result = a_node.endpoints()
endpoints = endpoints_result['routes']
if h2o.H2O.verbose:
    print 'Endpoints: '
    pp.pprint(endpoints)
endpoints_meta = []
for num in range(len(endpoints)):
    meta = a_node.endpoint_by_number(num)['routes'][0]
    endpoints_meta.append(meta)
retrofitProxies = generate_retrofit_proxies(endpoints_meta, all_schemas_map)
for (entity, proxy) in retrofitProxies.items():
    save_full = ((((args.dest + os.sep) + 'water/bindings/proxies/retrofit/') + entity) + '.java')
    save_dir = os.path.dirname(save_full)
    try:
        os.makedirs(save_dir)
    except OSError as exception:
        if (exception.errno != errno.EEXIST):
            raise
    with open(save_full, 'w') as the_file:
        for line in proxy:
            the_file.write(('%s\n' % line))
retrofit_example = 'package water.bindings.proxies.retrofit;\n\nimport water.bindings.pojos.*;\nimport water.bindings.proxies.*;\nimport com.google.gson.*;\nimport retrofit2.*;\nimport retrofit2.http.*;\nimport retrofit2.converter.gson.GsonConverterFactory;\nimport retrofit2.Call;\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.List;\nimport java.util.ArrayList;\n\npublic class Example {\n\n    /**\n     * Keys get sent as Strings and returned as objects also containing the type and URL,\n     * so they need a custom GSON serializer.\n     */\n    private static class KeySerializer implements JsonSerializer<KeyV3> {\n        public JsonElement serialize(KeyV3 key, Type typeOfKey, JsonSerializationContext context) {\n            return new JsonPrimitive(key.name);\n        }\n    }\n\n    /**\n     * KeysColSpecifiers get sent as Strings and returned as objects also containing a list of Frames that the col must be a member of,\n     * so they need a custom GSON serializer.\n    private static class ColSpecifierSerializer implements JsonSerializer<ColSpecifierV3> {\n        public JsonElement serialize(ColSpecifierV3 cs, Type t, JsonSerializationContext context) {\n            return new JsonPrimitive(cs.column_name);\n        }\n    }\n     */\n\n    public static JobV3 poll(Retrofit retrofit, String job_id) {\n        Jobs jobsService = retrofit.create(Jobs.class);\n        Response<JobsV3> jobs_response = null;\n\n        int retries = 3;\n        JobsV3 jobs = null;\n        do {\n            try {\n                jobs_response = jobsService.fetch(job_id).execute();\n            }\n            catch (IOException e) {\n                System.err.println("Caught exception: " + e);\n            }\n            if (! jobs_response.isSuccessful())\n                if (retries-- > 0)\n                   continue;\n                else\n                    throw new RuntimeException("/3/Jobs/{job_id} failed 3 times.");\n\n            jobs = jobs_response.body();\n            if (null == jobs.jobs || jobs.jobs.length != 1)\n                throw new RuntimeException("Failed to find Job: " + job_id);\n            if (! "RUNNING".equals(jobs.jobs[0].status)) try { Thread.sleep(100); } catch (InterruptedException e) {} // wait 100mS\n        } while ("RUNNING".equals(jobs.jobs[0].status));\n        return jobs.jobs[0];\n    }\n\n    public static void gbm_example_flow() {\n        GsonBuilder builder = new GsonBuilder();\n        builder.registerTypeAdapter(KeyV3.class, new KeySerializer());\n//        builder.registerTypeAdapter(ColSpecifierV3.class, new ColSpecifierSerializer());\n        Gson gson = builder.create();\n\n        Retrofit retrofit = new Retrofit.Builder()\n        .baseUrl("http://localhost:54321/") // note trailing slash for Retrofit 2\n        .addConverterFactory(GsonConverterFactory.create(gson))\n        .build();\n\n        ImportFiles importService = retrofit.create(ImportFiles.class);\n        ParseSetup parseSetupService = retrofit.create(ParseSetup.class);\n        Parse parseService = retrofit.create(Parse.class);\n        Frames framesService = retrofit.create(Frames.class);\n        Models modelsService = retrofit.create(Models.class);\n        ModelBuilders modelBuildersService = retrofit.create(ModelBuilders.class);\n        Predictions predictionsService = retrofit.create(Predictions.class);\n\n        JobV3 job = null;\n\n        try {\n            // STEP 1: import raw file\n            ImportFilesV3 importBody = importService.importFiles("http://s3.amazonaws.com/h2o-public-test-data/smalldata/flow_examples/arrhythmia.csv.gz", null).execute().body();\n            System.out.println("import: " + importBody);\n\n            // STEP 2: parse setup\n            ParseSetupV3 parseSetupBody = parseSetupService.guessSetup(importBody.destination_frames,\n                                                                  ParserParserType.GUESS,\n                                                                  (byte)\',\',\n                                                                  false,\n                                                                  -1,\n                                                                  null,\n                                                                  null,\n                                                                  null,\n                                                                  null,\n                                                                  0,\n                                                                  0,\n                                                                  0,\n                                                                  null\n                                                                  ).execute().body();\n            System.out.println("parseSetupBody: " + parseSetupBody);\n\n            // STEP 3: parse into columnar Frame\n            List<String> source_frames = new ArrayList<>();\n            for (FrameKeyV3 frame : parseSetupBody.source_frames)\n              source_frames.add(frame.name);\n\n            ParseV3 parseBody = parseService.parse("arrhythmia.hex",\n                                                   source_frames.toArray(new String[0]),\n                                                   parseSetupBody.parse_type,\n                                                   parseSetupBody.separator,\n                                                   parseSetupBody.single_quotes,\n                                                   parseSetupBody.check_header,\n                                                   parseSetupBody.number_columns,\n                                                   parseSetupBody.column_names,\n                                                   parseSetupBody.column_types,\n                                                   null, // domains\n                                                   parseSetupBody.na_strings,\n                                                   parseSetupBody.chunk_size,\n                                                   true,\n                                                   true,\n                                                   null).execute().body();\n            System.out.println("parseBody: " + parseBody);\n\n            // STEP 5: Train the model (NOTE: step 4 is polling, which we don\'t require because we specified blocking for the parse above)\n            GBMParametersV3 gbm_parms = new GBMParametersV3();\n\n            FrameKeyV3 training_frame = new FrameKeyV3();\n            training_frame.name = "arrhythmia.hex";\n\n            gbm_parms.training_frame = training_frame;\n\n            ColSpecifierV3 response_column = new ColSpecifierV3();\n            response_column.column_name = "C1";\n            gbm_parms.response_column = response_column;\n\n            System.out.println("About to train GBM. . .");\n            GBMV3 gbmBody = (GBMV3)ModelBuilders.Helper.train_gbm(modelBuildersService, gbm_parms).execute().body();\n            System.out.println("gbmBody: " + gbmBody);\n\n            // STEP 6: poll for completion\n            job = gbmBody.job;\n            if (null == job || null == job.key)\n                throw new RuntimeException("train_gbm returned a bad Job: " + job);\n\n            job = poll(retrofit, job.key.name);\n            System.out.println("GBM build done.");\n\n            // STEP 7: fetch the model\n            // TODO: Retrofit seems to be only deserializing the base class.  What to do?\n            KeyV3 model_key = job.dest;\n            ModelsV3 models = modelsService.fetch(model_key.name).execute().body();\n            System.out.println("models: " + models);\n            // GBMModelV3 model = (GBMModelV3)models.models[0];\n            // System.out.println("new GBM model: " + model);\n            System.out.println("new GBM model: " + models.models[0]);\n\n            // STEP 8: predict!\n            ModelMetricsListSchemaV3 predictions = predictionsService.predict(model_key.name,\n                                                                              training_frame.name,\n                                                                              "predictions",\n                                                                              false, false, -1, false, false, false, false, null).execute().body();\n            System.out.println("predictions: " + predictions);\n\n        }\n        catch (IOException e) {\n            System.err.println("Caught exception: " + e);\n        }\n    }\n\n    public static void simple_example() {\n        Gson gson = new GsonBuilder().registerTypeAdapter(KeyV3.class, new KeySerializer()).create();\n\n        Retrofit retrofit = new Retrofit.Builder()\n        .baseUrl("http://localhost:54321/") // note trailing slash for Retrofit 2\n        .addConverterFactory(GsonConverterFactory.create(gson))\n        .build();\n\n        CreateFrame createFrameService = retrofit.create(CreateFrame.class);\n        Frames framesService = retrofit.create(Frames.class);\n        Models modelsService = retrofit.create(Models.class);\n\n        try {\n            // NOTE: the Call objects returned by the service can\'t be reused, but they can be cloned.\n            Response<FramesV3> all_frames_response = framesService.list().execute();\n            Response<ModelsV3> all_models_response = modelsService.list().execute();\n\n            if (all_frames_response.isSuccessful()) {\n                FramesV3 all_frames = all_frames_response.body();\n                System.out.println("All Frames: ");\n                System.out.println(all_frames);\n            } else {\n                System.err.println("framesService.list() failed");\n            }\n            if (all_models_response.isSuccessful()) {\n                ModelsV3 all_models = all_models_response.body();\n                System.out.println("All Models: ");\n                System.out.println(all_models);\n            } else {\n                System.err.println("modelsService.list() failed");\n            }\n\n            Response<JobV3> create_frame_response = createFrameService.run(null, 1000, 100, 42, 42, true, 0, 100000, 0.2, 100, 0.2, 32767, 0.2, 0.5, 0.2, 0, 0.2, 2, true, null).execute();\n            if (create_frame_response.isSuccessful()) {\n                JobV3 job = create_frame_response.body();\n\n                if (null == job || null == job.key)\n                    throw new RuntimeException("CreateFrame returned a bad Job: " + job);\n\n                job = poll(retrofit, job.key.name);\n\n                KeyV3 new_frame = job.dest;\n                System.out.println("Created frame: " + new_frame);\n\n                all_frames_response = framesService.list().execute();\n                if (all_frames_response.isSuccessful()) {\n                    FramesV3 all_frames = all_frames_response.body();\n                    System.out.println("All Frames (after createFrame): ");\n                    System.out.println(all_frames);\n                } else {\n                    System.err.println("framesService.list() failed");\n                }\n\n                Response<FramesV3> one_frame_response = framesService.fetch(new_frame.name).execute();\n                if (one_frame_response.isSuccessful()) {\n                    FramesV3 one_frames = one_frame_response.body();\n                    System.out.println("One Frame (after createFrame): ");\n                    System.out.println(one_frames);\n                } else {\n                    System.err.println("framesService.fetch() failed");\n                }\n\n            } else {\n                System.err.println("createFrameService.run() failed");\n            }\n        }\n        catch (IOException e) {\n            System.err.println("Caught exception: " + e);\n        }\n    } // simple_example()\n\n    public static void main (String[] args) {\n        gbm_example_flow();\n    }\n}\n'
save_full = ((((args.dest + os.sep) + 'water/bindings/proxies/retrofit/') + 'Example') + '.java')
save_dir = os.path.dirname(save_full)
try:
    os.makedirs(save_dir)
except OSError as exception:
    if (exception.errno != errno.EEXIST):
        raise
with open(save_full, 'w') as the_file:
    the_file.write(('%s\n' % retrofit_example))
