def generate_pojo(schema, pojo_name):
    global args
    global enums
    if args.verbose:
        print ('Generating POJO: ', pojo_name)
    pojo = []
    pojo.append('package water.bindings.pojos;')
    pojo.append('')
    has_map = False
    for field in schema['fields']:
        if field['type'].startswith('Map'):
            has_map = True
    pojo.append('import com.google.gson.Gson;')
    if has_map:
        pojo.append('import java.util.Map;')
        pojo.append('')
    superclass = schema['superclass']
    if ('Iced' == superclass):
        superclass = 'Object'
    pojo.append(((('public class ' + pojo_name) + ' extends {superclass} '.format(superclass=superclass)) + '{'))
    first = True
    for field in schema['fields']:
        help = field['help']
        type = field['type']
        name = field['name']
        schema_name = field['schema_name']
        if (name == '__meta'):
            continue
        if (type == 'Iced'):
            continue
        java_type = cons_java_type(pojo_name, name, type, schema_name)
        if type.startswith('enum'):
            enum_name = field['schema_name']
            if (enum_name not in enums):
                enums[enum_name] = field['values']
        if (not first):
            pojo.append('')
        if field['is_inherited']:
            pojo.append('    /* INHERITED: {help} '.format(help=help))
            pojo.append('     * public {type} {name};'.format(type=java_type, name=name))
            pojo.append('     */')
        else:
            pojo.append('    /** {help} */'.format(help=help))
            pojo.append('    public {type} {name};'.format(type=java_type, name=name))
        first = False
    pojo.append('')
    pojo.append('    /** Return the contents of this object as a JSON String. */')
    pojo.append('    @Override')
    pojo.append('    public String toString() {')
    pojo.append('        return new Gson().toJson(this);')
    pojo.append('    }')
    pojo.append('}')
    return pojo
