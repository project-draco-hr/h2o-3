def generate_retrofit_proxies(endpoints_meta, all_schemas_map):
    '\n    Walk across all the endpoint metadata returning a map of classnames to interface definitions.\n    Retrofit interfaces look like this:\n\n    public interface GitHubService {\n        @GET("/users/{user}/repos")\n        Call<List<Repo>> listRepos(@Path("user") String user);\n    }\n    '
    pojos = {}
    java_type_map = {'string': 'String', }
    endpoints_by_entity = {}
    entity_pattern_str = '/[0-9]+?/([^/]+)(/.*)?'
    entity_pattern = re.compile(entity_pattern_str)
    for meta in endpoints_meta:
        h2o.H2O.verboseprint(('finding entity for url_pattern: ' + meta['url_pattern']))
        m = entity_pattern.match(meta['url_pattern'])
        entity = m.group(1)
        if ('.' in entity):
            entity = entity.split('.')[0]
        h2o.H2O.verboseprint(('found entity: ' + entity))
        if (entity not in endpoints_by_entity):
            endpoints_by_entity[entity] = []
        endpoints_by_entity[entity].append(meta)
    var_pattern_str = '\\(\\?<(.+?)>\\.\\*\\)'
    var_pattern = re.compile(var_pattern_str)
    for entity in endpoints_by_entity:
        pojo = []
        signatures = {}
        inner_class = []
        pojo.append('package water.bindings.proxies.retrofit;')
        pojo.append('')
        pojo.append('import water.bindings.pojos.*;')
        pojo.append('import retrofit2.*;')
        pojo.append('import retrofit2.http.*;')
        pojo.append('import java.util.Map;')
        pojo.append('')
        pojo.append((('public interface ' + entity) + ' {'))
        first = True
        found_key_array_parameter = False
        for meta in endpoints_by_entity[entity]:
            path = meta['url_pattern']
            if ((path == '/3/ModelMetrics/frames/(?<frame>.*)/models/(?<model>.*)') or (path == '/3/ModelMetrics/frames/(?<frame>.*)')):
                continue
            path_parm_names = meta['path_params']
            retrofit_path = path
            idx = 0
            while re.search(var_pattern, retrofit_path):
                retrofit_path = var_pattern.sub((('{' + path_parm_names[idx]) + '}'), retrofit_path, 1)
                idx += 1
            retrofit_path = retrofit_path.replace('\\', '\\\\')
            summary = meta['summary']
            http_method = meta['http_method']
            input_schema_name = meta['input_schema']
            output_schema_name = meta['output_schema']
            handler_method = meta['handler_method']
            method = handler_method
            algo = None
            if (((entity == 'Grid') or (entity == 'ModelBuilders')) and (method == 'train')):
                pieces = path.split('/')
                if (len(pieces) != 4):
                    raise Exception(('Expected 3 parts to this path (something like /99/Grid/glm): ' + path))
                algo = pieces[3]
                method = ((method + '_') + algo)
            elif ((entity == 'ModelBuilders') and (method == 'validate_parameters')):
                pieces = path.split('/')
                if (len(pieces) != 5):
                    raise Exception(('Expected 3 parts to this path (something like /3/ModelBuilders/glm/parameters): ' + path))
                algo = pieces[3]
                method = ((method + '_') + algo)
            input_schema = all_schemas_map[input_schema_name]
            if (((entity == 'Grid') or (entity == 'ModelBuilders')) and (method.startswith('train') or method.startswith('validate_parameters'))):
                for builder_field in input_schema['fields']:
                    if (builder_field['name'] == 'parameters'):
                        input_schema_name = builder_field['schema_name']
                        input_schema = all_schemas_map[input_schema_name]
                        break
            parms = ''
            parm_names = []
            parm_types = []
            if (http_method == 'POST'):
                is_post = True
            else:
                is_post = False
            indent = (' ' * len('    Call<{output_schema_name}> {method}('.format(output_schema_name=output_schema_name, method=method)))
            first_parm = True
            for parm in path_parm_names:
                fields = [field for field in input_schema['fields'] if (field['name'] == parm)]
                if (len(fields) != 1):
                    print ((('Failed to find parameter: ' + parm) + ' for endpoint: ') + repr(meta))
                field = fields[0]
                if (field['direction'] == 'OUTPUT'):
                    continue
                parm_type = cons_java_type(entity, field['name'], field['type'], field['schema_name'])
                if parm_type.endswith('KeyV3'):
                    parm_type = 'String'
                if (parm_type == 'ColSpecifierV3'):
                    parm_type = 'String'
                if (not first_parm):
                    parms += ',\n'
                    parms += indent
                parms += '@Path("{parm}") '.format(parm=parm)
                parms += parm_type
                parms += ' '
                parms += parm
                first_parm = False
            if is_post:
                fields = input_schema['fields']
                for field in fields:
                    if (field['direction'] == 'OUTPUT'):
                        continue
                    if (field['name'] in path_parm_names):
                        continue
                    parm_type = cons_java_type(entity, field['name'], field['type'], field['schema_name'])
                    parm = field['name']
                    parm_names.append(parm)
                    parm_types.append(parm_type)
                    if parm_type.endswith('KeyV3'):
                        parm_type = 'String'
                    if parm_type.endswith('KeyV3[]'):
                        parm_type = 'String[]'
                    if (parm_type == 'ColSpecifierV3'):
                        parm_type = 'String'
                    if (not first_parm):
                        parms += ',\n'
                        parms += indent
                    parms += '@Field("{parm}") '.format(parm=parm)
                    parms += parm_type
                    parms += ' '
                    parms += parm
                    first_parm = False
            signature = '{method}({parms});'.format(method=method, parms=parms)
            if (signature in signatures):
                print ((('ERROR: found a duplicate method signature in entity ' + entity) + ': ') + signature)
            else:
                signatures[signature] = signature
            if (not first):
                pojo.append('')
            pojo.append('    /** {summary} */'.format(summary=summary))
            if (http_method == 'POST'):
                pojo.append('    @FormUrlEncoded')
            pojo.append('    @{http_method}("{path}")'.format(http_method=http_method, path=retrofit_path))
            pojo.append('    Call<{output_schema_name}> {method}({parms});'.format(output_schema_name=output_schema_name, method=method, parms=parms))
            if ((algo is not None) and (entity == 'ModelBuilders')):
                print input_schema_name
                inner_class.append('    /** {summary} */'.format(summary=summary))
                inner_class.append(('    public static Call<{output_schema_name}> {method}(ModelBuilders modelBuildersService, {input_schema_name} parameters) '.format(input_schema_name=input_schema_name, output_schema_name=output_schema_name, method=method, parms=parms) + ' {'))
                the_list = ''
                for parm_num in range(0, len(parm_names)):
                    if (parm_num > 0):
                        the_list += ', '
                    if parm_types[parm_num].endswith('KeyV3'):
                        the_list += '(parameters.{parm} == null ? null : parameters.{parm}.name)'.format(parm=parm_names[parm_num])
                    elif parm_types[parm_num].endswith('KeyV3[]'):
                        found_key_array_parameter = True
                        the_list += '(parameters.{parm} == null ? null : key_array_to_string_array(parameters.{parm}))'.format(parm=parm_names[parm_num])
                    elif parm_types[parm_num].startswith('ColSpecifier'):
                        the_list += '(parameters.{parm} == null ? null : parameters.{parm}.column_name)'.format(parm=parm_names[parm_num])
                    else:
                        the_list += 'parameters.{parm}'.format(parm=parm_names[parm_num])
                    the_list_first = False
                inner_class.append('        return modelBuildersService.{method}({the_list});'.format(method=method, the_list=the_list))
                inner_class.append('    }')
            first = False
        if found_key_array_parameter:
            inner_class.append('    /** Return an array of Strings for an array of keys. */')
            inner_class.append('    public static String[] key_array_to_string_array(KeyV3[] keys) {')
            inner_class.append('        if (null == keys) return null;')
            inner_class.append('        String[] ids = new String[keys.length];')
            inner_class.append('        int i = 0;')
            inner_class.append('        for (KeyV3 key : keys) ids[i++] = key.name;')
            inner_class.append('        return ids;')
            inner_class.append('    }')
        if (len(inner_class) > 0):
            pojo.append('')
            pojo.append('    public static class Helper {')
            for line in inner_class:
                pojo.append(line)
            pojo.append('    }')
        pojo.append('}')
        pojos[entity] = pojo
    return pojos
