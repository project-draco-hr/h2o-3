{
  for (int cols=0; cols < chks.length >> 1; cols++) {
    Chunk c0=chks[cols];
    Chunk c1=chks[cols + (chks.length >> 1)];
    for (int rows=0; rows < chks[0]._len; rows++) {
      if (c0 instanceof C16Chunk && c1 instanceof C16Chunk) {
        if (!(c0.isNA(rows) && c1.isNA(rows))) {
          long lo0=c0.at16l(rows), lo1=c1.at16l(rows);
          long hi0=c0.at16h(rows), hi1=c1.at16h(rows);
          if (lo0 != lo1 || hi0 != hi1) {
            _unequal=true;
            return;
          }
        }
      }
 else       if (c0 instanceof CStrChunk && c1 instanceof CStrChunk) {
        if (!(c0.isNA(rows) && c1.isNA(rows))) {
          BufferedString s0=new BufferedString(), s1=new BufferedString();
          c0.atStr(s0,rows);
          c1.atStr(s1,rows);
          if (s0.compareTo(s1) != 0) {
            _unequal=true;
            return;
          }
        }
      }
 else {
        double d0=c0.atd(rows), d1=c1.atd(rows);
        if (!(Double.isNaN(d0) && Double.isNaN(d1)) && !(Math.abs(d0 - d1) <= Math.abs(d0 + d1) * _epsilon)) {
          _unequal=true;
          return;
        }
      }
    }
  }
}
