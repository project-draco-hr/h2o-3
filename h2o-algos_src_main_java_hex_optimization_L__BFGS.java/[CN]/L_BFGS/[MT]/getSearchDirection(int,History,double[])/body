{
  double[] alpha=MemoryManager.malloc8d(hist._m);
  double[] q=gradient.clone();
  for (int i=1; i <= Math.min(iter,hist._m); ++i) {
    alpha[i - 1]=hist.rho(iter - i) * ArrayUtils.innerProduct(hist.getS(iter - i),q);
    MathUtils.wadd(q,hist.getY(iter - i),-alpha[i - 1]);
  }
  if (iter > 0) {
    final double[] s=hist.getS(iter - 1);
    final double[] y=hist.getY(iter - 1);
    double Hk0=ArrayUtils.innerProduct(s,y) / ArrayUtils.innerProduct(y,y);
    ArrayUtils.mult(q,Hk0);
  }
  for (int i=Math.min(iter,hist._m); i > 0; --i) {
    double beta=hist.rho(iter - i) * ArrayUtils.innerProduct(hist.getY(iter - i),q);
    MathUtils.wadd(q,hist.getS(iter - i),alpha[i - 1] - beta);
  }
  ArrayUtils.mult(q,-1);
  return q;
}
