{
  double[] alpha=MemoryManager.malloc8d(_m);
  double[] q=gradient.clone();
  for (int i=1; i <= Math.min(_k,_m); ++i) {
    alpha[i - 1]=rho(-i) * ArrayUtils.innerProduct(getS(-i),q);
    MathUtils.wadd(q,getY(-i),-alpha[i - 1]);
  }
  if (_k > 0) {
    final double[] s=getS(-1);
    final double[] y=getY(-1);
    double Hk0=ArrayUtils.innerProduct(s,y) / ArrayUtils.innerProduct(y,y);
    ArrayUtils.mult(q,Hk0);
  }
  for (int i=Math.min(_k,_m); i > 0; --i) {
    double beta=rho(-i) * ArrayUtils.innerProduct(getY(-i),q);
    MathUtils.wadd(q,getS(-i),alpha[i - 1] - beta);
  }
  ArrayUtils.mult(q,-1);
  return q;
}
