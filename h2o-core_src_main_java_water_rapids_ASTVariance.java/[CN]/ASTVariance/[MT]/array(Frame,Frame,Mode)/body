{
  Vec[] vecxs=frx.vecs();
  int ncolx=vecxs.length;
  Vec[] vecys=fry.vecs();
  int ncoly=vecys.length;
  double[] ymeans=new double[ncoly];
  for (int y=0; y < ncoly; y++)   ymeans[y]=vecys[y].mean();
  CoVarTask[] cvts=new CoVarTask[ncolx];
  for (int x=0; x < ncolx; x++)   cvts[x]=new CoVarTask(vecxs[x].mean(),ymeans).dfork(new Frame(vecxs[x]).add(fry));
  if (ncolx == 1 && ncoly == 1)   return new ValNum(cvts[0].getResult()._covs[0] / (frx.numRows() - 1));
  Vec[] res=new Vec[ncolx];
  Key<Vec>[] keys=Vec.VectorGroup.VG_LEN1.addVecs(ncolx);
  for (int x=0; x < ncolx; x++)   res[x]=Vec.makeVec(ArrayUtils.div(cvts[x].getResult()._covs,(frx.numRows() - 1)),keys[x]);
  return new ValFrame(new Frame(frx._names,res));
}
