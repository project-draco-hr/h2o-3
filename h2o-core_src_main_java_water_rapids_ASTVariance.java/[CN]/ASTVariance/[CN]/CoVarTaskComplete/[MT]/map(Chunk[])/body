{
  _ss=new double[_ncoly][_ncolx];
  _xsum=new double[_ncolx];
  _ysum=new double[_ncoly];
  double[] xvals=new double[_ncolx];
  double[] yvals=new double[_ncoly];
  double xval, yval;
  double[] _ss_y;
  boolean add;
  int len=cs[0]._len;
  for (int row=0; row < len; row++) {
    add=true;
    Arrays.fill(xvals,0);
    Arrays.fill(yvals,0);
    for (int y=0; y < _ncoly; y++) {
      final Chunk cy=cs[y];
      yval=cy.atd(row);
      if (Double.isNaN(yval)) {
        _NACount++;
        add=false;
        break;
      }
      yvals[y]=yval;
    }
    if (add) {
      for (int x=0; x < _ncolx; x++) {
        final Chunk cx=cs[x + _ncoly];
        xval=cx.atd(row);
        if (Double.isNaN(xval)) {
          _NACount++;
          add=false;
          break;
        }
        xvals[x]=xval;
      }
    }
    if (add) {
      for (int y=0; y < _ncoly; y++) {
        _ss_y=_ss[y];
        for (int x=0; x < _ncolx; x++)         _ss_y[x]+=xvals[x] * yvals[y];
      }
      ArrayUtils.add(_xsum,xvals);
      ArrayUtils.add(_ysum,yvals);
    }
  }
}
