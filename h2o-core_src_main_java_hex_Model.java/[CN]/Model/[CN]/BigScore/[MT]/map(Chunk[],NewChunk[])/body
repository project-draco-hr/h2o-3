{
  double[] tmp=new double[_output.nfeatures()];
  _mb=Model.this.makeMetricBuilder(_domain);
  int startcol=(_mb instanceof ModelMetricsSupervised.MetricBuilderSupervised ? chks.length - 1 : 0);
  double[] preds=_mb._work;
  int len=chks[0]._len;
  for (int row=0; row < len; row++) {
    double[] p=score0(chks,row,tmp,preds);
    float[] actual=new float[chks.length - startcol];
    for (int c=startcol; c < chks.length; c++) {
      actual[c - startcol]=(float)chks[c].atd(row);
    }
    _mb.perRow(preds,actual,Model.this,_mean);
    for (int c=0; c < _npredcols; c++)     cpreds[c].addNum(p[c]);
  }
}
