{
  Chunk weightsChunk=_hasWeights && _computeMetrics ? chks[_output.weightsIdx()] : new C0DChunk(1,chks[0]._len);
  Chunk offsetChunk=_output.hasOffset() ? chks[_output.offsetIdx()] : new C0DChunk(0,chks[0]._len);
  Chunk responseChunk=null;
  double[] tmp=new double[_output.nfeatures()];
  float[] actual=null;
  _mb=Model.this.makeMetricBuilder(_domain);
  if (_computeMetrics) {
    if (isSupervised()) {
      actual=new float[1];
      responseChunk=chks[_output.responseIdx()];
    }
 else     actual=new float[chks.length];
  }
  double[] preds=_mb._work;
  int len=chks[0]._len;
  for (int row=0; row < len; row++) {
    double weight=weightsChunk.atd(row);
    if (weight == 0)     continue;
    double offset=offsetChunk.atd(row);
    double[] p=score0(chks,weight,offset,row,tmp,preds);
    if (_computeMetrics) {
      if (isSupervised()) {
        actual[0]=(float)responseChunk.atd(row);
      }
 else {
        for (int i=0; i < actual.length; ++i)         actual[i]=(float)chks[i].atd(row);
      }
      _mb.perRow(preds,actual,weight,offset,Model.this);
    }
    if (_makePreds) {
      for (int c=0; c < _npredcols; c++)       cpreds[c].addNum(p[c]);
    }
  }
}
