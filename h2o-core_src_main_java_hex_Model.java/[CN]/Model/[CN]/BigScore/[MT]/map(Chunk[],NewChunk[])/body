{
  double[] tmp=new double[_output.nfeatures()];
switch (_output.getModelCategory()) {
case Binomial:
    _mb=new ModelMetricsBinomial.MetricBuilderBinomial(_domain,ModelUtils.DEFAULT_THRESHOLDS);
  break;
case Multinomial:
_mb=new ModelMetricsMultinomial.MetricBuilderMultinomial(_domain);
break;
case Regression:
_mb=new ModelMetricsRegression.MetricBuilderRegression();
break;
case Clustering:
_mb=new ModelMetricsClustering.MetricBuilderClustering(_output.nfeatures());
break;
case AutoEncoder:
_mb=new ModelMetricsAutoEncoder.MetricBuilderAutoEncoder(_output.nfeatures());
break;
default :
throw H2O.unimpl();
}
int startcol=(_mb instanceof ModelMetricsSupervised.MetricBuilderSupervised ? chks.length - 1 : 0);
float[] preds=_mb._work;
int len=chks[0]._len;
for (int row=0; row < len; row++) {
float[] p=score0(chks,row,tmp,preds);
float[] actual=new float[chks.length - startcol];
for (int c=startcol; c < chks.length; c++) {
actual[c - startcol]=(float)chks[c].atd(row);
}
_mb.perRow(preds,actual);
for (int c=0; c < _npredcols; c++) cpreds[c].addNum(p[c]);
}
}
