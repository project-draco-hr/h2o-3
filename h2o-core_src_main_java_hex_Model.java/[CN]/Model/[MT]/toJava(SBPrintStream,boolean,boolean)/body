{
  SB fileContext=new SB();
  String modelName=JCodeGen.toJavaId(_key.toString());
  sb.p("/*").nl();
  sb.p("  Licensed under the Apache License, Version 2.0").nl();
  sb.p("    http://www.apache.org/licenses/LICENSE-2.0.html").nl();
  sb.nl();
  sb.p("  AUTOGENERATED BY H2O at ").p(new DateTime().toString()).nl();
  sb.p("  ").p(H2O.ABV.projectVersion()).nl();
  sb.p("  ").nl();
  sb.p("  Standalone prediction code with sample test data for ").p(this.getClass().getSimpleName()).p(" named ").p(modelName).nl();
  sb.nl();
  sb.p("  How to download, compile and execute:").nl();
  sb.p("      mkdir tmpdir").nl();
  sb.p("      cd tmpdir").nl();
  sb.p("      curl http:/").p(H2O.SELF.toString()).p("/3/h2o-genmodel.jar > h2o-genmodel.jar").nl();
  sb.p("      curl http:/").p(H2O.SELF.toString()).p("/3/Models.java/").pobj(_key).p(" > ").p(modelName).p(".java").nl();
  sb.p("      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m ").p(modelName).p(".java").nl();
  sb.nl();
  sb.p("     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)").nl();
  if (_parms._offset_column != null) {
    sb.nl();
    sb.nl();
    sb.nl();
    sb.p("  NOTE:  Java model export does not support offset_column.").nl();
    sb.nl();
    Log.warn("Java model export does not support offset_column.");
  }
  if (isGeneratingPreview && toJavaCheckTooBig()) {
    sb.nl();
    sb.nl();
    sb.nl();
    sb.p("  NOTE:  Java model is too large to preview, please download as shown above.").nl();
    sb.nl();
    return sb;
  }
  sb.p("*/").nl();
  sb.p("import java.util.Map;").nl();
  sb.p("import hex.genmodel.GenModel;").nl();
  sb.p("import hex.genmodel.annotations.ModelPojo;").nl();
  sb.nl();
  String algo=this.getClass().getSimpleName().toLowerCase().replace("model","");
  sb.p("@ModelPojo(name=\"").p(modelName).p("\", algorithm=\"").p(algo).p("\")").nl();
  sb.p("public class ").p(modelName).p(" extends GenModel {").nl().ii(1);
  sb.ip("public hex.ModelCategory getModelCategory() { return hex.ModelCategory." + _output.getModelCategory() + "; }").nl();
  toJavaInit(sb,fileContext).nl();
  toJavaNAMES(sb,fileContext);
  toJavaNCLASSES(sb);
  toJavaDOMAINS(sb,fileContext);
  toJavaPROB(sb);
  toJavaSuper(modelName,sb);
  sb.p("  public String getUUID() { return Long.toString(" + checksum() + "L); }").nl();
  toJavaPredict(sb,fileContext,verboseCode);
  sb.p("}").nl().di(1);
  sb.p(fileContext).nl();
  return sb;
}
