{
  SB fileContext=new SB();
  String modelName=JCodeGen.toJavaId(_key.toString());
  sb.p("// AUTOGENERATED BY H2O at ").p(new DateTime().toString()).nl();
  sb.p("// ").p(H2O.ABV.projectVersion()).nl();
  sb.p("//").nl();
  sb.p("// Standalone prediction code with sample test data for ").p(this.getClass().getSimpleName()).p(" named ").p(modelName).nl();
  sb.p("//").nl();
  sb.p("// How to download, compile and execute:").nl();
  sb.p("//     mkdir tmpdir").nl();
  sb.p("//     cd tmpdir").nl();
  sb.p("//     curl http:/").p(H2O.SELF.toString()).p("/h2o-model.jar > h2o-model.jar").nl();
  sb.p("//     curl http:/").p(H2O.SELF.toString()).p("/2/").p(this.getClass().getSimpleName()).p("View.java?_modelKey=").pobj(_key).p(" > ").p(modelName).p(".java").nl();
  sb.p("//     javac -cp h2o-model.jar -J-Xmx2g -J-XX:MaxPermSize=128m ").p(modelName).p(".java").nl();
  sb.p("//     java -cp h2o-model.jar:. -Xmx2g -XX:MaxPermSize=256m -XX:ReservedCodeCacheSize=256m ").p(modelName).nl();
  sb.p("//").nl();
  sb.p("//     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)").nl();
  sb.p("import java.util.Map;").nl();
  sb.p("import hex.genmodel.GenModel;").nl();
  sb.nl();
  sb.p("public class ").p(modelName).p(" extends GenModel {").nl().ii(1);
  toJavaInit(sb,fileContext).nl();
  toJavaNAMES(sb);
  toJavaNCLASSES(sb);
  toJavaDOMAINS(sb,fileContext);
  toJavaPROB(sb);
  toJavaSuper(modelName,sb);
  toJavaPredict(sb,fileContext);
  sb.p("}").nl().di(1);
  sb.p(fileContext).nl();
  return sb;
}
