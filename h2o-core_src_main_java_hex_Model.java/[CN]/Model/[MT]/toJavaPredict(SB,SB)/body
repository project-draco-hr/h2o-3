{
  ccsb.nl();
  ccsb.p("  // Pass in data in a double[], pre-aligned to the Model's requirements.").nl();
  ccsb.p("  // Jam predictions into the preds[] array; preds[0] is reserved for the").nl();
  ccsb.p("  // main prediction (class for classifiers or value for regression),").nl();
  ccsb.p("  // and remaining columns hold a probability distribution for classifiers.").nl();
  ccsb.p("  public final float[] predict( double[] data, float[] preds) { preds = predict( data, preds, " + toJavaDefaultMaxIters() + "); return preds; }").nl();
  ccsb.p("  public final float[] predict( double[] data, float[] preds, int maxIters ) {").nl();
  SB classCtxSb=new SB();
  toJavaPredictBody(ccsb.ii(1),classCtxSb,fileCtxSb);
  ccsb.di(1);
  ccsb.p("    return preds;").nl();
  ccsb.p("  }").nl();
  ccsb.p(classCtxSb);
  return ccsb;
}
