{
  Frame adaptFr=new Frame(fr);
  adaptTestForTrain(adaptFr,true);
  Frame output=scoreImpl(fr,adaptFr,destination_key);
  Vec predicted=output.vecs()[0];
  String mdomain[]=predicted.domain();
  if (_output.isClassifier()) {
    ModelMetrics mm=ModelMetrics.getFromDKV(this,fr);
    ModelCategory model_cat=this._output.getModelCategory();
    ConfusionMatrix cm=mm.cm();
    if (model_cat == ModelCategory.Binomial)     cm=((ModelMetricsBinomial)mm)._cm;
 else     if (model_cat == ModelCategory.Multinomial) {
      cm=((ModelMetricsMultinomial)mm)._cm;
      float[] hr=((ModelMetricsMultinomial)mm)._hit_ratios;
      if (hr != null && hr.length > 0)       Log.info(getHitRatioTable(hr));
    }
    if (cm != null && cm.domain != null) {
      cm.table=cm.toTable();
      if (cm.confusion_matrix.length < _parms._max_confusion_matrix_size)       water.util.Log.info(cm.table.toString(1));
    }
    Vec actual=fr.vec(_output.responseName());
    if (actual != null) {
      String sdomain[]=actual.domain();
      if (sdomain != null && mdomain != sdomain && !Arrays.equals(mdomain,sdomain))       output.replace(0,new EnumWrappedVec(actual.group().addVec(),actual.get_espc(),sdomain,predicted._key));
    }
  }
  Vec[] vecs=adaptFr.vecs();
  for (int i=0; i < vecs.length; i++)   if (fr.find(vecs[i]) != -1)   vecs[i]=null;
  adaptFr.delete();
  return output;
}
