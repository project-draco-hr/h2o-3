{
  ByteVec vec=getByteVec(key);
  byte[] zips=vec.getFirstBytes();
  ZipUtil.Compression cpr=ZipUtil.guessCompressionMethod(zips);
  byte[] bits=ZipUtil.unzipBytes(zips,cpr);
  ParserSetup localSetup=_setup.guessSetup(bits);
  if (!localSetup._isValid)   return;
  final int chunkStartIdx=_fileChunkOffsets[ArrayUtils.find(_keys,key)];
  try {
switch (cpr) {
case NONE:
      if (localSetup._pType._parallelParseSupported) {
        DParse dp=new DParse(_vg,localSetup,_vecIdStart,chunkStartIdx,this);
        addToPendingCount(1);
        dp.setCompleter(this);
        dp.asyncExec(vec);
        for (int i=0; i < vec.nChunks(); ++i)         _chunk2Enum[chunkStartIdx + i]=vec.chunkKey(i).home_node().index();
      }
 else {
        FileMonitor pmon=new FileMonitor((ParseMonitor)DKV.get(_progress).get());
        _dout=streamParse(vec.openStream(pmon),localSetup,_vecIdStart,chunkStartIdx,pmon);
        chunksAreLocal(vec,chunkStartIdx,key);
      }
    break;
case ZIP:
{
    FileMonitor pmon=new FileMonitor((ParseMonitor)DKV.get(_progress).get());
    ZipInputStream zis=new ZipInputStream(vec.openStream(pmon));
    ZipEntry ze=zis.getNextEntry();
    if (ze != null && !ze.isDirectory())     _dout=streamParse(zis,localSetup,_vecIdStart,chunkStartIdx,pmon);
 else     zis.close();
    chunksAreLocal(vec,chunkStartIdx,key);
    break;
  }
case GZIP:
FileMonitor pmon=new FileMonitor((ParseMonitor)DKV.get(_progress).get());
_dout=streamParse(new GZIPInputStream(vec.openStream(pmon)),localSetup,_vecIdStart,chunkStartIdx,pmon);
chunksAreLocal(vec,chunkStartIdx,key);
break;
}
}
 catch (IOException ioe) {
throw new RuntimeException(ioe);
}
}
