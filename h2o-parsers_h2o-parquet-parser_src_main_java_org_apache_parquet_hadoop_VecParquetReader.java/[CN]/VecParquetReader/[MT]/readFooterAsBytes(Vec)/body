{
  FSDataInputStream f=null;
  try {
    f=new FSDataInputStream(new VecDataInputStream(vec));
    final int FOOTER_LENGTH_SIZE=4;
    if (vec.length() < MAGIC.length + FOOTER_LENGTH_SIZE + MAGIC.length) {
      throw new RuntimeException("Vec doesn't represent a Parquet data (too short)");
    }
    long footerLengthIndex=vec.length() - FOOTER_LENGTH_SIZE - MAGIC.length;
    f.seek(footerLengthIndex);
    int footerLength=readIntLittleEndian(f);
    byte[] magic=new byte[MAGIC.length];
    f.readFully(magic);
    if (!Arrays.equals(MAGIC,magic)) {
      throw new RuntimeException("Vec is not a Parquet file. expected magic number at tail " + Arrays.toString(MAGIC) + " but found "+ Arrays.toString(magic));
    }
    long footerIndex=footerLengthIndex - footerLength;
    if (footerIndex < MAGIC.length || footerIndex >= footerLengthIndex) {
      throw new RuntimeException("corrupted file: the footer index is not within the Vec");
    }
    f.seek(footerIndex);
    byte[] metadataBytes=new byte[footerLength];
    f.readFully(metadataBytes);
    return metadataBytes;
  }
 catch (  IOException e) {
    throw new RuntimeException("Failed to read Parquet metadata",e);
  }
 finally {
    try {
      if (f != null)       f.close();
    }
 catch (    Exception e) {
      Log.warn("Failed to close Vec data input stream",e);
    }
  }
}
