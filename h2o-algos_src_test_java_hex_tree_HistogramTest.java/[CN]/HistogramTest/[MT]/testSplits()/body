{
  int nbins=13;
  int nbins_cats=nbins;
  byte isInt=0;
  double min=1;
  double maxEx=6.900000000000001;
  for (  SharedTreeModel.SharedTreeParameters.HistogramType histoType : SharedTreeModel.SharedTreeParameters.HistogramType.values()) {
    Log.info();
    Log.info("random split points: " + histoType);
    long seed=new Random().nextLong();
    if (histoType == SharedTreeModel.SharedTreeParameters.HistogramType.Random)     Log.info("random seed: " + seed);
    double[] splitPts=null;
    if (histoType == SharedTreeModel.SharedTreeParameters.HistogramType.QuantilesGlobal) {
      splitPts=new double[]{1,1.5,2,2.5,3,4,5,6.1,6.2,6.3,6.7,6.8,6.85};
    }
    Key k=Key.make();
    DKV.put(new DHistogram.HistoQuantiles(k,splitPts));
    DHistogram hist=new DHistogram("myhisto",nbins,nbins_cats,isInt,min,maxEx,0,histoType,seed,k);
    hist.init();
    int N=10000000;
    int bin=-1;
    double[] l1=new double[nbins];
    for (int i=0; i < N; ++i) {
      double col_data=min + (double)i / N * (maxEx - min);
      int b=hist.bin(col_data);
      if (b > bin) {
        bin=b;
        Log.info("Histogram maps " + col_data + " to bin  : "+ hist.bin(col_data));
        l1[b]=col_data;
      }
    }
    double[] l2=new double[nbins];
    for (int i=0; i < nbins; ++i) {
      double col_data=hist.binAt(i);
      Log.info("Histogram maps bin " + i + " to col_data: "+ col_data);
      l2[i]=col_data;
    }
    for (int i=0; i < nbins; ++i) {
      Assert.assertTrue(Math.abs(l1[i] - l2[i]) < 1e-6);
    }
    k.remove();
  }
}
