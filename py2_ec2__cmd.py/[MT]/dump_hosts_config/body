def dump_hosts_config(ec2_config, reservation, filename=DEFAULT_HOSTS_FILENAME, save=True, h2o_per_host=1):
    if (not filename):
        filename = DEFAULT_HOSTS_FILENAME
    cfg = {}
    f = find_file(ec2_config['aws_credentials'])
    if f:
        cfg['aws_credentials'] = f
    else:
        warn_file_miss(ec2_config['aws_credentials'])
    f = find_file(ec2_config['pem'])
    if f:
        cfg['key_filename'] = f
    else:
        warn_file_miss(ec2_config['key_filename'])
    f = find_file(ec2_config['hdfs_config'])
    if f:
        cfg['hdfs_config'] = f
    else:
        warn_file_miss(ec2_config['hdfs_config'])
    cfg['username'] = ec2_config['username']
    cfg['use_flatfile'] = True
    cfg['h2o_per_host'] = h2o_per_host
    cfg['java_heap_GB'] = MEMORY_MAPPING[ec2_config['instance_type']]['xmx']
    cfg['java_extra_args'] = ''
    cfg['base_port'] = 54321
    cfg['ip'] = [i.private_ip_address for i in reservation.instances]
    cfg['ec2_instances'] = [{'id': i.id, 'private_ip_address': i.private_ip_address, 'public_ip_address': i.ip_address, 'public_dns_name': i.public_dns_name, } for i in reservation.instances]
    cfg['ec2_reservation_id'] = reservation.id
    cfg['ec2_region'] = ec2_config['region']
    cfg['redirect_import_folder_to_s3_path'] = True
    cmds = get_ssh_commands(ec2_config, reservation)
    idx = 1
    for cmd in cmds:
        cfg['ec2_comment_ssh_{0}'.format(idx)] = cmd
        idx += 1
    if save:
        filename = filename.format(reservation.id)
        with open(filename, 'w+') as f:
            f.write(json.dumps(cfg, indent=4))
        log('Host config dumped into {0}'.format(filename))
        log('To terminate instances call:')
        log('\x1b[93mpython ec2_cmd.py terminate --hosts {0}\x1b[0m'.format(filename))
        log('To start H2O cloud call:')
        log('\x1b[93mpython ec2_cmd.py start_h2o --hosts {0}\x1b[0m'.format(filename))
        log('To watch cloud in browser follow address:')
        log('   http://{0}:{1}'.format(reservation.instances[0].public_dns_name, cfg['base_port']))
    return (cfg, filename)
