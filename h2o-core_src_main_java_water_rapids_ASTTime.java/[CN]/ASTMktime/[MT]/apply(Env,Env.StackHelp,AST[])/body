{
  Frame fs[]=new Frame[nargs() - 1];
  int is[]=new int[nargs() - 1];
  Frame x=null;
  for (int i=1; i < nargs(); i++)   if (asts[i] instanceof ASTId)   fs[i - 1]=x=stk.track(asts[i].exec(env)).getFrame();
 else   is[i - 1]=(int)asts[i].exec(env).getNum();
  if (x == null) {
    long msec=new MutableDateTime(is[0],is[1] + 1,is[2] + 1,is[3],is[4],is[5],is[6]).getMillis();
    return new ValNum(msec);
  }
  Vec vecs[]=new Vec[7];
  for (int i=0; i < 7; i++) {
    if (fs[i] == null) {
      vecs[i]=x.anyVec().makeCon(is[i]);
    }
 else {
      if (fs[i].numCols() != 1)       throw new IllegalArgumentException("Expect single column");
      vecs[i]=fs[i].anyVec();
    }
  }
  Frame fr2=new MRTask(){
    @Override public void map(    Chunk chks[],    NewChunk nchks[]){
      MutableDateTime dt=new MutableDateTime(0);
      NewChunk n=nchks[0];
      int rlen=chks[0]._len;
      for (int r=0; r < rlen; r++) {
        dt.setDateTime((int)chks[0].at8(r),(int)chks[1].at8(r) + 1,(int)chks[2].at8(r) + 1,(int)chks[3].at8(r),(int)chks[4].at8(r),(int)chks[5].at8(r),(int)chks[6].at8(r));
        n.addNum(dt.getMillis());
      }
    }
  }
.doAll(new byte[]{Vec.T_NUM},vecs).outputFrame(new String[]{"msec"},null);
  for (int i=0; i < nargs() - 1; i++)   if (fs[i] == null)   vecs[i].remove();
  return new ValFrame(fr2);
}
