def __init__(self, package_name, rst_extension='.rst', package_skip_patterns=None, module_skip_patterns=None):
    " Initialize package for parsing\n\n        Parameters\n        ----------\n        package_name : string\n            Name of the top-level package.  *package_name* must be the\n            name of an importable package\n        rst_extension : string, optional\n            Extension for reST files, default '.rst'\n        package_skip_patterns : None or sequence of {strings, regexps}\n            Sequence of strings giving URIs of packages to be excluded\n            Operates on the package path, starting at (including) the\n            first dot in the package path, after *package_name* - so,\n            if *package_name* is ``sphinx``, then ``sphinx.util`` will\n            result in ``.util`` being passed for earching by these\n            regexps.  If is None, gives default. Default is:\n            ['\\.tests$']\n        module_skip_patterns : None or sequence\n            Sequence of strings giving URIs of modules to be excluded\n            Operates on the module name including preceding URI path,\n            back to the first dot after *package_name*.  For example\n            ``sphinx.util.console`` results in the string to search of\n            ``.util.console``\n            If is None, gives default. Default is:\n            ['\\.setup$', '\\._']\n        "
    if (package_skip_patterns is None):
        package_skip_patterns = ['\\.tests$']
    if (module_skip_patterns is None):
        module_skip_patterns = ['\\.setup$', '\\._']
    self.package_name = package_name
    self.rst_extension = rst_extension
    self.package_skip_patterns = package_skip_patterns
    self.module_skip_patterns = module_skip_patterns
