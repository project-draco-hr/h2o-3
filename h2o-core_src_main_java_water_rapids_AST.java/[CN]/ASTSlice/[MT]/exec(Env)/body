{
  int cols_type=env.peekType();
  Val cols=env.pop();
  int rows_type=env.peekType();
  Val rows=rows_type == Env.ARY ? env.pop0() : env.pop();
  if (cols_type == Env.STR) {
    Frame ary=env.peekAry();
    int idx=ary.find(((ValStr)cols)._s);
    if (idx == -1)     throw new IllegalArgumentException("Column name not in frame, " + cols);
    cols=new ValNum(idx);
    cols_type=Env.NUM;
  }
  if (cols_type == Env.NUM && rows_type == Env.NUM) {
    long row=(long)((ValNum)rows)._d;
    int col=(int)((ValNum)cols)._d;
    Frame ary=env.popAry();
    try {
      if (ary.vecs()[col].isEnum()) {
        env.push(new ValStr(ary.vecs()[col].domain()[(int)ary.vecs()[col].at(row)]));
      }
 else       env.push(new ValNum(ary.vecs()[col].at(row)));
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      if (col < 0 || col >= ary.vecs().length)       throw new IllegalArgumentException("Column index out of bounds: tried to select column 0<=" + col + "<="+ (ary.vecs().length - 1)+ ".");
      if (row < 0 || row >= ary.vecs()[col].length())       throw new IllegalArgumentException("Row index out of bounds: tried to select row 0<=" + row + "<="+ (ary.vecs()[col].length() - 1)+ ".");
    }
    env.cleanup(ary);
  }
 else {
    Frame ary=env.peekAry();
    Object colSelect=select(ary.numCols(),cols,env,true);
    Object rowSelect=select(ary.numRows(),rows,env,false);
    Frame fr2=ary.deepSlice(rowSelect,colSelect);
    if (colSelect instanceof Frame)     for (    Vec v : ((Frame)colSelect).vecs())     Keyed.remove(v._key);
    if (rowSelect instanceof Frame)     for (    Vec v : ((Frame)rowSelect).vecs())     Keyed.remove(v._key);
    if (fr2 == null)     fr2=new Frame();
    env.cleanup(ary,env.pop0Ary(),rows_type == Env.ARY ? ((ValFrame)rows)._fr : null);
    env.push(new ValFrame(fr2));
  }
}
