{
  AST fr=E.parse();
  AST rows=E.parse();
switch (rows.type()) {
case Env.STR:
    rows=new ASTNull();
  break;
case Env.SPAN:
rows=((ASTSpan)rows).setSlice(true,false);
break;
case Env.SERIES:
rows=((ASTSeries)rows).setSlice(true,false);
break;
case Env.LIST:
rows=new ASTSeries(((ASTLongList)rows)._l,null,((ASTLongList)rows)._spans);
((ASTSeries)rows).setSlice(true,false);
break;
case Env.NULL:
rows=new ASTNull();
break;
default :
}
if (!E.hasNext()) throw new IllegalArgumentException("Slice expected 3 arguments (frame, rows, cols), but got 2");
AST cols=E.parse();
if (!(cols instanceof ASTStringList)) {
switch (cols.type()) {
case Env.STR:
cols=cols.value().equals("null") ? new ASTNull() : cols;
break;
case Env.SPAN:
cols=((ASTSpan)cols).setSlice(false,true);
break;
case Env.SERIES:
cols=((ASTSeries)cols).setSlice(false,true);
break;
case Env.LIST:
if (cols instanceof ASTLongList) cols=new ASTSeries(((ASTLongList)cols)._l,null,((ASTLongList)cols)._spans);
 else {
double[] d=((ASTDoubleList)cols)._d;
long[] l=new long[d.length];
int i=0;
for (double dd : d) l[i++]=(long)dd;
cols=new ASTSeries(l,null,((ASTDoubleList)cols)._spans);
}
((ASTSeries)cols).setSlice(false,true);
break;
case Env.NULL:
cols=new ASTNull();
break;
default :
}
}
E.eatEnd();
ASTSlice res=(ASTSlice)clone();
res._asts=new AST[]{fr,rows,cols};
return res;
}
