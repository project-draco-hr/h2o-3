{
  final long[] cols0=cols == null ? new long[lhs_ary.numCols()] : (long[])cols;
  if (cols == null)   for (int i=0; i < lhs_ary.numCols(); ++i)   cols0[i]=i;
  if (!e.isAry()) {
    String s=null;
    double d=Double.NaN;
    if (e.isStr())     s=e.popStr();
 else     if (e.isNum())     d=e.popDbl();
 else     if (e.isNul())     d=Double.NaN;
 else     throw new IllegalArgumentException("Did not get a single number or factor level on the RHS of the assignment. Got type #:" + Env.typeToString(e.peekType()));
    final double d0=d;
    final String s0=s;
    if (rows instanceof long[]) {
      final long[] rows0=(long[])rows;
      new MRTask(){
        @Override public void map(        Chunk[] chks){
          for (int row=0; row < chks[0]._len; ++row)           if (Arrays.asList(rows0).contains(row))           replaceRow(chks,row,d0,s0,cols0);
        }
      }
.doAll(lhs_ary);
      e.push(new ValFrame(lhs_ary));
      return;
    }
 else     if (rows instanceof Frame) {
      Frame rr=new Frame(lhs_ary).add((Frame)rows);
      if (rr.numCols() != lhs_ary.numCols() + 1)       throw new IllegalArgumentException("Got multiple columns for row predicate.");
      new MRTask(){
        @Override public void map(        Chunk[] cs,        NewChunk[] ncs){
          Chunk pred=cs[cs.length - 1];
          int rows=cs[0]._len;
          for (int r=0; r < rows; ++r)           if (pred.atd(r) != 0)           replaceRow(cs,r,d0,s0,cols0);
        }
      }
.doAll(rr);
      e.push(new ValFrame(lhs_ary));
      return;
    }
 else     throw new IllegalArgumentException("Invalid row selection. (note: RHS was a constant)");
  }
 else {
    final Frame rhs_ary=e.popAry();
    if ((cols == null && rhs_ary.numCols() != lhs_ary.numCols()) || (cols != null && rhs_ary.numCols() != ((long[])cols).length))     throw new IllegalArgumentException("Right-hand frame has does not match the number of columns required in the assignment to the left-hand side.");
    if (rhs_ary.numRows() > lhs_ary.numRows())     throw new IllegalArgumentException("Right-hand side frame has more rows than the left-hand side.");
    if (rows instanceof long[]) {
      final long[] rows0=(long[])rows;
      if (rows0.length != rhs_ary.numRows())       throw new IllegalArgumentException("Right-hand side array does not match the number of rows selected in the left-hand side.");
      new MRTask(){
        @Override public void map(        Chunk[] chks){
          for (int row=0; row < chks[0]._len; ++row) {
            if (Arrays.asList(rows0).contains(row)) {
              long row_id=(long)Arrays.asList(rows0).indexOf(row);
              for (int c=0; c < cols0.length; ++c) {
                int col=(int)cols0[c];
                if (chks[col].vec().isEnum())                 if (!rhs_ary.vecs()[col].isEnum()) {
                  chks[col].setNA(row);
                  continue;
                }
 else                 if (chks[col].vec().isNumeric())                 if (!rhs_ary.vecs()[col].isNumeric()) {
                  chks[col].setNA(row);
                  continue;
                }
                chks[col].set(row,rhs_ary.vecs()[col].at(row_id));
              }
            }
          }
        }
      }
.doAll(lhs_ary);
      e.push(new ValFrame(lhs_ary));
      return;
    }
 else     if (rows instanceof Frame) {
      if (((Frame)rows).numCols() != 1)       throw new IllegalArgumentException("Got multiple columns for row predicate.");
      Frame pred=new MRTask(){
        @Override public void map(        Chunk c,        NewChunk nc){
          for (int r=0; r < c._len; ++r) {
            double d=c.atd(r);
            if (d != 0)             nc.addNum(d);
          }
        }
      }
.doAll(1,(Frame)rows).outputFrame(null,null);
      if (pred.numRows() != rhs_ary.numRows())       throw new IllegalArgumentException("Right-hand side array does not match the number of rows selected in the left-hand side.");
      Frame rr=new Frame(rhs_ary).add(pred);
      new MRTask(){
        @Override public void map(        Chunk[] cs){
          Chunk pred=cs[cs.length - 1];
          int rows=cs[0]._len;
          for (int r=0; r < rows; ++r) {
            long row_id=(long)pred.atd(r) - 1;
            replaceRow(cs,r,row_id,cols0,lhs_ary);
          }
        }
      }
.doAll(rr);
      e.push(new ValFrame(lhs_ary));
      return;
    }
 else     throw new IllegalArgumentException("Invalid row selection. (note: RHS was Frame");
  }
}
