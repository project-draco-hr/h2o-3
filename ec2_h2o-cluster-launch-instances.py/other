import os
import sys
import time
import boto
import boto.ec2
iam_profile_resource_name = None
iam_profile_name = None
keyName = '0xdata_Big'
securityGroupName = 'SecurityDisabled'
numInstancesToLaunch = 2
instanceType = 'm3.large'
instanceNameRoot = 'h2o-ai-stable'
debug = 0
dryRun = False
regionName = 'us-east-1'
amiId = 'ami-0b100e61'
if (not ('AWS_ACCESS_KEY_ID' in os.environ)):
    print 'ERROR: You must set AWS_ACCESS_KEY_ID in the environment.'
    sys.exit(1)
if (not ('AWS_SECRET_ACCESS_KEY' in os.environ)):
    print 'ERROR: You must set AWS_SECRET_ACCESS_KEY in the environment.'
    sys.exit(1)
if (not ('AWS_SSH_PRIVATE_KEY_FILE' in os.environ)):
    print 'ERROR: You must set AWS_SSH_PRIVATE_KEY_FILE in the environment.'
    sys.exit(1)
publicFileName = 'nodes-public'
privateFileName = 'nodes-private'
if (not dryRun):
    fpublic = open(publicFileName, 'w')
    fprivate = open(privateFileName, 'w')
print 'Using boto version', boto.Version
if True:
    botoVersionArr = boto.Version.split('.')
    if (botoVersionArr[0] != 2):
        botoVersionMismatch
    if (botoVersionArr[1] < 13):
        botoVersionMismatch
if debug:
    boto.set_stream_logger('h2o-ec2')
ec2 = boto.ec2.connect_to_region(regionName, debug=debug)
print 'Launching', numInstancesToLaunch, 'instances.'
reservation = ec2.run_instances(image_id=amiId, min_count=numInstancesToLaunch, max_count=numInstancesToLaunch, key_name=keyName, instance_type=instanceType, security_groups=[securityGroupName], instance_profile_arn=iam_profile_resource_name, instance_profile_name=iam_profile_name, dry_run=dryRun)
for i in range(numInstancesToLaunch):
    instance = reservation.instances[i]
    print 'Waiting for instance', (i + 1), 'of', numInstancesToLaunch, '...'
    instance.update()
    while (instance.state != 'running'):
        print '    .'
        time.sleep(1)
        instance.update()
    print '    instance', (i + 1), 'of', numInstancesToLaunch, 'is up.'
    name = (instanceNameRoot + str(i))
    instance.add_tag('Name', value=name)
print 
print 'Creating output files: ', publicFileName, privateFileName
print 
for i in range(numInstancesToLaunch):
    instance = reservation.instances[i]
    instanceName = ''
    if ('Name' in instance.tags):
        instanceName = instance.tags['Name']
    print 'Instance', (i + 1), 'of', numInstancesToLaunch
    print '    Name:   ', instanceName
    print '    PUBLIC: ', instance.public_dns_name
    print '    PRIVATE:', instance.private_ip_address
    print 
    fpublic.write((instance.public_dns_name + '\n'))
    fprivate.write((instance.private_ip_address + '\n'))
fpublic.close()
fprivate.close()
print 'Sleeping for 60 seconds for ssh to be available...'
time.sleep(60)
d = os.path.dirname(os.path.realpath(__file__))
print 'Testing ssh access...'
cmd = ((d + '/') + 'h2o-cluster-test-ssh.sh')
rv = os.system(cmd)
if (rv != 0):
    print 'Failed.'
    sys.exit(1)
print 
print 'Distributing flatfile...'
cmd = ((d + '/') + 'h2o-cluster-distribute-flatfile.sh')
rv = os.system(cmd)
if (rv != 0):
    print 'Failed.'
    sys.exit(1)
