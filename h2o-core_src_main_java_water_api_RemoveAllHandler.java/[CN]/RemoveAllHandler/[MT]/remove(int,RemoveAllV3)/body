{
  Log.info("Removing all objects");
  Futures fs=new Futures();
  for (  Job j : Job.jobs()) {
    j.cancel();
    j.remove(fs);
  }
  if (InitIDHandler.SESSIONS != null) {
    Set<String> keys=InitIDHandler.SESSIONS.keySet();
    for (    String k : keys)     (InitIDHandler.SESSIONS.remove(k)).endQuietly(null);
    InitIDHandler.SESSIONS.clear();
  }
  fs.blockForPending();
  new MRTask(){
    @Override public byte priority(){
      return H2O.GUI_PRIORITY;
    }
    @Override public void setupLocal(){
      H2O.raw_clear();
      water.fvec.Vec.ESPC.clear();
    }
  }
.doAllNodes();
  H2O.getPM().getIce().cleanUp();
  Log.info("Finished removing objects");
  return u;
}
