def _model_build(self, x, y, tframe, vframe, kwargs):
    kwargs[u'training_frame'] = tframe
    if (vframe is not None):
        kwargs[u'validation_frame'] = vframe
    if is_type(y, int):
        y = tframe.names[y]
    if (y is not None):
        kwargs[u'response_column'] = y
    if (not isinstance(x, (list, tuple))):
        x = [x]
    if is_type(x[0], int):
        x = [tframe.names[i] for i in x]
    offset = kwargs[u'offset_column']
    folds = kwargs[u'fold_column']
    weights = kwargs[u'weights_column']
    ignored_columns = list((set(tframe.names) - set((x + [y, offset, folds, weights]))))
    kwargs[u'ignored_columns'] = (None if (ignored_columns == []) else [quoted(col) for col in ignored_columns])
    kwargs[u'interactions'] = (None if ((u'interactions' not in kwargs) or (kwargs[u'interactions'] is None)) else [quoted(col) for col in kwargs[u'interactions']])
    kwargs = {k: H2OEstimator._keyify_if_h2oframe(kwargs[k]) for k in kwargs}
    rest_ver = (kwargs.pop(u'_rest_version') if (u'_rest_version' in kwargs) else 3)
    model = H2OJob(h2o.api((u'POST /%d/ModelBuilders/%s' % (rest_ver, self.algo)), data=kwargs), job_type=(self.algo + u' Model Build'))
    if self._future:
        self._job = model
        return
    model.poll()
    model_json = h2o.api((u'GET /%d/Models/%s' % (rest_ver, model.dest_key)))[u'models'][0]
    self._resolve_model(model.dest_key, model_json)
