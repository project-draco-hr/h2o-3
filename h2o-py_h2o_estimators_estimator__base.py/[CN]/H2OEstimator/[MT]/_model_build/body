def _model_build(self, x, y, tframe, vframe, kwargs):
    kwargs['training_frame'] = tframe
    if (vframe is not None):
        kwargs['validation_frame'] = vframe
    if isinstance(y, int):
        y = tframe.names[y]
    if (y is not None):
        kwargs['response_column'] = y
    if (not isinstance(x, (list, tuple))):
        x = [x]
    if isinstance(x[0], int):
        x = [tframe.names[i] for i in x]
    offset = kwargs['offset_column']
    folds = kwargs['fold_column']
    weights = kwargs['weights_column']
    ignored_columns = list((set(tframe.names) - set((x + [y, offset, folds, weights]))))
    kwargs['ignored_columns'] = (None if (ignored_columns == []) else [h2o.h2o._quoted(col) for col in ignored_columns])
    kwargs = dict([(k, H2OEstimator._keyify_if_H2OFrame(kwargs[k])) for k in kwargs if (kwargs[k] is not None)])
    algo = self._compute_algo()
    model = H2OJob(H2OConnection.post_json(('ModelBuilders/' + algo), **kwargs), job_type=(algo + ' Model Build'))
    if self._future:
        self._job = model
        return
    model.poll()
    if ('_rest_version' in list(kwargs.keys())):
        model_json = H2OConnection.get_json(('Models/' + model.dest_key), _rest_version=kwargs['_rest_version'])['models'][0]
    else:
        model_json = H2OConnection.get_json(('Models/' + model.dest_key))['models'][0]
    self._resolve_model(model.dest_key, model_json)
