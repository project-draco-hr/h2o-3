def _model_build(self, x, y, tframe, vframe, kwargs):
    kwargs[u'training_frame'] = tframe
    if (vframe is not None):
        kwargs[u'validation_frame'] = vframe
    if is_int(y):
        y = tframe.names[y]
    if (y is not None):
        kwargs[u'response_column'] = y
    if (not isinstance(x, (list, tuple))):
        x = [x]
    if is_int(x[0]):
        x = [tframe.names[i] for i in x]
    offset = kwargs[u'offset_column']
    folds = kwargs[u'fold_column']
    weights = kwargs[u'weights_column']
    ignored_columns = list((set(tframe.names) - set((x + [y, offset, folds, weights]))))
    kwargs[u'ignored_columns'] = (None if (ignored_columns == []) else [quoted(col) for col in ignored_columns])
    kwargs[u'interactions'] = (None if ((u'interactions' not in kwargs) or (kwargs[u'interactions'] is None)) else [quoted(col) for col in kwargs[u'interactions']])
    kwargs = dict([(k, H2OEstimator._keyify_if_H2OFrame(kwargs[k])) for k in kwargs])
    algo = self._compute_algo()
    model = H2OJob(h2o.connection().post_json((u'ModelBuilders/' + algo), **kwargs), job_type=(algo + u' Model Build'))
    if self._future:
        self._job = model
        return
    model.poll()
    if (u'_rest_version' in list(kwargs.keys())):
        model_json = h2o.connection().get_json((u'Models/' + model.dest_key), _rest_version=kwargs[u'_rest_version'])[u'models'][0]
    else:
        model_json = h2o.connection().get_json((u'Models/' + model.dest_key))[u'models'][0]
    self._resolve_model(model.dest_key, model_json)
