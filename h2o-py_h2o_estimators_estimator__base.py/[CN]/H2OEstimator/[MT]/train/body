def train(self, X, y=None, training_frame=None, offset_column=None, fold_column=None, weights_column=None, validation_frame=None, **params):
    'Train the H2O model by specifying the predictor columns, response column, and any\n    additional frame-specific values.\n\n    Parameters\n    ----------\n      X : list\n        A list of column names or indices indicating the predictor columns.\n      y : str\n        An index or a column name indicating the response column.\n      training_frame : H2OFrame\n        The H2OFrame having the columns indicated by X and y (as well as any\n        additional columns specified by fold, offset, and weights).\n      offset_column : str, optional\n        The name or index of the column in training_frame that holds the offsets.\n      fold_column : str, optional\n        The name or index of the column in training_frame that holds the per-row fold\n        assignments.\n      weights_column : str, optional\n        The name or index of the column in training_frame that holds the per-row weights.\n      validation_frame : H2OFrame, optional\n        H2OFrame with validation data to be scored on while training.\n\n    Returns\n    -------\n      Returns self.\n    '
    algo_params = locals()
    self.parms.update({k: v for (k, v) in algo_params.iteritems() if (k not in ['self', 'params', 'algo_params'])})
    y = algo_params['y']
    tframe = algo_params['training_frame']
    if (tframe is None):
        raise ValueError('Missing training_frame')
    if (y is not None):
        self._estimator_type = ('classifier' if tframe[y].isfactor() else 'regressor')
    self.model = build_model(self.parms)
    self.__dict__.update(self.model.__dict__.copy())
    return self
