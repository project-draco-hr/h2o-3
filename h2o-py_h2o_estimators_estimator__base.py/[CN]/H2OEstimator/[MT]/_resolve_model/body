def _resolve_model(self, model_id, model_json):
    (metrics_class, model_class) = H2OEstimator._metrics_class(model_json)
    m = model_class()
    m._id = model_id
    m._model_json = model_json
    m._metrics_class = metrics_class
    m._parms = self._parms
    m._estimator_type = self._estimator_type
    if ((model_id is not None) and (model_json is not None) and (metrics_class is not None)):
        for metric in [u'training_metrics', u'validation_metrics', u'cross_validation_metrics']:
            if (metric in model_json[u'output']):
                if (model_json[u'output'][metric] is not None):
                    if (metric == u'cross_validation_metrics'):
                        m._is_xvalidated = True
                    model_json[u'output'][metric] = metrics_class(model_json[u'output'][metric], metric, model_json[u'algo'])
        if m._is_xvalidated:
            m._xval_keys = [i[u'name'] for i in model_json[u'output'][u'cross_validation_models']]
        for p in m._model_json[u'parameters']:
            m.parms[p[u'name']] = p
    H2OEstimator.mixin(self, model_class)
    self.__dict__.update(m.__dict__.copy())
