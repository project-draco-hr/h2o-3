def _resolve_model(self, model_id, model_json):
    metrics_class = H2OEstimator._metrics_class(model_json)
    m = self._make_model()
    m._id = model_id
    m._model_json = model_json
    m._metrics_class = metrics_class
    if ((model_id is not None) and (model_json is not None) and (metrics_class is not None)):
        for metric in ['training_metrics', 'validation_metrics', 'cross_validation_metrics']:
            if (metric in model_json['output']):
                if (model_json['output'][metric] is not None):
                    if (metric == 'cross_validation_metrics'):
                        m._is_xvalidated = True
                    model_json['output'][metric] = metrics_class(model_json['output'][metric], metric, model_json['algo'])
        if m._is_xvalidated:
            m._xval_keys = [i['name'] for i in model_json['output']['cross_validation_models']]
        for p in m._model_json['parameters']:
            m.parms[p['label']] = p
    self.__dict__ = m.__dict__.copy()
