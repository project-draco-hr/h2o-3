def check_and_count_models(self):
    '\n        This function will look at the hyper-parameter space and determine how many models will be built from\n        it.  In order to arrive at the correct answer, it must discount parameter settings that are illegal.\n\n        :return: total_model: integer, total number of models built from all legal parameter settings.\n        '
    total_model = 1
    param_len = 0
    hyper_keys = list(self.hyper_params)
    shuffle(hyper_keys)
    for param in hyper_keys:
        if (param == 'col_sample_rate_change_per_level'):
            param_len = len([x for x in self.hyper_params['col_sample_rate_change_per_level'] if ((x >= 0) and (x <= 2))])
        elif (param in self.params_zero_one):
            param_len = len([x for x in self.hyper_params[param] if ((x >= 0) and (x <= 1))])
        elif (param in self.params_more_than_zero):
            param_len = len([x for x in self.hyper_params[param] if (x > 0)])
        elif (param in self.params_more_than_one):
            param_len = len([x for x in self.hyper_params[param] if (x > 1)])
        elif (param in self.params_zero_positive):
            param_len = len([x for x in self.hyper_params[param] if (x >= 0)])
        else:
            param_len = len(self.hyper_params[param])
        if ((param_len > 0) and ((total_model * param_len) <= self.max_grid_model)):
            total_model *= param_len
            self.final_hyper_params[param] = self.hyper_params[param]
        else:
            break
    return total_model
