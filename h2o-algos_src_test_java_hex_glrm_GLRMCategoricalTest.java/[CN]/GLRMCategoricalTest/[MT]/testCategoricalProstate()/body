{
  GLRM job=null;
  GLRMModel model=null;
  Frame train=null;
  final int[] cats=new int[]{1,3,4,5};
  try {
    Scope.enter();
    train=parse_test_file(Key.make("prostate.hex"),"smalldata/logreg/prostate.csv");
    for (int i=0; i < cats.length; i++)     Scope.track(train.replace(cats[i],train.vec(cats[i]).toCategoricalVec())._key);
    train.remove("ID").remove();
    DKV.put(train._key,train);
    GLRMParameters parms=new GLRMParameters();
    parms._train=train._key;
    parms._k=8;
    parms._gamma_x=parms._gamma_y=0.1;
    parms._regularization_x=GLRMModel.GLRMParameters.Regularizer.Quadratic;
    parms._regularization_y=GLRMModel.GLRMParameters.Regularizer.Quadratic;
    parms._init=GLRM.Initialization.PlusPlus;
    parms._transform=DataInfo.TransformType.STANDARDIZE;
    parms._recover_svd=false;
    parms._max_iterations=200;
    try {
      job=new GLRM(parms);
      model=job.trainModel().get();
      Log.info("Iteration " + model._output._iterations + ": Objective value = "+ model._output._objective);
      model.score(train).delete();
      ModelMetricsGLRM mm=(ModelMetricsGLRM)ModelMetrics.getFromDKV(model,train);
      Log.info("Numeric Sum of Squared Error = " + mm._numerr + "\tCategorical Misclassification Error = "+ mm._caterr);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (train != null)     train.delete();
    if (model != null) {
      model._output._loading_key.get().delete();
      model.delete();
    }
    Scope.exit();
  }
}
