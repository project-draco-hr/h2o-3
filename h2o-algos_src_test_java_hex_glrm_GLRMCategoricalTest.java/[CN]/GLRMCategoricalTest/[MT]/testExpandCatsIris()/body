{
  double[][] iris=ard(ard(6.3,2.5,4.9,1.5,1),ard(5.7,2.8,4.5,1.3,1),ard(5.6,2.8,4.9,2.0,2),ard(5.0,3.4,1.6,0.4,0),ard(6.0,2.2,5.0,1.5,2));
  double[][] iris_expandR=ard(ard(0,1,0,6.3,2.5,4.9,1.5),ard(0,1,0,5.7,2.8,4.5,1.3),ard(0,0,1,5.6,2.8,4.9,2.0),ard(1,0,0,5.0,3.4,1.6,0.4),ard(0,0,1,6.0,2.2,5.0,1.5));
  String[] iris_cols=new String[]{"sepal_len","sepal_wid","petal_len","petal_wid","class"};
  String[][] iris_domains=new String[][]{null,null,null,null,new String[]{"setosa","versicolor","virginica"}};
  Frame fr=null;
  try {
    fr=parse_test_file(Key.make("iris.hex"),"smalldata/iris/iris_wheader.csv");
    DataInfo dinfo=new DataInfo(fr,null,0,true,DataInfo.TransformType.NONE,DataInfo.TransformType.NONE,false,false,false,false,false,false);
    Log.info("Original matrix:\n" + colFormat(iris_cols,"%8.7s") + ArrayUtils.pprint(iris));
    double[][] iris_perm=ArrayUtils.permuteCols(iris,dinfo._permutation);
    Log.info("Permuted matrix:\n" + colFormat(iris_cols,"%8.7s",dinfo._permutation) + ArrayUtils.pprint(iris_perm));
    double[][] iris_exp=GLRM.expandCats(iris_perm,dinfo);
    Log.info("Expanded matrix:\n" + colExpFormat(iris_cols,iris_domains,"%8.7s",dinfo._permutation) + ArrayUtils.pprint(iris_exp));
    Assert.assertArrayEquals(iris_expandR,iris_exp);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (fr != null)     fr.delete();
  }
}
