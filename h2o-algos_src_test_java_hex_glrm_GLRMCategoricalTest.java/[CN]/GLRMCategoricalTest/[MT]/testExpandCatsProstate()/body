{
  double[][] prostate=ard(ard(0,71,1,0,0,4.8,14.0,7),ard(1,70,1,1,0,8.4,21.8,5),ard(0,73,1,3,0,10.0,27.4,6),ard(1,68,1,0,0,6.7,16.7,6));
  double[][] pros_expandR=ard(ard(1,0,0,0,0,1,0,1,0,1,0,71,4.8,14.0,7),ard(0,1,0,0,0,1,0,0,1,1,0,70,8.4,21.8,5),ard(0,0,0,1,0,1,0,1,0,1,0,73,10.0,27.4,6),ard(1,0,0,0,0,1,0,0,1,1,0,68,6.7,16.7,6));
  String[] pros_cols=new String[]{"Capsule","Age","Race","Dpros","Dcaps","PSA","Vol","Gleason"};
  String[][] pros_domains=new String[][]{new String[]{"No","Yes"},null,new String[]{"Other","White","Black"},new String[]{"None","UniLeft","UniRight","Bilobar"},new String[]{"No","Yes"},null,null,null};
  final int[] cats=new int[]{1,3,4,5};
  Frame fr=null;
  try {
    Scope.enter();
    fr=parse_test_file(Key.make("prostate.hex"),"smalldata/logreg/prostate.csv");
    for (int i=0; i < cats.length; i++)     Scope.track(fr.replace(cats[i],fr.vec(cats[i]).toCategoricalVec()));
    fr.remove("ID").remove();
    DKV.put(fr._key,fr);
    DataInfo dinfo=new DataInfo(Key.make(),fr,null,0,true,DataInfo.TransformType.NONE,DataInfo.TransformType.NONE,false,false,false,false,false,false);
    Log.info("Original matrix:\n" + colFormat(pros_cols,"%8.7s") + ArrayUtils.pprint(prostate));
    double[][] pros_perm=ArrayUtils.permuteCols(prostate,dinfo._permutation);
    Log.info("Permuted matrix:\n" + colFormat(pros_cols,"%8.7s",dinfo._permutation) + ArrayUtils.pprint(pros_perm));
    double[][] pros_exp=GLRM.expandCats(pros_perm,dinfo);
    Log.info("Expanded matrix:\n" + colExpFormat(pros_cols,pros_domains,"%8.7s",dinfo._permutation) + ArrayUtils.pprint(pros_exp));
    Assert.assertArrayEquals(pros_expandR,pros_exp);
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (fr != null)     fr.delete();
    Scope.exit();
  }
}
