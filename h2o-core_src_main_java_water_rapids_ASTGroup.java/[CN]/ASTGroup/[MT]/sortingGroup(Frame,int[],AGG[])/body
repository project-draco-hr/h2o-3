{
  Frame x=new Frame();
  for (  int gbCol : gbCols)   x.add(fr._names[gbCol],fr.vec(gbCol));
  final long[][] rows=new ASTGroupSorted().sort(x);
  if (rows.length != 1)   throw H2O.unimpl();
  long ngrps=ArrayUtils.maxValue(rows[0]) + 1;
  if (ngrps > Integer.MAX_VALUE)   throw H2O.unimpl();
  final G[] gs=new G[(int)ngrps];
  for (int i=0; i < ngrps; i++)   gs[i]=new G(gbCols.length,aggs);
  new MRTask(){
    @Override public void map(    Chunk[] cs){
      long start=cs[0].start();
      for (int row=0; row < cs[0]._len; row++) {
        final G g=gs[(int)rows[0][(int)start + row]];
        for (int i=0; i < aggs.length; i++) {
          throw H2O.unimpl();
        }
      }
    }
    @Override public void reduce(    MRTask t){
      throw H2O.unimpl();
    }
  }
.doAll(fr);
  return gs;
}
