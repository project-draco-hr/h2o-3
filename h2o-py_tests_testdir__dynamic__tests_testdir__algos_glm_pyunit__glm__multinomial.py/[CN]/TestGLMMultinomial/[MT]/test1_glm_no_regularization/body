def test1_glm_no_regularization(self):
    '\n        S klearn logistic regression model is built.\n        H2O GLM is built for Multinomial family with the same random data sets.  We observe\n        the weights, confusion matrices from the two models.  We compare the logloss, prediction\n        accuracy from the two models to determine if H2O GLM model shall pass the test.\n        '
    print('*******************************************************************************************')
    print('Test1: build H2O GLM with Multinomial with no regularization.')
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_multinomial_result(self.training_data_file, self.test_data_file, False, False)
    self.test_template_model = H2OGeneralizedLinearEstimator(family=self.family, Lambda=0)
    self.test_template_model.train(x=self.x_indices, y=self.y_index, training_frame=self.training_data)
    self.test_template_model_metrics = self.test_template_model.model_performance(test_data=self.test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(self.test_template_model, self.test_template_model_metrics, self.family, '\nTest1 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training data set ....', '\nComparing logloss from test data set ....', '\nComparing confusion matrices from training data set ....', '\nComparing confusion matrices from test data set ...', '\nComparing accuracy from training data set ....', '\nComparing accuracy from test data set ....'], h2o_att_str=['H2O intercept and weights: \n', 'H2O logloss from training data set: ', 'H2O logloss from test data set', 'H2O confusion matrix from training data set: \n', 'H2O confusion matrix from test data set: \n', 'H2O accuracy from training data set: ', 'H2O accuracy from test data set: '], template_att_str=['Sklearn intercept and weights: \n', 'Sklearn logloss from training data set: ', 'Sklearn logloss from test data set: ', 'Sklearn confusion matrix from training data set: \n', 'Sklearn confusion matrix from test data set: \n', 'Sklearn accuracy from training data set: ', 'Sklearn accuracy from test data set: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training data set differ too much!', 'Logloss from test data set differ too much!', '', '', 'Accuracies from training data set differ too much!', 'Accuracies from test data set differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training data set are close enough!', 'Logloss from test data set are close enough!', '', '', 'Accuracies from training data set are close enough!', 'Accuracies from test data set are close enough!'], can_be_better_than_template=[False, True, True, False, False, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test1_glm_no_regularization', num_test_failed, self.test_failed)
    self.test_num += 1
