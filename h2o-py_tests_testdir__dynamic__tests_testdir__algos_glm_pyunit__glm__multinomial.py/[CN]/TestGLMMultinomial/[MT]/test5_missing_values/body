def test5_missing_values(self):
    '\n        Test parameter missing_values_handling="MeanImputation" with\n        only real value predictors.  The same data sets as before are used.  However, we\n        go into the predictor matrix and randomly decide to change a value to be\n        nan and create missing values.  Since no regularization is enabled in this case,\n        we are able to build a Sklearn model where we can\n        compare our H2O models with.\n        '
    print('*******************************************************************************************')
    print('Test5: test the GLM with imputation of missing values with column averages.')
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_multinomial_result(self.training_data_file_nans, self.test_data_file_nans, False, False)
    training_data = h2o.import_file(pyunit_utils.locate(self.training_data_file_nans))
    test_data = h2o.import_file(pyunit_utils.locate(self.test_data_file_nans))
    training_data[self.y_index] = training_data[self.y_index].asfactor()
    test_data[self.y_index] = test_data[self.y_index].asfactor()
    model_h2o = H2OGeneralizedLinearEstimator(family=self.family, Lambda=0, missing_values_handling='MeanImputation')
    model_h2o.train(x=self.x_indices, y=self.y_index, training_frame=training_data)
    h2o_model_test_metrics = model_h2o.model_performance(test_data=test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(model_h2o, h2o_model_test_metrics, self.family, '\nTest5 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training data set ....', '\nComparing logloss from test data set ....', '\nComparing confusion matrices from training data set ....', '\nComparing confusion matrices from test data set ...', '\nComparing accuracy from training data set ....', '\nComparing accuracy from test data set ....'], h2o_att_str=['H2O missing values intercept and weights: \n', 'H2O missing values logloss from training data set: ', 'H2O missing values logloss from test data set', 'H2O missing values confusion matrix from training data set: \n', 'H2O missing values confusion matrix from test data set: \n', 'H2O missing values accuracy from training data set: ', 'H2O missing values accuracy from test data set: '], template_att_str=['Sklearn missing values intercept and weights: \n', 'Sklearn missing values logloss from training data set: ', 'Sklearn missing values logloss from test data set: ', 'Sklearn missing values confusion matrix from training data set: \n', 'Sklearn missing values confusion matrix from test data set: \n', 'Sklearn missing values accuracy from training data set: ', 'Sklearn missing values accuracy from test data set: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training data set differ too much!', 'Logloss from test data set differ too much!', '', '', 'Accuracies from training data set differ too much!', 'Accuracies from test data set differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training data set are close enough!', 'Logloss from test data set are close enough!', '', '', 'Accuracies from training data set are close enough!', 'Accuracies from test data set are close enough!'], can_be_better_than_template=[False, True, True, False, False, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test5_missing_values', num_test_failed, self.test_failed)
    self.test_num += 1
