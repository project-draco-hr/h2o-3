def test_GLM_airlines(self):
    files = [('airlines', 'year2013.csv', 'airlines_all.hex', 1800, 'IsDepDelayed')]
    for (importFolderPath, csvFilename, trainKey, timeoutSecs, response) in files:
        csvPathname = ((importFolderPath + '/') + csvFilename)
        model_key = 'GLMModelKey'
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, schema='local', hex_key=trainKey, timeoutSecs=timeoutSecs)
        pA = h2o_cmd.ParseObj(parseResult)
        iA = h2o_cmd.InspectObj(pA.parse_key)
        parse_key = pA.parse_key
        numRows = iA.numRows
        numCols = iA.numCols
        labelList = iA.labelList
        labelListUsed = list(labelList)
        numColsUsed = numCols
        parameters = {'validation_frame': parse_key, 'ignored_columns': '[CRSDepTime,CRSArrTime,ActualElapsedTime,CRSElapsedTime,AirTime,ArrDelay,DepDelay,TaxiIn,TaxiOut,Cancelled,CancellationCode,Diverted,CarrierDelay,WeatherDelay,NASDelay,SecurityDelay,LateAircraftDelay,IsArrDelayed]', 'score_each_iteration': True, 'response_column': response, 'do_classification': True, 'balance_classes': False, 'max_after_balance_size': None, 'standardize': False, 'family': 'binomial', 'link': None, 'tweedie_variance_power': None, 'tweedie_link_power': None, 'alpha': '[0]', 'lambda': '[0.5]', 'prior1': None, 'lambda_search': None, 'nlambdas': None, 'lambda_min_ratio': None, 'use_all_factor_levels': False, 'n_folds': 1, }
        model_key = 'airlines_glm.hex'
        bmResult = h2o.n0.build_model(algo='glm', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=300)
        bm = OutputObj(bmResult, 'bm')
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        t0 = len(model.coefficients_table.data[0])
        t1 = len(model.coefficients_table.data[1])
        h2o_glm.simpleCheckGLM(self, model, parameters, labelList, labelListUsed)
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        mcms = OutputObj({'data': cmm.max_criteria_and_metric_scores.data, }, 'mcms')
        m1 = mcms.data[1:]
        h0 = mcms.data[0]
        print '\nmcms', tabulate(m1, headers=h0)
        thms = OutputObj(cmm.thresholds_and_metric_scores, 'thms')
        cmms = OutputObj({'cm': cmm.confusion_matrices, }, 'cmms')
        if (1 == 0):
            print ''
            for (i, c) in enumerate(cmms.cm):
                print ('\ncmms.cm[%s]' % i), tabulate(c)
            print ''
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mm = OutputObj(mmResult['model_metrics'][0], 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
