{
  if (_nodes > MAX_NODES || _constantPoolSize > MAX_CONSTANT_POOL_SIZE || _staticInitSize > MAX_METHOD_SIZE) {
    _sb.p(_javaClassName).p('_').p(_subtrees).p(".score0").p("(data)");
    _nodesCnt[_depth]=_nodes;
    _sbs[_depth]=_sb;
    _grpSplits[_depth]=_grpsplit;
    _grpSplitsCnt[_depth]=_grpCnt;
    _constantPool[_depth]=_constantPoolSize;
    _staticInit[_depth]=_staticInitSize;
    _sb=new SB();
    _nodes=0;
    _grpsplit=new SB();
    _grpCnt=0;
    _constantPoolSize=0;
    _staticInitSize=0;
    preamble(_sb,_subtrees);
    _subtrees++;
  }
  if (equal == 2 || equal == 3 && gcmp != null) {
    _grpsplit.i(1).p("// ").p(gcmp.toString()).nl();
    _grpsplit.i(1).p("public static final byte[] GRPSPLIT").p(_grpCnt).p(" = new byte[] ").p(gcmp.toStrArray()).p(";").nl();
    _constantPoolSize+=gcmp.numBytes() + 3;
    _staticInitSize+=6 + gcmp.numBytes() * 6;
  }
  _sb.ip(" (");
  if (equal == 0 || equal == 1) {
    if (equal == 1)     _sb.p("!Double.isNaN(data[").p(col).p("]) && ");
    _sb.p("data[").p(col);
    if (_verboseCode) {
      _sb.p(" /* ").p(_tm._output._names[col]).p(" */");
    }
    _sb.p("] ").p(equal == 1 ? "!= " : "<").pj(fcmp);
    _constantPoolSize+=2;
  }
 else {
    gcmp.toJava(_sb,"GRPSPLIT" + _grpCnt,col,_tm._output._names[col]);
    _grpCnt++;
  }
  _sb.p(" ? ").ii(2).nl();
}
