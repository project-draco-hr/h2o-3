def test_rf_gridsearch_sorting_metrics(self):
    '\n        test_rf_gridsearch_sorting_metrics performs the following:\n        b. build H2O random forest models using grid search.  No model is built for bad hyper-parameters\n           values.  We should instead get a warning/error message printed out.\n        c. Check and make sure that the models are returned sorted with the correct cross-validation metrics.\n        '
    if (self.possible_number_models > 0):
        print('*******************************************************************************************')
        print('test_rf_gridsearch_sorting_metrics for random forest ')
        h2o.cluster_info()
        print('Hyper-parameters used here is {0}'.format(self.final_hyper_params))
        grid_model = H2OGridSearch(H2ORandomForestEstimator(nfolds=self.nfolds, seed=self.seed, score_tree_interval=0), hyper_params=self.final_hyper_params)
        grid_model.train(x=self.x_indices, y=self.y_index, training_frame=self.training1_data)
        result_table = grid_model._grid_json['summary_table']
        model_index = 0
        grid_model_metrics = []
        diff = 0
        diff_train = 0
        for each_model in grid_model:
            grid_model_metric = float(result_table[self.training_metric][model_index])
            grid_model_metrics.append(grid_model_metric)
            manual_metric = each_model._model_json['output']['cross_validation_metrics']._metric_json['logloss']
            if ((not (type(grid_model_metrics) == unicode)) and (not (type(manual_metric) == unicode))):
                diff += abs((grid_model_metric - manual_metric))
            manual_training_metric = each_model._model_json['output']['training_metrics']._metric_json['logloss']
            if ((not (type(grid_model_metrics) == unicode)) and (not (type(manual_training_metric) == unicode))):
                diff_train += abs((grid_model_metric - manual_training_metric))
            print('grid model logloss: {0}, grid model training logloss: {1}'.format(grid_model_metric, manual_training_metric))
            model_index += 1
        if ((diff > self.diff) or (not (grid_model_metrics == sorted(grid_model_metrics))) or (diff_train < self.diff)):
            self.test_failed = 1
            print('test_rf_gridsearch_sorting_metrics for random forest has failed!')
        if (self.test_failed == 0):
            print('test_rf_gridsearch_sorting_metrics for random forest has passed!')
