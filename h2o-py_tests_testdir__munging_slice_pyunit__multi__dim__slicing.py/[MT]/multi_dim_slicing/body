def multi_dim_slicing(ip, port):
    h2o.init(ip, port)
    prostate = h2o.import_frame(path=h2o.locate('smalldata/logreg/prostate.csv'))
    pros = prostate[47:51, 7]
    assert h2o.as_list((pros == 16.3))[0][0], 'Incorrect slicing result'
    pros = prostate[(172, 8)]
    assert h2o.as_list((pros == 7))[0][0], 'Incorrect slicing result'
    pros = prostate[170:176, 2]
    assert h2o.as_list((pros[(0, 0)] == 74))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(1, 0)] == 71))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(2, 0)] == 60))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(3, 0)] == 62))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(4, 0)] == 71))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(5, 0)] == 67))[0][0], 'Incorrect slicing result'
    pros = prostate[188, 0:3]
    assert h2o.as_list((pros[(0, 0)] == 189))[0][0], 'Incorrect slicing result'
    assert h2o.as_list(((pros[(0, 1)] + 1) == 2))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(0, 2)] == 69))[0][0], 'Incorrect slicing result'
    pros = prostate[83:86, 1:4]
    assert h2o.as_list((pros[(0, 0)] == 0))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(0, 1)] == 75))[0][0], 'Incorrect slicing result'
    assert h2o.as_list(((pros[(0, 2)] - 1) == 0))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(1, 0)] == 0))[0][0], 'Incorrect slicing result'
    assert h2o.as_list(((pros[(1, 1)] + 75) == 150))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(1, 2)] == 1))[0][0], 'Incorrect slicing result'
    assert h2o.as_list(((pros[(2, 0)] + 1) == 2))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(2, 1)] == 75))[0][0], 'Incorrect slicing result'
    assert h2o.as_list((pros[(2, 2)] == 1))[0][0], 'Incorrect slicing result'
