def multi_dim_slicing(ip, port):
    h2o.init(ip, port)
    prostate = h2o.import_frame(path=h2o.locate('smalldata/logreg/prostate.csv'))
    pros = h2o.as_list(prostate[47:51, 7])[0][0]
    assert (pros == 16.3), 'Incorrect slicing result'
    pros = prostate[(172, 8)]
    assert (pros.eager() == 7), 'Incorrect slicing result'
    pros = prostate[170:176, 2]
    assert (pros[(0, 0)].eager() == 74), 'Incorrect slicing result'
    assert (pros[(1, 0)].eager() == 71), 'Incorrect slicing result'
    assert (pros[(2, 0)].eager() == 60), 'Incorrect slicing result'
    assert (pros[(3, 0)].eager() == 62), 'Incorrect slicing result'
    assert (pros[(4, 0)].eager() == 71), 'Incorrect slicing result'
    assert (pros[(5, 0)].eager() == 67), 'Incorrect slicing result'
    pros = prostate[188, 0:3]
    assert (pros[(0, 0)].eager() == 189), 'Incorrect slicing result'
    assert ((pros[(0, 1)].eager() + 1) == 2), 'Incorrect slicing result'
    assert (pros[(0, 2)].eager() == 69), 'Incorrect slicing result'
    pros = prostate[83:86, 1:4]
    assert (pros[(0, 0)].eager() == 0), 'Incorrect slicing result'
    assert (pros[(0, 1)].eager() == 75), 'Incorrect slicing result'
    assert ((pros[(0, 2)].eager() - 1) == 0), 'Incorrect slicing result'
    assert (pros[(1, 0)].eager() == 0), 'Incorrect slicing result'
    assert ((pros[(1, 1)].eager() + 75) == 150), 'Incorrect slicing result'
    assert (pros[(1, 2)].eager() == 1), 'Incorrect slicing result'
    assert ((pros[(2, 0)].eager() + 1) == 2), 'Incorrect slicing result'
    assert (pros[(2, 1)].eager() == 75), 'Incorrect slicing result'
    assert (pros[(2, 2)].eager() == 1), 'Incorrect slicing result'
