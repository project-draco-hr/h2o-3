def test7_missing_enum_values_lambda_search(self):
    '\n        Test parameter missing_values_handling="MeanImputation" with mixed predictors (categorical/real value columns).\n        We first generate a data set that\n        contains a random number of columns of categorical and real value columns.  Next, we\n        encode the categorical columns.  Then, we generate the random data set using the formula\n        as before.  Next, we go into the predictor matrix and randomly\n        decide to change a value to be nan and create missing values.  Lambda-search will be\n        enabled with alpha set to 0.5.  Since the encoding is different in this case\n        than in test6, we build a Sklearn model and compare the best H2O\n        model MSEs with theoretical calculations and hope that they are close.\n        '
    print('*******************************************************************************************')
    print('Test7: test the GLM with imputation of missing enum/real values under lambda search.')
    h2o.cluster_info()
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_multinomial_result(self.training_data_file_enum_nans_true_one_hot, self.test_data_file_enum_nans_true_one_hot, True, True, validation_data_file=self.validation_data_file_enum_nans_true_one_hot)
    training_data = h2o.import_file(pyunit_utils.locate(self.training_data_file_enum_nans_true_one_hot))
    validation_data = h2o.import_file(pyunit_utils.locate(self.validation_data_file_enum_nans_true_one_hot))
    test_data = h2o.import_file(pyunit_utils.locate(self.test_data_file_enum_nans_true_one_hot))
    for ind in range(self.enum_col):
        training_data[ind] = training_data[ind].asfactor()
        validation_data[ind] = validation_data[ind].asfactor()
        test_data[ind] = test_data[ind].asfactor()
    num_col = training_data.ncol
    y_index = (num_col - 1)
    x_indices = list(range(y_index))
    training_data[y_index] = training_data[y_index].asfactor()
    validation_data[y_index] = validation_data[y_index].asfactor()
    test_data[y_index] = test_data[y_index].asfactor()
    model_h2o_0p5 = H2OGeneralizedLinearEstimator(family=self.family, lambda_search=True, alpha=0.5, lambda_min_ratio=1e-20, missing_values_handling='MeanImputation')
    model_h2o_0p5.train(x=x_indices, y=y_index, training_frame=training_data, validation_frame=validation_data)
    h2o_model_0p5_test_metrics = model_h2o_0p5.model_performance(test_data=test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(model_h2o_0p5, h2o_model_0p5_test_metrics, self.family, '\nTest7 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training data set ....', '\nComparing logloss from test data set ....', '\nComparing confusion matrices fromtraining data set ....', '\nComparing confusion matrices fromtest data set ...', '\nComparing accuracy from training data set ....', '\nComparing accuracy from test data set ....'], h2o_att_str=['H2O with enum/real values, lamba search and missing values intercept and weights: \n', 'H2O with enum/real values, lamba search and missing values logloss from training data set: ', 'H2O with enum/real values, lamba search and missing values logloss from test data set', 'H2O with enum/real values, lamba search and missing values confusion matrix from training data set: \n', 'H2O with enum/real values, lamba search and missing values confusion matrix from test data set: \n', 'H2O with enum/real values, lamba search and missing values accuracy from training data set: ', 'H2O with enum/real values, lamba search and missing values accuracy from test data set: '], template_att_str=['Sklearn with enum/real values, lamba search and missing values intercept and weights: \n', 'Sklearn with enum/real values, lamba search and missing values logloss from training data set: ', 'Sklearn with enum/real values, lamba search and missing values logloss from test data set: ', 'Sklearn with enum/real values, lamba search and missing values confusion matrix from training data set: \n', 'Sklearn with enum/real values, lamba search and missing values confusion matrix from test data set: \n', 'Sklearn with enum/real values, lamba search and missing values accuracy from training data set: ', 'Sklearn with enum/real values, lamba search and missing values accuracy from test data set: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training data set differ too much!', 'Logloss from test data set differ too much!', '', '', 'Accuracies from training data set differ too much!', 'Accuracies from test data set differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training data set are close enough!', 'Logloss from test data set are close enough!', '', '', 'Accuracies from training data set are close enough!', 'Accuracies from test data set are close enough!'], can_be_better_than_template=[True, True, True, True, True, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test7_missing_enum_values_lambda_search', num_test_failed, self.test_failed)
    self.test_num += 1
