{
  final String[] old_domains=vec.domain();
  final String[][] new_domains=newDomains(old_domains,splitRegEx);
  final String regex=splitRegEx;
  return new MRTask(){
    @Override public void map(    Chunk[] cs,    NewChunk[] ncs){
      Chunk c=cs[0];
      for (int i=0; i < c._len; ++i) {
        int cnt=0;
        if (!c.isNA(i)) {
          int idx=(int)c.at8(i);
          String s=old_domains[idx];
          String[] ss=s.split(regex);
          for (          String s1 : ss) {
            int n_idx=Arrays.asList(new_domains[cnt]).indexOf(s1);
            if (n_idx == -1)             ncs[cnt++].addNA();
 else             ncs[cnt++].addNum(n_idx);
          }
        }
        if (cnt < ncs.length)         for (; cnt < ncs.length; ++cnt)         ncs[cnt].addNA();
      }
    }
  }
.doAll(new_domains.length,Vec.T_CAT,new Frame(vec)).outputFrame(null,null,new_domains).vecs();
}
