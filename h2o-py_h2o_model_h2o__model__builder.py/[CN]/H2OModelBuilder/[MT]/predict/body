def predict(self, test_data=None, **kwargs):
    '\n        Predict on a data set.\n        :param test_data: A set of data that is compatible with the model.\n        :return: A new H2OFrame filled with predictions.\n        '
    if (not test_data):
        raise ValueError('Must specify test data')
    test_data_key = H2OFrame.send_frame(test_data)
    url_suffix = ((('Predictions/models/' + self._model_key) + '/frames/') + test_data_key)
    j = h2oConn.do_safe_post_json(url_suffix=url_suffix)
    prediction_frame_key = j['model_metrics'][0]['predictions']['key']['name']
    pred_frame_meta = h2o.frame(prediction_frame_key)['frames'][0]
    veckeys = pred_frame_meta['veckeys']
    rows = pred_frame_meta['rows']
    cols = [col['label'] for col in pred_frame_meta['columns']]
    vecs = H2OVec.new_vecs(zip(cols, veckeys), rows)
    h2o.remove(self._parameters['training_frame'])
    return H2OFrame(vecs=vecs)
