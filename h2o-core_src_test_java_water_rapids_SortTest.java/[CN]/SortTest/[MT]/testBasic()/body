{
  Frame fr=null, res=null;
  String tree="(sort hex [0 1])";
  try {
    fr=buildFrame(3,4);
    Val val=Rapids.exec(tree);
    System.out.println(val.toString());
    assertTrue(val instanceof ValFrame);
    res=((ValFrame)val)._fr;
    final long max0=(long)fr.vec(0).max();
    new MRTask(){
      @Override public void map(      Chunk cs[]){
        long x0=val(cs[0].at8(0),cs[1].at8(0),cs[2].at8(0));
        for (int i=1; i < cs[0]._len; i++) {
          long x1=val(cs[0].at8(i),cs[1].at8(i),cs[2].at8(i));
          assertTrue(x0 < x1);
          x0=x1;
        }
        long row=cs[0].start() + cs[0]._len;
        if (row < cs[0].vec().length()) {
          long x1=val(cs[0].vec().at8(row),cs[1].vec().at8(row),cs[2].vec().at8(row));
          assertTrue(x0 < x1);
        }
      }
      private long val(      long a,      long b,      long c){
        return ((b * max0 + a) << 32) + c;
      }
    }
.doAll(res);
  }
  finally {
    if (fr != null)     fr.delete();
    if (res != null)     res.delete();
    Keyed.remove(Key.make("hex"));
  }
}
