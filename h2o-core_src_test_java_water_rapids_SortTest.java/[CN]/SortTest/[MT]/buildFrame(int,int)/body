{
  int scale0=3;
  int scale1=10;
  int scale2=100;
  if (nChunks == -1) {
    long len=(long)card0 * (long)scale0 * (long)scale2;
    int rowsPerChunk=100000;
    nChunks=(int)((len + rowsPerChunk - 1) / rowsPerChunk);
  }
  NonBlockingHashMapLong<String> pairs_hash=new NonBlockingHashMapLong<>();
  Random R=new Random(card0 * scale0 * nChunks);
  for (int i=0; i < card0 * scale0; i++) {
    long pair=(((long)R.nextInt(card0)) << 32) | (R.nextInt(card0 * scale1));
    if (pairs_hash.containsKey(pair))     i--;
 else     pairs_hash.put(pair,"");
  }
  long[] pairs=pairs_hash.keySetLong();
  Key[] keys=new Vec.VectorGroup().addVecs(3);
  AppendableVec col0=new AppendableVec(keys[0],Vec.T_NUM);
  AppendableVec col1=new AppendableVec(keys[1],Vec.T_NUM);
  AppendableVec col2=new AppendableVec(keys[2],Vec.T_NUM);
  NewChunk ncs0[]=new NewChunk[nChunks];
  NewChunk ncs1[]=new NewChunk[nChunks];
  NewChunk ncs2[]=new NewChunk[nChunks];
  for (int i=0; i < nChunks; i++) {
    ncs0[i]=new NewChunk(col0,i);
    ncs1[i]=new NewChunk(col1,i);
    ncs2[i]=new NewChunk(col2,i);
  }
  int len=pairs.length * scale2;
  for (int i=0; i < len; i++) {
    long pair=pairs[R.nextInt(pairs.length)];
    int nchk=R.nextInt(nChunks);
    ncs0[nchk].addNum((int)(pair >> 32),0);
    ncs1[nchk].addNum((int)(pair),0);
  }
  int espc[]=new int[nChunks + 1];
  for (int i=0; i < nChunks; i++)   espc[i + 1]=espc[i] + ncs0[i].len();
  for (int i=0; i < nChunks; i++)   for (int j=0; j < ncs0[i].len(); j++)   ncs2[i].addNum(espc[i] + j,0);
  Futures fs=new Futures();
  for (int i=0; i < nChunks; i++) {
    ncs0[i].close(i,fs);
    ncs1[i].close(i,fs);
    ncs2[i].close(i,fs);
  }
  Vec vec0=col0.layout_and_close(fs);
  Vec vec1=col1.layout_and_close(fs);
  Vec vec2=col2.layout_and_close(fs);
  fs.blockForPending();
  Frame fr=new Frame(Key.<Frame>make("hex"),null,new Vec[]{vec0,vec1,vec2});
  DKV.put(fr);
  return fr;
}
