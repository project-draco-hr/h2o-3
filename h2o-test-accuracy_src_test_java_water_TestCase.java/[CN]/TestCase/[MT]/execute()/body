{
  loadTestCaseDataSets();
  makeModelParameters();
  double startTime=0, stopTime=0;
  if (!grid) {
    Model.Output modelOutput=null;
    DRF drfJob;
    DRFModel drfModel=null;
    GLM glmJob;
    GLMModel glmModel=null;
    GBM gbmJob;
    GBMModel gbmModel=null;
    DeepLearning dlJob;
    DeepLearningModel dlModel=null;
    try {
switch (algo) {
case "drf":
        drfJob=new DRF((DRFModel.DRFParameters)params);
      AccuracyTestingSuite.summaryLog.println("Training DRF model.");
    startTime=System.currentTimeMillis();
  drfModel=drfJob.trainModel().get();
stopTime=System.currentTimeMillis();
modelOutput=drfModel._output;
break;
case "glm":
glmJob=new GLM((GLMModel.GLMParameters)params,Key.<GLMModel>make("GLMModel"));
AccuracyTestingSuite.summaryLog.println("Training GLM model.");
startTime=System.currentTimeMillis();
glmModel=glmJob.trainModel().get();
stopTime=System.currentTimeMillis();
modelOutput=glmModel._output;
break;
case "gbm":
gbmJob=new GBM((GBMModel.GBMParameters)params);
AccuracyTestingSuite.summaryLog.println("Training GBM model.");
startTime=System.currentTimeMillis();
gbmModel=gbmJob.trainModel().get();
stopTime=System.currentTimeMillis();
modelOutput=gbmModel._output;
break;
case "dl":
dlJob=new DeepLearning((DeepLearningModel.DeepLearningParameters)params);
AccuracyTestingSuite.summaryLog.println("Training DL model.");
startTime=System.currentTimeMillis();
dlModel=dlJob.trainModel().get();
stopTime=System.currentTimeMillis();
modelOutput=dlModel._output;
break;
}
}
 catch (Exception e) {
throw new Exception(e);
}
 finally {
if (drfModel != null) {
drfModel.delete();
}
if (glmModel != null) {
glmModel.delete();
}
if (gbmModel != null) {
gbmModel.delete();
}
if (dlModel != null) {
dlModel.delete();
}
}
removeTestCaseDataSetFrames();
return new TestCaseResult(testCaseId,getMetrics(modelOutput._training_metrics),getMetrics(modelOutput._validation_metrics),stopTime - startTime);
}
 else {
makeGridParameters();
Grid grid=null;
Model bestModel=null;
try {
switch (algo) {
case "drf":
new DRF(true);
break;
case "glm":
new GLM(true);
break;
case "gbm":
new GBM(true);
break;
case "dl":
new DeepLearning(true);
break;
}
startTime=System.currentTimeMillis();
Job<Grid> gs=GridSearch.startGridSearch(null,params,hyperParms);
grid=gs.get();
stopTime=System.currentTimeMillis();
boolean higherIsBetter=higherIsBetter(gridCriteria);
double bestScore=higherIsBetter ? -Double.MAX_VALUE : Double.MAX_VALUE;
for (Model m : grid.getModels()) {
double validationMetricScore=getMetrics(m._output._validation_metrics).get(gridCriteria);
AccuracyTestingSuite.summaryLog.println(gridCriteria + " for model " + m._key.toString()+ " is "+ validationMetricScore);
if (higherIsBetter ? validationMetricScore > bestScore : validationMetricScore < bestScore) {
bestScore=validationMetricScore;
bestModel=m;
}
}
AccuracyTestingSuite.summaryLog.println("Best model: " + bestModel._key.toString());
}
 catch (Exception e) {
throw new Exception(e);
}
 finally {
if (grid != null) {
grid.delete();
}
}
removeTestCaseDataSetFrames();
return new TestCaseResult(testCaseId,getMetrics(bestModel._output._training_metrics),getMetrics(bestModel._output._validation_metrics),stopTime - startTime);
}
}
