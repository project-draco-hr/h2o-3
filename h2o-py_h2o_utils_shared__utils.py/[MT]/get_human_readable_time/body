def get_human_readable_time(time_ms):
    u'\n    Convert given duration in milliseconds into a human-readable representation, i.e. hours, minutes, seconds,\n    etc. More specifically, the returned string may look like following:\n        1 day 3 hours 12 mins\n        3 days 0 hours 0 mins\n        8 hours 12 mins\n        34 mins 02 secs\n        13 secs\n        541 ms\n    In particular, the following rules are applied:\n        * milliseconds are printed only if the duration is less than a second;\n        * seconds are printed only if the duration is less than an hour;\n        * for durations greater than 1 hour we print days, hours and minutes keeping zeros in the middle (i.e. we\n          return "4 days 0 hours 12 mins" instead of "4 days 12 mins").\n\n    :param time_ms: duration, as a number of elapsed milliseconds.\n    :return: human-readable string representation of the provided duration.\n    '
    millis = (time_ms % 1000)
    secs = ((time_ms // 1000) % 60)
    mins = ((time_ms // 60000) % 60)
    hours = ((time_ms // 3600000) % 24)
    days = (time_ms // 86400000)
    res = u''
    if (days > 1):
        res += (u'%d days' % days)
    elif (days == 1):
        res += u'1 day'
    if ((hours > 1) or ((hours == 0) and res)):
        res += (u' %d hours' % hours)
    elif (hours == 1):
        res += u' 1 hour'
    if ((mins > 1) or ((mins == 0) and res)):
        res += (u' %d mins' % mins)
    elif (mins == 1):
        res += u' 1 min'
    if ((days == 0) and (hours == 0)):
        res += (u' %02d secs' % secs)
    if (not res):
        res = (u' %d ms' % millis)
    return res.strip()
