def get_human_readable_bytes(size):
    u'\n    Convert given number of bytes into a human readable representation, i.e. add prefix such as kb, Mb, Gb,\n    etc. The `size` argument must be a non-negative integer.\n\n    :param size: integer representing byte size of something\n    :return: string representation of the size, in human-readable form\n    '
    if (size == 0):
        return u'0'
    if (size is None):
        return u''
    assert_is_type(size, int)
    assert (size >= 0), (u'`size` cannot be negative, got %d' % size)
    suffixes = u'PTGMk'
    maxl = len(suffixes)
    for i in range((maxl + 1)):
        shift = ((maxl - i) * 10)
        if ((size >> shift) == 0):
            continue
        ndigits = 0
        for nd in [3, 2, 1]:
            if ((size >> ((shift + 12) - (nd * 3))) == 0):
                ndigits = nd
                break
        if ((ndigits == 0) or (size == ((size >> shift) << shift))):
            rounded_val = str((size >> shift))
        else:
            rounded_val = (u'%.*f' % (ndigits, (size / (1 << shift))))
        return (u'%s %sb' % (rounded_val, (suffixes[i] if (i < maxl) else u'')))
