{
  if (H2O.SELF_ADDRESS != null)   return H2O.SELF_ADDRESS;
  if ((H2O.ARGS.ip != null) && (H2O.ARGS.network != null)) {
    Log.err("ip and network options must not be used together");
    H2O.exit(-1);
  }
  ArrayList<NetworkInit> networkList=NetworkInit.calcArrayList(H2O.ARGS.network);
  if (networkList == null) {
    Log.err("Exiting.");
    H2O.exit(-1);
  }
  ArrayList<InetAddress> ips=calcPrioritizedInetAddressList();
  InetAddress local=null;
  InetAddress arg=null;
  if (H2O.ARGS.ip != null) {
    try {
      arg=InetAddress.getByName(H2O.ARGS.ip);
    }
 catch (    UnknownHostException e) {
      Log.err(e);
      H2O.exit(-1);
    }
    if (!(arg instanceof Inet4Address)) {
      Log.warn("Only IP4 addresses allowed.");
      H2O.exit(-1);
    }
    if (!ips.contains(arg)) {
      Log.warn("IP address not found on this machine");
      H2O.exit(-1);
    }
    local=arg;
  }
 else   if (networkList.size() > 0) {
    Log.info("Network list was specified by the user.  Searching for a match...");
    ArrayList<InetAddress> validIps=new ArrayList();
    for (    InetAddress ip : ips) {
      Log.info("    Considering " + ip.getHostAddress() + " ...");
      for (      NetworkInit n : networkList) {
        if (n.inetAddressOnNetwork(ip)) {
          Log.info("    Matched " + ip.getHostAddress());
          return (H2O.SELF_ADDRESS=ip);
        }
      }
    }
    Log.err("No interface matches the network list from the -network option.  Exiting.");
    H2O.exit(-1);
  }
 else {
    ArrayList<InetAddress> validIps=new ArrayList();
    for (    InetAddress ip : ips) {
      if (ip instanceof Inet4Address && !ip.isLoopbackAddress() && !ip.isLinkLocalAddress()) {
        validIps.add(ip);
      }
    }
    if (validIps.size() == 1) {
      local=validIps.get(0);
    }
 else {
      local=guessInetAddress(validIps);
    }
  }
  if (local == null) {
    try {
      Log.warn("Failed to determine IP, falling back to localhost.");
      local=InetAddress.getByName("127.0.0.1");
    }
 catch (    UnknownHostException e) {
      Log.throwErr(e);
    }
  }
  return (H2O.SELF_ADDRESS=local);
}
