def cv_carsRF(ip, port):
    h2o.init(ip, port)
    cars = h2o.import_frame(path=h2o.locate('smalldata/junit/cars_20mpg.csv'))
    problem = random.sample(range(3), 1)[0]
    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']
    if (problem == 1):
        response_col = 'economy_20mpg'
        cars[response_col] = cars[response_col].asfactor()
    elif (problem == 2):
        response_col = 'cylinders'
        cars[response_col] = cars[response_col].asfactor()
    else:
        response_col = 'economy'
    print 'Response column: {0}'.format(response_col)
    nfolds = random.randint(3, 10)
    rf1 = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=nfolds, seed=1234)
    rf2 = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=nfolds, seed=1234)
    h2o.check_models(rf1, rf2)
    rf = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=cars.nrow(), seed=1234)
    rf1 = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=0, seed=1234)
    rf2 = h2o.random_forest(y=cars[response_col], x=cars[predictors], seed=1234)
    h2o.check_models(rf1, rf2)
    rf3 = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=(cars.nrow() + 1), seed=1234)
    h2o.check_models(rf, rf3)
    try:
        rf = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=random.randint((-10000), (-1)))
        rf = h2o.random_forest(y=cars[response_col], x=cars[predictors], nfolds=1)
        assert False, 'Expected model-build to fail when nfolds is 1 or < 0'
    except EnvironmentError:
        assert True
    r = cars[0].runif()
    train = cars[(r > 0.2)]
    valid = cars[(r <= 0.2)]
    try:
        rf = h2o.random_forest(y=train[response_col], x=train[predictors], nfolds=random.randint(3, 10), validation_y=valid[1], validation_x=valid[predictors])
        assert False, 'Expected model-build to fail when both cross-validation and regular validation is attempted'
    except EnvironmentError:
        assert True
