{
  float[] vi=new float[units[0]];
  Arrays.fill(vi,0f);
  float[][] Qik=new float[units[0]][units[2]];
  float[] sum_wj=new float[units[1]];
  float[] sum_wk=new float[units[2]];
  for (  float[] Qi : Qik)   Arrays.fill(Qi,0f);
  Arrays.fill(sum_wj,0f);
  Arrays.fill(sum_wk,0f);
  for (int j=0; j < units[1]; j++) {
    for (int i=0; i < units[0]; i++) {
      float wij=get_weights(0).get(j,i);
      sum_wj[j]+=Math.abs(wij);
    }
  }
  for (int k=0; k < units[2]; k++) {
    for (int j=0; j < units[1]; j++) {
      float wjk=get_weights(1).get(k,j);
      sum_wk[k]+=Math.abs(wjk);
    }
  }
  for (int i=0; i < units[0]; i++) {
    for (int k=0; k < units[2]; k++) {
      for (int j=0; j < units[1]; j++) {
        float wij=get_weights(0).get(j,i);
        float wjk=get_weights(1).get(k,j);
        Qik[i][k]+=Math.abs(wij) / sum_wj[j] * Math.abs(wjk) / sum_wk[k];
      }
    }
  }
  for (int k=0; k < units[2]; k++) {
    float sumQk=0;
    for (int i=0; i < units[0]; i++)     sumQk+=Qik[i][k];
    for (int i=0; i < units[0]; i++)     Qik[i][k]/=sumQk;
  }
  for (int i=0; i < units[0]; i++)   vi[i]=ArrayUtils.sum(Qik[i]);
  ArrayUtils.div(vi,ArrayUtils.maxValue(vi));
  return vi;
}
