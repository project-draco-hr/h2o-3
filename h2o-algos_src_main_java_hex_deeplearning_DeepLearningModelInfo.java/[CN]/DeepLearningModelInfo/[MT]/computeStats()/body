{
  float[][] rate=get_params()._adaptive_rate ? new float[units.length - 1][] : null;
  if (get_params()._autoencoder && get_params()._sparsity_beta > 0) {
    for (int k=0; k < get_params()._hidden.length; k++) {
      mean_a[k]=0;
      for (int j=0; j < avg_activations[k].size(); j++)       mean_a[k]+=avg_activations[k].get(j);
      mean_a[k]/=avg_activations[k].size();
    }
  }
  for (int y=0; y < units.length - 1; y++) {
    mean_rate[y]=rms_rate[y]=0;
    mean_bias[y]=rms_bias[y]=0;
    mean_weight[y]=rms_weight[y]=0;
    for (int u=0; u < biases[y].size(); u++) {
      mean_bias[y]+=biases[y].get(u);
    }
    if (rate != null)     rate[y]=new float[get_weights(y).raw().length];
    for (int u=0; u < get_weights(y).raw().length; u++) {
      mean_weight[y]+=get_weights(y).raw()[u];
      if (rate != null) {
        final float RMS_dx=MathUtils.approxSqrt(get_ada_dx_g(y).raw()[2 * u] + (float)get_params()._epsilon);
        final float invRMS_g=MathUtils.approxInvSqrt(get_ada_dx_g(y).raw()[2 * u + 1] + (float)get_params()._epsilon);
        rate[y][u]=RMS_dx * invRMS_g;
        mean_rate[y]+=rate[y][u];
      }
    }
    mean_bias[y]/=biases[y].size();
    mean_weight[y]/=get_weights(y).size();
    if (rate != null)     mean_rate[y]/=rate[y].length;
    for (int u=0; u < biases[y].size(); u++) {
      final double db=biases[y].get(u) - mean_bias[y];
      rms_bias[y]+=db * db;
    }
    for (int u=0; u < get_weights(y).size(); u++) {
      final double dw=get_weights(y).raw()[u] - mean_weight[y];
      rms_weight[y]+=dw * dw;
      if (rate != null) {
        final double drate=rate[y][u] - mean_rate[y];
        rms_rate[y]+=drate * drate;
      }
    }
    rms_bias[y]=MathUtils.approxSqrt(rms_bias[y] / biases[y].size());
    rms_weight[y]=MathUtils.approxSqrt(rms_weight[y] / get_weights(y).size());
    if (rate != null)     rms_rate[y]=MathUtils.approxSqrt(rms_rate[y] / rate[y].length);
    final double w_thresh=1e10;
    final double b_thresh=100;
    unstable|=mean_bias[y] > b_thresh || isNaN(mean_bias[y]) || rms_bias[y] > b_thresh || isNaN(rms_bias[y]) || mean_weight[y] > w_thresh || isNaN(mean_weight[y]) || rms_weight[y] > w_thresh || isNaN(rms_weight[y]);
  }
}
