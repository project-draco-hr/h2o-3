{
  computeStats();
  Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(this);
  long byte_size=new AutoBuffer().put(this).buf().length;
  TwoDimTable table=new TwoDimTable("Status of Neuron Layers",(!get_params()._autoencoder ? ("predicting " + data_info._adaptedFrame.lastVecName() + ", ") : "") + (get_params()._autoencoder ? "auto-encoder" : _classification ? (units[units.length - 1] + "-class classification") : "regression") + ", "+ get_params()._distribution+ " distribution, "+ get_params()._loss+ " loss, "+ String.format("%,d",size())+ " weights/biases, "+ PrettyPrint.bytes(byte_size)+ ", "+ String.format("%,d",get_processed_global())+ " training samples, "+ "mini-batch size "+ String.format("%,d",get_params()._mini_batch_size),new String[neurons.length],new String[]{"Layer","Units","Type","Dropout","L1","L2","Mean Rate","Rate RMS","Momentum","Mean Weight","Weight RMS","Mean Bias","Bias RMS"},new String[]{"int","int","string","double","double","double","double","double","double","double","double","double","double"},new String[]{"%d","%d","%s","%2.2f %%","%5f","%5f","%5f","%5f","%5f","%5f","%5f","%5f","%5f"},"");
  for (int i=0; i < neurons.length; ++i) {
    table.set(i,0,i + 1);
    table.set(i,1,neurons[i].units);
    table.set(i,2,neurons[i].getClass().getSimpleName());
    if (i == 0) {
      table.set(i,3,neurons[i].params._input_dropout_ratio * 100);
      continue;
    }
 else     if (i < neurons.length - 1) {
      if (neurons[i].params._hidden_dropout_ratios == null) {
        table.set(i,3,0);
      }
 else {
        table.set(i,3,neurons[i].params._hidden_dropout_ratios[i - 1] * 100);
      }
    }
    table.set(i,4,neurons[i].params._l1);
    table.set(i,5,neurons[i].params._l2);
    table.set(i,6,(get_params()._adaptive_rate ? mean_rate[i - 1] : neurons[i].rate(get_processed_total())));
    table.set(i,7,(get_params()._adaptive_rate ? rms_rate[i - 1] : 0));
    table.set(i,8,get_params()._adaptive_rate ? 0 : neurons[i].momentum(get_processed_total()));
    table.set(i,9,mean_weight[i - 1]);
    table.set(i,10,rms_weight[i - 1]);
    table.set(i,11,mean_bias[i - 1]);
    table.set(i,12,rms_bias[i - 1]);
  }
  summaryTable=table;
  return summaryTable;
}
