{
  Random rng=new Random(0xDECAF);
  for (  Distribution.Family dist : new Distribution.Family[]{Distribution.Family.AUTO,Distribution.Family.gaussian,Distribution.Family.laplace,Distribution.Family.quantile,Distribution.Family.huber,Distribution.Family.gamma,Distribution.Family.poisson,Distribution.Family.tweedie,Distribution.Family.bernoulli,Distribution.Family.modified_huber}) {
    DeepLearningParameters p=new DeepLearningParameters();
    p._distribution=dist;
    int N=1000;
    double eps=1. / (10. * N);
    for (    double y : new double[]{0,1}) {
      for (int i=-5 * N; i < 5 * N; ++i) {
        p._huber_delta=rng.nextDouble() + 0.1;
        p._tweedie_power=1.01 + rng.nextDouble() * 0.9;
        p._quantile_alpha=0.05 + rng.nextDouble() * 0.9;
        Distribution d=new Distribution(p);
        double f=(i + 0.5) / N;
        double grad=-2 * d.negHalfGradient(y,f);
        double approxgrad=(d.deviance(1,y,d.linkInv(f + eps)) - d.deviance(1,y,d.linkInv(f - eps))) / (2 * eps);
        assert(Math.abs(grad - approxgrad) <= 1e-4);
      }
    }
  }
}
