{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  if (fr.numCols() != 1 && !fr.anyVec().isEnum())   throw new IllegalArgumentException("can only match on a single categorical column.");
  Key tmp=Key.make();
  String[] _strsTable=null;
  double[] _dblsTable=null;
  if (asts[2] instanceof ASTNumList)   _dblsTable=((ASTNumList)asts[2]).expand();
 else   if (asts[2] instanceof ASTNum)   _dblsTable=new double[]{asts[2].exec(env).getNum()};
 else   if (asts[2] instanceof ASTStrList)   _strsTable=((ASTStrList)asts[2])._strs;
 else   if (asts[2] instanceof ASTStr)   _strsTable=new String[]{asts[2].exec(env).getStr()};
 else   throw new IllegalArgumentException("Expected numbers/strings. Got: " + asts[2].getClass());
  final String[] strsTable=_strsTable;
  final double[] dblsTable=_dblsTable;
  Frame rez=new MRTask(){
    @Override public void map(    Chunk c,    NewChunk n){
      int rows=c._len;
      if (strsTable == null)       for (int r=0; r < rows; ++r)       n.addNum(c.isNA(r) ? 0 : in(dblsTable,c.atd(r)),0);
 else       for (int r=0; r < rows; ++r)       n.addNum(c.isNA(r) ? 0 : in(strsTable,c.vec().domain()[(int)c.at8(r)]),0);
    }
  }
.doAll(1,fr.anyVec()).outputFrame(tmp,null,null);
  return new ValFrame(rez);
}
