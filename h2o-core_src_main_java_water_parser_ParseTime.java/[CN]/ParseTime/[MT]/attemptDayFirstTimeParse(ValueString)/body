{
  final byte[] buf=str.getBuffer();
  int i=str.getOffset();
  final int end=i + str.length();
  while (i < end && buf[i] == ' ')   i++;
  if (i < end && buf[i] == '"')   i++;
  if ((end - i) < 8)   return Long.MIN_VALUE;
  int yyyy=0, MM=0, dd=0;
  dd=digit(dd,buf[i++]);
  if (isDigit(buf[i]))   dd=digit(dd,buf[i++]);
  if (dd < 1 || dd > 31)   return Long.MIN_VALUE;
  if (buf[i] == '-')   i++;
  if (!isChar(buf[i]))   return Long.MIN_VALUE;
  byte[] MMM=null;
  OUTER:   for (; MM < MMS.length; MM++) {
    byte[][] mss=MMS[MM];
    INNER:     for (    byte[] ms : mss) {
      MMM=ms;
      if (MMM == null)       continue;
      if (i + MMM.length >= end)       continue INNER;
      for (int j=0; j < MMM.length; j++)       if (MMM[j] != Character.toLowerCase(buf[i + j]))       continue INNER;
      if (buf[i + MMM.length] == '-' || isDigit(buf[i + MMM.length]))       break OUTER;
    }
  }
  if (MM == MMS.length)   return Long.MIN_VALUE;
  i+=MMM.length;
  MM++;
  if (buf[i] == '-')   i++;
  yyyy=digit(yyyy,buf[i++]);
  yyyy=digit(yyyy,buf[i++]);
  if (end - i >= 2 && buf[i] != '"' && buf[i] != ' ' && buf[i] != ':') {
    yyyy=digit(yyyy,buf[i++]);
    yyyy=digit(yyyy,buf[i++]);
  }
 else {
    if (yyyy >= 69)     yyyy+=1900;
 else     yyyy+=2000;
  }
  if (i < end && buf[i] == '"')   i++;
  if (i == end)   return new DateTime(yyyy,MM,dd,0,0,0,getTimezone()).getMillis();
  if (buf[i] != ' ' && buf[i] != ':')   return Long.MIN_VALUE;
  return parseTime(buf,++i,end,yyyy,MM,dd);
}
