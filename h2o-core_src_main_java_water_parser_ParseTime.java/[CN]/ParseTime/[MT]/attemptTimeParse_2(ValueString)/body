{
  final byte[] buf=str.get_buf();
  int i=str.get_off();
  final int end=i + str.get_length();
  while (i < end && buf[i] == ' ')   i++;
  if (i < end && buf[i] == '"')   i++;
  if ((end - i) < 8)   return Long.MIN_VALUE;
  int yy=0, MM=0, dd=0;
  dd=digit(dd,buf[i++]);
  if (buf[i] != '-')   dd=digit(dd,buf[i++]);
  if (dd < 1 || dd > 31)   return Long.MIN_VALUE;
  if (buf[i++] != '-')   return Long.MIN_VALUE;
  byte[] mm=null;
  OUTER:   for (; MM < MMS.length; MM++) {
    byte[][] mms=MMS[MM];
    INNER:     for (    byte[] mm1 : mms) {
      mm=mm1;
      if (mm == null)       continue;
      if (i + mm.length >= end)       continue INNER;
      for (int j=0; j < mm.length; j++)       if (mm[j] != Character.toLowerCase(buf[i + j]))       continue INNER;
      if (buf[i + mm.length] == '-')       break OUTER;
    }
  }
  if (MM == MMS.length)   return Long.MIN_VALUE;
  i+=mm.length;
  MM++;
  if (buf[i++] != '-')   return Long.MIN_VALUE;
  yy=digit(yy,buf[i++]);
  yy=digit(yy,buf[i++]);
  if (end - i >= 2 && buf[i] != '"') {
    yy=digit(yy,buf[i++]);
    yy=digit(yy,buf[i++]);
  }
 else {
    yy+=2000;
  }
  if (i < end && buf[i] == '"')   i++;
  if (i < end)   return Long.MIN_VALUE;
  return encodeTimePat(new DateTime(yy,MM,dd,0,0,0,getTimezone()).getMillis(),2);
}
