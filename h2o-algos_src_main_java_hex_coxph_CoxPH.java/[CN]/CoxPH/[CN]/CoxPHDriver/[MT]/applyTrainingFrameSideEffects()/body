{
  int numCols=_modelBuilderTrain.numCols();
  String responseVecName=_modelBuilderTrain.names()[numCols - 1];
  Vec responseVec=_modelBuilderTrain.remove(numCols - 1);
  final boolean use_weights_column=(_parms.weights_column != null);
  final boolean use_start_column=(_parms.start_column != null);
  if (use_weights_column) {
    Vec weightsVec=_parms.weights_column;
    int idxInRawFrame=_train.find(weightsVec);
    if (idxInRawFrame < 0) {
      throw new RuntimeException("CoxPHDriver failed to find weightVec");
    }
    String weightsVecName=_parms.train().names()[idxInRawFrame];
    _modelBuilderTrain.add(weightsVecName,weightsVec);
  }
  if (use_start_column) {
    Vec startVec=_parms.start_column;
    int idxInRawFrame=_train.find(startVec);
    if (idxInRawFrame < 0) {
      throw new RuntimeException("CoxPHDriver failed to find startVec");
    }
    String startVecName=_parms.train().names()[idxInRawFrame];
    _modelBuilderTrain.add(startVecName,startVec);
  }
{
    Vec stopVec=_parms.stop_column;
    int idxInRawFrame=_train.find(stopVec);
    if (idxInRawFrame < 0) {
      throw new RuntimeException("CoxPHDriver failed to find stopVec");
    }
    String stopVecName=_parms.train().names()[idxInRawFrame];
    _modelBuilderTrain.add(stopVecName,stopVec);
  }
  _modelBuilderTrain.add(responseVecName,responseVec);
}
