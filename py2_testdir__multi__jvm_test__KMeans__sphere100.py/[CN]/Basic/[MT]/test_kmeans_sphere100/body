def test_kmeans_sphere100(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_spheres100.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    centersList = write_spheres_dataset(csvPathname, CLUSTERS, SPHERE_PTS)
    if SHUFFLE_SPHERES:
        csvFilename2 = 'syn_spheres100_shuffled.csv'
        csvPathname2 = ((SYNDATASETS_DIR + '/') + csvFilename2)
        h2o_util.file_shuffle(csvPathname, csvPathname2)
    else:
        csvFilename2 = csvFilename
        csvPathname2 = csvPathname
    print '\nStarting', csvFilename
    parseResult = h2i.import_parse(path=csvPathname2, schema='put', hex_key=(csvFilename2 + '.hex'))
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    numColsUsed = numCols
    labelListUsed = labelList
    destination_key = 'syn_spheres100.hex'
    cols = ','.join(map(str, range(DIMENSIONS)))
    for trial in range(2):
        parameters = {'validation_frame': parse_key, 'ignored_columns': None, 'k': CLUSTERS, 'max_iterations': 50, 'standardize': False, 'init': 'Furthest', }
        timeoutSecs = 100
        model_key = 'sphere100_k.hex'
        kmeansResult = h2o.n0.build_model(algo='kmeans', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=timeoutSecs)
        modelResult = h2o.n0.models(key=model_key)
        km = h2o_kmeans.KMeansObj(modelResult, parameters, numRows, numColsUsed, labelListUsed)
        expected = [(None, c, None, None) for c in centersList]
        expected.sort(key=(lambda tup: sum(tup[1])))
        h2o_kmeans.compareResultsToExpected(km.tuplesSorted, expected, allowedDelta=[0.01, 0.01, 0.01])
        print 'Trial #', trial, 'completed'
