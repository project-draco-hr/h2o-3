{
  long localParseSize=(long)(double)totalSize / cloudsize;
  if (oldHeuristic) {
    long chunkSize=(localParseSize / (cores * 4));
    if (chunkSize <= (1 << 16)) {
      return DFLT_CHUNK_SIZE;
    }
    chunkSize=1L << MathUtils.log2(chunkSize);
    if (chunkSize < DFLT_CHUNK_SIZE && (localParseSize / chunkSize) * numCols < (1 << 21)) {
      return (int)chunkSize;
    }
    long tmp=(localParseSize * numCols / (1 << 21));
    if (tmp > (1 << 30))     return (1 << 30);
    if (tmp > DFLT_CHUNK_SIZE) {
      chunkSize=1 << MathUtils.log2((int)tmp);
      return (int)chunkSize;
    }
 else     return DFLT_CHUNK_SIZE;
  }
 else {
    int minNumberRows=10;
    int perNodeChunkCountLimit=1 << 21;
    int minParseChunkSize=1 << 12;
    int maxParseChunkSize=Value.MAX - 1;
    long chunkSize=Math.max((localParseSize / (cores * 4)),minParseChunkSize);
    if (totalSize <= 1 << 16) {
      chunkSize=Math.max(DFLT_CHUNK_SIZE,(int)(minNumberRows * maxLineLength));
    }
 else {
      chunkSize=1L << MathUtils.log2(chunkSize);
      if (chunkSize < DFLT_CHUNK_SIZE && (localParseSize / chunkSize) * numCols < perNodeChunkCountLimit) {
        chunkSize=Math.max((int)chunkSize,(int)(minNumberRows * maxLineLength));
      }
 else {
        int chunkCount=cores * 4 * numCols;
        if (chunkCount > perNodeChunkCountLimit) {
          double ratio=1 << Math.max(2,MathUtils.log2((int)(double)chunkCount / perNodeChunkCountLimit));
          chunkSize*=ratio;
        }
        chunkSize=Math.min(maxParseChunkSize,chunkSize);
        if (chunkSize <= minNumberRows * maxLineLength) {
          chunkSize=(int)Math.max(DFLT_CHUNK_SIZE,Math.min(maxParseChunkSize,minNumberRows * maxLineLength));
        }
      }
    }
    assert(chunkSize >= minParseChunkSize);
    assert(chunkSize <= maxParseChunkSize);
    Log.info("ParseSetup heuristic: " + "cloudSize: " + cloudsize + ", cores: "+ cores+ ", numCols: "+ numCols+ ", maxLineLength: "+ maxLineLength+ ", totalSize: "+ totalSize+ ", localParseSize: "+ localParseSize+ ", chunkSize: "+ chunkSize+ ", numChunks: "+ Math.max(1,totalSize / chunkSize)+ ", numChunks * cols: "+ (Math.max(1,totalSize / chunkSize) * numCols));
    return (int)chunkSize;
  }
}
