def __init__(self, model, hyper_params, grid_id=None, search_criteria=None):
    u'\n        Grid Search of a Hyper-Parameter Space for a Model\n\n        Parameters\n        ----------\n        model : H2OEstimator, type\n          The type of model to be explored initialized with optional parameters that will be\n          unchanged across explored models.\n        hyper_params: dict\n          A dictionary of string parameters (keys) and a list of values to be explored by grid\n          search (values).\n        grid_id : str, optional\n          The unique id assigned to the resulting grid object. If none is given, an id will\n          automatically be generated.\n        search_criteria: dict, optional\n          A dictionary of directives which control the search of the hyperparameter space.\n          The default strategy \'Cartesian\' covers the entire space of hyperparameter combinations.\n          Specify the \'RandomDiscrete\' strategy to get random search of all the combinations\n          of your hyperparameters.  RandomDiscrete should usually be combined with at least one early\n          stopping criterion, max_models and/or max_runtime_secs, e.g.\n          search_criteria = {strategy: \'RandomDiscrete\', max_models: 42, max_runtime_secs: 28800} or\n          search_criteria = {strategy: \'RandomDiscrete\', stopping_metric: \'AUTO\', stopping_tolerance: 0.001,\n                             stopping_rounds: 10} or\n          search_criteria = {strategy: \'RandomDiscrete\', stopping_metric: \'misclassification\',\n                             stopping_tolerance: 0.00001, stopping_rounds: 5}.\n\n        Returns\n        -------\n          A new H2OGridSearch instance.\n\n        Examples\n        --------\n          >>> from h2o.grid.grid_search import H2OGridSearch\n          >>> from h2o.estimators.glm import H2OGeneralizedLinearEstimator\n          >>> hyper_parameters = {\'alpha\': [0.01,0.5], \'lambda\': [1e-5,1e-6]}\n          >>> gs = H2OGridSearch(H2OGeneralizedLinearEstimator(family=\'binomial\'), hyper_parameters)\n          >>> training_data = h2o.import_file("smalldata/logreg/benign.csv")\n          >>> gs.train(x=range(3) + range(4,11),y=3, training_frame=training_data)\n          >>> gs.show()\n        '
    super(H2OGridSearch, self).__init__()
    assert_is_type(model, H2OEstimator, (lambda mdl: issubclass(mdl, H2OEstimator)))
    assert_is_type(hyper_params, dict)
    assert_is_type(grid_id, None, str)
    assert_is_type(search_criteria, None, dict)
    if (not is_type(model, H2OEstimator)):
        model = model()
    self._id = grid_id
    self.model = model
    self.hyper_params = dict(hyper_params)
    self.search_criteria = (None if (search_criteria is None) else dict(search_criteria))
    self._grid_json = None
    self.models = None
    self._parms = {}
    self.parms = {}
    self._future = False
    self._job = None
