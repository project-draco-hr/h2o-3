def __init__(self, model, hyper_params, grid_id=None, search_criteria=None):
    '\n    Grid Search of a Hyper-Parameter Space for a Model\n  \n    Parameters\n    ----------\n    model : H2OEstimator\n      The type of model to be explored initialized with optional parameters that will be\n      unchanged across explored models.\n    hyper_params: dict\n      A dictionary of string parameters (keys) and a list of values to be explored by grid\n      search (values).\n    grid_id : str, optional\n      The unique id assigned to the resulting grid object. If none is given, an id will\n      automatically be generated.\n    search_criteria: dict, optional\n      A dictionary of directives which direct the search of the hyperparameter space.\n     \n    Returns\n    -------\n      A new H2OGridSearch instance.\n    \n    Examples\n    --------\n      >>> from h2o.grid.grid_search import H2OGridSearch\n      >>> from h2o.estimators.glm import H2OGeneralizedLinearEstimator\n      >>> hyper_parameters = {\'alpha\': [0.01,0.5], \'lambda\': [1e-5,1e-6]}\n      >>> gs = H2OGridSearch(H2OGeneralizedLinearEstimator(family=\'binomial\'), hyper_parameters)\n      >>> training_data = h2o.import_file("smalldata/logreg/benign.csv")\n      >>> gs.train(x=range(3) + range(4,11),y=3, training_frame=training_data)\n      >>> gs.show()\n    '
    self._id = grid_id
    self.model = (model() if (model.__class__.__name__ == 'type') else model)
    self.hyper_params = dict(hyper_params)
    self.search_criteria = (None if (None == search_criteria) else dict(search_criteria))
    self._grid_json = None
    self.models = None
    self._parms = {}
    self.parms = {}
    self._estimator_type = None
    self._future = False
    self._job = None
