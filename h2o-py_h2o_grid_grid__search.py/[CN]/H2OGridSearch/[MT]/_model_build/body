def _model_build(self, x, y, tframe, vframe, kwargs):
    kwargs[u'training_frame'] = tframe
    if (vframe is not None):
        kwargs[u'validation_frame'] = vframe
    if is_type(y, int):
        y = tframe.names[y]
    if (y is not None):
        kwargs[u'response_column'] = y
    if (not is_type(x, list, tuple)):
        x = [x]
    if is_type(x[0], int):
        x = [tframe.names[i] for i in x]
    offset = kwargs[u'offset_column']
    folds = kwargs[u'fold_column']
    weights = kwargs[u'weights_column']
    ignored_columns = list((set(tframe.names) - set((x + [y, offset, folds, weights]))))
    kwargs[u'ignored_columns'] = (None if (not ignored_columns) else [quoted(col) for col in ignored_columns])
    kwargs = dict([(k, (kwargs[k].frame_id if isinstance(kwargs[k], H2OFrame) else kwargs[k])) for k in kwargs if (kwargs[k] is not None)])
    algo = self.model._compute_algo()
    if (self.grid_id is not None):
        kwargs[u'grid_id'] = self.grid_id
    rest_ver = (kwargs.pop(u'_rest_version') if (u'_rest_version' in kwargs) else None)
    grid = H2OJob(h2o.api((u'POST /99/Grid/%s' % algo), data=kwargs), job_type=(algo + u' Grid Build'))
    if self._future:
        self._job = grid
        return
    grid.poll()
    if (rest_ver is not None):
        grid_json = h2o.api((u'GET /99/Grids/%s' % grid.dest_key))
        error_index = 0
        if (len(grid_json[u'failure_details']) > 0):
            print(u'Errors/Warnings building gridsearch model\n')
            for error_message in grid_json[u'failure_details']:
                if isinstance(grid_json[u'failed_params'][error_index], dict):
                    for h_name in grid_json[u'hyper_names']:
                        print(u'Hyper-parameter: {0}, {1}'.format(h_name, grid_json[u'failed_params'][error_index][h_name]))
                if (len(grid_json[u'failure_stack_traces']) > error_index):
                    print(u'failure_details: {0}\nfailure_stack_traces: {1}\n'.format(error_message, grid_json[u'failure_stack_traces'][error_index]))
                error_index += 1
    else:
        grid_json = h2o.api((u'GET /99/Grids/%s' % grid.dest_key))
    self.models = [h2o.get_model(key[u'name']) for key in grid_json[u'model_ids']]
    if (len(grid_json[u'model_ids']) > 0):
        first_model_json = h2o.api((u'GET /%d/Models/%s' % ((rest_ver or 3), grid_json[u'model_ids'][0][u'name'])))[u'models'][0]
        self._resolve_grid(grid.dest_key, grid_json, first_model_json)
    else:
        raise ValueError(u'Gridsearch returns no model due to bad parameter values or other reasons....')
