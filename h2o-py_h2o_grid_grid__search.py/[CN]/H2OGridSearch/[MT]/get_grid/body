def get_grid(self, sort_by=None, decreasing=None):
    '\n    Retrieve an H2OGridSearch instance. Optionally specify a metric by which to sort models and a sort order.  \n    \n    Parameters\n    ----------    \n    sort_by : str, optional\n      A metric by which to sort the models in the grid space. Choices are "logloss", "residual_deviance", "mse", "auc", "r2", "accuracy", "precision", "recall", "f1", etc.\n    decreasing : bool, optional\n      Sort the models in decreasing order of metric if true, otherwise sort in increasing order (default).\n    Returns\n    -------\n      A new H2OGridSearch instance optionally sorted on the specified metric.\n\n    '
    if ((sort_by is None) and (decreasing is None)):
        return self
    grid_json = H2OConnection.get_json(('Grids/' + self._id), sort_by=sort_by, decreasing=decreasing, _rest_version=99)
    grid = H2OGridSearch(self.model, self.hyper_params, self._id)
    grid.models = [h2o.get_model(key['name']) for key in grid_json['model_ids']]
    first_model_json = H2OConnection.get_json(('Models/' + grid_json['model_ids'][0]['name']), _rest_version=99)['models'][0]
    model_class = H2OGridSearch._metrics_class(first_model_json)
    m = model_class()
    m._id = self._id
    m._grid_json = grid_json
    m._parms = grid._parms
    H2OEstimator.mixin(grid, model_class)
    grid.__dict__.update(m.__dict__.copy())
    return grid
