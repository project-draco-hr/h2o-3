{
  Key parsedKey=Key.make("arcene_parsed");
  DataInfo dinfo=null;
  try {
    Frame source=parse_test_file(parsedKey,"smalldata/glm_test/arcene.csv");
    Frame valid=new Frame(source._names.clone(),source.vecs().clone());
    GLMParameters glmp=new GLMParameters(Family.gaussian);
    glmp._lambda=new double[]{1e-5};
    dinfo=new DataInfo(Key.make(),source,valid,1,false,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE);
    DKV.put(dinfo._key,dinfo);
    GradientSolver solver=new GLMColBasedGradientSolver(glmp,dinfo,1e-5,source.lastVec().mean(),source.numRows());
    L_BFGS lbfgs=new L_BFGS().setMinStep(1e-8);
    long t1=System.currentTimeMillis();
    double[] beta=MemoryManager.malloc8d(dinfo.fullN() + 1);
    beta[beta.length - 1]=glmp.link(source.lastVec().mean());
    lbfgs.solve(solver,beta.clone());
    L_BFGS.Result r=lbfgs.solve(solver,beta.clone());
    long t2=System.currentTimeMillis();
    GradientInfo ginfo=r.ginfo;
    assertEquals(.5 * glmp._lambda[0] * ArrayUtils.l2norm(r.coefs,true),ginfo._objVal,1e-3);
    assertTrue("iter# expected < 100, got " + r.iter,r.iter < 100);
    lbfgs=new L_BFGS().setMinStep(1e-8);
    solver=new GLM.GLMGradientSolver(glmp,dinfo,1e-5,source.lastVec().mean(),source.numRows());
    lbfgs.solve(solver,beta.clone());
    L_BFGS.Result r2=new L_BFGS().setMinStep(1e-8).solve(solver,beta.clone());
    long t3=System.currentTimeMillis();
    System.out.println("solver1 took " + (t2 - t1) + "ms, objval = "+ r.ginfo._objVal);
    System.out.println("solver2 took " + (t3 - t2) + "ms, objval = "+ r2.ginfo._objVal);
  }
  finally {
    if (dinfo != null)     DKV.remove(dinfo._key);
    Value v=DKV.get(parsedKey);
    if (v != null) {
      v.<Frame>get().delete();
    }
  }
}
