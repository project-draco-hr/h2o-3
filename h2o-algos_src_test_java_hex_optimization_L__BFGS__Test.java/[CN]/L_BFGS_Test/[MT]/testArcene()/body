{
  Key parsedKey=Key.make("arcene_parsed");
  DataInfo dinfo=null;
  try {
    Frame source=parse_test_file(parsedKey,"smalldata/glm_test/arcene.csv");
    Frame valid=new Frame(source._names.clone(),source.vecs().clone());
    GLMParameters glmp=new GLMParameters(Family.gaussian);
    dinfo=new DataInfo(Key.make(),source,valid,1,false,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE);
    DKV.put(dinfo._key,dinfo);
    GLM.GLMGradientSolver solver=new GLM.GLMGradientSolver(glmp,dinfo,1e-5,source.lastVec().mean(),source.numRows());
    L_BFGS.Result r=L_BFGS.solve(dinfo.fullN() + 1,solver,new L_BFGS_Params());
    GLM.GLMGradientInfo ginfo=(GLM.GLMGradientInfo)r.ginfo;
    assertEquals(0,ginfo._val.residualDeviance(),1e-3);
    assertTrue("iter# expected < 100, got " + r.iter,r.iter < 100);
  }
  finally {
    if (dinfo != null)     DKV.remove(dinfo._key);
    Value v=DKV.get(parsedKey);
    if (v != null) {
      v.<Frame>get().delete();
    }
  }
}
