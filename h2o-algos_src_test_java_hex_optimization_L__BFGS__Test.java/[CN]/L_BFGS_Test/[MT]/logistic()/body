{
  Key parsedKey=Key.make("prostate");
  DataInfo dinfo=null;
  try {
    GLMParameters glmp=new GLMParameters(Family.binomial,Family.binomial.defaultLink);
    glmp._alpha=new double[]{0};
    glmp._lambda=new double[]{1e-5};
    Frame source=parse_test_file(parsedKey,"smalldata/glm_test/prostate_cat_replaced.csv");
    source.add("CAPSULE",source.remove("CAPSULE"));
    source.remove("ID").remove();
    Frame valid=new Frame(source._names.clone(),source.vecs().clone());
    dinfo=new DataInfo(Key.make(),source,valid,1,false,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE,true,false,false,false,false,false);
    DKV.put(dinfo._key,dinfo);
    GLMGradientSolver solver=new GLMGradientSolver(glmp,dinfo,1e-5,new double[]{source.vec("CAPSULE").mean()},source.numRows());
    L_BFGS lbfgs=new L_BFGS().setGradEps(1e-8);
    double[] beta=MemoryManager.malloc8d(dinfo.fullN() + 1);
    beta[beta.length - 1]=glmp.link(source.vec("CAPSULE").mean());
    L_BFGS.Result r=lbfgs.solve(solver,beta,solver.getGradient(beta),new L_BFGS.ProgressMonitor(){
      int _i=0;
      public boolean progress(      double[] beta,      GradientInfo ginfo){
        System.out.println(++_i + ":" + ginfo._objVal+ ", "+ ArrayUtils.l2norm2(ginfo._gradient,false));
        return true;
      }
    }
);
    assertEquals(378.34,2 * r.ginfo._objVal * source.numRows(),1e-1);
  }
  finally {
    if (dinfo != null)     DKV.remove(dinfo._key);
    Value v=DKV.get(parsedKey);
    if (v != null) {
      v.<Frame>get().delete();
    }
  }
}
