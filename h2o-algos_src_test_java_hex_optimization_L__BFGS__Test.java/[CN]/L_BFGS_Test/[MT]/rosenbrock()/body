{
  final double a=1, b=100;
  GradientSolver gs=new GradientSolver(){
    @Override public GradientInfo getGradient(    double[] beta){
      final double[] g=new double[2];
      final double x=beta[0];
      final double y=beta[1];
      final double xx=x * x;
      g[0]=-2 * a + 2 * x - 4 * b * (y * x - x * xx);
      g[1]=2 * b * (y - xx);
      double objVal=(a - x) * (a - x) + b * (y - xx) * (y - xx);
      return new GradientInfo(objVal,g);
    }
    @Override public double[] getObjVals(    double[] beta,    double[] pk){
      double[] res=new double[128];
      double step=1;
      for (int i=0; i < res.length; ++i) {
        double x=beta[0] + pk[0] * step;
        double y=beta[1] + pk[1] * step;
        double xx=x * x;
        res[i]=(a - x) * (a - x) + b * (y - xx) * (y - xx);
        step*=_step;
      }
      return res;
    }
  }
;
  int fails=0;
  L_BFGS lbfgs=new L_BFGS().setGradEps(1e-12);
  L_BFGS.Result r=lbfgs.solve(gs,L_BFGS.startCoefs(2,987654321));
  assertTrue("LBFGS failed to solve Rosenbrock function optimization",r.ginfo._objVal < 1e-4);
}
