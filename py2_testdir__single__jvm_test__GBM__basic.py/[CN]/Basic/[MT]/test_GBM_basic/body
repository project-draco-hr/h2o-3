def test_GBM_basic(self):
    bucket = 'home-0xdiag-datasets'
    importFolderPath = 'standard'
    trainFilename = 'covtype.shuffled.90pct.data'
    train_key = 'covtype.train.hex'
    model_key = 'GBMModelKey'
    timeoutSecs = 1800
    csvPathname = ((importFolderPath + '/') + trainFilename)
    columnTypeDict = {54: 'Enum', }
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, columnTypeDict=columnTypeDict, schema='local', chunk_size=4194304, hex_key=train_key, timeoutSecs=timeoutSecs)
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    labelListUsed = list(labelList)
    numColsUsed = numCols
    if (1 == 0):
        co = h2o_cmd.runSummary(key=parse_key)
        coList = [co.base, len(co.bins), len(co.data), co.domain, co.label, co.maxs, co.mean, co.mins, co.missing, co.ninfs, co.pctiles, co.pinfs, co.precision, co.sigma, co.str_data, co.stride, co.type, co.zeros]
        for c in coList:
            print c
    parameters = []
    parameters.append({'score_each_iteration': True, 'response_column': 'C55', 'do_classification': True, 'ntrees': 2, 'max_depth': 10, 'min_rows': 3, 'nbins': 40, 'learn_rate': 0.2, })
    parameters.append({'score_each_iteration': True, 'response_column': 'C55', 'do_classification': True, 'ntrees': 1, 'max_depth': 20, 'min_rows': 3, 'nbins': 40, 'learn_rate': 0.2, })
    model_key = 'covtype_gbm.hex'
    for p in parameters:
        bmResult = h2o.n0.build_model(algo='gbm', destination_key=model_key, training_frame=train_key, validation_frame=train_key, parameters=p, timeoutSecs=60)
        bm = OutputObj(bmResult, 'bm')
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        if p.get('do_classification', None):
            print '\nLook!, can use dot notation: cmm.cm.confusion_matrix', cmm.cm.confusion_matrix, '\n'
        vis = OutputObj(model.variable_importances, 'vis')
        visDataChopped = [v[0:9] for v in vis.data]
        names = visDataChopped[0]
        relativeImportance = visDataChopped[1]
        print 'names:', names
        print 'relativeImportance:', relativeImportance
        scaledImportance = visDataChopped[2]
        percentage = visDataChopped[3]
        print '\nvis\n', tabulate(visDataChopped[1:], headers=names)
        print 'will say Regression or Classification. no Multinomial?'
        print 'model.model_category', model.model_category
        assert (model.model_category == 'Multinomial'), model.model_category
        print 'FIX! why is mse 0 and mes_train Nan?'
        print 'model.mse:', model.mse
        print 'model.mse_train:', model.mse_train
        if (1 == 1):
            print ''
            for (i, c) in enumerate(cmm.cm):
                print ('\ncmms.cm[%s]' % i), tabulate(c)
            print ''
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mmResultShort = mmResult['model_metrics'][0]
        del mmResultShort['frame']
        mm = OutputObj(mmResultShort, 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
