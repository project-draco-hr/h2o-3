def withinss(self, train=False, valid=False, xval=False):
    u'Get the within cluster sum of squares for each cluster.\n\n        If all are False (default), then return the training metric value.\n        If more than one options is set to True, then return a dictionary of metrics where\n        the keys are "train", "valid", and "xval".\n\n        Parameters\n        ----------\n          train : bool, optional\n            If True, then return the within cluster sum of squares value for the\n            training data.\n\n          valid : bool, optional\n            If True, then return the within cluster sum of squares value for the\n            validation data.\n\n          xval : bool, optional\n            If True, then return the within cluster sum of squares value for each of\n            the cross-validated splits.\n\n        Returns\n        -------\n          Returns the total sum of squares values for the specified key(s).\n        '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in zip(list(tm.keys()), list(tm.values())):
        m[k] = (None if (v is None) else [z[(-1)] for z in v._metric_json[u'centroid_stats'].cell_values])
    return (list(m.values())[0] if (len(m) == 1) else m)
