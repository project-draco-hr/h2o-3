def totss(self, train=False, valid=False, xval=False):
    '\n    Get the total sum of squares to grand mean.\n\n    If all are False (default), then return the training metric value.\n    If more than one options is set to True, then return a dictionary of metrics where the keys are "train", "valid",\n    and "xval"\n\n    :param train: If train is True, then return the total sum of squares to grand mean value for the training data.\n    :param valid: If valid is True, then return the total sum of squares to grand mean value for the validation data.\n    :param xval:  If xval is True, then return the total sum of squares to grand mean value for the cross validation data.\n    :return: The total sum of squares to grand mean for this clustering model.\n    '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in zip(tm.keys(), tm.values()):
        m[k] = (None if (v is None) else v.totss())
    return (m.values()[0] if (len(m) == 1) else m)
