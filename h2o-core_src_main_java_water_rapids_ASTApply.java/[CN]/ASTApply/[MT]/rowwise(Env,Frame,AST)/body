{
  final String[] names=fr._names;
  double[] ds=new double[fr.numCols()];
  for (int col=0; col < fr.numCols(); ++col)   ds[col]=fr.vec(col).at(0);
  int noutputs=fun.apply(env,env.stk(),new AST[]{fun,new ASTRow(ds,fr.names())}).getRow().length;
  Frame res=new MRTask(){
    @Override public void map(    Chunk chks[],    NewChunk[] nc){
      double ds[]=new double[chks.length];
      AST[] asts=new AST[]{fun,new ASTRow(ds,names)};
      for (int row=0; row < chks[0]._len; row++) {
        for (int col=0; col < chks.length; col++)         ds[col]=chks[col].atd(row);
        try (Env.StackHelp stk_inner=env.stk()){
          double[] valRow=fun.apply(env,stk_inner,asts).getRow();
          for (int newCol=0; newCol < nc.length; ++newCol)           nc[newCol].addNum(valRow[newCol]);
        }
       }
    }
  }
.doAll(noutputs,fr).outputFrame();
  return new ValFrame(res);
}
