{
  String err="Result of function produced more than a single column!";
  final ASTOp FUN=ASTOp.get(_fun);
  Frame fr2=null;
  Frame fr=env.popAry();
  if (_margin == 2) {
    double[] row_result;
    Vec[] vecs_result;
    boolean isRow=false;
    ParallelVecApply t;
    H2O.submitTask(t=new ParallelVecApply(FUN,fr,_fun_args,env)).join();
    if (t._applyTasks[0]._vec_result == null)     isRow=true;
    if (isRow) {
      Futures fs=new Futures();
      Key key=Vec.VectorGroup.VG_LEN1.addVecs(1)[0];
      AppendableVec v=new AppendableVec(key);
      NewChunk chunk=new NewChunk(v,0);
      row_result=new double[t._applyTasks.length];
      for (int i=0; i < row_result.length; ++i)       row_result[i]=t._applyTasks[i]._row_result;
      for (      double aRow_result : row_result)       chunk.addNum(aRow_result);
      chunk.close(0,fs);
      Vec vec=v.close(fs);
      fs.blockForPending();
      fr2=new Frame(vec);
    }
 else {
      vecs_result=new Vec[t._applyTasks.length];
      for (int i=0; i < vecs_result.length; ++i)       vecs_result[i]=t._applyTasks[i]._vec_result;
      fr2=new Frame(fr.names(),vecs_result);
    }
  }
  if (_margin == 1) {
    double[] rowin=new double[fr.vecs().length];
    for (int c=0; c < rowin.length; c++)     rowin[c]=fr.vecs()[c].at(0);
    final int outlen=FUN.map(env,rowin,null,_fun_args).length;
    final Env env0=env;
    MRTask mrt=new MRTask(){
      @Override public void map(      Chunk[] cs,      NewChunk[] ncs){
        double rowin[]=new double[cs.length];
        double rowout[]=new double[outlen];
        for (int row=0; row < cs[0]._len; row++) {
          for (int c=0; c < cs.length; c++)           rowin[c]=cs[c].atd(row);
          rowout=FUN.map(env0,rowin,rowout,_fun_args);
          for (int c=0; c < ncs.length; c++)           ncs[c].addNum(rowout[c]);
        }
      }
    }
;
    String[] names=new String[outlen];
    for (int i=0; i < names.length; i++)     names[i]="C" + (i + 1);
    fr2=mrt.doAll(outlen,fr).outputFrame(names,null);
  }
 else   if (_margin != 1 && _margin != 2)   throw new IllegalArgumentException("MARGIN limited to 1 (rows) or 2 (cols)");
  env.pushAry(fr2);
}
