{
  Frame cleanme;
  Frame f;
  Env captured=e.capture();
  for (int i=0; i < _args.length; ++i) {
    if (_args[i] instanceof ASTId) {
      ASTId a=(ASTId)_args[i];
      if (!a.isLookup())       throw new IllegalArgumentException("Function arguments must be lookups.");
      _args[i]=e.lookup(a);
    }
    if (!(_args[i] instanceof ASTNum) && !(_args[i] instanceof ASTString) && !(_args[i] instanceof ASTFrame)&& !(_args[i] instanceof ASTNull)) {
      _args[i].treeWalk(e);
      _args[i]=e.pop2AST();
    }
    if (_args[i] instanceof ASTNum)     _table.put(_arg_names[i],Env.NUM,_args[i].value());
 else     if (_args[i] instanceof ASTString)     _table.put(_arg_names[i],Env.STR,_args[i].value());
 else     if (_args[i] instanceof ASTFrame) {
      if (((ASTFrame)_args[i])._key == null) {
        cleanme=((ASTFrame)_args[i])._fr;
        f=new Frame(Key.make(_arg_names[i]),cleanme.names(),cleanme.vecs());
        DKV.put(f._key,f);
        _args[i]=new ASTFrame(f._key.toString());
        _table._local_frames.put(_arg_names[i],f);
      }
      _table.put(_arg_names[i],Env.LARY,_args[i].value());
      _table._local_frames.put(_arg_names[i],((ASTFrame)_args[i])._fr);
    }
 else     if (_args[i] instanceof ASTNull)     _table.put(_arg_names[i],Env.STR,"null");
 else     throw new IllegalArgumentException("Argument of type " + _args[i].getClass() + " unsupported. Argument must be a String, number, Frame, or null.");
  }
  captured._local.copyOver(_table);
  _body.exec(captured);
  _e=captured;
}
