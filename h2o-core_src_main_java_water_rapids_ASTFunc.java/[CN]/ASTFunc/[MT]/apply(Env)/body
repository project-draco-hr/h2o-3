{
  Frame cleanme=null;
  Frame f=null;
  Env captured=e.capture();
  for (int i=0; i < _args.length; ++i) {
    if (_args[i] instanceof ASTNum)     _table.put(_arg_names[i],Env.NUM,_args[i].value());
 else     if (_args[i] instanceof ASTString)     _table.put(_arg_names[i],Env.STR,_args[i].value());
 else     if (_args[i] instanceof ASTFrame) {
      if (((ASTFrame)_args[i])._key == null) {
        cleanme=((ASTFrame)_args[i])._fr;
        f=new Frame(Key.make(_arg_names[i]),cleanme.names(),cleanme.vecs());
        DKV.put(f._key,f);
        _args[i]=new ASTFrame(f._key.toString());
        _table._local_frames.put(_arg_names[i],f);
      }
      _table.put(_arg_names[i],Env.ARY,_args[i].value());
    }
 else     if (_args[i] instanceof ASTNull)     _table.put(_arg_names[i],Env.STR,"null");
 else     throw H2O.unimpl("Vector arguments are not supported.");
  }
  captured._local.copyOver(_table);
  _body.exec(captured);
  e.cleanup(cleanme,f);
  _e=captured;
  captured.popScope();
}
