def main(argv):
    '\n    Main program.\n\n    @return: none\n    '
    global g_script_name
    global g_num_clouds
    global g_nodes_per_cloud
    global g_output_dir
    global g_failed_output_dir
    global g_test_to_run
    global g_test_list_file
    global g_test_group
    global g_runner
    g_script_name = os.path.basename(argv[0])
    test_root_dir = None
    if True:
        cwd_arr = os.getcwd().split(os.sep)
        i = (len(cwd_arr) - 1)
        while (i > 0):
            if (cwd_arr[i] == 'testdir_multi_jvm'):
                cwd_arr_prefix = cwd_arr[:(i + 1)]
                test_root_dir = os.sep.join(cwd_arr_prefix)
                break
            i -= 1
        if (test_root_dir is None):
            test_root_dir = os.path.dirname(os.path.realpath(__file__))
    g_output_dir = os.path.join(test_root_dir, str('results'))
    g_failed_output_dir = os.path.join(g_output_dir, str('failed'))
    h2o_jar = os.path.abspath(os.path.join(os.path.join(os.path.join(os.path.join(os.path.join(test_root_dir, '..'), '..'), 'build'), 'h2o.jar')))
    parse_args(argv)
    if g_wipe_output_dir:
        wipe_output_dir()
    if g_wipe_test_state:
        wipe_test_state(test_root_dir)
    if (g_test_to_run is not None):
        g_num_clouds = 1
    g_runner = TestRunner(test_root_dir, g_use_cloud, g_use_cloud2, g_config, g_use_ip, g_use_port, g_num_clouds, g_nodes_per_cloud, h2o_jar, g_base_port, g_jvm_xmx, g_output_dir, g_failed_output_dir)
    if (g_test_to_run is not None):
        g_runner.add_test(g_test_to_run)
    elif (g_test_list_file is not None):
        g_runner.read_test_list_file(g_test_list_file)
    else:
        g_runner.build_test_list(g_test_group, g_run_small, g_run_medium, g_run_large)
    if g_no_run:
        sys.exit(0)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    if (not os.path.exists(h2o_jar)):
        print ''
        print ('ERROR: H2O jar not found: ' + h2o_jar)
        print ''
        sys.exit(1)
    try:
        g_runner.start_clouds()
        g_runner.run_tests()
    finally:
        g_runner.stop_clouds()
        g_runner.report_summary()
    if (not g_runner.get_regression_passed()):
        sys.exit(1)
