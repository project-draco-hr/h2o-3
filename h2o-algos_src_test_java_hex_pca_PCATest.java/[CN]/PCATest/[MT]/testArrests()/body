{
  double[] stddev=new double[]{83.732400,14.212402,6.489426,2.482790};
  double[][] eigvec=ard(ard(0.04170432,-0.04482166,0.07989066,-0.99492173),ard(0.99522128,-0.05876003,-0.06756974,0.03893830),ard(0.04633575,0.97685748,-0.20054629,-0.05816914),ard(0.07515550,0.20071807,0.97408059,0.07232502));
  double[] stddev_std=new double[]{1.5748783,0.9948694,0.5971291,0.4164494};
  double[][] eigvec_std=ard(ard(-0.5358995,0.4181809,-0.3412327,0.64922780),ard(-0.5831836,0.1879856,-0.2681484,-0.74340748),ard(-0.2781909,-0.8728062,-0.3780158,0.13387773),ard(-0.5434321,-0.1673186,0.8177779,0.08902432));
  Frame train=null;
  try {
    for (    DataInfo.TransformType std : new DataInfo.TransformType[]{DataInfo.TransformType.DEMEAN,DataInfo.TransformType.STANDARDIZE}) {
      PCAModel model=null;
      train=parse_test_file(Key.make("arrests.hex"),"smalldata/pca_test/USArrests.csv");
      try {
        PCAModel.PCAParameters parms=new PCAModel.PCAParameters();
        parms._train=train._key;
        parms._k=4;
        parms._transform=std;
        parms._max_iterations=1000;
        PCA job=new PCA(parms);
        try {
          model=job.trainModel().get();
        }
 catch (        Throwable t) {
          t.printStackTrace();
          throw new RuntimeException(t);
        }
 finally {
          job.remove();
        }
        if (std == DataInfo.TransformType.DEMEAN) {
          TestUtil.checkStddev(stddev,model._output._std_deviation,TOLERANCE);
          TestUtil.checkEigvec(eigvec,model._output._eigenvectors,TOLERANCE);
        }
 else         if (std == DataInfo.TransformType.STANDARDIZE) {
          TestUtil.checkStddev(stddev_std,model._output._std_deviation,TOLERANCE);
          TestUtil.checkEigvec(eigvec_std,model._output._eigenvectors,TOLERANCE);
        }
      }
 catch (      Throwable t) {
        t.printStackTrace();
        throw new RuntimeException(t);
      }
 finally {
        if (model != null) {
          if (model._parms._keep_loading)           model._output._loading_key.get().delete();
          model.delete();
        }
      }
    }
  }
  finally {
    if (train != null)     train.delete();
  }
}
