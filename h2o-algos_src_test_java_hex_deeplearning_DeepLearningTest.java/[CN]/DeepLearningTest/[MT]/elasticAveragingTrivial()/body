{
  DeepLearningParameters dl;
  Frame frTrain;
  int N=2;
  DeepLearningModel[] models=new DeepLearningModel[N];
  dl=new DeepLearningParameters();
  Scope.enter();
  try {
    for (int i=0; i < N; ++i) {
      frTrain=parse_test_file("./smalldata/covtype/covtype.20k.data");
      Vec resp=VecUtils.toCategoricalVec(frTrain.lastVec());
      frTrain.remove(frTrain.vecs().length - 1).remove();
      frTrain.add("Response",resp);
      DKV.put(frTrain);
      dl._train=frTrain._key;
      dl._response_column=((Frame)DKV.getGet(dl._train)).lastVecName();
      dl._export_weights_and_biases=true;
      dl._hidden=new int[]{17,11};
      dl._quiet_mode=false;
      dl._seed=1234;
      dl._reproducible=true;
      dl._epochs=1;
      dl._train_samples_per_iteration=-1;
      if (i == 0) {
        dl._elastic_averaging=false;
        dl._elastic_averaging_moving_rate=0.5;
        dl._elastic_averaging_regularization=0.9;
      }
 else {
        dl._elastic_averaging=true;
        dl._elastic_averaging_moving_rate=0.5;
        dl._elastic_averaging_regularization=0.1;
      }
      DeepLearning job=null;
      try {
        job=new DeepLearning(dl);
        models[i]=job.trainModel().get();
      }
  finally {
        if (job != null)         job.remove();
      }
      frTrain.remove();
    }
    for (int i=0; i < N; ++i) {
      Log.info(models[i]._output._training_metrics.cm().table().toString());
      Assert.assertEquals(models[i]._output._training_metrics._MSE,models[0]._output._training_metrics._MSE,1e-6);
    }
  }
  finally {
    for (int i=0; i < N; ++i)     if (models[i] != null)     models[i].delete();
    Scope.exit();
  }
}
