{
  DeepLearningParameters dl;
  Frame first1kSVM=null;
  Frame second1kSVM=null;
  Frame third1kSVM=null;
  Frame first1kCSV=null;
  Frame second1kCSV=null;
  Frame third1kCSV=null;
  DeepLearningModel model=null;
  dl=new DeepLearningParameters();
  Scope.enter();
  try {
    first1kSVM=parse_test_file("/users/arno/first1k.svm");
    Scope.track(first1kSVM.replace(first1kSVM.find("C1"),first1kSVM.vec("C1")).toCategoricalVec()._key);
    DKV.put(first1kSVM);
    second1kSVM=parse_test_file("/users/arno/second1k.svm");
    Scope.track(second1kSVM.replace(second1kSVM.find("C1"),second1kSVM.vec("C1")).toCategoricalVec()._key);
    DKV.put(second1kSVM);
    third1kSVM=parse_test_file("/users/arno/third1k.svm");
    Scope.track(third1kSVM.replace(third1kSVM.find("C1"),third1kSVM.vec("C1")).toCategoricalVec()._key);
    DKV.put(third1kSVM);
    first1kCSV=parse_test_file("/users/arno/first1k.csv");
    first1kCSV.remove(first1kCSV.find("C1")).remove();
    Vec response=first1kCSV.remove(first1kCSV.find("C2"));
    Vec responseFactor=response.toCategoricalVec();
    response.remove();
    first1kCSV.prepend("C2",first1kCSV.anyVec().makeCon(0));
    first1kCSV.prepend("C1",responseFactor);
    DKV.put(first1kCSV);
    second1kCSV=parse_test_file("/users/arno/second1k.csv");
    second1kCSV.remove(second1kCSV.find("C1")).remove();
    response=second1kCSV.remove(second1kCSV.find("C2"));
    responseFactor=response.toCategoricalVec();
    response.remove();
    second1kCSV.prepend("C2",second1kCSV.anyVec().makeCon(0));
    second1kCSV.prepend("C1",responseFactor);
    DKV.put(second1kCSV);
    third1kCSV=parse_test_file("/users/arno/third1k.csv");
    third1kCSV.remove(third1kCSV.find("C1")).remove();
    response=third1kCSV.remove(third1kCSV.find("C2"));
    responseFactor=response.toCategoricalVec();
    response.remove();
    third1kCSV.prepend("C2",third1kCSV.anyVec().makeCon(0));
    third1kCSV.prepend("C1",responseFactor);
    DKV.put(third1kCSV);
    dl._train=first1kSVM._key;
    dl._valid=second1kSVM._key;
    dl._response_column="C1";
    dl._epochs=10;
    dl._ignore_const_cols=true;
    dl._sparse=true;
    dl._hidden=new int[]{20,20,20};
    DeepLearning job=null;
    try {
      job=new DeepLearning(dl);
      model=job.trainModel().get();
      Log.info(model._output);
      Log.info("Holdout CSV");
      model.score(third1kCSV).delete();
      Log.info("Holdout SVM");
      model.score(third1kSVM).delete();
      Log.info("POJO SVM Train Check");
      Frame pred;
      assertTrue(model.testJavaScoring(first1kSVM,pred=model.score(first1kSVM),1e-5));
      pred.remove();
      Log.info("POJO SVM Validation Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(second1kSVM,pred=model.score(second1kSVM),1e-5));
      pred.remove();
      Log.info("POJO SVM Test Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(third1kSVM,pred=model.score(third1kSVM),1e-5));
      pred.remove();
      Log.info("POJO CSV Train Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(first1kCSV,pred=model.score(first1kCSV),1e-5));
      pred.remove();
      Log.info("POJO CSV Validation Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(second1kCSV,pred=model.score(second1kCSV),1e-5));
      pred.remove();
      Log.info("POJO CSV Test Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(third1kCSV,pred=model.score(third1kSVM),1e-5));
      pred.remove();
      Log.info("POJO SVM vs H2O CSV Test Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(third1kSVM,pred=model.score(third1kCSV),1e-5));
      pred.remove();
      Log.info("POJO CSV vs H2O SVM Test Check");
      DKV.remove(model._key);
      model._key=Key.make();
      DKV.put(model);
      assertTrue(model.testJavaScoring(third1kSVM,pred=model.score(third1kCSV),1e-5));
      pred.remove();
    }
  finally {
      if (job != null)       job.remove();
    }
    assertTrue(job._state == Job.JobState.DONE);
  }
  finally {
    if (first1kSVM != null)     first1kSVM.remove();
    if (second1kSVM != null)     second1kSVM.remove();
    if (third1kSVM != null)     third1kSVM.remove();
    if (first1kCSV != null)     first1kCSV.remove();
    if (second1kCSV != null)     second1kCSV.remove();
    if (third1kCSV != null)     third1kCSV.remove();
    if (model != null)     model.delete();
    Scope.exit();
  }
}
