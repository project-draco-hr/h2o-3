{
  Frame tfr=null;
  DeepLearningModel dl=null;
  Scope.enter();
  try {
    tfr=parse_test_file(Key.make(),"./smalldata/airlines/allyears2k_headers.zip");
    DeepLearningParameters parms=new DeepLearningParameters();
    parms._train=tfr._key;
    parms._response_column="ArrDelay";
    parms._ignored_columns=new String[]{"TailNum"};
    parms._epochs=0.1;
    parms._autoencoder=true;
    parms._reproducible=true;
    parms._hidden=new int[]{100,100};
    parms._seed=0xdecaf;
    parms._max_w2=1;
    parms._model_id=Key.make();
    DeepLearning job=new DeepLearning(parms);
    try {
      dl=job.trainModel().get();
      Assert.fail("Should toss exception instead of reaching here");
    }
 catch (    RuntimeException de) {
      assertTrue(de.getMessage().contains("Trying to predict with an unstable model."));
    }
 finally {
      job.remove();
    }
    dl=DKV.getGet(parms._model_id);
    assertTrue(dl.model_info().unstable());
    assertTrue(dl._output._status == Job.JobState.FAILED);
  }
  finally {
    if (tfr != null)     tfr.delete();
    if (dl != null)     dl.delete();
    Scope.exit();
  }
}
