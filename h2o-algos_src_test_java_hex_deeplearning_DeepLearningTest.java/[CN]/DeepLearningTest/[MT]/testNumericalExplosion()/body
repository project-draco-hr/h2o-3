{
  for (  boolean ae : new boolean[]{true,false}) {
    Frame tfr=null;
    DeepLearningModel dl=null;
    try {
      tfr=parse_test_file("./smalldata/junit/two_spiral.csv");
      for (      String s : new String[]{"Class"}) {
        Vec resp=tfr.vec(s).toCategoricalVec();
        tfr.remove(s).remove();
        tfr.add(s,resp);
        DKV.put(tfr);
      }
      DeepLearningParameters parms=new DeepLearningParameters();
      parms._train=tfr._key;
      parms._epochs=100;
      parms._response_column="Class";
      parms._autoencoder=ae;
      parms._reproducible=true;
      parms._train_samples_per_iteration=10;
      parms._hidden=new int[]{10,10,10,10,10,10,10,10,10,10,10,10};
      parms._initial_weight_distribution=DeepLearningParameters.InitialWeightDistribution.Uniform;
      parms._initial_weight_scale=1e20;
      parms._seed=0xdecaf;
      parms._max_w2=1e20f;
      DeepLearning job=new DeepLearning(parms);
      try {
        dl=job.trainModel().get();
        Assert.fail("Should toss exception instead of reaching here");
      }
 catch (      RuntimeException de) {
      }
      dl=DKV.getGet(job.dest());
      assertTrue(dl.model_info().isUnstable());
      assertTrue(dl._output._job.isCrashed());
    }
  finally {
      if (tfr != null)       tfr.delete();
      if (dl != null)       dl.delete();
    }
  }
}
