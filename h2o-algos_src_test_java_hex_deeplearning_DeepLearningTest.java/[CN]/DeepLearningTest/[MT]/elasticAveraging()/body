{
  DeepLearningParameters dl;
  Frame frTrain;
  int N=2;
  DeepLearningModel[] models=new DeepLearningModel[N];
  dl=new DeepLearningParameters();
  Scope.enter();
  boolean covtype=new Random().nextBoolean();
  if (covtype) {
    frTrain=parse_test_file("./smalldata/covtype/covtype.20k.data");
    Vec resp=frTrain.lastVec().toEnum();
    Vec v=frTrain.remove(frTrain.vecs().length - 1);
    if (v != null)     v.remove();
    frTrain.add("Response",resp);
  }
 else {
    frTrain=parse_test_file("./bigdata/server/HIGGS.csv");
    Vec resp=frTrain.vecs()[0].toEnum();
    Vec v=frTrain.remove(0);
    if (v != null)     v.remove();
    frTrain.prepend("Response",resp);
  }
  DKV.put(frTrain);
  try {
    for (int i=0; i < N; ++i) {
      dl._train=frTrain._key;
      String[] n=((Frame)DKV.getGet(dl._train)).names();
      if (covtype) {
        dl._response_column=n[n.length - 1];
        dl._ignored_columns=null;
      }
 else {
        dl._response_column=n[0];
        dl._ignored_columns=new String[]{n[22],n[23],n[24],n[25],n[26],n[27],n[28]};
      }
      dl._export_weights_and_biases=true;
      dl._hidden=new int[]{64,64};
      dl._quiet_mode=false;
      dl._max_w2=10;
      dl._l1=1e-5;
      dl._replicate_training_data=false;
      dl._force_load_balance=true;
      dl._epochs=1;
      dl._train_samples_per_iteration=frTrain.numRows() / 100;
      dl._elastic_averaging=i == 1;
      dl._elastic_averaging_moving_rate=0.999;
      dl._elastic_averaging_regularization=1e-3;
      DeepLearning job=null;
      try {
        job=new DeepLearning(dl);
        models[i]=job.trainModel().get();
      }
  finally {
        if (job != null)         job.remove();
      }
    }
    for (int i=0; i < N; ++i) {
      if (models[i] != null)       Log.info(models[i]._output._training_metrics.cm().table().toString());
    }
    if (models[0] != null)     Log.info("Without elastic averaging: error=" + models[0]._output._training_metrics.cm().err());
    if (models[1] != null)     Log.info("With elastic averaging:    error=" + models[1]._output._training_metrics.cm().err());
  }
  finally {
    frTrain.remove();
    for (int i=0; i < N; ++i)     if (models[i] != null)     models[i].delete();
    Scope.exit();
  }
}
