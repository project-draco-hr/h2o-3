{
  Frame train=null;
  Frame preds=null;
  Frame small=null, large=null;
  DeepLearningModel model=null;
  Scope.enter();
  try {
    train=parse_test_file("./smalldata/junit/titanic_alt.csv");
    Vec v=train.remove("survived");
    train.add("survived",v.toCategoricalVec());
    v.remove();
    DKV.put(train);
    DeepLearningParameters parms=new DeepLearningParameters();
    parms._train=train._key;
    parms._response_column="survived";
    parms._reproducible=true;
    parms._hidden=new int[]{20,20};
    parms._seed=0xdecaf;
    model=new DeepLearning(parms).trainModel().get();
    FrameSplitter fs=new FrameSplitter(train,new double[]{0.002},new Key[]{Key.make("small"),Key.make("large")},null);
    fs.compute2();
    small=fs.getResult()[0];
    large=fs.getResult()[1];
    preds=model.score(small);
    Vec labels=small.vec("survived");
    String[] fullDomain=train.vec("survived").domain();
    ModelMetricsBinomial mm=ModelMetricsBinomial.make(preds.vec(2),labels,fullDomain);
    Log.info(mm.toString());
    mm=ModelMetricsBinomial.make(preds.vec(2),labels,new String[]{"0","1"});
    Log.info(mm.toString());
    mm=ModelMetricsBinomial.make(preds.vec(2),labels);
    Log.info(mm.toString());
    try {
      mm=ModelMetricsBinomial.make(preds.vec(2),labels,new String[]{"a","b"});
      Log.info(mm.toString());
      Assert.assertFalse(true);
    }
 catch (    IllegalArgumentException ex) {
      ex.printStackTrace();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw t;
  }
 finally {
    if (model != null)     model.delete();
    if (preds != null)     preds.remove();
    if (train != null)     train.remove();
    if (small != null)     small.delete();
    if (large != null)     large.delete();
    Scope.exit();
  }
}
