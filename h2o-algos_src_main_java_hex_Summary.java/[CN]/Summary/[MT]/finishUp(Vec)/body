{
  if (_type == T_ENUM) {
    computeMajorities();
  }
 else {
    _pctile=new double[DEFAULT_PERCENTILES.length];
    approxQuantiles(_pctile,DEFAULT_PERCENTILES,_stat0._max2);
  }
  for (int i=0; i < _mins.length; i++) {
    if (Double.isNaN(_mins[i])) {
      _mins=Arrays.copyOf(_mins,i);
      break;
    }
  }
  for (int i=0; i < _maxs.length; i++) {
    if (Double.isNaN(_maxs[i])) {
      _maxs=Arrays.copyOf(_maxs,i);
      break;
    }
  }
  for (int i=0; i < _maxs.length >>> 1; i++) {
    double t=_maxs[i];
    _maxs[i]=_maxs[_maxs.length - 1 - i];
    _maxs[_maxs.length - 1 - i]=t;
  }
  _stats=_type == T_ENUM ? new Stats(vec.domain().length) : new Stats(_pctile);
}
