{
  _len=chk._len;
  for (int i=0; i < chk._len; i++) {
    double val;
    if (chk.isNA0(i)) {
      _nas++;
      continue;
    }
    if (chk._vec.isUUID())     continue;
    if (Double.isNaN(val=chk.at0(i))) {
      _nans++;
      continue;
    }
    if (val == Double.POSITIVE_INFINITY)     _pinfs++;
 else     if (val == Double.NEGATIVE_INFINITY)     _ninfs++;
 else {
      _min2=Double.isNaN(_min2) ? val : Math.min(_min2,val);
      _max2=Double.isNaN(_max2) ? val : Math.max(_max2,val);
      if (val == .0)       _zeros++;
    }
  }
  return this;
}
