def test_w2v_basic(self):
    global SYNDATASETS_DIR
    SYNDATASETS_DIR = h2o.make_syn_dir()
    n = 500000
    tryList = [(n, 1, 'cD', 300), (n, 2, 'cE', 300), (n, 3, 'cF', 300), (n, 4, 'cG', 300), (n, 5, 'cH', 300), (n, 6, 'cI', 300), (n, 7, 'cJ', 300), (n, 9, 'cK', 300)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        csvPathname = create_file_with_seps(rowCount, colCount)
        parseResult = h2i.import_parse(path=csvPathname, check_header=1, delete_on_done=0, timeoutSecs=180, doSummary=False)
        pA = h2o_cmd.ParseObj(parseResult)
        iA = h2o_cmd.InspectObj(pA.parse_key)
        cA = h2o_test.OutputObj(iA.columns[0], 'inspect_column')
        parse_key = pA.parse_key
        numRows = iA.numRows
        numCols = iA.numCols
        labelList = iA.labelList
        for i in range(colCount):
            print cA.type, cA.missing_count
            self.assertEqual(0, cA.missing_count, ('Column %s Expected %s. missing: %s is incorrect' % (i, 0, cA.missing_count)))
            self.assertEqual('string', cA.type, ('Column %s Expected %s. type: %s is incorrect' % (i, 0, cA.type)))
        if DO_SUMMARY:
            for i in range(colCount):
                co = h2o_cmd.runSummary(key=parse_key, column=i)
                print co.label, co.type, co.missing, co.domain, sum(co.bins)
                self.assertEqual(0, co.missing_count, ('Column %s Expected %s. missing: %s is incorrect' % (i, 0, co.missing_count)))
                self.assertEqual('String', co.type, ('Column %s Expected %s. type: %s is incorrect' % (i, 0, co.type)))
        labelListUsed = list(labelList)
        numColsUsed = numCols
        for trial in range(1):
            parameters = {'validation_frame': parse_key, 'ignored_columns': None, 'minWordFreq': 5, 'wordModel': 'SkipGram', 'normModel': 'HSM', 'negSampleCnt': 5, 'vecSize': 100, 'windowSize': 5, 'sentSampleRate': 0.001, 'initLearningRate': 0.05, 'epochs': 1, }
            model_key = 'benign_w2v.hex'
            bmResult = h2o.n0.build_model(algo='word2vec', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=60)
            bm = OutputObj(bmResult, 'bm')
            modelResult = h2o.n0.models(key=model_key)
            model = OutputObj(modelResult['models'][0]['output'], 'model')
            cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
            cmm = OutputObj(cmmResult, 'cmm')
            mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
            mm = OutputObj(mmResult['model_metrics'][0], 'mm')
            h2o_cmd.runStoreView()
