{
  String http_response_header=H2OError.httpStatusHeader(HttpResponseStatus.OK.getCode());
  if (s instanceof SpecifiesHttpResponseCode) {
    http_response_header=H2OError.httpStatusHeader(((SpecifiesHttpResponseCode)s).httpStatus());
  }
  if (s instanceof SpecifiesHttpResponseCode && HttpResponseStatus.OK.getCode() != ((SpecifiesHttpResponseCode)s).httpStatus()) {
    type=RequestType.json;
  }
switch (type) {
case json:
    return new Response(http_response_header,MIME_JSON,s.toJsonString());
case xml:
  throw H2O.unimpl("Unknown type: " + type.toString());
case java:
if (s instanceof H2OErrorV3) {
  return new Response(http_response_header,MIME_JSON,s.toJsonString());
}
if (!(s instanceof ModelsBase)) {
throw new H2OIllegalArgumentException("Cannot generate java for type: " + s.getClass().getSimpleName());
}
ModelsBase mb=(ModelsBase)s;
if (mb.models.length != 1) {
throw H2O.fail("model key was found but model array is not length 1 (was " + mb.models.length + ")");
}
ModelSchema ms=mb.models[0];
return new Response(http_response_header,MIME_DEFAULT_BINARY,ms.toJava(mb.preview));
case html:
{
RString html=new RString(_htmlTemplate);
html.replace("CONTENTS",s.writeHTML(new water.util.DocGen.HTML()).toString());
return new Response(http_response_header,MIME_HTML,html.toString());
}
default :
throw H2O.unimpl("Unknown type to wrap(): " + type);
}
}
