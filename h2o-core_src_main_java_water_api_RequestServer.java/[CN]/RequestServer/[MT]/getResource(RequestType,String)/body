{
  byte[] bytes=_cache.get(url);
  if (bytes == null) {
    try (InputStream resource=water.init.JarHash.getResource2(url)){
      if (resource != null) {
        try {
          bytes=toByteArray(resource);
        }
 catch (        IOException e) {
          Log.err(e);
        }
      }
    }
 catch (    IOException ignore) {
    }
  }
  if (bytes == null || bytes.length == 0)   return response404("Resource " + url,request_type);
  int i=url.lastIndexOf('.');
  String mime;
switch (url.substring(i + 1)) {
case "js":
    mime=MIME_JS;
  break;
case "css":
mime=MIME_CSS;
break;
case "htm":
case "html":
mime=MIME_HTML;
break;
case "jpg":
case "jpeg":
mime=MIME_JPEG;
break;
case "png":
mime=MIME_PNG;
break;
case "gif":
mime=MIME_GIF;
break;
case "woff":
mime=MIME_WOFF;
break;
default :
mime=MIME_DEFAULT_BINARY;
}
NanoResponse res=new NanoResponse(HTTP_OK,mime,new ByteArrayInputStream(bytes));
res.addHeader("Content-Length",Long.toString(bytes.length));
return res;
}
