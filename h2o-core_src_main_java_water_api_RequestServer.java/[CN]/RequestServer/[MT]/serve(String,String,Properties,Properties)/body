{
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY - 1);
  RequestType type=RequestType.requestType(uri);
  if (uri.equals("/") && method.equals("HEAD")) {
    return new Response(HTTP_OK,MIME_PLAINTEXT,"");
  }
  String versioned_path=uri;
  String path=uri;
  int version=1;
  Matcher m=getVersionPattern().matcher(uri);
  if (m.matches()) {
switch (m.group(1)) {
case "LATEST":
      version=Schema.getLatestOrHighestSupportedVersion();
    break;
case "EXPERIMENTAL":
  version=99;
break;
default :
version=Integer.valueOf(m.group(1));
break;
}
String uripath="/" + m.group(2);
path=type.requestName(uripath);
versioned_path="/" + version + path;
}
try {
boolean logged;
if (method.equals("GET") && uri.equals("/")) {
logged=maybeLogRequest(method,uri,"",parms,header);
if (logged) GAUtils.logRequest(uri,header);
return redirectToFlow();
}
if (method.equals("GET") && uri.endsWith("/Logs/download")) {
logged=maybeLogRequest(method,uri,"",parms,header);
if (logged) GAUtils.logRequest(uri,header);
return downloadLogs();
}
if (method.equals("GET")) {
Pattern p2=Pattern.compile(".*/NodePersistentStorage.bin/([^/]+)/([^/]+)");
Matcher m2=p2.matcher(uri);
boolean b2=m2.matches();
if (b2) {
String categoryName=m2.group(1);
String keyName=m2.group(2);
return downloadNps(categoryName,keyName);
}
}
Route route=lookup(method,versioned_path);
if (route == null) {
if (method.equals("GET")) {
return getResource(type,uri);
}
 else {
return response404(method + " " + uri,type);
}
}
 else {
capturePathParms(parms,versioned_path,route);
logged=maybeLogRequest(method,uri,route._url_pattern.namedPattern(),parms,header);
if (logged) GAUtils.logRequest(uri,header);
Schema s=handle(type,route,version,parms);
PojoUtils.filterFields(s,(String)parms.get("_include_fields"),(String)parms.get("_exclude_fields"));
Response r=wrap(s,type);
return r;
}
}
 catch (H2OFailException e) {
H2OError error=e.toH2OError(uri);
Log.fatal("Caught exception (fatal to the cluster): " + error.toString());
H2O.fail(wrap(new H2OErrorV3().fillFromImpl(error),type).toString());
return null;
}
catch (H2OModelBuilderIllegalArgumentException e) {
H2OModelBuilderError error=e.toH2OError(uri);
Log.warn("Caught exception: " + error.toString());
return wrap(new H2OModelBuilderErrorV3().fillFromImpl(error),type);
}
catch (H2OAbstractRuntimeException e) {
H2OError error=e.toH2OError(uri);
Log.warn("Caught exception: " + error.toString());
return wrap(new H2OErrorV3().fillFromImpl(error),type);
}
catch (Exception e) {
H2OError error=new H2OError(e,uri);
if (e instanceof IllegalArgumentException) error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
 else if (e instanceof FileNotFoundException) error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
 else if (e instanceof MalformedURLException) error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
Log.err("Caught exception: " + error.toString());
return wrap(new H2OErrorV3().fillFromImpl(error),type);
}
}
