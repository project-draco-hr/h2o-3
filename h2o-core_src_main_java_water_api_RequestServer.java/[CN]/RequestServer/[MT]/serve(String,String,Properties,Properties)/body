{
  try {
    Thread.currentThread().setPriority(Thread.MAX_PRIORITY - 1);
    RequestType type=RequestType.requestType(url);
    RequestUri uri=new RequestUri(method,url);
    maybeLogRequest(uri,header,parms);
    Response special=maybeServeSpecial(uri);
    if (special != null)     return special;
    Route route=routesTree.lookup(uri,parms);
    if (url.startsWith("/3/Frames/") && (url.toLowerCase().endsWith("/overwrite/true") || url.toLowerCase().endsWith("/overwrite/false")) && url.contains("/export/")) {
      int i=url.indexOf("/export/");
      boolean force=url.toLowerCase().endsWith("true");
      parms.put("frame_id",url.substring(10,i));
      parms.put("path",url.substring(i + 8,url.length() - 15 - (force ? 0 : 1)));
      parms.put("force",force);
      route=findRouteByApiName("exportFrame_deprecated");
    }
    if (route == null) {
      if (uri.isGetMethod())       return getResource(type,url);
 else       return response404(method + " " + url,type);
    }
 else {
      Schema response=route._handler.handle(uri.getVersion(),route,parms);
      PojoUtils.filterFields(response,(String)parms.get("_include_fields"),(String)parms.get("_exclude_fields"));
      return serveSchema(response,type);
    }
  }
 catch (  H2OFailException e) {
    H2OError error=e.toH2OError(url);
    Log.fatal("Caught exception (fatal to the cluster): " + error.toString());
    throw H2O.fail(serveError(error).toString());
  }
catch (  H2OModelBuilderIllegalArgumentException e) {
    H2OModelBuilderError error=e.toH2OError(url);
    Log.warn("Caught exception: " + error.toString());
    return serveSchema(new H2OModelBuilderErrorV3().fillFromImpl(error),RequestType.json);
  }
catch (  H2OAbstractRuntimeException e) {
    H2OError error=e.toH2OError(url);
    Log.warn("Caught exception: " + error.toString());
    return serveError(error);
  }
catch (  Exception e) {
    H2OError error=new H2OError(e,url);
    if (e instanceof IllegalArgumentException || e instanceof FileNotFoundException || e instanceof MalformedURLException)     error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
    Log.err("Caught exception: " + error.toString());
    return serveError(error);
  }
}
