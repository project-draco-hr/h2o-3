{
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY - 1);
  if (uri.startsWith("/LATEST")) {
    if (-1 == Schema.getLatestVersion()) {
      uri="/" + Schema.getHighestSupportedVersion() + uri.substring("/latest".length());
    }
 else {
      uri="/" + Schema.getLatestVersion() + uri.substring("/latest".length());
    }
  }
  RequestType type=RequestType.requestType(uri);
  if (uri.equals("/") && method.equals("HEAD")) {
    Response r=new Response(HTTP_OK,MIME_PLAINTEXT,"");
    return r;
  }
  String versioned_path=uri;
  String path=uri;
  int version=1;
  Matcher m=getVersionPattern().matcher(uri);
  if (m.matches()) {
    if ("EXPERIMENTAL".equals(m.group(1))) {
      version=99;
    }
 else {
      version=Integer.valueOf(m.group(1));
    }
    String uripath="/" + m.group(2);
    path=type.requestName(uripath);
    versioned_path="/" + version + path;
  }
  alwaysLogRequest(uri,method,parms);
  try {
    if (method.equals("GET") && uri.equals("/")) {
      maybeLogRequest(method,uri,"",parms,header);
      return redirectToFlow();
    }
    if (method.equals("GET") && uri.endsWith("/Logs/download")) {
      maybeLogRequest(method,uri,"",parms,header);
      return downloadLogs();
    }
    if (method.equals("GET")) {
      Pattern p2=Pattern.compile(".*/NodePersistentStorage.bin/([^/]+)/([^/]+)");
      Matcher m2=p2.matcher(uri);
      boolean b2=m2.matches();
      if (b2) {
        String categoryName=m2.group(1);
        String keyName=m2.group(2);
        return downloadNps(categoryName,keyName);
      }
    }
    Route route=lookup(method,versioned_path);
    if (route == null) {
      if (method.equals("GET")) {
        return getResource(type,uri);
      }
 else {
        return response404(method + " " + uri,type);
      }
    }
 else     if (route._handler_class == water.api.DownloadDataHandler.class) {
      return wrapDownloadData(HTTP_OK,handle(type,route,version,parms));
    }
 else {
      capturePathParms(parms,versioned_path,route);
      maybeLogRequest(method,uri,route._url_pattern.pattern(),parms,header);
      return wrap(handle(type,route,version,parms),type);
    }
  }
 catch (  H2OFailException e) {
    H2OError error=e.toH2OError(uri);
    Log.warn("Caught exception (fatal to the cluster): " + error.toString());
    Log.warn(wrap(new H2OErrorV1().fillFromImpl(error),type));
    System.exit(-1);
    return wrap(new H2OErrorV1().fillFromImpl(error),type);
  }
catch (  H2OModelBuilderIllegalArgumentException e) {
    H2OModelBuilderError error=e.toH2OError(uri);
    Log.warn("Caught exception: " + error.toString());
    return wrap(new H2OModelBuilderErrorV1().fillFromImpl(error),type);
  }
catch (  H2OAbstractRuntimeException e) {
    H2OError error=e.toH2OError(uri);
    Log.warn("Caught exception: " + error.toString());
    return wrap(new H2OErrorV1().fillFromImpl(error),type);
  }
catch (  Exception e) {
    H2OError error=new H2OError(e,uri);
    if (e instanceof IllegalArgumentException)     error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
 else     if (e instanceof FileNotFoundException)     error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
 else     if (e instanceof MalformedURLException)     error._http_status=HttpResponseStatus.BAD_REQUEST.getCode();
    Log.warn("Caught exception: " + error.toString());
    return wrap(new H2OErrorV1().fillFromImpl(error),type);
  }
}
