{
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY - 1);
  int version=parseVersion(uri);
  int idx=version >> 16;
  version&=0xFFFF;
  String uripath=uri.substring(idx);
  RequestType type=RequestType.requestType(uripath);
  String path=type.requestName(uripath);
  String versioned_path="/" + version + path;
  alwaysLogRequest(path,method,parms);
  if (method.equals("HEAD") && uri.equals("/")) {
    Response r=new Response(HTTP_OK,MIME_PLAINTEXT,"");
    return r;
  }
  try {
    Route route=lookup(method,versioned_path);
    if (route != null && route._handler_class != TutorialsHandler.class && route._handler_class != TypeaheadHandler.class)     H2O.registerAllSchemasIfNecessary();
    if (route == null)     return getResource(uri);
 else     if (route._handler_class == water.api.DownloadDataHandler.class) {
      return wrap2(HTTP_OK,handle(type,route,version,parms));
    }
 else {
      capturePathParms(parms,versioned_path,route);
      maybeLogRequest(path,versioned_path,route._url_pattern.pattern(),parms);
      return wrap(HTTP_OK,handle(type,route,version,parms),type);
    }
  }
 catch (  Exception e) {
    StringWriter sw=new StringWriter();
    e.printStackTrace(new PrintWriter(sw));
    Log.warn(sw.toString());
    if (e instanceof IllegalArgumentException)     return wrap(HTTP_BADREQUEST,new HttpErrorV1(400,e.getMessage(),uri),type);
    return wrap("unimplemented".equals(e.getMessage()) ? HTTP_NOTIMPLEMENTED : HTTP_INTERNALERROR,new HttpErrorV1(e),type);
  }
}
