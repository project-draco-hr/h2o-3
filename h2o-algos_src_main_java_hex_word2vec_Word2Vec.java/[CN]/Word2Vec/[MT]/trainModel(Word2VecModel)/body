{
  long start, stop, lastCnt=0;
  float tDiff;
  try {
    _parms.lock_frames(Word2Vec.this);
    if (model == null) {
      model=DKV.get(dest()).get();
    }
    Log.info("Starting to train the Word2Vec model.");
    for (int i=0; i < _parms._epochs; i++) {
      start=System.currentTimeMillis();
      model.setModelInfo(new WordVectorTrainer(model.getModelInfo()).doAll(_parms.train()).getModelInfo());
      stop=System.currentTimeMillis();
      model.getModelInfo().updateLearningRate();
      model.update(_key);
      tDiff=(float)(stop - start) / 1000;
      Log.info("Epoch " + i + " "+ tDiff+ "s  Words trained/s: "+ (model.getModelInfo().getTotalProcessed() - lastCnt) / tDiff);
      lastCnt=model.getModelInfo().getTotalProcessed();
    }
    Log.info("Finished training the Word2Vec model.");
    model.buildModelOutput();
  }
 catch (  RuntimeException ex) {
    model=DKV.get(dest()).get();
    _state=JobState.CANCELLED;
    Log.info("Word2Vec model building was cancelled.");
    throw ex;
  }
 finally {
    _parms.unlock_frames(Word2Vec.this);
    if (model != null)     model.unlock(self());
  }
  return model;
}
