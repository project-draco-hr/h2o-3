def confusion_matrix(self, metric='f1'):
    '\n    Get the confusion matrix for the specified metric\n\n    :param metric: A string in {"min_per_class_accuracy", "absolute_MCC", "tnr", "fnr", "fpr", "tpr", "precision", "error", "accuracy", "f0point5", "f2", "f1"}\n    :return: the confusion matrix for the metric\n    '
    thresh = self.find_threshold_by_max_metric(metric)
    thresh2d = self._metric_json['thresholds_and_metric_scores']
    tidx = thresh2d.col_header.index('tps')
    fidx = thresh2d.col_header.index('fps')
    p = self._metric_json['max_criteria_and_metric_scores'].cell_values[(tidx - 1)][2]
    n = self._metric_json['max_criteria_and_metric_scores'].cell_values[(fidx - 1)][2]
    idx = self.find_idx_by_threshold(thresh)
    row = thresh2d.cell_values[idx]
    tps = row[tidx]
    fps = row[fidx]
    c0 = (float('nan') if (isinstance(n, str) or isinstance(fps, str)) else (n - fps))
    c1 = (float('nan') if (isinstance(p, str) or isinstance(tps, str)) else (p - tps))
    fps = (float('nan') if isinstance(fps, str) else fps)
    tps = (float('nan') if isinstance(tps, str) else tps)
    return [[c0, fps], [c1, tps]]
