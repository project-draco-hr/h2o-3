{
  ab.bodyHead();
  ab.title(cloud_name);
  String statstr="<div>Ready</div>";
  if (!locked)   statstr="<div>Accepting new members</div>";
  if (!consensus)   statstr="<div class='alert alert-warn'>Adding new members</div>";
  if (bad_nodes != 0)   statstr="<div class='alert alert-error'>" + bad_nodes + " nodes are unhealthy</div>";
  ab.putStr("Status",statstr);
  ab.putStr("Uptime",PrettyPrint.msecs(cloud_uptime_millis,true));
  ab.arrayHead(new String[]{"IP","ping","Load","Data (cached%)","Keys","GC free / total / max","Disk (free%)","CPU (rpcs, threads, tasks)","TCPs & FDs","Cores","PID"});
  long now=System.currentTimeMillis();
  long max_ping=0;
  float load=0f;
  long data_tot=0, data_cached=0, data_keys=0;
  long gc_free=0, gc_tot=0, gc_max=0;
  long disk_free=0, disk_max=0;
  int cpu_rpcs=0;
  short fjthrds[]=new short[H2O.MAX_PRIORITY + 1];
  java.util.Arrays.fill(fjthrds,(short)-1);
  short fjqueue[]=new short[H2O.MAX_PRIORITY + 1];
  java.util.Arrays.fill(fjqueue,(short)-1);
  int tcps=0, fds=0;
  int cores=0;
  for (  Node n : nodes) {
    max_ping=Math.max(max_ping,(now - n.last_ping));
    load+=n.sys_load;
    data_tot+=n.total_value_size;
    data_cached+=n.mem_value_size;
    data_keys+=n.num_keys;
    gc_free+=n.free_mem;
    gc_tot+=n.tot_mem;
    gc_max+=n.max_mem;
    disk_free+=n.free_disk;
    disk_max+=n.max_disk;
    cpu_rpcs+=n.rpcs_active;
    tcps+=n.tcps_active;
    fds+=n.open_fds;
    cores+=n.num_cpus;
    for (int i=0; i < fjthrds.length; i++) {
      fjadd(fjthrds,i,n.fjthrds[i]);
      fjadd(fjqueue,i,n.fjqueue[i]);
    }
  }
  float avg_load=load / nodes.length;
  formatRow(ab,"",ab.bold("Summary"),max_ping,avg_load,data_tot,data_cached,data_keys,gc_free,gc_tot,gc_max,disk_free,disk_max,cpu_rpcs,fjthrds,fjqueue,tcps,fds,cores,"");
  for (  Node n : nodes)   formatRow(ab,n.healthy ? "" : "class=\"error\"",n.h2o.toString(),now - n.last_ping,n.sys_load,n.total_value_size,n.mem_value_size,n.num_keys,n.free_mem,n.tot_mem,n.max_mem,n.free_disk,n.max_disk,n.rpcs_active,n.fjthrds,n.fjqueue,n.tcps_active,n.open_fds,n.num_cpus,n.pid);
  ab.arrayTail();
  return ab.bodyTail();
}
