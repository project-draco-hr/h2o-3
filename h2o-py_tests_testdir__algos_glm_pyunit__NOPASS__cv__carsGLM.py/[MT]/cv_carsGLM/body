def cv_carsGLM(ip, port):
    h2o.init(ip, port)
    cars = h2o.import_frame(path=h2o.locate('smalldata/junit/cars_20mpg.csv'))
    problem = random.sample(range(3), 1)[0]
    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']
    if (problem == 1):
        family = 'binomial'
        response_col = 'economy_20mpg'
        cars[response_col] = cars[response_col].asfactor()
    elif (problem == 2):
        family = 'poisson'
        response_col = 'cylinders'
    else:
        family = 'gaussian'
        response_col = 'economy'
    print 'Family: {0}'.format(family)
    print 'Response column: {0}'.format(response_col)
    nfolds = random.randint(3, 10)
    glm1 = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, family=family, seed=1234)
    glm2 = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, family=family, seed=1234)
    h2o.check_models(glm1, glm2)
    glm = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=cars.nrow(), family=family, seed=1234)
    glm1 = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=0, family=family)
    glm2 = h2o.glm(y=cars[response_col], x=cars[predictors], family=family)
    h2o.check_models(glm1, glm2)
    glm3 = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=(cars.nrow() + 1), family=family, seed=1234)
    h2o.check_models(glm, glm3)
    try:
        glm = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=random.randint((-10000), (-1)), family=family)
        glm = h2o.glm(y=cars[response_col], x=cars[predictors], nfolds=1, family=family)
        assert False, 'Expected model-build to fail when nfolds is 1 or < 0'
    except EnvironmentError:
        assert True
    r = cars[0].runif()
    train = cars[(r > 0.2)]
    valid = cars[(r <= 0.2)]
    try:
        glm = h2o.glm(y=train[response_col], x=train[predictors], nfolds=random.randint(3, 10), validation_y=valid[1], validation_x=valid[predictors], family=family)
        assert False, 'Expected model-build to fail when both cross-validation and regular validation is attempted'
    except EnvironmentError:
        assert True
