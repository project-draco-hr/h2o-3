{
  TwoDimTable table=new TwoDimTable("Mixed","description",new String[]{"R0","R1","R2","R3"},new String[]{"C0","C1","C2","C3"},new String[]{"double","float","int","long"},new String[]{"%f","%f","%d","%d"},"");
  table.set(0,0,Double.NEGATIVE_INFINITY);
  table.set(1,0,Double.POSITIVE_INFINITY);
  table.set(2,0,Double.NaN);
  table.set(3,0,-Double.NaN);
  table.set(0,1,Float.NEGATIVE_INFINITY);
  table.set(1,1,Float.POSITIVE_INFINITY);
  table.set(2,1,Float.NaN);
  table.set(3,1,-Float.NaN);
  table.set(0,2,Integer.MAX_VALUE);
  table.set(1,2,Integer.MIN_VALUE);
  table.set(2,2,0);
  table.set(3,2,-0);
  table.set(0,3,Long.MAX_VALUE);
  table.set(1,3,Long.MIN_VALUE);
  table.set(2,3,0);
  table.set(3,3,-0);
  String ts=table.toString();
  assertTrue(ts.length() > 0);
  Log.info(ts);
  assertTrue(table.get(0,0).equals(Double.NEGATIVE_INFINITY));
  assertTrue(table.get(1,0).equals(Double.POSITIVE_INFINITY));
  assertTrue(table.get(2,0).equals(Double.NaN));
  assertTrue(table.get(3,0).equals(-Double.NaN));
  assertTrue(table.get(0,1).equals(Float.NEGATIVE_INFINITY));
  assertTrue(table.get(1,1).equals(Float.POSITIVE_INFINITY));
  assertTrue(table.get(2,1).equals(Float.NaN));
  assertTrue(table.get(3,1).equals(-Float.NaN));
  assertTrue(table.get(0,2).equals(Integer.MAX_VALUE));
  assertTrue(table.get(1,2).equals(Integer.MIN_VALUE));
  assertTrue(table.get(2,2).equals(0));
  assertTrue(table.get(3,2).equals(-0));
  assertTrue(table.get(0,3).equals(Long.MAX_VALUE));
  assertTrue(table.get(1,3).equals(Long.MIN_VALUE));
  assertTrue(table.get(2,3).equals(0L));
  assertTrue(table.get(3,3).equals(-0L));
  String json=new TwoDimTableV3().fillFromImpl(table).toJsonString();
  Log.info(json);
}
