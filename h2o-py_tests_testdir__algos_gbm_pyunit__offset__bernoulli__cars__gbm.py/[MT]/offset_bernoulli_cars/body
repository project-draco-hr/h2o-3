def offset_bernoulli_cars():
    cars = h2o.upload_file(pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))
    cars = cars[(cars['economy_20mpg'].isna() == 0)]
    cars['economy_20mpg'] = cars['economy_20mpg'].asfactor()
    offset = h2o.H2OFrame.fromPython([[0.5 for x in range(398)]])
    offset.set_names(['x1'])
    cars = cars.cbind(offset)
    gbm = H2OGradientBoostingEstimator(ntrees=1, max_depth=1, min_rows=1, learn_rate=1)
    gbm.train(x=range(2, 8), y='economy_20mpg', training_frame=cars, offset_column='x1')
    predictions = gbm.predict(cars)
    assert (abs(((-0.1041234) - gbm._model_json['output']['init_f'])) < 1e-06), 'expected init_f to be {0}, but got {1}'.format((-0.1041234), gbm._model_json['output']['init_f'])
    assert (abs((0.577326 - predictions[:, 2].mean())) < 1e-06), 'expected prediction mean to be {0}, but got {1}'.format(0.577326, predictions[:, 2].mean())
    assert (abs((0.1621461 - predictions[:, 2].min())) < 1e-06), 'expected prediction min to be {0}, but got {1}'.format(0.1621461, predictions[:, 2].min())
    assert (abs((0.8506528 - predictions[:, 2].max())) < 1e-06), 'expected prediction max to be {0}, but got {1}'.format(0.8506528, predictions[:, 2].max())
