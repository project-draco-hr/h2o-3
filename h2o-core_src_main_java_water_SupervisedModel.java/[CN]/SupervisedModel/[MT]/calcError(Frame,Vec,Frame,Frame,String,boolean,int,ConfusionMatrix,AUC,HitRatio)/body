{
  StringBuilder sb=new StringBuilder();
  double error=Double.POSITIVE_INFINITY;
  if (auc != null) {
    assert(_output.isClassifier());
    assert(_output.nclasses() == 2);
    auc.actual=ftest;
    auc.vactual=vactual;
    auc.predict=fpreds;
    auc.vpredict=fpreds.vecs()[2];
    auc.threshold_criterion=AUC.ThresholdCriterion.maximum_F1;
    auc.execImpl();
    auc.toASCII(sb);
    error=auc.data().err();
  }
  if (cm != null) {
    cm.actual=ftest;
    cm.vactual=vactual;
    cm.predict=fpreds;
    cm.vpredict=fpreds.vecs()[0];
    cm.execImpl();
    if (_output.isClassifier()) {
      if (auc != null) {
        cm.cm=new long[3][3];
        cm.cm[0][0]=auc.data().cm()[0][0];
        cm.cm[1][0]=auc.data().cm()[1][0];
        cm.cm[0][1]=auc.data().cm()[0][1];
        cm.cm[1][1]=auc.data().cm()[1][1];
        assert(new ConfusionMatrix2(cm.cm).err() == auc.data().err());
      }
 else {
        error=new ConfusionMatrix2(cm.cm).err();
      }
      if (cm.cm.length <= max_conf_mat_size)       cm.toASCII(sb);
    }
 else {
      assert(auc == null);
      error=cm.mse;
      cm.toASCII(sb);
    }
  }
  if (hr != null) {
    assert(_output.isClassifier());
    hr.actual=ftest;
    hr.vactual=vactual;
    hr.predict=hitratio_fpreds;
    hr.execImpl();
    hr.toASCII(sb);
  }
  if (printMe && sb.length() > 0) {
    Log.info("Scoring on " + label + " data:");
    for (    String s : sb.toString().split("\n"))     Log.info(s);
  }
  return error;
}
