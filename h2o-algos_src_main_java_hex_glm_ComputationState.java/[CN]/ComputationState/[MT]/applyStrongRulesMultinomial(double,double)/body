{
  int P=_dinfo.fullN();
  int N=P + 1;
  int selected=0;
  _activeBC=_bc;
  _activeData=_dinfo;
  if (!_allIn) {
    if (_activeDataMultinomial == null)     _activeDataMultinomial=new DataInfo[_nclasses];
    final double rhs=_alpha * (2 * lambdaNew - lambdaOld);
    int[] oldActiveCols=_activeData._activeCols == null ? new int[0] : _activeData.activeCols();
    int[] cols=MemoryManager.malloc4(N * _nclasses);
    int j=0;
    for (int c=0; c < _nclasses; ++c) {
      int start=selected;
      for (int i=0; i < P; ++i) {
        if (j < oldActiveCols.length && i == oldActiveCols[j]) {
          cols[selected++]=i;
          ++j;
        }
 else         if (_ginfo._gradient[c * N + i] > rhs || _ginfo._gradient[c * N + i] < -rhs) {
          cols[selected++]=i;
        }
      }
      cols[selected++]=P;
      _activeDataMultinomial[c]=_dinfo.filterExpandedColumns(Arrays.copyOfRange(cols,start,selected));
      for (int i=start; i < selected; ++i)       cols[i]+=c * N;
    }
    _allIn=selected == cols.length;
  }
  return selected;
}
