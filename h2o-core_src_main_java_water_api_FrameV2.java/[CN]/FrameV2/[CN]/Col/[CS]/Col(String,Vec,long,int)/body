{
  label=name;
  missing=vec.naCnt();
  zeros=vec.length() - vec.nzCnt();
  pinfs=vec.pinfs();
  ninfs=vec.ninfs();
  mins=vec.mins();
  maxs=vec.maxs();
  mean=vec.mean();
  sigma=vec.sigma();
  type=vec.isEnum() ? "enum" : vec.isUUID() ? "uuid" : vec.isString() ? "string" : (vec.isInt() ? (vec.isTime() ? "time" : "int") : "real");
  domain=vec.domain();
  len=(int)Math.min(len,vec.length() - off);
  if (vec.isUUID()) {
    str_data=new String[len];
    for (int i=0; i < len; i++)     str_data[i]=vec.isNA(off + i) ? null : PrettyPrint.UUID(vec.at16l(off + i),vec.at16h(off + i));
    data=null;
  }
 else   if (vec.isString()) {
    str_data=new String[len];
    ValueString vstr=new ValueString();
    for (int i=0; i < len; i++)     str_data[i]=vec.isNA(off + i) ? null : vec.atStr(vstr,off + i).toString();
    data=null;
  }
 else {
    data=MemoryManager.malloc8d(len);
    for (int i=0; i < len; i++)     data[i]=vec.at(off + i);
    str_data=null;
  }
  _vec=vec;
  precision=vec.chunkForRow(0).precision();
  bins=vec.lazy_bins();
  base=bins == null ? 0 : vec.base();
  stride=bins == null ? 0 : vec.stride();
  pctiles=vec.pctiles();
}
