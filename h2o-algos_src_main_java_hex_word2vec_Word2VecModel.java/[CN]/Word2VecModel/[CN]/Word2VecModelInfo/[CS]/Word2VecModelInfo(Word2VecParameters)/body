{
  _parameters=params;
  if (_parameters._vocabKey == null) {
    _parameters._vocabKey=(new WordCountTask(_parameters._minFreq)).doAll(_parameters.train())._wordCountKey;
  }
  _vocabSize=(int)((Frame)_parameters._vocabKey.get()).numRows();
  Random rand=new Random();
  _syn1=new float[_parameters._vecSize * _vocabSize];
  _syn0=new float[_parameters._vecSize * _vocabSize];
  for (int i=0; i < _parameters._vecSize * _vocabSize; i++)   _syn0[i]=(rand.nextFloat() - 0.5f) / _parameters._vecSize;
  if (_parameters._normModel == Word2Vec.NormModel.HSM)   buildHuffmanBinaryWordTree();
 else   buildUnigramTable();
}
