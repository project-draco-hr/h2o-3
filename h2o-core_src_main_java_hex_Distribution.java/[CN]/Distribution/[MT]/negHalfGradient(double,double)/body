{
switch (distribution) {
case AUTO:
case gaussian:
case bernoulli:
case poisson:
    return y - linkInv(f);
case gamma:
  return y * exp(-f) - 1;
case tweedie:
assert(tweediePower > 1 && tweediePower < 2);
return y * exp(f * (1 - tweediePower)) - exp(f * (2 - tweediePower));
case huber:
if (Math.abs(y - f) < huberCutoff) {
return y - f;
}
 else {
return f >= y ? -huberCutoff : huberCutoff;
}
case laplace:
return f > y ? -0.5 : 0.5;
case quantile:
return y > f ? 0.5 * quantileAlpha : 0.5 * (quantileAlpha - 1);
case modified_huber:
double yf=(2 * y - 1) * f;
if (yf < -1) return 2 * (2 * y - 1);
 else if (yf > 1) return 0;
 else return -f * (2 * y - 1) * (2 * y - 1);
default :
throw H2O.unimpl();
}
}
