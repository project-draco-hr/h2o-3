{
switch (distribution) {
case AUTO:
case gaussian:
    return w * (y - f) * (y - f);
case huber:
  if (Math.abs(y - f) < 1) {
    return w * (y - f) * (y - f);
  }
 else {
    return w * 2 * Math.abs(y - f) - 1;
  }
case laplace:
return w * Math.abs(y - f);
case bernoulli:
f=link(f);
return -2 * w * (y * f - log(1 + exp(f)));
case poisson:
return -2 * w * (y * log(f) - f);
case gamma:
return 2 * w * (y * -f + log(f));
case tweedie:
assert(tweediePower > 1 && tweediePower < 2);
f=link(f);
return 2 * w * (Math.pow(y,2 - tweediePower) / ((1 - tweediePower) * (2 - tweediePower)) - y * exp(f * (1 - tweediePower)) / (1 - tweediePower) + exp(f * (2 - tweediePower)) / (2 - tweediePower));
default :
throw H2O.unimpl();
}
}
