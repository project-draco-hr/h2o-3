{
  f=link(f);
switch (distribution) {
case AUTO:
case gaussian:
    return w * (y - f) * (y - f);
case huber:
  if (Math.abs(y - f) <= huberDelta) {
    return w * (y - f) * (y - f);
  }
 else {
    return (2 * w * Math.abs(y - f) - huberDelta) * huberDelta;
  }
case laplace:
return w * Math.abs(y - f);
case quantile:
return y > f ? w * quantileAlpha * (y - f) : w * (1 - quantileAlpha) * (f - y);
case bernoulli:
return -2 * w * (y * f - log(1 + exp(f)));
case poisson:
return -2 * w * (y * f - exp(f));
case gamma:
return 2 * w * (y * exp(-f) + f);
case tweedie:
assert(tweediePower > 1 && tweediePower < 2);
return 2 * w * (Math.pow(y,2 - tweediePower) / ((1 - tweediePower) * (2 - tweediePower)) - y * exp(f * (1 - tweediePower)) / (1 - tweediePower) + exp(f * (2 - tweediePower)) / (2 - tweediePower));
case modified_huber:
double yf=(2 * y - 1) * f;
if (yf < -1) return -w * 4 * yf;
 else if (yf > 1) return 0;
 else return w * yf * yf;
default :
throw H2O.unimpl();
}
}
