{
  final String mname=JCodeGen.toJavaId(_key.toString());
  bodySb.i().p("java.util.Arrays.fill(preds,0);").nl();
  bodySb.i().p("double mean, sdev, prob;").nl();
  bodySb.i().p("double[] nums = new double[" + _output._levels.length + "];").nl();
  bodySb.i().p("for(int i = 0; i < " + _output._levels.length + "; i++) {").nl();
  bodySb.i(1).p("nums[i] = Math.log(").pj(mname + "_APRIORI","VALUES").p("[i]);").nl();
  bodySb.i(1).p("for(int j = 0; j < " + _output._ncats + "; j++) {").nl();
  bodySb.i(2).p("if(Double.isNaN(data[j])) continue;").nl();
  bodySb.i(2).p("int level = (int)data[j];").nl();
  bodySb.i(2).p("prob = level < ").p(_output._pcond_raw.length).p(" ? " + mname + "_PCOND.VALUES[j][i][level] : ").p(_parms._laplace == 0 ? "0" : _parms._laplace + "/(" + mname+ "_RESCNT.VALUES[i] + "+ _parms._laplace+ "*"+ mname+ "_DOMLEN.VALUES[j])").p(";").nl();
  bodySb.i(2).p("nums[i] += Math.log(prob <= " + _parms._eps_prob + " ? "+ _parms._min_prob+ " : prob);").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i(1).p("for(int j = " + _output._ncats + "; j < data.length; j++) {").nl();
  bodySb.i(2).p("if(Double.isNaN(data[j])) continue;").nl();
  bodySb.i(2).p("mean = Double.isNaN(" + mname + "_PCOND.VALUES[j][i][0]) ? 0 : "+ mname+ "_PCOND.VALUES[j][i][0];").nl();
  bodySb.i(2).p("sdev = Double.isNaN(" + mname + "_PCOND.VALUES[j][i][1]) ? 1 : ("+ mname+ "_PCOND.VALUES[j][i][1] <= "+ _parms._eps_sdev+ " ? "+ _parms._min_sdev+ " : "+ mname+ "_PCOND.VALUES[j][i][1]);").nl();
  bodySb.i(2).p("prob = Math.exp(-((data[j]-mean)*(data[j]-mean))/(2.*sdev*sdev)) / (sdev*Math.sqrt(2.*Math.PI));").nl();
  bodySb.i(2).p("nums[i] += Math.log(prob <= " + _parms._eps_prob + " ? "+ _parms._min_prob+ " : prob);").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i().p("}").nl();
  bodySb.i().p("double sum;").nl();
  bodySb.i().p("for(int i = 0; i < nums.length; i++) {").nl();
  bodySb.i(1).p("sum = 0;").nl();
  bodySb.i(1).p("for(int j = 0; j < nums.length; j++) {").nl();
  bodySb.i(2).p("sum += Math.exp(nums[j]-nums[i]);").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i(1).p("preds[i+1] = 1/sum;").nl();
  bodySb.i().p("}").nl();
  bodySb.i().p("preds[0] = hex.genmodel.GenModel.getPrediction(preds, PRIOR_CLASS_DISTRIB, data, " + defaultThreshold() + ");").nl();
}
