{
  Vec[] dvecs=dst.vecs();
  long nrows=rows.cnt();
  if (nrows == 1) {
    long drow=(long)rows.expand()[0];
    for (    Vec vec : dvecs)     vec.set(drow,src);
    return;
  }
  Vec[] vecs=ses.copyOnWrite(dst,cols);
  Vec[] vecs2=new Vec[cols.length];
  for (int i=0; i < cols.length; i++)   vecs2[i]=vecs[cols[i]];
  rows.sort();
  new MRTask(){
    @Override public void map(    Chunk[] cs){
      long start=cs[0].start();
      long end=start + cs[0]._len;
      long min=(long)rows.min(), max=(long)rows.max() - 1;
      if (!(max < start || min > end)) {
        int startOffset=(int)(min > start ? min : start);
        for (int i=(int)(startOffset - start); i < cs[0]._len; ++i)         if (rows.has(start + i))         for (        Chunk chk : cs)         chk.set(i,src);
      }
    }
  }
.doAll(vecs2);
}
