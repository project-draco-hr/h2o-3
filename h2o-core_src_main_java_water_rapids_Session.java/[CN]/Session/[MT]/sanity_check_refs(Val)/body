{
  if ((sanityChecksCounter++) % 1000 >= sanityChecksFrequency)   return;
  NonBlockingHashMap<Vec,Integer> refcnts=new NonBlockingHashMap<>(REFCNTS.size());
  for (  Frame fr : FRAMES.values())   for (  Vec vec : fr.vecs()) {
    Integer count=refcnts.get(vec);
    refcnts.put(vec,count == null ? 1 : count + 1);
  }
  if (returning != null && returning.isFrame()) {
    if (FRAMES.containsValue(returning.getFrame()))     throw new IllegalStateException("Unexpected: returning frame is not nameless after all... " + returning);
    for (    Vec vec : returning.getFrame().vecs()) {
      Integer count=refcnts.get(vec);
      refcnts.put(vec,count == null ? 1 : count + 1);
    }
  }
  for (  Map.Entry<Vec,Integer> pair : refcnts.entrySet()) {
    Vec vec=pair.getKey();
    Integer count=pair.getValue();
    Integer savedCount=REFCNTS.get(vec);
    if (savedCount == null)     throw new IllegalStateException("REFCNTS missing vec " + vec);
    if (count.intValue() != savedCount.intValue())     throw new IllegalStateException("Ref-count mismatch for vec " + vec + ": REFCNT = "+ savedCount+ ", should be "+ count);
  }
  if (refcnts.size() != REFCNTS.size())   for (  Map.Entry<Vec,Integer> pair : REFCNTS.entrySet()) {
    if (!refcnts.containsKey(pair.getKey()))     throw new IllegalStateException("REFCNTs contains an extra vec " + pair.getKey() + ", count = "+ pair.getValue());
  }
}
