def __getitem__(self, item):
    '\n    Frame slicing.\n    Supports R-like row and column slicing.\n\n    Examples:\n      fr[2]              # All rows, column 2\n      fr[:,-1]           # All rows, last column\n      fr[0:5,:]          # first 5 rows, all columns\n      fr[fr[0] > 1, :]   # all rows greater than 1 in the first column, all columns\n      fr[[1,5,6]]        # columns 1, 5, and 6\n      fr[0:50, [1,2,3]]  # first 50 rows, columns 1,2, and 3\n\n    :param item: A tuple, a list, a string, or an int.\n                 If a tuple, then this indicates both row and column selection. The tuple\n                 must be exactly length 2.\n                 If a list, then this indicates column selection.\n                 If a int, the this indicates a single column to be retrieved at the index.\n                 If a string, then slice on the column with this name.\n    :return: An H2OFrame.\n    '
    if isinstance(item, (int, basestring, list)):
        return ExprNode('cols', self, item)
    if isinstance(item, slice):
        item = slice(item.start, min(self._ncols, item.stop))
        return ExprNode('cols', self, item)
    if isinstance(item, frame.H2OFrame):
        item = item._ex
    if isinstance(item, ExprNode):
        return ExprNode('rows', self, item)
    if isinstance(item, tuple):
        (rows, cols) = item
        allrows = allcols = False
        if isinstance(cols, slice):
            allcols = all([(a is None) for a in [cols.start, cols.step, cols.stop]])
        if isinstance(rows, slice):
            allrows = all([(a is None) for a in [rows.start, rows.step, rows.stop]])
        if (allrows and allcols):
            return self
        if allrows:
            return ExprNode('cols', self, cols)
        if allcols:
            return ExprNode('rows', self, rows)
        res = ExprNode('rows', ExprNode('cols', self, cols), rows)
        if (isinstance(rows, int) and isinstance(cols, (basestring, int))):
            res = ExprNode('flatten', res)
            return res._eager_scalar()
        return res
    raise ValueError(((('Unexpected __getitem__ selector: ' + str(type(item))) + ' ') + str(item.__class__)))
