@staticmethod
def _arg_to_expr(arg):
    if isinstance(arg, ExprNode):
        return arg._do_it(False)
    elif isinstance(arg, ASTId):
        return str(arg)
    elif isinstance(arg, bool):
        return '{}'.format(('TRUE' if arg else 'FALSE'))
    elif isinstance(arg, (int, long, float)):
        return '{}'.format(('NaN' if math.isnan(arg) else arg))
    elif isinstance(arg, basestring):
        return (('"' + arg) + '"')
    elif isinstance(arg, slice):
        return '[{}:{}]'.format((0 if (arg.start is None) else arg.start), ('NaN' if ((arg.stop is None) or math.isnan(arg.stop)) else (arg.stop if (arg.start is None) else (arg.stop - arg.start))))
    elif isinstance(arg, list):
        return ((('["' + '" "'.join(arg)) + '"]') if all((isinstance(i, basestring) for i in arg)) else (('[' + ' '.join([('NaN' if ((i == 'NaN') or math.isnan(i)) else str(i)) for i in arg])) + ']'))
    elif (arg is None):
        return '[]'
    raise ValueError(((((('Unexpected arg type: ' + str(type(arg))) + ' ') + str(arg.__class__)) + ' ') + arg.__repr__()))
