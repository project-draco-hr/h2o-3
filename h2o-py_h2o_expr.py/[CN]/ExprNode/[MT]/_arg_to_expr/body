@staticmethod
def _arg_to_expr(arg):
    if ((arg is not None) and isinstance(arg, range)):
        arg = list(arg)
    if (arg is None):
        return u'[]'
    elif isinstance(arg, ExprNode):
        return arg._do_it(False)
    elif isinstance(arg, ASTId):
        return str(arg)
    elif isinstance(arg, bool):
        return u'{}'.format((u'TRUE' if arg else u'FALSE'))
    elif is_type(arg, numeric):
        return u'{}'.format((u'NaN' if math.isnan(arg) else arg))
    elif is_type(arg, str):
        return ((u'"' + arg) + u'"')
    elif isinstance(arg, slice):
        return u'[{}:{}]'.format((0 if (arg.start is None) else arg.start), (u'NaN' if ((arg.stop is None) or math.isnan(arg.stop)) else (arg.stop if (arg.start is None) else (arg.stop - arg.start))))
    elif isinstance(arg, list):
        if is_type(arg, [str]):
            return (u'[%s]' % u' '.join(((u'"%s"' % elem) for elem in arg)))
        else:
            return (u'[%s]' % u' '.join(((u'NaN' if ((i == u'NaN') or math.isnan(i)) else str(i)) for i in arg)))
    raise ValueError((((((u'Unexpected arg type: ' + str(type(arg))) + u' ') + str(arg.__class__)) + u' ') + arg.__repr__()))
