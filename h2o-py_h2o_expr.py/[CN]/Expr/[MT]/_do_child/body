def _do_child(self, child):
    assert ((child is None) or isinstance(child, Expr)), (' expected None or Expr but found: %r' % child)
    global __CMD__
    if child:
        if child.is_pending():
            child._do_it()
        elif isinstance(child._data, (int, float)):
            __CMD__ += ('#' + str(child._data))
        elif isinstance(child._data, (str, unicode)):
            __CMD__ += (("'" + str(child._data)) + "'")
        elif isinstance(child._data, slice):
            __CMD__ += (((('(: #' + str(child._data.start)) + ' #') + str((child._data.stop - 1))) + ')')
            child._data = None
        elif ((self._op == '[') and isinstance(self._rite._data, tuple)):
            if (not isinstance(child._data, tuple)):
                return child
            __CMD__ += self.multi_dim_slice_cmd(child)
            return child
    __CMD__ += ' '
    return child
