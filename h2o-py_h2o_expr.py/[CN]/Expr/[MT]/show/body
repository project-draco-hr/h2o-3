def show(self, noprint=False):
    '\n    Evaluate and print.\n\n    :return: None\n    '
    self.eager()
    if noprint:
        if isinstance(self._data, unicode):
            j = h2o.frame(self._data)
            data = [c['data'] for c in j['frames'][0]['columns'][:]]
            domains = [c['domain'] for c in j['frames'][0]['columns']]
            for i in range(len(data)):
                if (domains[i] is not None):
                    for j in range(len(data[i])):
                        data[i][j] = domains[i][int(data[i][j])]
            data = map(list, zip(*data))
            return data[0:min(10, len(data))]
        return self._data
    else:
        if isinstance(self._data, unicode):
            j = h2o.frame(self._data)
            data = [c['data'] for c in j['frames'][0]['columns'][:]]
        elif isinstance(self._data, (int, float, str, list)):
            print self._data
            print 
            return
        else:
            data = [self._data]
        t_data = map(list, zip(*data))
        t_data = t_data[0:min(10, len(t_data))]
        for (didx, d) in enumerate(t_data):
            t_data[didx].insert(0, didx)
        headers = ['Row ID']
        for i in range(len(t_data[0])):
            headers.append('')
        print (('Displaying first ' + str(len(t_data))) + ' row(s)')
        print tabulate.tabulate(t_data, headers=headers)
        print 
