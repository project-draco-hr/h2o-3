def __init__(self, op, left=None, rite=None, length=None):
    '\n    Create a new Expr object.\n\n    Constructor choices:\n        ("op"   left rite): pending calc, awaits left & rite being computed\n        ("op"   None None): precomputed local small data\n        (fr_key #num name): precomputed remote Big Data\n\n    :param op: An operation to perform\n    :param left: An Expr to the "left"\n    :param rite: An Expr to the "right"\n    :param length: The length of the H2OVec/H2OFrame object.\n    :return: A new Expr object.\n    '
    self._op = None
    self._data = None
    self._left = None
    self._rite = None
    self._name = None
    self._summary = None
    self._len = None
    self._vecname = ''
    self._isslice = False
    (self._op, self._data) = ((op, None) if isinstance(op, str) else ('rawdata', op))
    self._name = self._op
    assert self._is_valid(), (str(self._name) + str(self._data))
    self._left = (left.get_expr() if isinstance(left, frame.H2OVec) else left)
    self._rite = (rite.get_expr() if isinstance(rite, frame.H2OVec) else rite)
    assert ((self._left is None) or self._is_valid(self._left)), self.debug()
    assert ((self._rite is None) or self._is_valid(self._rite)), self.debug()
    if self.is_remote():
        assert (length is not None)
        self._len = length
    elif self.is_local():
        self._len = (len(self._data) if isinstance(self._data, list) else 1)
    elif self.is_slice():
        self._len = (self._data.stop - self._data.start)
    else:
        self._len = (length if length else len(self._left))
    assert (self._len is not None)
    if (left and isinstance(left, frame.H2OVec)):
        self._vecname = left._name
