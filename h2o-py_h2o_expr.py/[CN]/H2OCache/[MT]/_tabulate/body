def _tabulate(self, tablefmt, rollups):
    u'Pretty tabulated string of all the cached data, and column names'
    if (not self.is_valid()):
        self.fill()
    d = collections.OrderedDict()
    if rollups:
        col = next(itervalues(self._data))
        lrows = len(col[u'data'])
        d[u''] = ([u'type', u'mins', u'mean', u'maxs', u'sigma', u'zeros', u'missing'] + list(map(str, range(lrows))))
    for (k, v) in iteritems(self._data):
        x = v[u'data']
        domain = v[u'domain']
        if domain:
            x = [(u'' if math.isnan(idx) else domain[int(idx)]) for idx in x]
        if rollups:
            mins = (v[u'mins'][0] if v[u'mins'] else None)
            maxs = (v[u'maxs'][0] if v[u'maxs'] else None)
            x = ([v[u'type'], mins, v[u'mean'], maxs, v[u'sigma'], v[u'zero_count'], v[u'missing_count']] + x)
        d[k] = x
    return tabulate.tabulate(d, headers=u'keys', tablefmt=tablefmt)
