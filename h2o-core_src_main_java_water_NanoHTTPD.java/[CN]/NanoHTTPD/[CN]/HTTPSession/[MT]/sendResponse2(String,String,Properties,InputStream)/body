{
  try {
    if (status == null)     throw new RuntimeException("sendResponse(): Status can't be null.");
    OutputStream out=mySocket.getOutputStream();
    PrintWriter pw=new PrintWriter(out);
    pw.print("HTTP/1.0 " + status + " \r\n");
    if (mime != null)     pw.print("Content-Type: " + mime + "\r\n");
    if (header == null || header.getProperty("Date") == null)     pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");
    if (header != null) {
      Enumeration e=header.keys();
      while (e.hasMoreElements()) {
        String key=(String)e.nextElement();
        String value=header.getProperty(key);
        pw.print(key + ": " + value+ "\r\n");
      }
    }
    pw.print("X-h2o-build-project-version" + ": " + H2O.ABV.projectVersion() + "\r\n");
    pw.print("X-h2o-rest-api-version-max" + ": " + RequestServer.H2O_REST_API_VERSION + "\r\n");
    pw.print("X-h2o-cluster-id" + ": " + H2O.CLUSTER_ID + "\r\n");
    pw.print("\r\n");
    pw.flush();
    if (data != null) {
      int pending=data.available();
      byte[] buff=new byte[theBufferSize];
      while (pending > 0) {
        int read=data.read(buff,0,((pending > theBufferSize) ? theBufferSize : pending));
        if (read <= 0)         break;
        out.write(buff,0,read);
        pending=data.available();
      }
    }
    out.flush();
    out.close();
    if (data != null)     data.close();
  }
 catch (  IOException e) {
    Log.err(e);
    try {
      mySocket.close();
    }
 catch (    IOException ignore) {
    }
  }
  if (H2O.getShutdownRequested()) {
    H2O.shutdown(0);
  }
}
