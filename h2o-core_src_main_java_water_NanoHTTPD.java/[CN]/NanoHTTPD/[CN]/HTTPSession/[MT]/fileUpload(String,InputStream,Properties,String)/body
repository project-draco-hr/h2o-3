{
  try {
    String line=readLine(in);
    int i=line.indexOf(boundary);
    if (i != 2)     sendError(HTTP_BAD_REQUEST,"BAD REQUEST: Content type is multipart/form-data but next chunk does not start with boundary. Usage: GET /example/file.html");
    if (line.substring(i + boundary.length()).startsWith("--"))     return false;
    Properties item=new Properties();
    line=readLine(in);
    while ((line != null) && (line.trim().length() > 0)) {
      int p=line.indexOf(':');
      if (p != -1)       item.put(line.substring(0,p).trim().toLowerCase(),line.substring(p + 1).trim());
      line=readLine(in);
    }
    if (line != null) {
      String contentDisposition=item.getProperty("content-disposition");
      if (contentDisposition == null)       sendError(HTTP_BAD_REQUEST,"BAD REQUEST: Content type is multipart/form-data but no content-disposition info found. Usage: GET /example/file.html");
{
        String key=parms.getProperty("key");
        boolean nps=Pattern.matches("/[^/]+/NodePersistentStorage.*",uri);
        if (nps) {
          Pattern p=Pattern.compile(".*NodePersistentStorage/([^/]+)/([^/]+)");
          Matcher m=p.matcher(uri);
          boolean b=m.matches();
          if (!b) {
            sendError(HTTP_BAD_REQUEST,"NodePersistentStorage URL malformed");
          }
          String categoryName=m.group(1);
          String keyName=m.group(2);
          H2O.getNPS().put(categoryName,keyName,new InputStreamWrapper(in,boundary.getBytes()));
          long length=H2O.getNPS().get_length(categoryName,keyName);
          String responsePayload="{ " + "\"category\" : " + "\"" + categoryName + "\", "+ "\"name\" : "+ "\""+ keyName+ "\", "+ "\"total_bytes\" : "+ length+ " "+ "}";
          sendResponse(HTTP_OK,MIME_JSON,null,new ByteArrayInputStream(responsePayload.getBytes("UTF-8")));
          return true;
        }
      }
{
        String destination_key=parms.getProperty("destination_frame");
        if (destination_key == null) {
          destination_key="upload" + Key.rand();
        }
        if (!validKeyName(destination_key)) {
          sendError(HTTP_BAD_REQUEST,"Invalid key name, contains illegal characters");
        }
        boolean uploadFile=Pattern.matches("/PostFile",uri) || Pattern.matches("/[1-9][0-9]*/PostFile",uri) || Pattern.matches("/LATEST/PostFile",uri);
        if (uploadFile) {
          UploadFileVec.ReadPutStats stats=new UploadFileVec.ReadPutStats();
          UploadFileVec.readPut(destination_key,new InputStreamWrapper(in,boundary.getBytes()),stats);
          String responsePayload="{ \"destination_frame\": \"" + destination_key + "\", \"total_bytes\": "+ stats.total_bytes+ " }\n";
          sendResponse(HTTP_OK,MIME_JSON,null,new ByteArrayInputStream(responsePayload.getBytes("UTF-8")));
          return true;
        }
      }
      sendError(HTTP_NOT_FOUND,"(Attempt to upload data) URL not found");
    }
  }
 catch (  Exception e) {
    sendError(HTTP_INTERNAL_ERROR,"SERVER INTERNAL ERROR: Exception: " + e.getMessage());
  }
  return false;
}
