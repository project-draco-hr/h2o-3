{
  Frame f=parse_test_file(dataset);
  if (classification) {
    Vec respVec=f.vec(responseIdx);
    f.replace(responseIdx,respVec.toCategorical()).remove();
    DKV.put(f._key,f);
  }
  DRFModel model=null;
  DRFModel modelFromCheckpoint=null;
  DRFModel modelFinal=null;
  try {
    DRFModel.DRFParameters drfParams=new DRFModel.DRFParameters();
    drfParams._model_id=Key.make("Initial model");
    drfParams._train=f._key;
    drfParams._response_column=f.name(responseIdx);
    drfParams._ntrees=ntreesInPriorModel;
    drfParams._seed=42;
    drfParams._max_depth=10;
    drfParams._score_each_iteration=true;
    drfParams._sample_rate=sampleRateInPriorModel;
    model=new DRF(drfParams).trainModel().get();
    DRFModel.DRFParameters drfFromCheckpointParams=new DRFModel.DRFParameters();
    drfFromCheckpointParams._model_id=Key.make("Model from checkpoint");
    drfFromCheckpointParams._train=f._key;
    drfFromCheckpointParams._response_column=f.name(responseIdx);
    drfFromCheckpointParams._ntrees=ntreesInPriorModel + ntreesInNewModel;
    drfFromCheckpointParams._seed=42;
    drfFromCheckpointParams._checkpoint=model._key;
    drfFromCheckpointParams._score_each_iteration=true;
    drfFromCheckpointParams._max_depth=10;
    drfFromCheckpointParams._sample_rate=sampleRateInNewModel;
    modelFromCheckpoint=new DRF(drfFromCheckpointParams).trainModel().get();
    DRFModel.DRFParameters drfFinalParams=new DRFModel.DRFParameters();
    drfFinalParams._model_id=Key.make("Validation model");
    drfFinalParams._train=f._key;
    drfFinalParams._response_column=f.name(responseIdx);
    drfFinalParams._ntrees=ntreesInPriorModel + ntreesInNewModel;
    drfFinalParams._seed=42;
    drfFinalParams._score_each_iteration=true;
    drfFinalParams._max_depth=10;
    modelFinal=new DRF(drfFinalParams).trainModel().get();
    CompressedTree[][] treesFromCheckpoint=getTrees(modelFromCheckpoint);
    CompressedTree[][] treesFromFinalModel=getTrees(modelFinal);
    assertTreeEquals("The model created from checkpoint and corresponding model created from scratch should have the same trees!",treesFromCheckpoint,treesFromFinalModel,true);
    for (int tree=0; tree < treesFromCheckpoint.length; tree++) {
      for (int clazz=0; clazz < treesFromCheckpoint[tree].length; clazz++) {
        if (treesFromCheckpoint[tree][clazz] != null) {
          CompressedTree a=treesFromCheckpoint[tree][clazz];
          CompressedTree b=treesFromFinalModel[tree][clazz];
          Assert.assertNotEquals(a._key,b._key);
        }
      }
    }
  }
  finally {
    if (f != null)     f.delete();
    if (model != null)     model.delete();
    if (modelFromCheckpoint != null)     modelFromCheckpoint.delete();
    if (modelFinal != null)     modelFinal.delete();
  }
}
