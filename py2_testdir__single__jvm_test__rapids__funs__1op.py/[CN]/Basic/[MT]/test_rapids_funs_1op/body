def test_rapids_funs_1op(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 5, 'cA', 200)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        inspect = h2o_cmd.runInspect(key=hex_key)
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
        self.assertEqual(numRows, rowCount, ('parse created result with the wrong number of rows %s %s' % (numRows, rowCount)))
        REPEAT = 1
        data_key = hex_key
        data_key2 = (hex_key + '_2')
        trial = 0
        good = []
        bad = []
        both = h2o_xl.xFcnOp1Set.union(h2o_xl.xFcnOp3Set)
        both = h2o_xl.xFcnOp1Set
        for fun in both:
            a = None
            try:
                result_key = ((data_key + '_') + str(trial))
                Assign(data_key2, data_key)
                if (fun in ['ncol', 'asin', 'any.factor', 'sin', 'atan', 'tan', 'sign', 'log', 'exp', 'sqrt', 'abs', 'floor', 'ceiling', 'trunc', 'is.factor', 'is.na', 'any.na', 'nrow', 'tanh', 'length', 'acos', 'cos', 'sinh', 'cosh']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0)))
                    good.append(fun)
                elif (fun in ['sum', 'max', 'min', 'xorsum', 'sd']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), True))
                    good.append(fun)
                elif (fun in ['scale']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), False, False))
                    good.append(fun)
                elif (fun in ['round', 'signif']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), 1))
                    good.append(fun)
                elif (fun in ['seq_len', 'rep_len']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), 4))
                    good.append(fun)
                elif (fun in ['seq']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), 1, 5, 1))
                    good.append(fun)
                elif (fun in ['mean']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), 0, False))
                    good.append(fun)
                elif (fun in ['var']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), False, False, False))
                    good.append(fun)
                elif (fun in ['match']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), KeyIndexed(data_key2, col=0), 1, None))
                    good.append(fun)
                elif (fun in ['unique']):
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), False, 10, 1))
                    good.append(fun)
                else:
                    a = Assign(result_key, Fcn(fun, KeyIndexed(data_key2, col=0), None))
                    bad.append(fun)
                if (1 == 0):
                    inspect = h2o_cmd.runInspect(key=result_key)
                    (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
                    assert (numRows == 1000), numRows
                    assert (numCols == 1), numCols
                    print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
            except:
                if (not a):
                    bad.append(fun)
            trial += 1
        print 'good:', good
        print 'bad:', bad
