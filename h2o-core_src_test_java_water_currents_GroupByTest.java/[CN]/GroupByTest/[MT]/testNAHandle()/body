{
  Frame fr=null;
  try {
    String tree="(GB hex [7] [] nrow 0 \"all\" mean 1 \"all\")";
    fr=checkTree(tree,"smalldata/junit/cars.csv");
    Assert.assertEquals(3,fr.numCols());
    Assert.assertEquals(13,fr.numRows());
    Assert.assertEquals(70,fr.vec(0).at8(0));
    Assert.assertEquals(35,fr.vec(1).at8(0));
    Assert.assertTrue(fr.vec(2).isNA(0));
    Assert.assertEquals(72,fr.vec(0).at8(2));
    Assert.assertEquals(28,fr.vec(1).at8(2));
    Assert.assertEquals(18.71,fr.vec(2).at(2),1e-1);
    fr.delete();
    tree="(GB hex [7] [] nrow 1 \"all\" nrow 1 \"rm\" nrow 1 \"ignore\")";
    fr=checkTree(tree,"smalldata/junit/cars.csv");
    Assert.assertEquals(70,fr.vec(0).at8(0));
    Assert.assertEquals(35,fr.vec(1).at8(0));
    Assert.assertEquals(29,fr.vec(2).at8(0));
    Assert.assertEquals(29,fr.vec(3).at8(0));
    fr.delete();
    tree="(GB hex [7] [] mean 1 \"all\" mean 1 \"rm\" mean 1 \"ignore\")";
    fr=checkTree(tree,"smalldata/junit/cars.csv");
    Assert.assertEquals(70,fr.vec(0).at8(0));
    Assert.assertTrue(fr.vec(1).isNA(0));
    Assert.assertEquals(17.69,fr.vec(2).at(0),1e-1);
    Assert.assertEquals(14.66,fr.vec(3).at(0),1e-1);
  }
  finally {
    if (fr != null)     fr.delete();
    Keyed.remove(Key.make("hex"));
  }
}
