def build_model(self, algo, training_frame, parameters, destination_key=None, timeoutSecs=60, asynchronous=False, **kwargs):
    '\n    Build a model on the h2o cluster using the given algorithm, training \n    Frame and model parameters.\n    '
    assert (algo is not None), '"algo" parameter is null'
    assert (training_frame is not None), '"training_frame" parameter is null'
    assert (parameters is not None), '"parameters" parameter is null'
    model_builders = self.model_builders(timeoutSecs=timeoutSecs)
    assert (model_builders is not None), '/ModelBuilders REST call failed'
    assert (algo in model_builders['model_builders'])
    builder = model_builders['model_builders'][algo]
    frames = self.frames(key=training_frame)
    assert (frames is not None), '/Frames/{0} REST call failed'.format(training_frame)
    key_name = frames['frames'][0]['key']['name']
    assert (key_name == training_frame), '/Frames/{0} returned Frame {1} rather than Frame {2}'.format(training_frame, key_name, training_frame)
    parameters['training_frame'] = training_frame
    if (destination_key is not None):
        parameters['destination_key'] = destination_key
    result1 = self.do_json_request(('/2/ModelBuilders.json/' + algo), cmd='post', timeout=timeoutSecs, postData=parameters)
    if asynchronous:
        result = result1
    elif ('validation_error_count' in result1):
        h2p.yellow_print('parameter error in model_builders')
        result = result1
    else:
        job = result1['jobs'][0]
        job_key = job['key']['name']
        verboseprint(('model building job_key: ' + repr(job_key)))
        result = self.poll_job(job_key, timeoutSecs=timeoutSecs)
    verboseprint('result:', result)
    return result
