def parse(self, key=None, key2=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, **kwargs):
    '\n    Parse an imported raw file or files into a Frame.\n    '
    if (not key):
        raise Exception('key= is required in parse, %s', key)
    if (not isinstance(key, basestring)):
        print ("I noticed you're giving me multiple keys %s to parse:" % len(key)), key
        srcs = (('[' + ','.join(key)) + ']')
    else:
        srcs = (('[' + key) + ']')
    parse_setup_params = {'srcs': srcs, }
    setup_result = self.do_json_request(jsonRequest='ParseSetup.json', timeout=timeoutSecs, params=parse_setup_params)
    verboseprint('ParseSetup result:', dump_json(setup_result))
    if setup_result['srcs']:
        setupSrcs = (('[' + ','.join([src['name'] for src in setup_result['srcs']])) + ']')
    else:
        setupSrcs = None
    if setup_result['columnNames']:
        ascii_column_names = (('[' + ','.join(setup_result['columnNames'])) + ']')
    else:
        ascii_column_names = None
    parse_params = {'srcs': (('[' + setup_result['srcs'][0]['name']) + ']'), 'hex': setup_result['hexName'], 'pType': setup_result['pType'], 'sep': setup_result['sep'], 'ncols': setup_result['ncols'], 'checkHeader': setup_result['checkHeader'], 'singleQuotes': setup_result['singleQuotes'], 'columnNames': ascii_column_names, }
    h2o_methods.check_params_update_kwargs(parse_params, kwargs, 'parse', print_params=True)
    parse_result = self.do_json_request(jsonRequest='Parse.json', timeout=timeoutSecs, params=parse_params, **kwargs)
    verboseprint('Parse result:', dump_json(parse_result))
    job_key = parse_result['job']['name']
    if noPoll:
        return this.jobs(job_key)
    job_json = self.poll_job(job_key, timeoutSecs=timeoutSecs)
    if job_json:
        dest_key = job_json['jobs'][0]['dest']['name']
        return self.frames(dest_key)
    return None
