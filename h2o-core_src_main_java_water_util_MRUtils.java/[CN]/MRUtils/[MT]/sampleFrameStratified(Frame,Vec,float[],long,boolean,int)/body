{
  if (fr == null)   return null;
  assert(label.isEnum());
  assert(sampling_ratios != null && sampling_ratios.length == label.domain().length);
  final int labelidx=fr.find(label);
  assert(labelidx >= 0);
  final boolean poisson=false;
  Frame r=new MRTask(){
    @Override public void map(    Chunk[] cs,    NewChunk[] ncs){
      final Random rng=getDeterRNG(seed + cs[0].cidx());
      for (int r=0; r < cs[0]._len; r++) {
        if (cs[labelidx].isNA(r))         continue;
        final int label=(int)cs[labelidx].at8(r);
        assert(sampling_ratios.length > label && label >= 0);
        int sampling_reps;
        if (poisson) {
          throw H2O.unimpl();
        }
 else {
          final float remainder=sampling_ratios[label] - (int)sampling_ratios[label];
          sampling_reps=(int)sampling_ratios[label] + (rng.nextFloat() < remainder ? 1 : 0);
        }
        for (int i=0; i < ncs.length; i++) {
          for (int j=0; j < sampling_reps; ++j) {
            ncs[i].addNum(cs[i].atd(r));
          }
        }
      }
    }
  }
.doAll(fr.numCols(),fr).outputFrame(fr.names(),fr.domains());
  long[] dist=new ClassDist(r.vecs()[labelidx]).doAll(r.vecs()[labelidx]).dist();
  if (dist == null)   return fr;
  if (debug) {
    long sumdist=ArrayUtils.sum(dist);
    Log.info("After stratified sampling: " + sumdist + " rows.");
    for (int i=0; i < dist.length; ++i) {
      Log.info("Class " + r.vecs()[labelidx].factor(i) + ": count: "+ dist[i]+ " sampling ratio: "+ sampling_ratios[i]+ " actual relative frequency: "+ (float)dist[i] / sumdist * dist.length);
    }
  }
  if (ArrayUtils.minValue(dist) == 0 && count < 10) {
    Log.info("Re-doing stratified sampling because not all classes were represented (unlucky draw).");
    r.delete();
    return sampleFrameStratified(fr,label,sampling_ratios,seed + 1,debug,++count);
  }
  Frame shuffled=shuffleFramePerChunk(r,seed + 0x580FF13);
  r.delete();
  return shuffled;
}
