{
  Class clz=getClass();
  for (  String key : parms.stringPropertyNames()) {
    try {
      Field f=clz.getDeclaredField(key);
      int mods=f.getModifiers();
      if (Modifier.isTransient(mods) || Modifier.isStatic(mods))       throw new IllegalArgumentException("Unknown argument " + key);
      API api=(API)f.getAnnotations()[0];
      if (api.validation().length() == 0 && api.values().length() == 0 && api.dependsOn().length == 0)       throw new IllegalArgumentException("Attempting to set output field " + key);
      Class fclz=f.getType();
      String value=parms.getProperty(key);
      if (fclz.equals(String.class)) {
        f.set(this,value);
      }
 else       throw H2O.unimpl();
    }
 catch (    NoSuchFieldException nsfe) {
      throw new IllegalArgumentException("Unknown argument " + key);
    }
catch (    ArrayIndexOutOfBoundsException aioobe) {
      throw new RuntimeException("Broken internal schema; missing API annotation: " + key);
    }
catch (    IllegalAccessException iae) {
      throw new RuntimeException("Broken internal schema; cannot be private nor final: " + key);
    }
  }
  do {
    for (    Field f : clz.getDeclaredFields()) {
      int mods=f.getModifiers();
      if (Modifier.isTransient(mods) || Modifier.isStatic(mods))       continue;
      API api=(API)f.getAnnotations()[0];
      if (api.validation().length() > 0) {
        if (parms.getProperty(f.getName()) == null)         throw new IllegalArgumentException("Required field " + f.getName() + " not specified");
      }
    }
    clz=clz.getSuperclass();
  }
 while (Iced.class.isAssignableFrom(clz.getSuperclass()));
  return (S)this;
}
