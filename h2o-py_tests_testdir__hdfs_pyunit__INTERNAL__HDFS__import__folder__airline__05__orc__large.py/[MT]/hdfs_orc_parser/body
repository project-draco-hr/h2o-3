def hdfs_orc_parser():
    hadoop_namenode_is_accessible = pyunit_utils.hadoop_namenode_is_accessible()
    if hadoop_namenode_is_accessible:
        hdfs_name_node = pyunit_utils.hadoop_namenode()
        if pyunit_utils.cannaryHDFSTest(hdfs_name_node, '/datasets/orc_parser/orc/orc_split_elim.orc'):
            print('Your hive-exec version is too old.  Orc parser test {0} is skipped.'.format('pyunit_INTERNAL_HDFS_import_folder_airline_05_orc.py'))
            pass
        else:
            hdfs_orc_file = '/datasets/orc_parser/air05_orc'
            url_orc = 'hdfs://{0}{1}'.format(hdfs_name_node, hdfs_orc_file)
            hdfs_csv_file = '/datasets/orc_parser/air05_csv'
            url_csv = 'hdfs://{0}{1}'.format(hdfs_name_node, hdfs_csv_file)
            startcsv = time.time()
            multi_file_csv = h2o.import_file(url_csv, na_strings=['\\N'])
            endcsv = time.time()
            csv_type_dict = multi_file_csv.types
            multi_file_csv.summary()
            csv_summary = h2o.frame(multi_file_csv.frame_id)['frames'][0]['columns']
            col_ind_name = dict()
            for key_name in list(csv_type_dict):
                col_ind = key_name.split('C')
                new_ind = (int(str(col_ind[1])) - 1)
                col_ind_name[new_ind] = key_name
            col_types = []
            for ind in range(len(col_ind_name)):
                col_types.append(csv_type_dict[col_ind_name[ind]])
            startorc1 = time.time()
            multi_file_orc1 = h2o.import_file(url_orc)
            endorc1 = time.time()
            h2o.remove(multi_file_orc1)
            startorc = time.time()
            multi_file_orc = h2o.import_file(url_orc, col_types=col_types)
            endorc = time.time()
            multi_file_orc.summary()
            orc_summary = h2o.frame(multi_file_orc.frame_id)['frames'][0]['columns']
            print('************** CSV parse time is {0}'.format((endcsv - startcsv)))
            print('************** ORC (without column type forcing) parse time is {0}'.format((endorc1 - startorc1)))
            print('************** ORC (with column type forcing) parse time is {0}'.format((endorc - startorc)))
            pyunit_utils.compare_frame_summary(csv_summary, orc_summary)
    else:
        raise EnvironmentError
