{
  StringBuilder sb=new StringBuilder();
  sb.append(header);
  boolean debug_print=false;
  boolean first=supers == null;
  if (!first)   sb.append(supers);
  String mimpl=impl + "_impl";
  for (  CtMethod mth : iced_cc.getDeclaredMethods())   if (mth.getName().equals(mimpl)) {
    if (javassist.Modifier.isAbstract(mth.getModifiers()) || javassist.Modifier.isVolatile(mth.getModifiers()))     sb.append(impl.equals("write") ? "  return ab;\n}" : "  return ice;\n}");
 else     sb.append("  return ice.").append(mimpl).append("(ab);\n}");
    mimpl=null;
    break;
  }
  CtField ctfs[]=iced_cc.getDeclaredFields();
  for (  CtField ctf : ctfs) {
    int mods=ctf.getModifiers();
    if (javassist.Modifier.isTransient(mods) || javassist.Modifier.isStatic(mods)) {
      debug_print|=ctf.getName().equals("DEBUG_WEAVER");
      continue;
    }
    if (mimpl == null)     continue;
    if (first)     first=false;
 else     sb.append(field_sep);
    CtClass ctft=ctf.getType();
    CtClass base=ctft;
    while (base.isArray())     base=base.getComponentType();
    long off=(!javassist.Modifier.isPublic(mods) || javassist.Modifier.isFinal(mods)) ? _unsafe.objectFieldOffset(iced_clazz.getDeclaredField(ctf.getName())) : -1;
    int ftype=ftype(iced_cc,ctf.getSignature());
    if (ftype % 20 == 9) {
      sb.append(off == -1 ? iced : iced_unsafe);
    }
 else     if (ftype % 20 == 10) {
      sb.append(off == -1 ? enums : enums_unsafe);
    }
 else {
      sb.append(off == -1 ? prims : prims_unsafe);
    }
    String z=FLDSZ1[ftype % 20];
    for (int i=0; i < ftype / 20; ++i)     z='A' + z;
    subsub(sb,"%z",z);
    subsub(sb,"%s",ctf.getName());
    subsub(sb,"%c",base.getName().replace('$','.'));
    subsub(sb,"%C",ctft.getName().replace('$','.'));
    subsub(sb,"%d","" + off);
    subsub(sb,"%u",utype(ctf.getSignature()));
  }
  if (mimpl != null)   sb.append(trailer);
  String body=sb.toString();
  addMethod(body,icer);
  return debug_print ? body : null;
}
