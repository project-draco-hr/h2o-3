{
  H2O.H2OCountedCompleter foo=H2O.submitTask(new H2O.H2OCountedCompleter(){
    @Override public void compute2(){
      long start=System.currentTimeMillis();
      final int PAR=100;
      final int NKEY=100000;
      ArrayList<RecursiveAction> rs=new ArrayList<>();
      for (int i=0; i < PAR; ++i) {
        final int fi=i;
        rs.add(new RecursiveAction(){
          @Override public void compute(){
            for (int j=0; j < NKEY; j++) {
              Key k=Key.make("Q" + (fi * NKEY + j));
              H2O.putIfMatch(k,new Value(k,k),null);
            }
          }
        }
);
      }
      ForkJoinTask.invokeAll(rs);
      long end=System.currentTimeMillis();
      System.out.println("msec=" + (end - start) + ", msec/op="+ ((double)(end - start)) / PAR / NKEY);
      tryComplete();
    }
  }
);
  foo.join();
}
