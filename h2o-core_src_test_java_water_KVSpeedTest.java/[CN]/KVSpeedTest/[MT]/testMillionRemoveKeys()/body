{
  long start=System.currentTimeMillis();
  byte[] homes=new byte[NKEYS * NCLOUD];
  for (int i=0; i < homes.length; i++)   homes[i]=(byte)Key.make("Q" + i).home(H2O.CLOUD);
  final Key k=Key.make("homes");
  DKV.put(k,new Value(k,homes));
  start=logTime(start,"HOMEALL",NCLOUD);
  new MRTask(){
    @Override protected void setupLocal(){
      byte[] homes=DKV.get(k).rawMem();
      final int sidx=H2O.SELF.index();
      long start=System.currentTimeMillis();
      for (int i=0; i < homes.length; i++) {
        if (homes[i] == sidx) {
          String s="Q" + i;
          Key k=Key.make(s);
          DKV.put(k,new Value(k,s),_fs);
        }
      }
      logTime(start,"PUT1 " + H2O.SELF,1);
    }
  }
.doAllNodes();
  start=logTime(start,"PUTALL",NCLOUD);
  new MRTask(){
    @Override protected void setupLocal(){
      byte[] homes=DKV.get(k).rawMem();
      final int sidx=H2O.SELF.index();
      long start=System.currentTimeMillis();
      for (int i=0; i < homes.length; i++)       if (homes[i] == sidx)       DKV.prefetch(Key.make("Q" + i + 1));
      start=logTime(start,"PREFETCH1 " + H2O.SELF,1);
      for (int i=0; i < homes.length; i++)       if (homes[i] == sidx)       DKV.get(Key.make("Q" + i + 1));
      logTime(start,"GET1 " + H2O.SELF,1);
    }
  }
.doAllNodes();
  start=logTime(start,"GETALL",NCLOUD);
  Futures fs=new Futures();
  for (int i=0; i < homes.length; i++)   DKV.remove(Key.make("Q" + i),fs);
  start=logTime(start,"REMALL_START",NCLOUD);
  fs.blockForPending();
  logTime(start,"REMALL_DONE",NCLOUD);
  DKV.remove(k);
  System.out.printf("STORE size = " + H2O.STORE.size());
  System.out.printf("STORE raw array length = " + H2O.STORE.raw_array().length);
}
