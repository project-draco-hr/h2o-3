{
  final Key[] frameKeys=KeySnapshot.globalSnapshot().filter(new KeySnapshot.KVFilter(){
    @Override public boolean filter(    KeySnapshot.KeyInfo k){
      return k._type == TypeMap.FRAME;
    }
  }
).keys();
  String err=null;
  Futures fs=new Futures();
  for (int i=0; i < frameKeys.length; i++) {
    try {
      getFromDKV(frameKeys[i]).delete(null,fs);
    }
 catch (    IllegalArgumentException iae) {
      err+=iae.getMessage();
    }
  }
  fs.blockForPending();
  if (err != null)   throw new IllegalArgumentException(err);
}
