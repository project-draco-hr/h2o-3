{
  GramTask xgram=new GramTask(self(),xinfo).doAll(xinfo._adaptedFrame);
  if (_parms._gamma > 0)   xgram._gram.addDiag(_parms._gamma);
  Cholesky xxchol=xgram._gram.cholesky(null);
  xxchol.setSPD(true);
  Matrix x_r=new Matrix(ArrayUtils.transpose(xxchol.getL()));
  QRDecomposition yt_qr=new QRDecomposition(new Matrix(model._output._archetypes_raw));
  Matrix yt_r=yt_qr.getR();
  Matrix rrmul=x_r.times(yt_r.transpose());
  SingularValueDecomposition rrsvd=new SingularValueDecomposition(rrmul);
  Matrix eigvec=yt_qr.getQ().times(rrsvd.getV());
  model._output._eigenvectors=eigvec.transpose().getArray();
  double[] sval=rrsvd.getSingularValues();
  double[] sdev=new double[sval.length];
  double tot_var=0;
  double dfcorr=_train.numRows() / (_train.numRows() - 1.0);
  for (int i=0; i < sval.length; i++) {
    sval[i]=dfcorr * sval[i];
    sdev[i]=Math.sqrt(sval[i]);
    tot_var+=sval[i];
  }
  model._output._std_deviation=sdev;
  double[] prop_var=new double[sval.length];
  double[] cum_var=new double[sval.length];
  for (int i=0; i < sval.length; i++) {
    prop_var[i]=sval[i] / tot_var;
    cum_var[i]=i == 0 ? prop_var[0] : cum_var[i - 1] + prop_var[i];
  }
  model._output._prop_variance=prop_var;
  model._output._cum_variance=cum_var;
}
