{
  super.init(expensive);
  if (_parms._loading_key == null)   _parms._loading_key=Key.make("GLRMLoading_" + Key.rand());
  if (_train.numCols() < 2)   error("_train","_train must have more than one column");
  if (_parms._k > _train.numCols())   error("_k","_k cannot be greater than the number of columns in _train");
  if (_parms._gamma < 0)   error("_gamma","lambda must be a non-negative number");
  if (null != _parms._user_points) {
    if (_parms._user_points.get().numCols() != _train.numCols())     error("_user_points","The user-specified points must have the same number of columns (" + _train.numCols() + ") as the training observations");
 else     if (_parms._user_points.get().numRows() != _parms._k)     error("_user_points","The user-specified points must have k = " + _parms._k + " rows");
  }
  Vec[] vecs=_train.vecs();
  for (int i=0; i < vecs.length; i++) {
    if (!vecs[i].isNumeric())     throw H2O.unimpl();
  }
}
