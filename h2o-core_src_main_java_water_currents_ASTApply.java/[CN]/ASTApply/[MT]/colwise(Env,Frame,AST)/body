{
  Vec vecs[]=fr.vecs();
  Val vals[]=new Val[vecs.length];
  for (int i=0; i < vecs.length; i++) {
    Frame f1=new Frame(new String[]{fr._names[i]},new Vec[]{vecs[i]});
    vals[i]=new ASTExec(fun,new ASTFrame(f1)).exec(env);
  }
  Val v0=vals[0];
  Vec ovecs[]=new Vec[vecs.length];
switch (v0.type()) {
case Val.NUM:
    for (int i=0; i < vecs.length; i++)     ovecs[i]=Vec.makeCon(vals[i].getNum(),1L);
  break;
case Val.FRM:
long nrows=v0.getFrame().numRows();
for (int i=0; i < vecs.length; i++) {
Frame res=vals[i].getFrame();
if (res.numCols() != 1) throw new IllegalArgumentException("apply result Frames must have one column, found " + res.numCols() + " cols");
if (res.numRows() != nrows) throw new IllegalArgumentException("apply result Frames must have all the same rows, found " + nrows + " rows and "+ res.numRows());
ovecs[i]=res.vec(0);
}
break;
case Val.FUN:
throw water.H2O.unimpl();
case Val.STR:
throw water.H2O.unimpl();
default :
throw water.H2O.unimpl();
}
return new ValFrame(new Frame(fr._names,ovecs));
}
