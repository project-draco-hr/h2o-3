def test_rapids_ddply_with_funs(self):
    if (1 == 0):
        bucket = 'smalldata'
        csvPathname = 'iris/iris_wheader.csv'
    else:
        bucket = 'home-0xdiag-datasets'
        csvPathname = 'standard/covtype.data'
    hexKey = 'r1'
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', hex_key=hexKey)
    execExpr2 = '(= !r2 ([ %r1 "null" {#0;#1;#2;#3}))'
    (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr2, doFuns=False, resultKey=None, timeoutSecs=15)
    keys = []
    for execExpr1 in initList:
        funs = ('[(def anon {v} %s;;(sum %v %TRUE);;;)]' % execExpr1)
        (execResult, result) = h2e.exec_expr(h2o.nodes[0], funs, doFuns=True, resultKey=None, timeoutSecs=5)
        execExpr2 = '(= !a h2o.ddply %r2 {#2;#3} %anon)'
        (execResult, result) = h2e.exec_expr(h2o.nodes[0], execExpr2, doFuns=False, resultKey=None, timeoutSecs=120)
        r = re.search('![a-zA-Z0-9]+', execExpr1)
        if r:
            lhs = r.group(0)[1:]
            print 'Found key lhs assign', lhs
            if (1 == 0):
                inspect = h2o_cmd.runInspect(key=lhs)
                (missingList, labelList, numRows, numCols) = infoFromInspect(inspect)
                storeview = h2o_cmd.runStoreView()
                print '\nstoreview:', dump_json(storeview)
                if (not (k in storeView['keys'])):
                    raise Exception('Expected to find %s in %s', (k, storeView['keys']))
        else:
            print 'No key lhs assign'
        if (execResult['num_rows'] or execResult['num_cols']):
            keys.append(execExpr2)
    print '\nExpressions that created keys'
    for k in keys:
        print k
    h2o.check_sandbox_for_errors()
