def test_xl_ast_assert_ZZ(self):
    a = DF('a1')
    checkAst(astForInit(a))
    if (1 == 0):
        inspect = h2o.n0.inspect(key=a)
        print 'a/a1:', dump_json(inspect)
    summaryResult = h2o_cmd.runSummary(key=a)
    co = h2o_cmd.infoFromSummary(summaryResult)
    print 'co.label:', co.label
    print 'co.data:', co.data
    b = DF('b1')
    checkAst(astForInit(b))
    c = DF('c1')
    checkAst(astForInit(c))
    print 'lastExecResult:', dump_json(h2o_xl.Xbase.lastExecResult)
    h2p.yellow_print('Assign compare1')
    Assign(c[0], (c[0] + 0))
    checkAst('(= ([ $c1 #0 #0) (+ ([ $c1 #0 #0) #0))')
    h2p.yellow_print('Assign compare2')
    Assign(c[0], (c[0] - 0))
    checkAst('(= ([ $c1 #0 #0) (- ([ $c1 #0 #0) #0))')
    h2p.yellow_print('Assign compare3')
    Assign(c[0], (c[0] == 0))
    checkAst('(= ([ $c1 #0 #0) (n ([ $c1 #0 #0) #0))')
    h2p.yellow_print('Assign compare4')
    Assign(c[0], (c[0] != 0))
    checkAst('(= ([ $c1 #0 #0) (N ([ $c1 #0 #0) #0))')
    c = DF('c1')
    h2p.yellow_print('<<= compare1')
    c[0] <<= (c[0] + 0)
    checkAst('(= ([ $c1 #0 #0) (+ ([ $c1 #0 #0) #0))')
    h2p.yellow_print('<<= compare2')
    c[0] <<= (c[0] - 0)
    checkAst('(= ([ $c1 #0 #0) (- ([ $c1 #0 #0) #0))')
    h2p.yellow_print('<<= compare3')
    c[0] <<= (c[0] == 0)
    checkAst('(= ([ $c1 #0 #0) (n ([ $c1 #0 #0) #0))')
    c = DF('c1')
    h2p.yellow_print('compare1')
    result = Expr((c[0] == (-1))).result
    checkAst('(n ([ $c1 #0 #0) #-1)')
    h2p.yellow_print(('Expr result..Desire: python datatype/value if scalar or list,.else Key: %s %s' % (type(result), result)))
    assert (result == 1.0), ('%s %s' % (type(result), result))
    if result:
        print 'true for if of result', type(result), result
    else:
        print 'else for if of result', type(result), result
    result = Assign(None, (c[0] == (-1))).result
    checkAst('(= !knon_0x1a34250 (n ([ $c1 #0 #0) #-1))')
    h2p.yellow_print(('Assign result..Desire: python datatype/value if scalar or list,.else Key: %s %s' % (type(result), result)))
    assert (result == 1.0), ('%s %s' % (type(result), result))
    if result:
        print 'true if of result', result
    else:
        print 'false if of result', result
