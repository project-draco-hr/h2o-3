{
  if (parms.containsKey("hyper_parameters")) {
    Map<String,Object> m=water.util.JSONUtils.parse(parms.getProperty("hyper_parameters"));
    hyper_parameters=new IcedHashMap<>();
    for (    Map.Entry<String,Object> e : m.entrySet()) {
      Object o=e.getValue();
      Object[] o2=o instanceof List ? ((List)o).toArray() : new Object[]{o};
      hyper_parameters.put(e.getKey(),o2);
    }
    parms.remove("hyper_parameters");
  }
  if (parms.containsKey("search_criteria")) {
    Properties p=water.util.JSONUtils.parseToProperties(parms.getProperty("search_criteria"));
    if (!p.containsKey("strategy")) {
      throw new H2OIllegalArgumentException("search_criteria.strategy","null");
    }
    String strategy=(String)p.get("strategy");
    if ("Cartesian".equals(strategy)) {
      search_criteria=new HyperSpaceSearchCriteriaV99.CartesianSearchCriteriaV99();
    }
 else     if ("RandomDiscrete".equals(strategy)) {
      search_criteria=new HyperSpaceSearchCriteriaV99.RandomDiscreteValueSearchCriteriaV99();
      if (p.containsKey("max_runtime_secs") && Double.parseDouble((String)p.get("max_runtime_secs")) < 0) {
        throw new H2OIllegalArgumentException("max_runtime_secs must be >= 0 (0 for unlimited time)",strategy);
      }
      if (p.containsKey("max_models") && Integer.parseInt((String)p.get("max_models")) < 0) {
        throw new H2OIllegalArgumentException("max_models must be >= 0 (0 for all models)",strategy);
      }
    }
 else {
      throw new H2OIllegalArgumentException("search_criteria.strategy",strategy);
    }
    search_criteria.fillWithDefaults();
    search_criteria.fillFromParms(p);
    parms.remove("search_criteria");
  }
 else {
    search_criteria=new HyperSpaceSearchCriteriaV99.CartesianSearchCriteriaV99();
  }
  if (parms.containsKey("grid_id")) {
    grid_id=new KeyV3.GridKeyV3(Key.<Grid>make(parms.getProperty("grid_id")));
    parms.remove("grid_id");
  }
  this.parameters.fillFromParms(parms,false);
  return (S)this;
}
