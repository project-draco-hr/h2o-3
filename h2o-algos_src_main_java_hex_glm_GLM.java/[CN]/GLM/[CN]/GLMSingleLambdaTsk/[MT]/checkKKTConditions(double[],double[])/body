{
  int P=_dinfo.fullN() + 1;
  int[] failedCols=new int[8];
  int fcnt=0;
  for (int start=0; start < grad.length; start+=P) {
    double[] subgrad=Arrays.copyOfRange(grad,start,start + P);
    double[] beta=Arrays.copyOfRange(fullBeta,start,start + P);
    ADMM.subgrad(_parms._alpha[0] * _parms._lambda[_lambdaId],beta,subgrad);
    double err=1e-4;
    if (_taskInfo._activeCols != null) {
      for (int i=0; i < subgrad.length - 1; ++i) {
        if (subgrad[i] > err || -subgrad[i] > err) {
          if (fcnt == failedCols.length)           failedCols=Arrays.copyOf(failedCols,failedCols.length << 1);
          failedCols[fcnt++]=start + i;
        }
      }
    }
  }
  return Arrays.copyOf(failedCols,fcnt);
}
