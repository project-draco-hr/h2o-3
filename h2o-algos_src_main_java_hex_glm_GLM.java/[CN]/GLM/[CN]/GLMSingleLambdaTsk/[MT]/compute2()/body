{
  _start_time=System.currentTimeMillis();
  LogInfo("lambda = " + _parms._lambda[_lambdaId] + "\n");
  int[] activeCols=activeCols(_parms._lambda[_lambdaId],_lambdaId == 0 ? _taskInfo._lambdaMax : _parms._lambda[_lambdaId - 1],_taskInfo._ginfo._gradient);
  int n=activeCols == null ? _dinfo.fullN() : activeCols.length;
  if (n > _parms._max_active_predictors)   throw new TooManyPredictorsException();
  double[] beta=contractVec(_taskInfo._beta,_activeCols);
  boolean LBFGS=_parms._solver == Solver.L_BFGS;
  if (beta == null) {
    beta=MemoryManager.malloc8d(_activeData.fullN() + (_activeData._intercept ? 1 : 0));
    if (_activeData._intercept)     beta[beta.length - 1]=_parms.link(_taskInfo._ymu);
  }
  if (LBFGS) {
    if (_parms._alpha[0] > 0 || _activeCols != null)     throw H2O.unimpl();
    GradientSolver solver=new GLMGradientSolver(_parms,_activeData,_parms._lambda[_lambdaId] * (1 - _parms._alpha[0]),_taskInfo._ymu,_taskInfo._nobs,_bc._betaGiven,_bc._rho,0);
    final long t1=System.currentTimeMillis();
    L_BFGS lbfgs=new L_BFGS().setMaxIter(_parms._max_iter);
    Result r=lbfgs.solve(solver,beta,_taskInfo._ginfo,new ProgressMonitor(){
      @Override public boolean progress(      double[] beta,      GradientInfo ginfo){
        if ((_taskInfo._iter & 7) == 0) {
          update(8,"iteration " + (_taskInfo._iter + 1) + ", objective value = "+ ginfo._objVal,GLM.this._key);
          LogInfo("LBFGS: objval = " + ginfo._objVal);
        }
        ++_taskInfo._iter;
        return isRunning(GLM.this._key);
      }
    }
);
    long t2=System.currentTimeMillis();
    Log.info("L_BFGS (k = " + lbfgs.k() + ") done after "+ r.iter+ " iterations and "+ ((t2 - t1) / 1000)+ " seconds, objval = "+ r.ginfo._objVal+ ", penalty = "+ (_parms._lambda[_lambdaId] * .5 * ArrayUtils.l2norm2(beta,true))+ ",  gradient norm2 = "+ (MathUtils.l2norm2(r.ginfo._gradient)));
    _taskInfo._ginfo=r.ginfo;
    double[] newBeta=r.coefs;
    _taskInfo._beta=newBeta;
    _taskInfo._iter+=r.iter;
    setSubmodel(newBeta,null,this);
    tryComplete();
  }
 else   new GLMIterationTask(GLM.this._key,_activeData,_parms._lambda[_lambdaId] * (1 - _parms._alpha[0]),_parms,false,beta,_taskInfo._ymu,ModelUtils.DEFAULT_THRESHOLDS,new Iteration(this,false)).asyncExec(_activeData._adaptedFrame);
}
