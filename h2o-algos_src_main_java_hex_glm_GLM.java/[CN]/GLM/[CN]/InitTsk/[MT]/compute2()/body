{
  new YMUTask(_dinfo,nclasses(),!_parms._stdOverride,new H2OCallback<YMUTask>(this){
    @Override public void callback(    final YMUTask ymut){
      _yMu=_parms._intercept ? ymut._yMu : new double[nclasses()];
      _wsum=ymut._basicStats == null ? ymut._nobs : ymut._basicStats.wsum();
      if (_parms._obj_reg == -1)       _parms._obj_reg=1.0 / _wsum;
      _ymuLink=(_parms._intercept && _parms._family != Family.multinomial) ? _parms.link(_yMu[0]) : 0;
      _yMin=ymut._yMin;
      _yMax=ymut._yMax;
      _nobs=ymut._nobs;
      if (ymut._comupteWeightedSigma)       _dinfo.updateWeightedSigmaAndMean(ymut._basicStats.sigma(),ymut._basicStats.mean());
      if (_dinfo._offset && _parms._intercept) {
        InitTsk.this.addToPendingCount(1);
        DataInfo dinfo=_dinfo.filterExpandedColumns(new int[]{});
        new GLMIterationTask(_job._key,dinfo,0,_parms,false,new double[]{_parms.link(_response.mean()) - _offset.mean()},0,_parms._intercept,new NullModelIteration(dinfo)).dfork(dinfo._adaptedFrame);
      }
 else       computeGradients();
    }
  }
).dfork(_dinfo._adaptedFrame);
}
