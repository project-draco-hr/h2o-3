{
  GLMWeightsFun glmw=new GLMWeightsFun(_parms);
  double[] betaCnd=_state.beta();
  LineSearchSolver ls=null;
  boolean firstIter=true;
  try {
    while (true) {
      long t1=System.currentTimeMillis();
      GLMIterationTask t=new GLMTask.GLMIterationTask(_job._key,_state.activeData(),glmw,betaCnd).doAll(_state.activeData()._adaptedFrame);
      long t2=System.currentTimeMillis();
      if (!_state._lsNeeded && (Double.isNaN(t._likelihood) || _state.objective(t._beta,t._likelihood) > _state.objective() + _parms._objective_epsilon)) {
        _state._lsNeeded=true;
      }
 else {
        if (!firstIter && !_state._lsNeeded && !progress(t._beta,t._likelihood))         return;
        int[] zeros=t._gram.dropZeroCols();
        if (zeros.length > 0) {
          t._xy=ArrayUtils.removeIds(t._xy,zeros);
          t._beta=ArrayUtils.removeIds(t._beta,zeros);
          _state.removeCols(zeros);
        }
        betaCnd=solveGram(s,t);
      }
      firstIter=false;
      long t3=System.currentTimeMillis();
      if (_state._lsNeeded) {
        if (ls == null)         ls=(_state.l1pen() == 0 && !_state.activeBC().hasBounds()) ? new MoreThuente(_state.gslvr(),_state.beta(),_state.ginfo()) : new SimpleBacktrackingLS(_state.gslvr(),_state.beta().clone(),_state.l1pen(),_state.ginfo());
        if (!ls.evaluate(ArrayUtils.subtract(betaCnd,ls.getX(),betaCnd))) {
          Log.info(LogMsg("Ls failed " + ls));
          return;
        }
        betaCnd=ls.getX();
        if (!progress(betaCnd,ls.ginfo()))         return;
        long t4=System.currentTimeMillis();
        Log.info(LogMsg("computed in " + (t2 - t1) + "+"+ (t3 - t2)+ "+"+ (t4 - t3)+ "="+ (t4 - t1)+ "ms, step = "+ ls.step()+ ((_lslvr != null) ? ", l1solver " + _lslvr : "")));
      }
 else       Log.info(LogMsg("computed in " + (t2 - t1) + "+"+ (t3 - t2)+ "="+ (t3 - t1)+ "ms, step = "+ 1+ ((_lslvr != null) ? ", l1solver " + _lslvr : "")));
    }
  }
 catch (  NonSPDMatrixException e) {
    Log.warn(LogMsg("Got Non SPD matrix, stopped."));
  }
}
