{
  getCompleter().addToPendingCount(1);
  ScoringHistory sch=new ScoringHistory();
  if (!_scoring_iters.isEmpty()) {
    int n=_scoring_iters.size();
    sch._scoring_iters=new int[n];
    sch._scoring_times=new int[n];
    sch._objectives=new double[n];
    sch._likelihoods=new double[n];
    for (int i=0; i < n; ++i) {
      sch._scoring_iters[i]=_scoring_iters.get(i);
      sch._scoring_times[i]=_scoring_times.get(i);
      sch._likelihoods[i]=_likelihoods.get(i);
      sch._objectives[i]=_objectives.get(i);
    }
  }
  if (_parms._lambda_search) {
    int n=_lambda_iterations.size();
    sch._lambda_iters=new int[n];
    sch._lambda_times=new int[n];
    sch._scoring_lambda=new int[n];
    sch._explained_dev_train=new double[n];
    if (_parms._valid != null)     sch._explained_dev_val=new double[n];
    for (int i=0; i < n; ++i) {
      sch._lambda_iters[i]=_lambda_iterations.get(i);
      sch._lambda_times[i]=_lambda_times.get(i);
      sch._scoring_lambda[i]=_lIds.get(i);
      sch._explained_dev_train[i]=_explainedDevTrain.get(i);
      if (sch._explained_dev_val != null)       sch._explained_dev_val[i]=_explainedDevVal.get(i);
    }
  }
  H2O.submitTask(new FinalizeAndUnlockTsk(new H2OCallback((H2OCountedCompleter)getCompleter()){
    @Override public void callback(    H2OCountedCompleter h2OCountedCompleter){
      doCleanup();
      done();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter cc){
      doCleanup();
      failed(ex);
      new RemoveCall(null,_dest).invokeTask();
      return true;
    }
  }
,_dest,_key,_parms._train,_parms._valid,_tInfos[0]._iter,sch));
}
