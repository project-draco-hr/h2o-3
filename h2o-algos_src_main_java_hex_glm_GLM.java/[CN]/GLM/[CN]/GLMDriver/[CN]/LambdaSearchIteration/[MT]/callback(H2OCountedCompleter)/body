{
  double currentLambda=_parms._lambda[_lambdaId];
  if (_parms._n_folds > 1) {
    ParallelTasks<GLMSingleLambdaTsk> t=(ParallelTasks<GLMSingleLambdaTsk>)h2OCountedCompleter;
    for (int i=0; i < t._tasks.length; ++i)     _tInfos[i]=t._tasks[i]._taskInfo;
  }
  if (++_lambdaId < _parms._lambda.length) {
    double nextLambda=_parms._lambda[_lambdaId];
    getCompleter().addToPendingCount(1);
    if (_parms._n_folds > 1) {
      GLMSingleLambdaTsk[] tasks=new GLMSingleLambdaTsk[_tInfos.length];
      H2OCountedCompleter cmp=new LambdaSearchIteration((H2OCountedCompleter)getCompleter());
      cmp.addToPendingCount(tasks.length - 1);
      for (int i=0; i < tasks.length; ++i)       tasks[i]=new GLMSingleLambdaTsk(cmp,_tInfos[i]);
      new ParallelTasks(new LambdaSearchIteration((H2OCountedCompleter)getCompleter()),tasks).fork();
    }
 else {
      _tInfos[0].adjustToNewLambda(currentLambda,nextLambda,_parms._alpha[0],_dinfo._intercept);
      new GLMSingleLambdaTsk(new LambdaSearchIteration((H2OCountedCompleter)getCompleter()),_tInfos[0]).fork();
    }
  }
}
