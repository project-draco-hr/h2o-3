{
  _start_time=System.currentTimeMillis();
  if (_currentLambda > _taskInfo._lambdaMax)   return;
  _iter=_taskInfo._iter;
  LogInfo("starting computation of lambda = " + _currentLambda + ", previous lambda = "+ _taskInfo._lastLambda);
  int[] activeCols=activeCols(_currentLambda,_taskInfo._lastLambda,_taskInfo._gradient);
  int n=activeCols == null ? _taskInfo._dinfo.fullN() : activeCols.length;
  if (n > _taskInfo._params._max_active_predictors)   throw new TooManyPredictorsException();
  double[] beta=contractVec(_taskInfo._beta,_activeCols);
  _lastResult=new IterationInfo(_taskInfo._iter,beta,contractVec(_taskInfo._gradient,_activeCols),_taskInfo._objval);
  boolean LBFGS=_forceLBFGS;
  if (LBFGS) {
    if (_taskInfo._params._alpha[0] > 0 || _activeCols != null)     throw H2O.unimpl();
    Log.info("current lambda = " + _currentLambda);
    GLM.GLMGradientSolver solver=new GLM.GLMGradientSolver(_taskInfo._params,_activeData,_currentLambda,_taskInfo._ymu,_taskInfo._nobs);
    if (beta == null) {
      beta=MemoryManager.malloc8d(_activeData.fullN() + 1);
      beta[beta.length - 1]=_taskInfo._params.link(_taskInfo._ymu);
    }
    L_BFGS.Result r=L_BFGS.solve(solver,new L_BFGS_Params(),beta);
    GLM.GLMGradientInfo ginfo=(GLM.GLMGradientInfo)r.ginfo;
    double[] newBeta=r.coefs;
    _taskInfo._beta=newBeta;
    _taskInfo._gradient=ginfo._gradient;
    _taskInfo._iter=(_iter+=r.iter);
    setSubmodel(newBeta,ginfo._val,this);
    tryComplete();
  }
 else   new GLMIterationTask(_jobKey,_activeData,_taskInfo._params,true,false,false,beta,_taskInfo._ymu,1.0 / _taskInfo._nobs,_taskInfo._thresholds,new Iteration(this)).asyncExec(_activeData._adaptedFrame);
}
