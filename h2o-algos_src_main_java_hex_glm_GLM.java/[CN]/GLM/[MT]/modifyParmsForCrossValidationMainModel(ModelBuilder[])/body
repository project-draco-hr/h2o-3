{
  if (_parms._lambda_search) {
    _xval_test_deviances=new double[_parms._lambda.length];
    _xval_test_sd=new double[_parms._lambda.length];
    double bestTestDev=Double.POSITIVE_INFINITY;
    int lmin_max=_parms._lambda.length;
    int lidx=0;
    int bestId=0;
    int cnt=0;
    for (; lidx < lmin_max; ++lidx) {
      double testDev=0;
      for (int i=0; i < cvModelBuilders.length; ++i) {
        GLM g=(GLM)cvModelBuilders[i];
        double x=_parms._lambda[lidx];
        if (g._model._output.getSubmodel(x) == null)         g._driver.computeSubmodel(lidx,x);
        testDev+=g._model._output.getSubmodel(x).devianceTest;
      }
      double testDevAvg=testDev / cvModelBuilders.length;
      double testDevSE=0;
      for (int i=0; i < cvModelBuilders.length; ++i) {
        GLM g=(GLM)cvModelBuilders[i];
        double x=_parms._lambda[lidx];
        if (g._model._output.getSubmodel(x) == null)         g._driver.computeSubmodel(lidx,x);
        double diff=testDevAvg - (g._model._output.getSubmodel(x).devianceTest);
        testDevSE+=diff * diff;
      }
      _xval_test_sd[lidx]=Math.sqrt(testDevSE / ((cvModelBuilders.length - 1) * cvModelBuilders.length));
      _xval_test_deviances[lidx]=testDevAvg;
      if (testDevAvg < bestTestDev) {
        bestTestDev=testDevAvg;
        bestId=lidx;
      }
      if (testDevAvg > bestTestDev && ++cnt == 3) {
        lmin_max=lidx + 1;
        break;
      }
    }
    _parms._lambda=Arrays.copyOf(_parms._lambda,lmin_max);
    _xval_test_deviances=Arrays.copyOf(_xval_test_deviances,lmin_max);
    _xval_test_sd=Arrays.copyOf(_xval_test_sd,lmin_max);
    for (int i=0; i < cvModelBuilders.length; ++i) {
      GLM g=(GLM)cvModelBuilders[i];
      g._model._output.setSubmodelIdx(bestId);
      g._model.update(_job);
    }
    double bestDev=_xval_test_deviances[bestId];
    double bestDev1se=bestDev + _xval_test_sd[bestId];
    int bestId1se=bestId;
    while (bestId1se > 0 && _xval_test_deviances[bestId1se - 1] <= bestDev1se)     --bestId1se;
    _lambdaCVEstimate=_parms._lambda[bestId];
    _model._output._lambda_1se=bestId1se;
    _model._output._best_lambda_idx=bestId;
  }
  for (int i=0; i < cvModelBuilders.length; ++i) {
    GLM g=(GLM)cvModelBuilders[i];
    g._model.unlock(_job);
  }
  _doInit=false;
  _cv=false;
}
