{
  double wsumInv=1.0 / (gt.wsum * _parms._obj_reg);
  double l1pen=lambda * alpha;
  double l2pen=lambda * (1 - alpha);
  double[][] xx=gt._gram.getXX();
  double[] diagInv=MemoryManager.malloc8d(xx.length);
  for (int i=0; i < diagInv.length; ++i)   diagInv[i]=1.0 / (xx[i][i] + l2pen);
  int[][] nzs=new int[_state.activeData().numStart()][];
  if (nzs.length > 1000) {
    final int[] nzs_ary=new int[xx.length];
    for (int i=0; i < nzs.length; ++i) {
      double[] x=xx[i].clone();
      int k=0;
      for (int j=0; j < x.length; ++j) {
        if (i != j && x[j] != 0) {
          x[k]=x[j];
          nzs_ary[k++]=j;
        }
      }
      if (k < (nzs_ary.length >> 3)) {
        nzs[i]=Arrays.copyOf(nzs_ary,k);
        xx[i]=Arrays.copyOf(x,k);
      }
    }
  }
  double[] grads=new double[gt._xy.length];
  double[] beta=_state.beta().clone();
  for (int i=0; i < grads.length; ++i) {
    double ip=0;
    if (i < nzs.length && nzs[i] != null) {
      int[] ids=nzs[i];
      double[] x=xx[i];
      for (int j=0; j < nzs[i].length; ++j)       ip+=x[j] * beta[ids[j]];
      grads[i]=gt._xy[i] - ip;
    }
 else {
      grads[i]=gt._xy[i] - ArrayUtils.innerProduct(xx[i],beta) + xx[i][i] * beta[i];
    }
  }
  int iter1=0;
  int P=gt._xy.length - 1;
  final BetaConstraint bc=_state.activeBC();
  DataInfo activeData=_state.activeData();
  while (iter1++ < 1000) {
    double bdiffPos=0;
    double bdiffNeg=0;
    for (int i=0; i < activeData._cats; ++i) {
      for (int j=activeData._catOffsets[i]; j < activeData._catOffsets[i + 1]; ++j) {
        double b=bc.applyBounds(ADMM.shrinkage(grads[j],l1pen) * diagInv[j],j);
        double bd=beta[j] - b;
        bdiffPos=bd > bdiffPos ? bd : bdiffPos;
        bdiffNeg=bd < bdiffNeg ? bd : bdiffNeg;
        if (nzs[j] == null)         doUpdateCD(grads,xx[j],bd,activeData._catOffsets[i],activeData._catOffsets[i + 1]);
 else         doSparseUpdateCD(grads,xx[j],nzs[j],bd,activeData._catOffsets[i],activeData._catOffsets[i + 1]);
        beta[j]=b;
      }
    }
    int numStart=activeData.numStart();
    for (int i=numStart; i < P; ++i) {
      double b=bc.applyBounds(ADMM.shrinkage(grads[i],l1pen) * diagInv[i],i);
      double bd=beta[i] - b;
      bdiffPos=bd > bdiffPos ? bd : bdiffPos;
      bdiffNeg=bd < bdiffNeg ? bd : bdiffNeg;
      doUpdateCD(grads,xx[i],bd,i,i + 1);
      beta[i]=b;
    }
    if (_parms._intercept) {
      double b=bc.applyBounds(grads[P] * wsumInv,P);
      double bd=beta[P] - b;
      doUpdateCD(grads,xx[P],bd,P,P + 1);
      bdiffPos=bd > bdiffPos ? bd : bdiffPos;
      bdiffNeg=bd < bdiffNeg ? bd : bdiffNeg;
      beta[P]=b;
    }
    if (-1e-4 < bdiffNeg && bdiffPos < 1e-4)     break;
  }
  return beta;
}
