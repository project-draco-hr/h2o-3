{
  if (_parms.sanityCheckParameters() > 0)   throw new IllegalArgumentException("Invalid parameters for GLM: " + _parms.validationErrors());
  _parms.lock_frames(this);
  final Frame fr=_parms.train();
  Vec response=fr.vec(_parms._response);
  Frame source=DataInfo.prepareFrame(fr,response,_parms._ignored_cols,false,true,true);
  DataInfo dinfo=new DataInfo(Key.make(),source,1,_parms.useAllFactorLvls || _parms.lambda_search,_parms._standardize ? DataInfo.TransformType.STANDARDIZE : DataInfo.TransformType.NONE,DataInfo.TransformType.NONE);
  DKV.put(dinfo._key,dinfo);
  H2OCountedCompleter cmp=new H2OCountedCompleter(){
    AtomicBoolean _gotException=new AtomicBoolean(false);
    @Override public void compute2(){
    }
    @Override public void onCompletion(    CountedCompleter cc){
      _parms.unlock_frames(GLM.this);
      DKV.remove(_progressKey);
      done();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter cc){
      if (!_gotException.getAndSet(true)) {
        cancel2(ex);
        DKV.remove(_progressKey);
        _parms.unlock_frames(GLM.this);
        return true;
      }
      return false;
    }
  }
;
  start(cmp,100);
  H2O.submitTask(new GLMDriver(cmp,_parms,_key,_progressKey,_dest,dinfo));
  return this;
}
