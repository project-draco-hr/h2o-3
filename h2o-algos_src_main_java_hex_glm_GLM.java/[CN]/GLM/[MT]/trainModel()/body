{
  _parms.read_lock_frames(this);
  init(true);
  DataInfo dinfo=new DataInfo(Key.make(),_train,_valid,1,_parms._use_all_factor_levels || _parms._lambda_search,_parms._standardize ? DataInfo.TransformType.STANDARDIZE : DataInfo.TransformType.NONE,DataInfo.TransformType.NONE);
  DKV.put(dinfo._key,dinfo);
  H2OCountedCompleter cmp=new H2OCountedCompleter(){
    AtomicBoolean _gotException=new AtomicBoolean(false);
    @Override public void compute2(){
    }
    @Override public void onCompletion(    CountedCompleter cc){
      done();
      _parms.read_unlock_frames(GLM.this);
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter cc){
      if (!_gotException.getAndSet(true)) {
        Job thisJob=DKV.getGet(_key);
        if (thisJob._state == JobState.CANCELLED) {
          failed(ex);
        }
        _parms.read_unlock_frames(GLM.this);
        return true;
      }
      return false;
    }
  }
;
  start(cmp,WORK_TOTAL);
  H2O.submitTask(new GLMDriver(cmp,dinfo));
  return this;
}
