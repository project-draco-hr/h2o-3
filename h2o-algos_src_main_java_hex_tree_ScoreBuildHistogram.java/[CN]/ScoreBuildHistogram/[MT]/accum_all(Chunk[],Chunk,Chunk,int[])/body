{
  int nh[]=new int[_hcs.length + 1];
  for (  int i : nnids)   if (i >= 0)   nh[i + 1]++;
  for (int i=0; i < _hcs.length; i++)   nh[i + 1]+=nh[i];
  int rows[]=new int[nnids.length];
  for (int row=0; row < nnids.length; row++)   if (nnids[row] >= 0)   rows[nh[nnids[row]]++]=row;
  final DHistogram hcs[][]=_hcs;
  if (hcs.length == 0)   return;
  double bins[]=new double[Math.max(_nbins,_nbins_cats)];
  double sums[]=new double[Math.max(_nbins,_nbins_cats)];
  double ssqs[]=new double[Math.max(_nbins,_nbins_cats)];
  int binslen=bins.length;
  int cols=_ncols;
  int hcslen=hcs.length;
  double[] ws=new double[chks[0]._len];
  double[] cs=new double[chks[0]._len];
  double[] ys=new double[chks[0]._len];
  weight.getDoubles(ws,0,ws.length);
  wrks.getDoubles(ys,0,ys.length);
  for (int c=0; c < cols; c++) {
    chks[c].getDoubles(cs,0,cs.length);
    for (int n=0; n < hcslen; n++) {
      int sCols[]=_tree.undecided(n + _leaf)._scoreCols;
      if (sCols == null || Arrays.binarySearch(sCols,c) >= 0)       overAllRows(cs,ys,ws,rows,hcs[n][c],n == 0 ? 0 : nh[n - 1],nh[n],bins,sums,ssqs,binslen);
    }
  }
}
