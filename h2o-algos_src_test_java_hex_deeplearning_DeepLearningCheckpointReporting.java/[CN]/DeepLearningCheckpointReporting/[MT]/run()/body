{
  Scope.enter();
  Frame frame=null;
  try {
    File file=find_test_file("smalldata/logreg/prostate.csv");
    NFSFileVec trainfv=NFSFileVec.make(file);
    frame=ParseDataset.parse(Key.make(),trainfv._key);
    DeepLearningParameters p=new DeepLearningParameters();
    p._model_id=Key.make("first_model");
    p._train=frame._key;
    p._response_column="CAPSULE";
    p._activation=DeepLearningParameters.Activation.Rectifier;
    p._epochs=4;
    p._train_samples_per_iteration=-1;
    p._score_duty_cycle=1;
    p._score_interval=0;
    p._overwrite_with_best_model=false;
    p._classification_stop=-1;
    p._seed=1234;
    p._reproducible=true;
    int ci=frame.find("CAPSULE");
    Scope.track(frame.replace(ci,frame.vecs()[ci].toCategoricalVec())._key);
    DKV.put(frame);
    long start=System.currentTimeMillis();
    Thread.sleep(1000);
    DeepLearning dl=new DeepLearning(p);
    DeepLearningModel model=null;
    try {
      model=dl.trainModel().get();
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      dl.remove();
    }
    long sleepTime=3;
    Thread.sleep(sleepTime * 1000);
    DeepLearningParameters p2=(DeepLearningParameters)p.clone();
    p2._checkpoint=p2._model_id;
    p2._model_id=Key.make("second_model");
    p2._epochs*=2;
    DeepLearning dl2=new DeepLearning(p2);
    DeepLearningModel model2=null;
    try {
      model2=dl2.trainModel().get();
      long end=System.currentTimeMillis();
      TwoDimTable table=model2._output._scoring_history;
      double priorDurationDouble=0;
      long priorTimeStampLong=0;
      DateTimeFormatter fmt=DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
      for (int i=0; i < table.getRowDim(); ++i) {
        String timestamp=(String)table.get(i,0);
        long timeStampLong=fmt.parseMillis(timestamp);
        Assert.assertTrue("Timestamp must be later than outside timer start",timeStampLong >= start);
        Assert.assertTrue("Timestamp must be earlier than outside timer end",timeStampLong <= end);
        Assert.assertTrue("Timestamp must increase",timeStampLong >= priorTimeStampLong);
        priorTimeStampLong=timeStampLong;
        String duration=(String)table.get(i,1);
        duration=duration.substring(0,duration.length() - 4);
        try {
          double durationDouble=Double.parseDouble(duration);
          Assert.assertTrue("Duration must be >0: " + durationDouble,durationDouble >= 0);
          priorDurationDouble=durationDouble;
        }
 catch (        NumberFormatException ex) {
        }
        Assert.assertTrue("Epoch counter must be contiguous",(Double)table.get(i,3) == i);
        Assert.assertTrue("Iteration counter must match epochs",(Integer)table.get(i,4) == i);
      }
      try {
        String durationBefore=(String)table.get((int)(p._epochs),1);
        durationBefore=durationBefore.substring(0,durationBefore.length() - 4);
        String durationAfter=(String)table.get((int)(p._epochs + 1),1);
        durationAfter=durationAfter.substring(0,durationAfter.length() - 4);
        String timeStampBefore=(String)table.get((int)(p._epochs),0);
        long timeStampBeforeLong=fmt.parseMillis(timeStampBefore);
        String timeStampAfter=(String)table.get((int)(p._epochs + 1),0);
        long timeStampAfterLong=fmt.parseMillis(timeStampAfter);
        Assert.assertTrue("Time stamp must experience a delay",timeStampAfterLong - timeStampBeforeLong >= (sleepTime - 1) * 1000);
        String speedBefore=(String)table.get((int)(p._epochs),2);
        speedBefore=speedBefore.substring(0,speedBefore.length() - 9);
        double speedBeforeDouble=Double.parseDouble(speedBefore);
        String speedAfter=(String)table.get((int)(p._epochs + 1),2);
        speedAfter=speedAfter.substring(0,speedAfter.length() - 9);
        double speedAfterDouble=Double.parseDouble(speedAfter);
        Assert.assertTrue("Speed shouldn't change more than 50%",Math.abs(speedAfterDouble - speedBeforeDouble) / speedBeforeDouble < 0.5);
      }
 catch (      NumberFormatException ex) {
      }
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      dl2.remove();
      if (model != null) {
        model.delete();
      }
      if (model2 != null) {
        model2.delete();
      }
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    Scope.exit();
    if (frame != null)     frame.remove();
  }
}
