{
  GLM job=null;
  GLMModel model=null;
  Frame score=null;
  double[] offset=new double[]{-0.31952698,+0.03826429,-1.35454055,-0.80760533,-1.35454055,+0.03065382,+0.03065382,-1.84261890,+0.03065382,-0.31952698,+0.51873218,+0.51873218,-1.35454055,-0.31952698,-1.84261890,-0.31952698,-1.35454055,-0.44981407,-0.31952698,+1.15273788,+0.03826429,-1.35454055,+0.03826429,+0.03826429,+0.51873218,+0.03826429,-0.31952698,+0.51873218,+0.03826429,-0.31952698,-1.35454055,+0.03826429,+0.03826429,-1.35454055,-0.31952698,-0.31952698,-0.44981407,+0.67227000,-0.80760533,-0.31952698,-0.31952698,-0.31952698,-1.35454055,+0.51873218,+0.03826429,+0.03826429,-0.31952698,+0.03826429,+0.03826429,-0.31952698,+0.03826429,+0.51873218,-0.31952698,-1.35454055,-0.31952698,-0.44981407,-0.31952698,+0.03826429,+0.03826429,+0.03826429,-1.35454055,-1.84261890,+0.03826429,-0.31952698,-0.31952698,-1.35454055,-0.31952698,-1.35454055,+0.03826429,+0.51873218,+0.51873218,-1.35454055,-1.35454055,+0.03826429,-1.35454055,-1.35454055,+0.03826429,-1.35454055,+0.03826429,-0.31952698,+0.03826429,-1.35454055,+0.03826429,-0.31952698,-1.35454055,+0.03826429,+0.03826429,+0.03826429,-1.35454055,-0.31952698,-1.35454055,+0.03065382,-0.31952698,-0.31952698,-0.31952698,-1.35454055,-1.35454055,+0.03065382,-0.31952698,-0.31952698,-0.31952698,-0.31952698,-1.35454055,-1.35454055,-1.35454055,-0.31952698,+0.51873218,+0.51873218,-1.35454055,+0.51873218,-1.35454055,+0.51873218,+0.03826429,+0.51873218,-0.31952698,-0.80760533,-1.35454055,-0.31952698,-0.31952698,-0.31952698,-0.31952698,-1.35454055,-0.31952698,-0.80760533,+0.03826429,+0.03826429,-0.31952698,-0.31952698,-0.31952698,+0.03826429,-0.31952698,-0.31952698,+0.03826429,+0.51873218,-1.35454055,-1.35454055,-0.31952698,+0.03826429,-1.35454055,-0.31952698,+0.03826429,-1.35454055,-0.80760533,+0.51873218,+0.51873218,-1.35454055,-1.35454055,-0.31952698,+0.03826429,+0.03065382,+0.03826429,-0.31952698,-1.35454055,+0.03826429,-0.31952698,-0.31952698,-1.35454055,-0.31952698,-0.31952698,+0.03826429,-0.31952698,-0.31952698,+0.51873218,+0.03826429,+0.51873218,+0.03826429,-0.31952698,-0.31952698,+0.03826429,-1.35454055,+0.03826429,-1.35454055,-0.31952698,-0.44981407,+0.03826429,+0.03826429,+0.03065382,-0.80760533,-0.31952698,-0.31952698,-0.31952698,+0.51873218,-1.84261890,-1.35454055,+0.03826429,+0.03065382,-1.35454055,-1.35454055,-1.84261890,-1.35454055,+0.03826429,-0.31952698,+0.31447873,-0.31952698,-0.31952698,-0.31952698,+0.51873218,-1.35454055,-0.31952698,-1.35454055,-0.31952698,-0.31952698,+0.03826429,+0.51873218,-1.35454055,-0.31952698,-1.35454055,-1.35454055,-0.31952698,-0.31952698,+0.03826429,-1.35454055,-0.80760533,-1.35454055,-0.31952698,+0.03826429,-0.31952698,+0.03826429,-1.35454055,-1.35454055,+0.03826429,-1.35454055,-0.31952698,+0.51873218,+0.03826429,-1.35454055,-1.35454055,+0.51873218,-0.31952698,-0.31952698,-1.35454055,+0.03826429,+0.03826429,-1.35454055,+0.03826429,-1.35454055,+0.51873218,+0.03826429,-1.35454055,+0.03826429,-0.31952698,-0.31952698,+0.03826429,+0.51873218,+0.03826429,-1.35454055,-1.35454055,-1.35454055,-0.31952698,-0.31952698,-0.31952698,-0.31952698,+0.03826429,-0.80760533,+0.03826429,-0.44981407,+0.51873218,-0.31952698,-0.31952698,-0.31952698,-0.31952698,-0.44981407,-1.35454055,+0.03826429,-0.31952698,-0.31952698,-1.35454055,-1.35454055,+0.03826429,+0.51873218,+0.03826429,-0.31952698,-0.80760533,-1.35454055,-1.35454055,-1.35454055,-1.35454055,-0.31952698,+0.51873218,-1.35454055,-0.80760533,-1.35454055,-1.35454055,+0.03826429,+0.51873218,-1.35454055,-0.44981407,-1.84261890,-0.80760533,-0.31952698};
  Vec v=_prostateTrain.anyVec().makeZero();
  Vec.Writer vw=v.open();
  for (int i=0; i < offset.length; ++i)   vw.set(i,offset[i]);
  vw.close();
  Key fKey=Key.make("prostate_with_offset");
  Frame f=new Frame(fKey,new String[]{"offset"},new Vec[]{v});
  f.add(_prostateTrain.names(),_prostateTrain.vecs());
  DKV.put(fKey,f);
  String[] cfs1=new String[]{"AGE","DPROS","DCAPS","PSA","VOL","GLEASON"};
  double[] vals=new double[]{-0.009604,0.542133,0.449798,0.024952,-0.012264,0.981099};
  GLMParameters params=new GLMParameters(Family.binomial);
  params._response_column="CAPSULE";
  params._ignored_columns=new String[]{"ID","RACE"};
  params._train=fKey;
  params._offset_column="offset";
  params._lambda=new double[]{0};
  params._alpha=new double[]{0};
  params._standardize=false;
  params._objective_epsilon=0;
  params._gradient_epsilon=1e-6;
  params._max_iterations=100;
  try {
    for (    Solver s : new Solver[]{Solver.AUTO,Solver.IRLSM,Solver.L_BFGS}) {
      try {
        params._solver=s;
        System.out.println("SOLVER = " + s);
        job=new GLM(Key.make("prostate_model"),"glm test simple poisson",params);
        model=job.trainModel().get();
        HashMap<String,Double> coefs=model.coefficients();
        System.out.println("coefs = " + coefs.toString());
        System.out.println("metrics = " + model._output._training_metrics);
        for (int i=0; i < cfs1.length; ++i)         assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
        assertEquals(511.4,GLMTest.nullDeviance(model),1e-1);
        assertEquals(380.8,GLMTest.residualDeviance(model),1e-1);
        assertEquals(379,GLMTest.nullDOF(model),0);
        assertEquals(373,GLMTest.resDOF(model),0);
        assertEquals(394.8,GLMTest.aic(model),1e-1);
        try {
          score=model.score(_prostateTrain);
          assertTrue("shoul've thrown IAE",false);
        }
 catch (        IllegalArgumentException iae) {
          assertTrue(iae.getMessage().contains("Test dataset is missing offset vector"));
        }
        score=model.score(f);
        hex.ModelMetricsBinomial mm=hex.ModelMetricsBinomial.getFromDKV(model,f);
        hex.AUC2 adata=mm._auc;
        assertEquals(model._output._training_metrics.auc()._auc,adata._auc,1e-8);
        assertEquals(model._output._training_metrics._MSE,mm._MSE,1e-8);
        assertEquals(((ModelMetricsBinomialGLM)model._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
        Frame score1=model.score(f);
        score1.remove();
        mm=hex.ModelMetricsBinomial.getFromDKV(model,f);
        assertEquals(model._output._training_metrics.auc()._auc,adata._auc,1e-8);
        assertEquals(model._output._training_metrics._MSE,mm._MSE,1e-8);
        assertEquals(((ModelMetricsBinomialGLM)model._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
      }
  finally {
        if (model != null)         model.delete();
        if (score != null)         score.delete();
        if (job != null)         job.remove();
      }
    }
  }
  finally {
    if (f != null)     f.delete();
  }
}
