{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  final int col=(int)asts[2].exec(env).getNum();
  if (col < 0 || col >= fr.numCols())   throw new IllegalArgumentException("Column not in range 0 to " + fr.numCols());
  final Vec vec=fr.vec(col);
  AST method;
switch (asts[3].exec(env).getStr().toUpperCase()) {
case "MEAN":
    method=new ASTMean();
  break;
case "MEDIAN":
method=new ASTMedian();
break;
case "MODE":
method=new ASTMode();
break;
default :
throw new IllegalArgumentException("Method must be one of mean, median or mode");
}
QuantileModel.CombineMethod combine=QuantileModel.CombineMethod.valueOf(asts[4].exec(env).getStr().toUpperCase());
AST ast=asts[5];
ASTNumList by2;
if (ast instanceof ASTNumList) by2=(ASTNumList)ast;
 else if (ast instanceof ASTNum) by2=new ASTNumList(((ASTNum)ast)._v.getNum());
 else if (ast instanceof ASTStrList) {
String[] names=((ASTStrList)ast)._strs;
double[] list=new double[names.length];
int i=0;
for (String name : ((ASTStrList)ast)._strs) list[i++]=fr.find(name);
Arrays.sort(list);
by2=new ASTNumList(list);
}
 else throw new IllegalArgumentException("Requires a number-list, but found a " + ast.getClass());
final ASTNumList by=by2;
IcedHashMap<ASTGroup.G,IcedDouble> group_impute_map;
if (by.isEmpty()) {
double res=Double.NaN;
if (method instanceof ASTMean) res=vec.mean();
if (method instanceof ASTMedian) res=ASTMedian.median(stk.track(new Frame(vec)),combine);
if (method instanceof ASTMode) res=ASTMode.mode(vec);
(group_impute_map=new IcedHashMap<>()).put(new ASTGroup.G(0,null).fill(0,null,new int[0]),new IcedDouble(res));
}
 else {
AST ast_grp=new ASTGroup();
Frame imputes=ast_grp.apply(env,stk,new AST[]{ast_grp,new ASTFrame(fr),by,new ASTNumList(),method,new ASTNumList(col,col + 1),new ASTStr("rm")}).getFrame();
final int[] bycols=ArrayUtils.seq(0,imputes.numCols() - 1);
group_impute_map=new Gather(bycols).doAll(imputes)._group_impute_map;
imputes.delete();
}
env._ses.copyOnWrite(fr,new int[col]);
final IcedHashMap<ASTGroup.G,IcedDouble> final_group_impute_map=group_impute_map;
final int[] bycols=by.expand4();
new MRTask(){
@Override public void map(Chunk cs[]){
Chunk x=cs[col];
ASTGroup.G g=new ASTGroup.G(bycols.length,null);
for (int row=0; row < x._len; row++) if (x.isNA(row)) x.set(row,final_group_impute_map.get(g.fill(row,cs,bycols))._val);
}
}
.doAll(fr);
return new ValFrame(fr);
}
