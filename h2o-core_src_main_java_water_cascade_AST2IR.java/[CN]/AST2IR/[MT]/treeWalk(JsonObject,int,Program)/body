{
  if (isOp(tree)) {
    tree=tree.get("astop").getAsJsonObject();
    if (isASTOp(tree)) {
      JsonObject operands=tree.get("operands").getAsJsonObject();
      treeWalk(operands.get("right").getAsJsonObject(),lineNum + 1,p);
      treeWalk(operands.get("left").getAsJsonObject(),lineNum + 1,p);
      addNewOpStatement(tree.get("operator").getAsString(),p);
    }
 else {
      throw new IllegalArgumentException("Unkown operator type: " + getNodeType(tree));
    }
  }
 else   if (isArg(tree)) {
    p.putToTable(getArgName(tree),getArgType(tree),getArgValue(tree));
  }
 else   if (isId(tree)) {
    p.putToTable(getIdValue(tree),null,null);
  }
 else   if (isString(tree)) {
    stringPushStatement(getString(tree),p);
  }
 else   if (isConst(tree)) {
    numPushStatement(getNum(tree),p);
  }
 else   if (isFrame(tree)) {
    keyPushStatement(getKey(tree),p);
  }
 else   if (isCall(tree)) {
    JsonObject call_tree=tree.get("astcall").getAsJsonObject();
    String call_name=call_tree.getAsString();
    addNewCallStatement(call_name,p);
    treeWalk(call_tree,0,new Program(_global,new SymbolTable(),call_name));
  }
  if (!isLeaf(tree) && lineNum == 0) {
    _program.add(p);
  }
}
