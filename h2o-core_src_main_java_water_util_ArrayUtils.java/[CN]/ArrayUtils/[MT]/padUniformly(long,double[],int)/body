{
  int origLength=origPoints.length;
  if (newLength <= origLength || origLength <= 1)   return origPoints;
  int extraPoints=newLength - origLength;
  double extraPointsPerBin=(double)extraPoints / (origLength - 1);
  double extraPointsPerBinRemainder=extraPointsPerBin - (int)extraPointsPerBin;
  long myseed=seed + 0xDECAF * origLength - 0xDA7A * newLength;
  Random rng=RandomUtils.getRNG(myseed);
  Set<Double> newPoints=new TreeSet<>();
  for (int i=0; i < origLength; ++i)   newPoints.add(origPoints[i]);
  for (int i=0; i < origLength - 1; ++i) {
    double startPos=origPoints[i];
    double delta=origPoints[i + 1] - startPos;
    int howmany=(int)extraPointsPerBin;
    if (howmany < 1 && rng.nextDouble() < extraPointsPerBinRemainder && newPoints.size() < newLength)     howmany=1;
    for (int j=0; j < howmany && newPoints.size() < newLength; ++j)     newPoints.add(startPos + (j + 0.5) / howmany * delta);
    if (rng.nextDouble() < extraPointsPerBinRemainder && newPoints.size() < newLength)     newPoints.add(startPos + rng.nextDouble() * delta);
  }
  while (newPoints.size() < newLength)   newPoints.add(origPoints[0] + rng.nextDouble() * (origPoints[origPoints.length - 1] - origPoints[0]));
  double[] res=new double[newPoints.size()];
  Iterator<Double> it=newPoints.iterator();
  int count=0;
  while (it.hasNext()) {
    double val=it.next();
    assert(val >= origPoints[0]);
    assert(val <= origPoints[origPoints.length - 1]);
    res[count++]=val;
  }
  assert(res.length == newLength);
  return res;
}
