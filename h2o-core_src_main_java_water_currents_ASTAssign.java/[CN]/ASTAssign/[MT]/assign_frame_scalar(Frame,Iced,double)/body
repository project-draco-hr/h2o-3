{
  if (rowz instanceof Frame) {
    new MRTask(){
      @Override public void map(      Chunk[] cs){
        Chunk pc=cs[cs.length - 1];
        for (int i=0; i < pc._len; ++i) {
          if (pc.at8(i) == 1)           for (int c=0; c < cs.length - 1; ++c)           cs[c].set(i,src);
        }
      }
    }
.doAll(dst.add((Frame)rowz));
    return;
  }
  final ASTNumList rows=(ASTNumList)rowz;
  Vec[] dvecs=dst.vecs();
  long nrows=rows.cnt();
  if (nrows == 1) {
    long drow=(long)rows.expand()[0];
    for (    Vec vec : dvecs)     vec.set(drow,src);
    return;
  }
  if (dst.numRows() == nrows && rows.isDense()) {
    new MRTask(){
      @Override public void map(      Chunk[] cs){
        for (        Chunk c : cs)         c.replaceAll(new C0DChunk(src,c._len));
      }
    }
.doAll(dst);
    return;
  }
  new MRTask(){
    @Override public void map(    Chunk[] cs){
      long start=cs[0].start();
      long end=start + cs[0]._len;
      double min=rows.min(), max=rows.max() - 1;
      if (!(max < start || min > end)) {
        int startOffset=(int)(min > start ? min : start);
        for (int i=startOffset; i < cs[0]._len; ++i)         if (rows.has(start + i))         for (        Chunk chk : cs)         chk.set(i,src);
      }
    }
  }
.doAll(dst);
}
