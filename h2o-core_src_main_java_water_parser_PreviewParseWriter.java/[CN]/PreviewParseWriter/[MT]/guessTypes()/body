{
  byte[] types=new byte[_ncols];
  for (int i=0; i < _ncols; ++i) {
    int nonemptyLines=_nlines - _nempty[i] - 1;
    if ((_nnums[i] + _nzeros[i]) >= _ndates[i] && (_nnums[i] + _nzeros[i]) >= _nUUID[i] && _nnums[i] >= _nstrings[i]) {
      types[i]=Vec.T_NUM;
      continue;
    }
    if (_domains[i].size() == 1 && !_domains[i].containsKey("NA") && !_domains[i].containsKey("na") && !_domains[i].containsKey("Na") && _nstrings[i] >= nonemptyLines) {
      types[i]=Vec.T_CAT;
      continue;
    }
    if (_domains[i].size() <= 1 && (_nnums[i] + _nzeros[i]) > _ndates[i] + _nUUID[i]) {
      types[i]=Vec.T_NUM;
      continue;
    }
    if (_ndates[i] > _nUUID[i] && _ndates[i] > (_nnums[i] + _nzeros[i]) && (_ndates[i] > _nstrings[i] || _domains[i].size() <= 1)) {
      types[i]=Vec.T_TIME;
      continue;
    }
    if (_nUUID[i] > _ndates[i] && _nUUID[i] > (_nnums[i] + _nzeros[i]) && (_nUUID[i] > _nstrings[i] || _domains[i].size() <= 1)) {
      types[i]=Vec.T_UUID;
      continue;
    }
    if (_nstrings[i] > _ndates[i] && _nstrings[i] > _nUUID[i] && _nstrings[i] > (_nnums[i] + _nzeros[i]) && _domains[i].size() >= 0.95 * _nstrings[i]) {
      types[i]=Vec.T_STR;
      continue;
    }
    if (_nzeros[i] > 0 && ((_nzeros[i] + _nstrings[i]) >= nonemptyLines) && (_domains[i].size() <= 0.95 * _nstrings[i])) {
      types[i]=Vec.T_CAT;
      continue;
    }
    if (_nstrings[i] >= (_nnums[i] + _nzeros[i]) && (_domains[i].size() <= 0.95 * _nstrings[i])) {
      types[i]=Vec.T_CAT;
      continue;
    }
    types[i]=Vec.T_BAD;
  }
  return types;
}
