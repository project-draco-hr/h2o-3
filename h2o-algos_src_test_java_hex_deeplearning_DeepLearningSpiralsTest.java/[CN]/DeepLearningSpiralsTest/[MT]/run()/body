{
  Scope.enter();
  NFSFileVec nfs=NFSFileVec.make(find_test_file("smalldata/junit/two_spiral.csv"));
  Frame frame=ParseDataset.parse(Key.make(),nfs._key);
  int resp=frame.names().length - 1;
  Key dest=Key.make("spirals2");
  for (  boolean sparse : new boolean[]{true,false}) {
    for (    boolean col_major : new boolean[]{false}) {
      if (!sparse && col_major)       continue;
{
        DeepLearningParameters p=new DeepLearningParameters();
        p._seed=0xbabe;
        p._epochs=10000;
        p._hidden=new int[]{100};
        p._sparse=sparse;
        p._col_major=col_major;
        p._activation=DeepLearningParameters.Activation.Tanh;
        p._max_w2=Float.POSITIVE_INFINITY;
        p._l1=0;
        p._l2=0;
        p._initial_weight_distribution=DeepLearningParameters.InitialWeightDistribution.Normal;
        p._initial_weight_scale=2.5;
        p._loss=DeepLearningParameters.Loss.CrossEntropy;
        p._train=frame._key;
        p._response_column=frame.names()[resp];
        p._valid=null;
        p._score_interval=2;
        p._train_samples_per_iteration=0;
        p._fast_mode=true;
        p._ignore_const_cols=true;
        p._nesterov_accelerated_gradient=true;
        p._diagnostics=true;
        p._expert_mode=true;
        p._score_training_samples=1000;
        p._score_validation_samples=10000;
        p._shuffle_training_data=false;
        p._force_load_balance=false;
        p._replicate_training_data=false;
        p._destination_key=dest;
        p._adaptive_rate=true;
        p._reproducible=true;
        p._rho=0.99;
        p._epsilon=5e-3;
        DeepLearning dl=new DeepLearning(p);
        try {
          dl.trainModel().get();
        }
 catch (        Throwable t) {
          t.printStackTrace();
          throw new RuntimeException(t);
        }
 finally {
          dl.remove();
        }
      }
{
        DeepLearningModel mymodel=DKV.getGet(dest);
        Frame pred=mymodel.score(frame);
        ModelMetricsBinomial mm=ModelMetricsBinomial.getFromDKV(mymodel,frame);
        double error=mm._aucdata.err();
        Log.info("Error: " + error);
        if (error >= 0.025) {
          Assert.fail("Classification error is not less than 0.025, but " + error + ".");
        }
        pred.delete();
        mymodel.delete();
        mymodel.delete_best_model();
      }
    }
  }
  frame.delete();
  Scope.exit();
}
