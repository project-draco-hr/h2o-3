{
  int epoch=0;
  double[] xValues=new double[numInput];
  double[] tValues=new double[numOutput];
  while (epoch < maxEprochs) {
    final long chunkSeed=(0x8734093502429734L + (seed + epoch * trainData.length)) * ((epoch + 1) + 0x9823423497823423L);
    final Random skip_rng=RandomUtils.getRNG(chunkSeed);
    int[] sequence=new int[trainData.length];
    for (int i=0; i < sequence.length; ++i)     sequence[i]=i;
    ArrayUtils.shuffleArray(sequence,skip_rng);
    for (int i=0; i < trainData.length; ++i) {
      int idx=sequence[i];
      System.arraycopy(trainData[idx],0,xValues,0,numInput);
      System.arraycopy(trainData[idx],numInput,tValues,0,numOutput);
      ComputeOutputs(xValues);
      UpdateWeights(tValues,learnRate,momentum,loss);
    }
    ++epoch;
  }
}
