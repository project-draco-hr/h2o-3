def test_mixed_int_enum_many(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    enumList = ['abc', 'def', 'ghi']
    intList = [0, 1, 2, '']
    expectedList = ['abc', 'def', 'ghi']
    tryList = [(ROWS, COLS, 'a.hex', enumList[0:1], expectedList[0:1], intList[0:2], False), (ROWS, COLS, 'b.hex', enumList[0:2], expectedList[0:2], intList[0:1], True), (ROWS, COLS, 'c.hex', enumList[0:1], expectedList[0:1], intList[0:1], True), (ROWS, COLS, 'd.hex', enumList[0:], expectedList[0:], intList[0:1], True), (ROWS, COLS, 'e.hex', enumList[0:2], expectedList[0:2], intList[0:2], True), (ROWS, COLS, 'f.hex', enumList[0:1], expectedList[0:1], intList[0:2], True), (ROWS, COLS, 'g.hex', enumList[0:], expectedList[0:], intList[0:2], True)]
    timeoutSecs = 10
    trial = 1
    n = h2o.nodes[0]
    lenNodes = len(h2o.nodes)


    class Column(object):

        def __init__(self, column):
            assert isinstance(column, dict)
            for (k, v) in column.iteritems():
                setattr(self, k, v)
    x = 0
    timeoutSecs = 60
    for (rowCount, colCount, hex_key, enumChoices, enumExpected, intChoices, resultIsEnum) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        x += 1
        csvFilename = (((((('syn_' + 'binary') + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        csvPathnameFull = h2i.find_folder_and_filename(None, csvPathname, returnFullPath=True)
        print 'Creating random', csvPathname
        expectedNaCnt = write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE, enumChoices, intChoices)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', checkHeader=0, hex_key=hex_key, timeoutSecs=10, doSummary=False)
        (numRows, numCols, parse_key) = h2o_cmd.infoFromParse(parseResult)
        print 'numRows:', numRows, 'numCols:', numCols
        inspect = h2o_cmd.runInspect(None, hex_key)
        print '\nTrial:', trial, csvFilename
        for i in range(colCount):
            summaryResult = h2o_cmd.runSummary(key=hex_key, column=('C' + str((i + 1))))
            h2o.verboseprint('summaryResult:', h2o.dump_json(summaryResult))
            co = Column(summaryResult)
            coList = [co.base, len(co.bins), len(co.data), co.domain, co.label, co.maxs, co.mean, co.mins, co.missing, co.ninfs, co.pctiles, co.pinfs, co.precision, co.sigma, co.str_data, co.stride, co.type, co.zeros]
            coNameList = ['co.base', 'len(co.bins)', 'len(co.data)', 'co.domain', 'co.label', 'co.maxs', 'co.mean', 'co.mins', 'co.missing', 'co.ninfs', 'co.pctiles', 'co.pinfs', 'co.precision', 'co.sigma', 'co.str_data', 'co.stride', 'co.type', 'co.zeros']
            for (c, n) in zip(coList, coNameList):
                print (n + ':'), c
            print 'len(co.bins):', len(co.bins)
            print 'co.label:', co.label, 'mean (2 places):', h2o_util.twoDecimals(co.mean)
            assert (co.zeros <= numRows), ("Can't have more zeros than rows %s %s" % (co.zeros, numRows))
            if (ENABLE_ASSERTS and resultIsEnum):
                self.assertEqual(co.type, 'enum', ("Expecting co.type %s to be 'enum' for %s co label  %s" % (co.type, i, co.label)))
            if (ENABLE_ASSERTS and resultIsEnum):
                cardinality = len(co.domain)
                self.assertEqual(cardinality, len(enumChoices), msg=('trial %s: cardinality %s should be %s' % (trial, cardinality, len(enumChoices))))
            if (ENABLE_ASSERTS and resultIsEnum):
                self.assertEqual(co.bins, enumChoices)
            hcntTotal = sum(co.bins)
            numRowsCreated = (rowCount + len(intChoices))
            if (ENABLE_ASSERTS and resultIsEnum):
                self.assertEqual(hcntTotal, (numRowsCreated - expectedNaCnt[i]))
            self.assertEqual(numRows, numRowsCreated, msg=('trial %s: numRows %s should be %s' % (trial, numRows, numRowsCreated)))
            nacnt = co.missing
            if (ENABLE_ASSERTS and resultIsEnum):
                self.assertEqual(nacnt, expectedNaCnt[i], ('trial %s: Column %s Expected %s. nacnt %s incorrect' % (trial, i, expectedNaCnt[i], nacnt)))
        trial += 1
