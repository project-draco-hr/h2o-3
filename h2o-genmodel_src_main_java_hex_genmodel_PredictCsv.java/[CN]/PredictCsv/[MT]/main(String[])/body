{
  parseArgs(args);
  hex.genmodel.GenModel model;
  model=(hex.genmodel.GenModel)Class.forName(modelClassName).newInstance();
  BufferedReader input=new BufferedReader(new FileReader(inputCSVFileName));
  BufferedWriter output=new BufferedWriter(new FileWriter(outputCSVFileName));
  if (model.isAutoEncoder()) {
    output.write(model.getHeader());
  }
 else {
    output.write("predict");
    for (int i=0; model.isClassifier() && i < model.getNumResponseClasses(); i++) {
      output.write(",");
      output.write(model.getDomainValues(model.getResponseIdx())[i]);
    }
  }
  output.write("\n");
  int lineNum=0;
  String line;
  String[] inputColumnNames=new String[0];
  while ((line=input.readLine()) != null) {
    lineNum++;
    if (lineNum == 1) {
      inputColumnNames=line.trim().split(",");
      continue;
    }
    String trimmedLine=line.trim();
    String[] inputData=trimmedLine.split(",");
    RowData row=new RowData();
    for (int i=0; i < inputColumnNames.length; i++) {
      String columnName=inputColumnNames[i];
      String cellData=inputData[i];
switch (cellData) {
case "":
case "NA":
case "N/A":
case "-":
        break;
default :
      row.put(columnName,cellData);
  }
}
ModelCategory category=model.getModelCategory();
if (category == ModelCategory.Binomial) {
  BinomialModelPrediction p=model.predictBinomial(row);
  output.write(p.labelName);
  output.write(",");
  for (int i=0; i < p.classProbabilities.length; i++) {
    if (i > 0) {
      output.write(",");
    }
    output.write(Double.toHexString(p.classProbabilities[i]));
  }
}
 else if (category == ModelCategory.Multinomial) {
  MultinomialModelPrediction p=model.predictMultinomial(row);
  output.write(p.labelName);
  output.write(",");
  for (int i=0; i < p.classProbabilities.length; i++) {
    if (i > 0) {
      output.write(",");
    }
    output.write(Double.toHexString(p.classProbabilities[i]));
  }
}
 else if (category == ModelCategory.Regression) {
  RegressionModelPrediction p=model.predictRegression(row);
  output.write(Double.toHexString(p.value));
}
 else if (category == ModelCategory.Clustering) {
  ClusteringModelPrediction p=model.predictClustering(row);
  output.write(Integer.toHexString(p.cluster));
}
 else {
  System.out.println("Unknown model category: " + category.toString());
  System.exit(1);
}
output.write("\n");
}
output.close();
input.close();
System.exit(0);
}
