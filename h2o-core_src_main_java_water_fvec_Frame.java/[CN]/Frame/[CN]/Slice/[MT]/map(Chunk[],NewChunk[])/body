{
  final Vec[] vecs=new Vec[_cols.length];
  final Vec anyv=_base.anyVec();
  final long nrow=anyv.length();
  long r=ix[0].at80(0);
  int last_ci=anyv.elem2ChunkIdx(r < nrow ? r : 0);
  long last_c0=anyv._espc[last_ci];
  long last_c1=anyv._espc[last_ci + 1];
  Chunk[] last_cs=new Chunk[vecs.length];
  for (int c=0; c < _cols.length; c++) {
    vecs[c]=_base.vecs()[_cols[c]];
    last_cs[c]=vecs[c].chunkForChunkIdx(last_ci);
  }
  for (int i=0; i < ix[0]._len; i++) {
    r=ix[0].at80(i);
    if (r < 0)     continue;
    if (r >= nrow) {
      for (int c=0; c < vecs.length; c++)       ncs[c].addNum(Double.NaN);
    }
 else {
      if (r < last_c0 || r >= last_c1) {
        last_ci=anyv.elem2ChunkIdx(r);
        last_c0=anyv._espc[last_ci];
        last_c1=anyv._espc[last_ci + 1];
        for (int c=0; c < vecs.length; c++)         last_cs[c]=vecs[c].chunkForChunkIdx(last_ci);
      }
      for (int c=0; c < vecs.length; c++)       if (vecs[c].isUUID())       ncs[c].addUUID(last_cs[c],r);
 else       ncs[c].addNum(last_cs[c].at(r));
    }
  }
}
