{
  long rstart=chks[0]._start;
  int rlen=chks[0]._len;
  int rx=0;
  int rlo=0;
  int rhi=rlen;
  while (true) {
    if (_rows != null) {
      if (rx >= _rows.length)       break;
      long r=_rows[rx++];
      if (r < rstart)       continue;
      rlo=(int)(r - rstart);
      rhi=rlo + 1;
      while (rx < _rows.length && (_rows[rx] - rstart) == rhi && rhi < rlen) {
        rx++;
        rhi++;
      }
    }
    for (int i=0; i < _cols.length; i++) {
      Chunk oc=chks[_cols[i]];
      NewChunk nc=nchks[i];
      if (_isInt[i] == 1) {
        for (int j=rlo; j < rhi; j++)         if (oc._vec.isUUID())         nc.addUUID(oc,j);
 else         if (oc.isNA(j))         nc.addNA();
 else         nc.addNum(oc.at8(j),0);
      }
 else       if (oc._vec.isString()) {
        for (int j=rlo; j < rhi; j++)         nc.addStr(oc.atStr(new BufferedString(),j));
      }
 else {
        for (int j=rlo; j < rhi; j++)         nc.addNum(oc.atd(j));
      }
    }
    rlo=rhi;
    if (_rows == null)     break;
  }
}
