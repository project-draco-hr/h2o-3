{
  if (off > numRows())   off=numRows();
  if (off + len > numRows())   len=(int)(numRows() - off);
  String[] rowHeaders=new String[len + 5];
  rowHeaders[0]="min";
  rowHeaders[1]="mean";
  rowHeaders[2]="stddev";
  rowHeaders[3]="max";
  rowHeaders[4]="missing";
  for (int i=0; i < len; i++)   rowHeaders[i + 5]="" + (off + i);
  final int ncols=numCols();
  final Vec[] vecs=vecs();
  String[] coltypes=new String[ncols];
  String[][] strCells=new String[len + 5][ncols];
  double[][] dblCells=new double[len + 5][ncols];
  for (int i=0; i < ncols; i++) {
    Vec vec=vecs[i];
    dblCells[0][i]=vec.min();
    dblCells[1][i]=vec.mean();
    dblCells[2][i]=vec.sigma();
    dblCells[3][i]=vec.max();
    dblCells[4][i]=vec.naCnt();
switch (vec.get_type()) {
case Vec.T_BAD:
      coltypes[i]="string";
    for (int j=0; j < len; j++) {
      strCells[j + 5][i]=null;
      dblCells[j + 5][i]=TwoDimTable.emptyDouble;
    }
  break;
case Vec.T_STR:
coltypes[i]="string";
BufferedString tmpStr=new BufferedString();
for (int j=0; j < len; j++) {
strCells[j + 5][i]=vec.isNA(off + j) ? "" : vec.atStr(tmpStr,off + j).toString();
dblCells[j + 5][i]=TwoDimTable.emptyDouble;
}
break;
case Vec.T_CAT:
coltypes[i]="string";
for (int j=0; j < len; j++) {
strCells[j + 5][i]=vec.isNA(off + j) ? "" : vec.factor(vec.at8(off + j));
dblCells[j + 5][i]=TwoDimTable.emptyDouble;
}
break;
case Vec.T_TIME:
coltypes[i]="string";
DateTimeFormatter fmt=DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
for (int j=0; j < len; j++) {
strCells[j + 5][i]=fmt.print(vec.at8(off + j));
dblCells[j + 5][i]=TwoDimTable.emptyDouble;
}
break;
case Vec.T_NUM:
coltypes[i]=vec.isInt() ? "long" : "double";
for (int j=0; j < len; j++) {
dblCells[j + 5][i]=vec.isNA(off + j) ? TwoDimTable.emptyDouble : vec.at(off + j);
strCells[j + 5][i]=null;
}
break;
case Vec.T_UUID:
throw H2O.unimpl();
default :
System.err.println("bad vector type during debug print: " + vec.get_type());
throw H2O.fail();
}
}
return new TwoDimTable("Frame " + _key,numRows() + " rows and " + numCols()+ " cols",rowHeaders,_names.clone(),coltypes,null,"",strCells,dblCells).toString();
}
