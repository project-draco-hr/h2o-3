{
  Vec v;
  int chks1=Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),2 * FileVec.DFLT_CHUNK_SIZE);
  v=makeCon(0xCAFE,2 * FileVec.DFLT_CHUNK_SIZE);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v._espc.length == chks1 + 1);
  v.remove(new Futures()).blockForPending();
  chks1=Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),3 * FileVec.DFLT_CHUNK_SIZE);
  v=makeCon(0xCAFE,3 * FileVec.DFLT_CHUNK_SIZE);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(3 * FileVec.DFLT_CHUNK_SIZE - 1) == 0xCAFE);
  assertTrue(v._espc.length == chks1 + 1);
  v.remove(new Futures()).blockForPending();
  chks1=Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),3 * FileVec.DFLT_CHUNK_SIZE + 1);
  v=makeCon(0xCAFE,3 * FileVec.DFLT_CHUNK_SIZE + 1);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(3 * FileVec.DFLT_CHUNK_SIZE) == 0xCAFE);
  assertTrue(v._espc.length == chks1 + 1);
  v.remove(new Futures()).blockForPending();
  chks1=Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),4 * FileVec.DFLT_CHUNK_SIZE);
  v=makeCon(0xCAFE,4 * FileVec.DFLT_CHUNK_SIZE);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(4 * FileVec.DFLT_CHUNK_SIZE - 1) == 0xCAFE);
  assertTrue(v._espc.length == chks1 + 1);
  v.remove(new Futures()).blockForPending();
}
