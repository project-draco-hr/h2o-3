{
  Vec v;
  v=makeCon(0xCAFE,2 * FileVec.DFLT_CHUNK_SIZE,false);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.espc().length == 3);
  assertTrue(v.espc()[0] == 0 && v.espc()[1] == FileVec.DFLT_CHUNK_SIZE);
  v.remove(new Futures()).blockForPending();
  v=makeCon(0xCAFE,3 * FileVec.DFLT_CHUNK_SIZE,false);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(3 * FileVec.DFLT_CHUNK_SIZE - 1) == 0xCAFE);
  assertTrue(v.espc().length == 4);
  assertTrue(v.espc()[0] == 0 && v.espc()[1] == FileVec.DFLT_CHUNK_SIZE && v.espc()[2] == FileVec.DFLT_CHUNK_SIZE * 2);
  v.remove(new Futures()).blockForPending();
  v=makeCon(0xCAFE,3 * FileVec.DFLT_CHUNK_SIZE + 1,false);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(3 * FileVec.DFLT_CHUNK_SIZE) == 0xCAFE);
  assertTrue(v.espc().length == 4);
  assertTrue(v.espc()[0] == 0 && v.espc()[1] == FileVec.DFLT_CHUNK_SIZE && v.espc()[2] == FileVec.DFLT_CHUNK_SIZE * 2 && v.espc()[3] == FileVec.DFLT_CHUNK_SIZE * 3 + 1);
  v.remove(new Futures()).blockForPending();
  v=makeCon(0xCAFE,4 * FileVec.DFLT_CHUNK_SIZE,false);
  assertTrue(v.at(234) == 0xCAFE);
  assertTrue(v.at(4 * FileVec.DFLT_CHUNK_SIZE - 1) == 0xCAFE);
  assertTrue(v.espc().length == 5);
  assertTrue(v.espc()[0] == 0 && v.espc()[1] == FileVec.DFLT_CHUNK_SIZE && v.espc()[2] == FileVec.DFLT_CHUNK_SIZE * 2 && v.espc()[3] == FileVec.DFLT_CHUNK_SIZE * 3);
  v.remove(new Futures()).blockForPending();
}
