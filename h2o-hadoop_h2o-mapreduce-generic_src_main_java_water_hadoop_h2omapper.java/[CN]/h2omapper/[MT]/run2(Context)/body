{
  Configuration conf=context.getConfiguration();
  Counter counter=context.getCounter(H2O_MAPPER_COUNTER.HADOOP_COUNTER_HEARTBEAT);
  Thread counterThread=new CounterThread(context,counter);
  counterThread.start();
  String mapredLocalDir=conf.get("mapred.local.dir");
  String ice_root;
  if (mapredLocalDir.contains(",")) {
    ice_root=mapredLocalDir.split(",")[0];
  }
 else {
    ice_root=mapredLocalDir;
  }
  String jobtrackerName=conf.get(H2O_JOBTRACKERNAME_KEY);
  String driverIp=conf.get(H2O_DRIVER_IP_KEY);
  String driverPortString=conf.get(H2O_DRIVER_PORT_KEY);
  int driverPort=Integer.parseInt(driverPortString);
  String network=conf.get(H2O_NETWORK_KEY);
  String nthreadsString=conf.get(H2O_NTHREADS_KEY);
  String basePortString=conf.get(H2O_BASE_PORT_KEY);
  String betaString=conf.get(H2O_BETA_KEY);
  String randomUdpDropString=conf.get(H2O_RANDOM_UDP_DROP_KEY);
  String licenseData=conf.get(H2O_LICENSE_DATA_KEY);
  String flowDir=conf.get(H2O_FLOW_DIR_KEY);
  String hadoopVersion=conf.get(H2O_HADOOP_VERSION);
  String gaOptOut=conf.get(H2O_GA_OPTOUT);
  ServerSocket ss=new ServerSocket();
  InetSocketAddress sa=new InetSocketAddress("127.0.0.1",0);
  ss.bind(sa);
  int localPort=ss.getLocalPort();
  List<String> argsList=new ArrayList<>();
  argsList.add("-ice_root");
  argsList.add(ice_root);
  argsList.add("-name");
  argsList.add(jobtrackerName);
  argsList.add("-hdfs_skip");
  if (network != null) {
    if (network.length() > 0) {
      argsList.add("-network");
      argsList.add(network);
    }
  }
  if (nthreadsString != null) {
    if (nthreadsString.length() > 0) {
      argsList.add("-nthreads");
      int nthreads=Integer.parseInt(nthreadsString);
      argsList.add(Integer.toString(nthreads));
    }
  }
  if (basePortString != null) {
    if (basePortString.length() > 0) {
      argsList.add("-baseport");
      int basePort=Integer.parseInt(basePortString);
      argsList.add(Integer.toString(basePort));
    }
  }
  if (betaString != null) {
    if (betaString.length() > 0) {
      argsList.add(betaString);
    }
  }
  if (randomUdpDropString != null) {
    if (randomUdpDropString.length() > 0) {
      argsList.add(randomUdpDropString);
    }
  }
  if (licenseData != null) {
    if (licenseData.length() > 0) {
      Log.POST(100,"Before writing license file");
      Log.POST(101,ice_root);
      File f=new File(ice_root);
      boolean b=f.exists();
      Log.POST(102,b ? "exists" : "does not exist");
      if (!b) {
        Log.POST(103,"before mkdirs()");
        boolean success=f.mkdirs();
        if (!success) {
          Log.POST(103,"mkdirs failed()");
          return -1;
        }
        Log.POST(104,"after mkdirs()");
      }
      String fileName=ice_root + File.separator + "h2o_license.txt";
      PrintWriter out=new PrintWriter(fileName);
      out.print(licenseData);
      out.close();
      argsList.add("-license");
      argsList.add(fileName);
    }
  }
  if (flowDir != null) {
    if (flowDir.length() > 0) {
      argsList.add("-flow_dir");
      argsList.add(flowDir);
    }
  }
  if (hadoopVersion != null) {
    argsList.add("-ga_hadoop_ver");
    argsList.add(hadoopVersion);
  }
  if (gaOptOut != null)   argsList.add(gaOptOut);
  String[] args=argsList.toArray(new String[argsList.size()]);
  try {
    _embeddedH2OConfig=new EmbeddedH2OConfig();
    _embeddedH2OConfig.setDriverCallbackIp(driverIp);
    _embeddedH2OConfig.setDriverCallbackPort(driverPort);
    _embeddedH2OConfig.setMapperCallbackPort(localPort);
    H2O.setEmbeddedH2OConfig(_embeddedH2OConfig);
    Log.POST(11,"After setEmbeddedH2OConfig");
    water.H2OApp.main(args);
    Log.POST(12,"After main");
  }
 catch (  Exception e) {
    Log.POST(13,"Exception in main");
    Log.POST(13,e.toString());
  }
  Log.POST(14,"Waiting for exit");
  Socket sock=ss.accept();
  System.out.println("Wait for exit woke up from accept");
  byte[] b=new byte[1];
  InputStream is=sock.getInputStream();
  int expectedBytes=1;
  int receivedBytes=0;
  while (receivedBytes < expectedBytes) {
    int n=is.read(b,receivedBytes,expectedBytes - receivedBytes);
    System.out.println("is.read returned " + n);
    if (n < 0) {
      System.exit(112);
    }
    receivedBytes+=n;
  }
  int exitStatus=(int)b[0];
  System.out.println("Received exitStatus " + exitStatus);
  return exitStatus;
}
