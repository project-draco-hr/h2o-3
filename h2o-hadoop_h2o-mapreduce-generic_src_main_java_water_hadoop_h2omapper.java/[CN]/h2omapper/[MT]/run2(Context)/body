{
  Configuration conf=context.getConfiguration();
  Counter counter=context.getCounter(H2O_MAPPER_COUNTER.HADOOP_COUNTER_HEARTBEAT);
  Thread counterThread=new CounterThread(context,counter);
  counterThread.start();
  String mapredLocalDir=conf.get("mapred.local.dir");
  String ice_root;
  if (mapredLocalDir.contains(",")) {
    ice_root=mapredLocalDir.split(",")[0];
  }
 else {
    ice_root=mapredLocalDir;
  }
  String driverIp=conf.get(H2O_DRIVER_IP_KEY);
  String driverPortString=conf.get(H2O_DRIVER_PORT_KEY);
  int driverPort=Integer.parseInt(driverPortString);
  ServerSocket ss=new ServerSocket();
  InetSocketAddress sa=new InetSocketAddress("127.0.0.1",0);
  ss.bind(sa);
  int localPort=ss.getLocalPort();
  List<String> argsList=new ArrayList<String>();
  argsList.add("-ice_root");
  argsList.add(ice_root);
  argsList.add("-hdfs_skip");
  int argsLength=Integer.parseInt(conf.get(H2O_MAPPER_ARGS_LENGTH));
  for (int i=0; i < argsLength; i++) {
    String arg=conf.get(H2O_MAPPER_ARGS_BASE + Integer.toString(i));
    argsList.add(arg);
  }
  int confLength=Integer.parseInt(conf.get(H2O_MAPPER_CONF_LENGTH));
  for (int i=0; i < confLength; i++) {
    String arg=conf.get(H2O_MAPPER_CONF_ARG_BASE + Integer.toString(i));
    argsList.add(arg);
    String basename=conf.get(H2O_MAPPER_CONF_BASENAME_BASE + Integer.toString(i));
    File f=new File(ice_root);
    boolean b=f.exists();
    if (!b) {
      boolean success=f.mkdirs();
      if (!success) {
        Log.POST(103,"mkdirs(" + f.toString() + ") failed");
        return -1;
      }
      Log.POST(104,"after mkdirs()");
    }
    String fileName=ice_root + File.separator + basename;
    FileOutputStream out=new FileOutputStream(fileName);
    String payload=conf.get(H2O_MAPPER_CONF_PAYLOAD_BASE + Integer.toString(i));
    byte[] byteArr=h2odriver.convertStringToByteArr(payload);
    h2odriver.writeBinaryFile(fileName,byteArr);
    argsList.add(fileName);
  }
  String[] args=argsList.toArray(new String[argsList.size()]);
  try {
    _embeddedH2OConfig=new EmbeddedH2OConfig();
    _embeddedH2OConfig.setDriverCallbackIp(driverIp);
    _embeddedH2OConfig.setDriverCallbackPort(driverPort);
    _embeddedH2OConfig.setMapperCallbackPort(localPort);
    H2O.setEmbeddedH2OConfig(_embeddedH2OConfig);
    Log.POST(11,"After setEmbeddedH2OConfig");
    water.H2OApp.main(args);
    Log.POST(12,"After main");
  }
 catch (  Exception e) {
    Log.POST(13,"Exception in main");
    Log.POST(13,e.toString());
  }
  Log.POST(14,"Waiting for exit");
  Socket sock=ss.accept();
  System.out.println("Wait for exit woke up from accept");
  byte[] b=new byte[1];
  InputStream is=sock.getInputStream();
  int expectedBytes=1;
  int receivedBytes=0;
  while (receivedBytes < expectedBytes) {
    int n=is.read(b,receivedBytes,expectedBytes - receivedBytes);
    System.out.println("is.read returned " + n);
    if (n < 0) {
      System.exit(112);
    }
    receivedBytes+=n;
  }
  int exitStatus=(int)b[0];
  System.out.println("Received exitStatus " + exitStatus);
  return exitStatus;
}
