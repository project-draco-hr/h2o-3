{
  final DTree[] ktrees=new DTree[_nclass];
  DHistogram hcs[][][]=new DHistogram[_nclass][1][_ncols];
  int adj_nbins=Math.max((1 << (10 - 0)),_parms._nbins);
  final boolean classification=_parms._convert_to_enum;
  final long[] _distribution=_model._output._distribution;
  long rseed=rand.nextLong();
  for (int k=0; k < _nclass; k++) {
    if (_distribution[k] != 0) {
      ktrees[k]=new DRFTree(fr,_ncols,(char)_parms._nbins,(char)_nclass,_parms._min_rows,mtrys,rseed);
      boolean isBinom=classification;
      new DRFUndecidedNode(ktrees[k],-1,DHistogram.initialHist(fr,_ncols,adj_nbins,hcs[k][0],isBinom));
    }
  }
  Timer t_1=new Timer();
  Sample ss[]=new Sample[_nclass];
  for (int k=0; k < _nclass; k++)   if (ktrees[k] != null)   ss[k]=new Sample((DRFTree)ktrees[k],sample_rate).dfork(0,new Frame(vec_nids(fr,k),vec_resp(fr)),_parms._build_tree_one_node);
  for (int k=0; k < _nclass; k++)   if (ss[k] != null)   ss[k].getResult();
  Log.debug("Sampling took: + " + t_1);
  int[] leafs=new int[_nclass];
  Timer t_2=new Timer();
  int depth=0;
  for (; depth < _parms._max_depth; depth++) {
    if (!isRunning())     return null;
    hcs=buildLayer(fr,_parms._nbins,ktrees,leafs,hcs,true,_parms._build_tree_one_node);
    if (hcs == null)     break;
  }
  Log.debug("Tree build took: " + t_2);
  Timer t_3=new Timer();
  for (int k=0; k < _nclass; k++) {
    DTree tree=ktrees[k];
    if (tree == null)     continue;
    int leaf=leafs[k]=tree.len();
    for (int nid=0; nid < leaf; nid++) {
      if (tree.node(nid) instanceof DecidedNode) {
        DecidedNode dn=tree.decided(nid);
        for (int i=0; i < dn._nids.length; i++) {
          int cnid=dn._nids[i];
          if (cnid == -1 || tree.node(cnid) instanceof UndecidedNode || (tree.node(cnid) instanceof DecidedNode && ((DecidedNode)tree.node(cnid))._split.col() == -1)) {
            LeafNode ln=new DRFLeafNode(tree,nid);
            ln._pred=dn.pred(i);
            dn._nids[i]=ln.nid();
          }
        }
        if (nid == 0 && dn._split.col() == -1)         new DRFLeafNode(tree,-1,0);
      }
    }
  }
  Log.debug("Nodes propagation: " + t_3);
  Timer t_4=new Timer();
  CollectPreds cp=new CollectPreds(ktrees,leafs).doAll(fr,_parms._build_tree_one_node);
  final boolean importance=true;
  if (importance) {
    if (classification)     asVotes(_treeMeasuresOnOOB).append(cp.rightVotes,cp.allRows);
 else     asSSE(_treeMeasuresOnOOB).append(cp.sse,cp.allRows);
  }
  Log.debug("CollectPreds done: " + t_4);
  for (int i=0; i < ktrees.length; i++)   if (ktrees[i] != null)   ktrees[i]._leaves=ktrees[i].len() - leafs[i];
  return ktrees;
}
