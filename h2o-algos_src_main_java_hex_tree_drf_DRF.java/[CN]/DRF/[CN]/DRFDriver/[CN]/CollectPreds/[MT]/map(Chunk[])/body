{
  final Chunk y=importance ? chk_resp(chks) : null;
  final double[] rpred=importance ? new double[1 + _nclass] : null;
  final double[] rowdata=importance ? new double[_ncols] : null;
  final Chunk oobt=chk_oobt(chks);
  final Chunk weights=hasWeightCol() ? chk_weight(chks) : new C0DChunk(1,chks[0]._len);
  for (int row=0; row < oobt._len; row++) {
    double weight=weights.atd(row);
    final boolean wasOOBRow=ScoreBuildHistogram.isOOBRow((int)chk_nids(chks,0).at8(row));
    for (int k=0; k < _nclass; k++) {
      final Chunk nids=chk_nids(chks,k);
      if (weight != 0) {
        final DTree tree=_trees[k];
        if (tree == null)         continue;
        int nid=(int)nids.at8(row);
        if (wasOOBRow) {
          final Chunk ct=chk_tree(chks,k);
          nid=ScoreBuildHistogram.oob2Nid(nid);
          if (tree.node(nid) instanceof UndecidedNode)           nid=tree.node(nid).pid();
          int leafnid;
          if (tree.root() instanceof LeafNode) {
            leafnid=0;
          }
 else {
            DecidedNode dn=tree.decided(nid);
            if (dn._split == null)             dn=tree.decided(tree.node(nid).pid());
            leafnid=dn.getChildNodeID(chks,row);
          }
          double prediction=((LeafNode)tree.node(leafnid)).pred();
          if (importance)           rpred[1 + k]=(float)prediction;
          ct.set(row,(float)(ct.atd(row) + prediction));
        }
      }
      nids.set(row,0);
    }
    if (wasOOBRow)     oobt.set(row,oobt.atd(row) + weight);
    if (importance && weight != 0) {
      if (wasOOBRow && !y.isNA(row)) {
        if (isClassifier()) {
          int treePred=getPrediction(rpred,_model._output._priorClassDist,data_row(chks,row,rowdata),_threshold);
          int actuPred=(int)y.at8(row);
          if (treePred == actuPred)           rightVotes+=weight;
        }
 else {
          double treePred=rpred[1];
          double actuPred=y.atd(row);
          sse+=(actuPred - treePred) * (actuPred - treePred);
        }
        allRows+=weight;
      }
    }
  }
}
