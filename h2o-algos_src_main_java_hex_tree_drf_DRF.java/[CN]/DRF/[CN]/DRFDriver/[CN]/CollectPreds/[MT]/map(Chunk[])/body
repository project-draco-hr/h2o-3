{
  final Chunk y=importance ? chk_resp(chks) : null;
  final double[] rpred=importance ? new double[1 + _nclass] : null;
  final double[] rowdata=importance ? new double[_ncols] : null;
  final Chunk oobt=chk_oobt(chks);
  for (int row=0; row < oobt._len; row++) {
    final boolean wasOOBRow=ScoreBuildHistogram.isOOBRow((int)chk_nids(chks,0).at8(row));
    for (int k=0; k < _nclass; k++) {
      final DTree tree=_trees[k];
      if (tree == null)       continue;
      final Chunk nids=chk_nids(chks,k);
      int nid=(int)nids.at8(row);
      if (wasOOBRow) {
        final Chunk ct=chk_tree(chks,k);
        nid=ScoreBuildHistogram.oob2Nid(nid);
        if (tree.node(nid) instanceof UndecidedNode)         nid=tree.node(nid).pid();
        int leafnid;
        if (tree.root() instanceof LeafNode) {
          leafnid=0;
        }
 else {
          DecidedNode dn=tree.decided(nid);
          if (dn._split.col() == -1)           dn=tree.decided(tree.node(nid).pid());
          leafnid=dn.ns(chks,row);
        }
        double prediction=((LeafNode)tree.node(leafnid)).pred();
        if (importance)         rpred[1 + k]=(float)prediction;
        ct.set(row,(float)(ct.atd(row) + prediction));
      }
      nids.set(row,0);
    }
    if (wasOOBRow)     oobt.set(row,oobt.atd(row) + 1);
    if (importance) {
      if (wasOOBRow && !y.isNA(row)) {
        if (isClassifier()) {
          int treePred=getPrediction(rpred,data_row(chks,row,rowdata),_threshold);
          int actuPred=(int)y.at8(row);
          if (treePred == actuPred)           rightVotes++;
        }
 else {
          double treePred=rpred[1];
          double actuPred=y.atd(row);
          sse+=(actuPred - treePred) * (actuPred - treePred);
        }
        allRows++;
      }
    }
  }
}
