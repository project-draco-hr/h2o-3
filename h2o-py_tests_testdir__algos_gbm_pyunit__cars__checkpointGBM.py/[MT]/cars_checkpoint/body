def cars_checkpoint(ip, port):
    cars = h2o.upload_file(h2o.locate('smalldata/junit/cars_20mpg.csv'))
    s = cars.runif()
    train = cars[(s > 0.2)]
    valid = cars[(s <= 0.2)]
    problem = random.sample(range(3), 1)[0]
    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']
    if (problem == 1):
        response_col = 'economy_20mpg'
        distribution = 'bernoulli'
        cars[response_col] = cars[response_col].asfactor()
    elif (problem == 2):
        response_col = 'cylinders'
        distribution = 'multinomial'
        cars[response_col] = cars[response_col].asfactor()
    else:
        response_col = 'economy'
        distribution = 'gaussian'
    print 'Distribution: {0}'.format(distribution)
    print 'Response column: {0}'.format(response_col)
    ntrees1 = random.sample(range(5, 21), 1)[0]
    max_depth1 = random.sample(range(2, 6), 1)[0]
    min_rows1 = random.sample(range(10, 16), 1)[0]
    print 'ntrees model 1: {0}'.format(ntrees1)
    print 'max_depth model 1: {0}'.format(max_depth1)
    print 'min_rows model 1: {0}'.format(min_rows1)
    model1 = h2o.gbm(x=train[predictors], y=train[response_col], ntrees=ntrees1, max_depth=max_depth1, min_rows=min_rows1, distribution=distribution, validation_x=valid[predictors], validation_y=valid[response_col])
    model_path = h2o.save_model(model1, name='delete_model', force=True)
    restored_model = h2o.load_model(model_path)
    ntrees2 = (ntrees1 + random.sample(range(5, 21), 1)[0])
    max_depth2 = max_depth1
    min_rows2 = min_rows1
    print 'ntrees model 2: {0}'.format(ntrees2)
    print 'max_depth model 2: {0}'.format(max_depth2)
    print 'min_rows model 2: {0}'.format(min_rows2)
    model2 = h2o.gbm(x=train[predictors], y=train[response_col], ntrees=ntrees2, max_depth=max_depth2, min_rows=min_rows2, distribution=distribution, checkpoint=restored_model._id, validation_x=valid[predictors], validation_y=valid[response_col])
    ntrees3 = ntrees2
    max_depth3 = (max_depth1 + random.sample(range(1, 3), 1)[0])
    min_rows3 = (min_rows1 + random.sample(range(1, 5), 1)[0])
    print 'ntrees model 3: {0}'.format(ntrees3)
    print 'max_depth model 3: {0}'.format(max_depth3)
    print 'min_rows model 3: {0}'.format(min_rows3)
    model3 = h2o.gbm(x=train[predictors], y=train[response_col], ntrees=ntrees3, max_depth=max_depth3, min_rows=min_rows3, distribution=distribution, checkpoint=restored_model._id, validation_x=valid[predictors], validation_y=valid[response_col])
    model4 = h2o.gbm(x=train[predictors], y=train[response_col], ntrees=ntrees2, max_depth=max_depth2, min_rows=min_rows2, validation_frame=valid, distribution=distribution, validation_x=valid[predictors], validation_y=valid[response_col])
    if (problem == 0):
        assert isinstance(model2, type(model4))
        assert (model2.mse(valid=True) == model4.mse(valid=True))
        assert (model3.mse(valid=True) != model4.mse(valid=True))
    elif (problem == 1):
        assert isinstance(model2, type(model4))
        assert (model2.auc(valid=True) == model4.auc(valid=True))
        assert (model3.auc(valid=True) != model4.auc(valid=True))
        assert (model2.logloss(valid=True) == model4.logloss(valid=True))
        assert (model3.logloss(valid=True) != model4.logloss(valid=True))
        assert (model2.giniCoef(valid=True) == model4.giniCoef(valid=True))
        assert (model3.giniCoef(valid=True) != model4.giniCoef(valid=True))
    else:
        assert isinstance(model2, type(model4))
        assert (model2.mse(valid=True) == model4.mse(valid=True))
        assert (model3.mse(valid=True) != model4.mse(valid=True))
        assert (model2.r2(valid=True) == model4.r2(valid=True))
        assert (model3.r2(valid=True) != model4.r2(valid=True))
