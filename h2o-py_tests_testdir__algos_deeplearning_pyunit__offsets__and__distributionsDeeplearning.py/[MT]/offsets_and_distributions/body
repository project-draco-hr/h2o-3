def offsets_and_distributions(ip, port):
    cars = h2o.upload_file(h2o.locate('smalldata/junit/cars_20mpg.csv'))
    cars = cars[(cars['economy_20mpg'].isna() == 0)]
    cars['economy_20mpg'] = cars['economy_20mpg'].asfactor()
    offset = h2o.H2OFrame(python_obj=[[0.5] for x in range(398)])
    offset.setNames(['x1'])
    cars = cars.cbind(offset)
    insurance = h2o.import_frame(h2o.locate('smalldata/glm_test/insurance.csv'))
    insurance['offset'] = insurance['Holders'].log()
    dl = h2o.deeplearning(x=cars[2:8], y=cars['economy_20mpg'], distribution='bernoulli', offset_column='x1', training_frame=cars)
    predictions = dl.predict(cars)
    dl = h2o.deeplearning(x=insurance[0:3], y=insurance['Claims'], distribution='gamma', offset_column='offset', training_frame=insurance)
    predictions = dl.predict(insurance)
    dl = h2o.deeplearning(x=insurance[0:3], y=insurance['Claims'], distribution='gaussian', offset_column='offset', training_frame=insurance)
    predictions = dl.predict(insurance)
    dl = h2o.deeplearning(x=insurance[0:3], y=insurance['Claims'], distribution='poisson', offset_column='offset', training_frame=insurance)
    predictions = dl.predict(insurance)
    dl = h2o.deeplearning(x=insurance.names()[0:3], y='Claims', distribution='tweedie', offset_column='offset', training_frame=insurance)
    predictions = dl.predict(insurance)
