def binop_amp(ip, port):
    h2o.init(ip, port)
    iris = h2o.import_frame(path=h2o.locate('smalldata/iris/iris_wheader_65_rows.csv'))
    (rows, cols) = iris.dim()
    iris.show()
    amp_res = (5 & iris)
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == cols)), 'dimension mismatch'
    amp_res = (1 & iris[1])
    amp_rows = len(amp_res)
    assert (amp_rows == rows), 'dimension mismatch'
    new_rows = iris[amp_res].nrow()
    assert (new_rows == rows), 'wrong number of rows returned'
    res = (2 + iris[0])
    res2 = h2o.as_list((1.1 & res[44]))
    assert res2, 'expected True'
    res = (1.2 + iris[2])
    res2 = (res[11] & iris)
    res2.show()
    res = (1.2 + iris[2])
    res2 = (res[43] & iris[1])
    res2.show()
    res = (1.1 + iris[2])
    res2 = h2o.as_list((res[22] & res[10]))
    assert res2, 'expected True'
    res = (2 + iris[0])
    res2 = h2o.as_list((res[41] & 3))
    assert res2, 'expected True'
    try:
        res = (iris[2] & iris)
        res.show()
        assert False, 'expected error. objects with different dimensions not supported.'
    except EnvironmentError:
        pass
    res = h2o.as_list((iris[0] & iris[1]))
    assert (sum([x[0] for x in res]) == 65.0), 'expected all True'
    res = h2o.as_list((iris[2] & iris[1]))
    assert (sum([x[0] for x in res]) == 65.0), 'expected all True'
    res = (1.2 + iris[2])
    res2 = (iris[1] & res[7])
    res2.show()
    res = h2o.as_list((iris[0] & 0))
    assert (sum([x[0] for x in res]) == 0.0), 'expected all False'
    res = (iris & iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    res = (iris[0:2] & iris[1:3])
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == 2)), 'dimension mismatch'
    try:
        res = (iris & iris[0:3])
        res.show()
        assert False, 'expected error. frames are different dimensions.'
    except EnvironmentError:
        pass
    try:
        res = (iris & iris[0])
        res.show()
        assert False, 'expected error. objects of different dimensions not supported.'
    except EnvironmentError:
        pass
    res = (1.2 + iris[2])
    res2 = (iris & res[55])
    res2.show()
    res = (iris & 0)
    (res_rows, res_cols) = res.dim()
    res = h2o.as_list(res)
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    for c in range((cols - 1)):
        for r in range(rows):
            assert (res[r][c] == 0.0), 'expected False'
