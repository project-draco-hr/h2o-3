def binop_amp(ip, port):
    h2o.init(ip, port)
    iris = h2o.import_frame(path=h2o.locate('smalldata/iris/iris_wheader.csv'))
    (rows, cols) = iris.dim()
    iris.show()
    amp_res = (5 & iris)
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == cols)), 'dimension mismatch'
    amp_res = (1 & iris[1])
    amp_rows = len(amp_res)
    assert (amp_rows == rows), 'dimension mismatch'
    new_rows = iris[amp_res].nrow()
    assert (new_rows == rows), 'wrong number of rows returned'
    res = (2 + iris[0])
    res2 = (1.1 & res[133])
    assert res2.eager(), 'expected True'
    try:
        res = (1.2 + iris[2])
        res2 = (res[133] & iris)
        res2.show()
        assert False, 'expected error. objects with different dimensions not supported.'
    except EnvironmentError:
        pass
    try:
        res = (1.2 + iris[2])
        res2 = (res[133] & iris[1])
        res2.show()
    except EnvironmentError:
        pass
    res = (1.1 + iris[2])
    res2 = (res[133] & res[10])
    assert res2.eager(), 'expected True'
    res = (2 + iris[0])
    res2 = (res[133] & 3)
    assert res2.eager(), 'expected True'
    try:
        res = (iris[2] & iris)
        res.show()
        assert False, 'expected error. objects with different dimensions not supported.'
    except EnvironmentError:
        pass
    res = (iris[0] & iris[1])
    assert res, 'expected same values'
    res = (iris[2] & iris[1])
    assert res, 'expected same values'
    try:
        res = (1.2 + iris[2])
        res2 = (iris[1] & res[133])
        res2.show()
    except EnvironmentError:
        pass
    res = (iris[0] & 0)
    for r in range(rows):
        assert (not res[r].eager()), 'expected False'
    res = (iris & iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    res = (iris[0:2] & iris[1:3])
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == 2)), 'dimension mismatch'
    try:
        res = (iris & iris[0:3])
        res.show()
        assert False, 'expected error. frames are different dimensions.'
    except EnvironmentError:
        pass
    try:
        res = (iris & iris[0])
        res.show()
        assert False, 'expected error. objects of different dimensions not supported.'
    except EnvironmentError:
        pass
    try:
        res = (1.2 + iris[2])
        res2 = (iris & res[133])
        res2.show()
        assert False, 'expected error. objects of different dimensions not supported.'
    except EnvironmentError:
        pass
    res = (iris & 0)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    for c in range((cols - 1)):
        for r in range(rows):
            assert (not res[(r, c)].eager()), 'expected False'
