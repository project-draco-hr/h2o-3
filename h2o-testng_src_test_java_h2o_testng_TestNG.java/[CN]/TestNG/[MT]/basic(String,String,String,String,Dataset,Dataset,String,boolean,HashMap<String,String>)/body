{
  String testcaseStatus="PASSED";
  RecordingTestcase rt=new RecordingTestcase();
  Param[] params=null;
  Model.Parameters modelParameter=null;
  String invalidMessage=null;
  String notImplMessage=null;
  redirectStandardStreams();
switch (algorithm) {
case FunctionUtils.drf:
    params=DRFConfig.params;
  break;
case FunctionUtils.gbm:
params=GBMConfig.params;
break;
case FunctionUtils.glm:
params=GLMConfig.params;
break;
case FunctionUtils.dl:
params=DeepLearningConfig.params;
break;
default :
System.out.println("Do not implement for algorithm: " + algorithm);
}
try {
invalidMessage=FunctionUtils.validate(params,train_dataset_id,train_dataset,validate_dataset_id,validate_dataset,rawInput);
if (FunctionUtils.drf.equals(algorithm)) {
notImplMessage=FunctionUtils.checkImplemented(rawInput);
}
if (StringUtils.isNotEmpty(invalidMessage)) {
System.out.println(invalidMessage);
Assert.fail(String.format(invalidMessage));
}
 else if (StringUtils.isNotEmpty(notImplMessage)) {
System.out.println(notImplMessage);
Assert.fail(String.format(notImplMessage));
}
 else {
modelParameter=FunctionUtils.toModelParameter(params,algorithm,train_dataset_id,validate_dataset_id,train_dataset,validate_dataset,rawInput);
FunctionUtils.basicTesting(algorithm,modelParameter,isNegativeTestcase,rawInput);
}
}
 catch (AssertionError ae) {
testcaseStatus="FAILED";
throw ae;
}
 finally {
System.out.println("Total nodes: " + H2O.CLOUD.size());
System.out.println("Total cores: " + H2O.NUMCPUS);
System.out.println("Total time: " + (rt.getTimeRecording()) + "millis");
System.out.println("Total memory used in testcase:" + (rt.getUsedMemory() / RecordingTestcase.MB) + "MB");
resetStandardStreams();
testcaseStatus=String.format("Testcase %s %s",rawInput.get(CommonHeaders.testcase_id),testcaseStatus);
Reporter.log(testcaseStatus,true);
}
}
