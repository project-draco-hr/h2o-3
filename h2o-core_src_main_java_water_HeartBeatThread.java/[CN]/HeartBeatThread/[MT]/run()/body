{
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  ObjectName os;
  try {
    os=new ObjectName("java.lang:type=OperatingSystem");
  }
 catch (  MalformedObjectNameException e) {
    throw Log.throwErr(e);
  }
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  int counter=0;
  while (true) {
    Log.info("HEARTBEAT!");
    H2O cloud=H2O.CLOUD;
    HeartBeat hb=H2O.SELF._heartbeat;
    hb._hb_version=HB_VERSION++;
    hb._jvm_boot_msec=TimeLine.JVM_BOOT_MSEC;
    if ((counter + Math.abs(H2O.SELF.hashCode() * 0xDECAF)) % (300 / (Float.isNaN(hb._gflops) ? 10 : 1)) == 0) {
      hb._gflops=(float)Linpack.run(hb._cpus_allowed);
      hb._membw=(float)MemoryBandwidth.run(hb._cpus_allowed);
    }
    long kv_gc=Cleaner.KV_USED_AT_LAST_GC;
    long heap_gc=Cleaner.HEAP_USED_AT_LAST_GC;
    long pojo_gc=Math.max(heap_gc - kv_gc,0);
    long kv_mem=Cleaner.Histo.cached();
    long free_mem=Math.max(MemoryManager.MEM_MAX - kv_mem - pojo_gc,0);
    long pojo_mem=MemoryManager.MEM_MAX - kv_mem - free_mem;
    hb.set_kv_mem(kv_mem);
    hb.set_pojo_mem(pojo_mem);
    hb.set_free_mem(free_mem);
    hb.set_swap_mem(Cleaner.Histo.swapped());
    hb._keys=H2O.STORE.size();
    try {
      hb._system_load_average=((Double)mbs.getAttribute(os,"SystemLoadAverage")).floatValue();
      if (hb._system_load_average == -1)       hb._system_load_average=((Double)mbs.getAttribute(os,"SystemCpuLoad")).floatValue();
    }
 catch (    Exception e) {
    }
    int rpcs=0;
    for (    H2ONode h2o : cloud._memary)     rpcs+=h2o.taskSize();
    hb._rpcs=(char)rpcs;
    hb._fjthrds=new short[H2O.MAX_PRIORITY + 1];
    hb._fjqueue=new short[H2O.MAX_PRIORITY + 1];
    for (int i=0; i < hb._fjthrds.length; i++) {
      hb._fjthrds[i]=(short)H2O.getWrkThrPoolSize(i);
      hb._fjqueue[i]=(short)H2O.getWrkQueueSize(i);
    }
    hb._tcps_active=(char)H2ONode.TCPS.get();
    hb.set_free_disk(H2O.getPM().getIce().getUsableSpace());
    hb.set_max_disk(H2O.getPM().getIce().getTotalSpace());
    LinuxProcFileReader.refresh();
    hb._pid=LinuxProcFileReader.getProcessID();
    hb._system_idle_ticks=LinuxProcFileReader.getSystemIdleTicks();
    hb._system_total_ticks=LinuxProcFileReader.getSystemTotalTicks();
    hb._process_total_ticks=LinuxProcFileReader.getProcessTotalTicks();
    hb._process_num_open_fds=LinuxProcFileReader.getProcessNumOpenFds();
    hb._num_cpus=LinuxProcFileReader.getProcessCpusAllowed();
    hb._nthreads=H2O.ARGS.nthreads;
    hb._cpus_allowed=(char)Math.min(LinuxProcFileReader.getProcessCpusAllowed(),H2O.ARGS.nthreads);
    UDPHeartbeat.build_and_multicast(cloud,hb);
    long now=System.currentTimeMillis();
    H2O.SELF._last_heard_from=now;
    for (    H2ONode h2o : cloud._memary) {
      long delta=now - h2o._last_heard_from;
      if (delta > SUSPECT) {
        if (!h2o._announcedLostContact) {
          Paxos.print("hart: announce suspect node",cloud._memary,h2o.toString());
          h2o._announcedLostContact=true;
        }
      }
 else       if (h2o._announcedLostContact) {
        Paxos.print("hart: regained contact with node",cloud._memary,h2o.toString());
        h2o._announcedLostContact=false;
      }
    }
    counter++;
    try {
      Thread.sleep(SLEEP);
    }
 catch (    InterruptedException ignore) {
    }
  }
}
