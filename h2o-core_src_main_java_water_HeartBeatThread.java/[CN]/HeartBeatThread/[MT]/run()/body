{
  MBeanServer mbs=ManagementFactory.getPlatformMBeanServer();
  ObjectName os;
  try {
    os=new ObjectName("java.lang:type=OperatingSystem");
  }
 catch (  MalformedObjectNameException e) {
    throw Log.throwErr(e);
  }
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  int counter=0;
  while (true) {
    H2O cloud=H2O.CLOUD;
    HeartBeat hb=H2O.SELF._heartbeat;
    hb._hb_version=HB_VERSION++;
    hb._jvm_boot_msec=TimeLine.JVM_BOOT_MSEC;
    final Runtime run=Runtime.getRuntime();
    hb.set_free_mem(run.freeMemory());
    hb.set_max_mem(run.maxMemory());
    hb.set_tot_mem(run.totalMemory());
    hb._keys=(H2O.STORE.size());
    hb.set_mvalsz(myHisto.histo(false)._cached);
    hb.set_tvalsz(myHisto.histo(false)._total);
    hb._num_cpus=(char)run.availableProcessors();
    if ((counter + Math.abs(H2O.SELF.hashCode())) % 300 == 0) {
      hb._gflops=Linpack.run(hb._cpus_allowed);
      hb._membw=MemoryBandwidth.run(hb._cpus_allowed);
    }
    Object load=null;
    try {
      load=mbs.getAttribute(os,"SystemLoadAverage");
      if ((double)load == -1)       load=mbs.getAttribute(os,"SystemCpuLoad");
    }
 catch (    Exception e) {
    }
    hb._system_load_average=load instanceof Double ? ((Double)load).floatValue() : 0;
    int rpcs=0;
    for (    H2ONode h2o : cloud._memary)     rpcs+=h2o.taskSize();
    hb._rpcs=(char)rpcs;
    hb._fjthrds=new short[H2O.MAX_PRIORITY + 1];
    hb._fjqueue=new short[H2O.MAX_PRIORITY + 1];
    for (int i=0; i < hb._fjthrds.length; i++) {
      hb._fjthrds[i]=(short)H2O.getWrkThrPoolSize(i);
      hb._fjqueue[i]=(short)H2O.getWrkQueueSize(i);
    }
    hb._tcps_active=(char)H2ONode.TCPS.get();
    hb.set_free_disk(Persist.getIce().getUsableSpace());
    hb.set_max_disk(Persist.getIce().getTotalSpace());
    LinuxProcFileReader lpfr=new LinuxProcFileReader();
    lpfr.read();
    if (lpfr.valid()) {
      hb._system_idle_ticks=lpfr.getSystemIdleTicks();
      hb._system_total_ticks=lpfr.getSystemTotalTicks();
      hb._process_total_ticks=lpfr.getProcessTotalTicks();
      hb._process_num_open_fds=lpfr.getProcessNumOpenFds();
    }
 else {
      hb._system_idle_ticks=-1;
      hb._system_total_ticks=-1;
      hb._process_total_ticks=-1;
      hb._process_num_open_fds=-1;
    }
    hb._cpus_allowed=lpfr.getProcessCpusAllowed();
    hb._pid=lpfr.getProcessID();
    UDPHeartbeat.build_and_multicast(cloud,hb);
    long now=System.currentTimeMillis();
    H2O.SELF._last_heard_from=now;
    for (    H2ONode h2o : cloud._memary) {
      long delta=now - h2o._last_heard_from;
      if (delta > SUSPECT) {
        if (!h2o._announcedLostContact) {
          Paxos.print("hart: announce suspect node",cloud._memary,h2o.toString());
          h2o._announcedLostContact=true;
        }
      }
 else       if (h2o._announcedLostContact) {
        Paxos.print("hart: regained contact with node",cloud._memary,h2o.toString());
        h2o._announcedLostContact=false;
      }
    }
    counter++;
    try {
      Thread.sleep(SLEEP);
    }
 catch (    InterruptedException ignore) {
    }
  }
}
