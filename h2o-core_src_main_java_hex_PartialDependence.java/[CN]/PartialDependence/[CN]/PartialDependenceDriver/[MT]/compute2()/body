{
  assert(_job != null);
  final Frame fr=_frame_id.get();
  _partial_dependence_data=new TwoDimTable[_cols.length];
  for (int i=0; i < _cols.length; ++i) {
    final String col=_cols[i];
    Log.debug("Computing partial dependence of model on '" + col + "'.");
    Vec v=fr.vec(col);
    if (v.isCategorical() && v.cardinality() > _nbins) {
      Log.warn("Too many categorical levels for column: " + col + ". Not creating partial dependence plot.");
      continue;
    }
    int actualbins=_nbins;
    if (v.isInt() && (v.max() - v.min() + 1) < _nbins) {
      actualbins=(int)(v.max() - v.min() + 1);
    }
    double[] colVals=new double[actualbins];
    double delta=(v.max() - v.min()) / (actualbins - 1);
    for (int j=0; j < colVals.length; ++j) {
      colVals[j]=v.min() + j * delta;
    }
    Log.debug("Computing PartialDependence for column " + col + " at the following values: ");
    Log.debug(Arrays.toString(colVals));
    Futures fs=new Futures();
    final double meanResponse[]=new double[colVals.length];
    final boolean cat=fr.vec(col).isCategorical();
    for (int k=0; k < colVals.length; ++k) {
      final double value=colVals[k];
      final int which=k;
      H2O.H2OCountedCompleter pdp=new H2O.H2OCountedCompleter(){
        @Override public void compute2(){
          Frame fr=_frame_id.get();
          Frame test=new Frame(fr.names(),fr.vecs());
          Vec orig=test.remove(col);
          Vec cons=orig.makeCon(value);
          if (cat)           cons.setDomain(fr.vec(col).domain());
          test.add(col,cons);
          Frame preds=null;
          try {
            preds=_model_id.get().score(test,Key.make().toString(),_job,false);
            if (_model_id.get()._output.nclasses() == 2) {
              meanResponse[which]=preds.vec(2).mean();
            }
 else             if (_model_id.get()._output.nclasses() == 1) {
              meanResponse[which]=preds.vec(0).mean();
            }
 else             throw H2O.unimpl();
          }
  finally {
            if (preds != null)             preds.remove();
          }
          cons.remove();
          tryComplete();
        }
      }
;
      fs.add(H2O.submitTask(pdp));
    }
    fs.blockForPending();
    _partial_dependence_data[i]=new TwoDimTable("PartialDependence",("Partial Dependence Plot of model " + _model_id + " on column '"+ _cols[i]+ "'"),new String[actualbins],new String[]{_cols[i],"mean_response"},new String[]{cat ? "string" : "double","double"},new String[]{cat ? "%s" : "%5f","%5f"},null);
    for (int j=0; j < meanResponse.length; ++j) {
      if (fr.vec(col).isCategorical()) {
        _partial_dependence_data[i].set(j,0,fr.vec(col).domain()[(int)colVals[j]]);
      }
 else {
        _partial_dependence_data[i].set(j,0,colVals[j]);
      }
      _partial_dependence_data[i].set(j,1,meanResponse[j]);
    }
    _job.update(1);
    update(_job);
    if (_job.stop_requested())     break;
  }
  tryComplete();
}
