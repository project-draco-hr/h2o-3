{
  if (_naCnt == vec.length() || vec.isUUID()) {
    _bins=new long[0];
    return;
  }
  double span=_maxs[0] - _mins[0];
  long rows=vec.length() - _naCnt;
  if (span == 0) {
    _bins=new long[]{rows};
    return;
  }
  int nbins=MAX_SIZE;
  if (_isInt && (int)span == span) {
    nbins=(int)span + 1;
    int lim=vec.isEnum() ? MAX_ENUM_SIZE : MAX_SIZE;
    nbins=Math.min(lim,nbins);
  }
  _bins=new Histo(this,nbins).doAll(vec)._bins;
  _pctiles=new double[PERCENTILES.length];
  int j=0;
  long hsum=0;
  double base=h_base();
  double stride=h_stride();
  for (int i=0; i < PERCENTILES.length; i++) {
    final double P=PERCENTILES[i];
    long pint=(long)(P * rows);
    while (hsum < pint)     hsum+=_bins[j++];
    _pctiles[i]=base + stride * (j - 1);
    _pctiles[i]+=stride * ((double)(pint - (hsum - _bins[j - 1])) / _bins[j - 1]);
  }
}
