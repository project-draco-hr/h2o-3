{
  _size=c.byteSize();
  boolean isUUID=c._vec._isUUID;
  for (int i=0; i < c._len; i++) {
    double d=c.at0(i);
    if (Double.isNaN(d)) {
      _naCnt++;
    }
 else     if (isUUID) {
      _min=_max=_mean=_sigma=Double.NaN;
      if (c.at16l0(i) == 0 && c.at16h0(i) == 0)       _nzCnt++;
    }
 else {
      if (d == 0)       _nzCnt++;
      if (d < _min)       _min=d;
      if (d > _max)       _max=d;
      _mean+=d;
      _rows++;
      if (_isInt && ((long)d) != d)       _isInt=false;
    }
  }
  if (!Double.isNaN(_mean)) {
    _mean=_mean / _rows;
    for (int i=0; i < c._len; i++) {
      if (!c.isNA0(i)) {
        double d=c.at0(i) - _mean;
        _sigma+=d * d;
      }
    }
  }
  return this;
}
