def binop_pipe(ip, port):
    h2o.init(ip, port)
    iris = h2o.import_frame(path=h2o.locate('smalldata/iris/iris_wheader.csv'))
    (rows, cols) = iris.dim()
    iris.show()
    amp_res = (5 | iris)
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == cols)), 'dimension mismatch'
    amp_res = (iris | 1)
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == cols)), 'dimension mismatch'
    for c in range((cols - 1)):
        for r in range(rows):
            assert amp_res[c][r].eager(), 'value error'
    amp_res = (iris[0] | iris[1])
    amp_rows = len(amp_res)
    assert (amp_rows == rows), 'dimension mismatch'
    try:
        amp_res = (iris | iris[0])
        assert False, 'expected error. objects of different dimensions not supported.'
    except EnvironmentError:
        pass
    try:
        amp_res = (iris[3] | iris)
        assert False, 'expected error. objects of different dimensions not supported.'
    except EnvironmentError:
        pass
    amp_res = (iris | iris)
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == cols)), 'dimension mismatch'
    amp_res = (iris[0:2] | iris[1:3])
    (amp_rows, amp_cols) = amp_res.dim()
    assert ((amp_rows == rows) and (amp_cols == 2)), 'dimension mismatch'
    try:
        amp_res = (iris | iris[0:3])
        assert False, 'expected error. frames are different dimensions.'
    except EnvironmentError:
        pass
