{
  if (vals.length < _sparseLen)   throw new IllegalArgumentException();
  int off=_OFF;
  final int inc=_valsz + _ridsz;
  if (_ridsz == 2) {
switch (_valsz) {
case 1:
      for (int i=0; i < _sparseLen; ++i, off+=inc) {
        ids[i]=UnsafeUtils.get2(_mem,off) & 0xFFFF;
        long v=_mem[off + 2] & 0xFF;
        vals[i]=v == NAS[_valsz_log] ? NA : v;
      }
    break;
case 2:
  for (int i=0; i < _sparseLen; ++i, off+=inc) {
    ids[i]=UnsafeUtils.get2(_mem,off) & 0xFFFF;
    long v=UnsafeUtils.get2(_mem,off + 2);
    vals[i]=v == NAS[_valsz_log] ? NA : v;
  }
break;
case 4:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get2(_mem,off) & 0xFFFF;
long v=UnsafeUtils.get4(_mem,off + 2);
vals[i]=v == NAS[_valsz_log] ? NA : v;
}
break;
case 8:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get2(_mem,off) & 0xFFFF;
long v=UnsafeUtils.get8(_mem,off + 2);
vals[i]=v == C8Chunk._NA ? Double.NaN : v;
}
break;
}
}
 else if (_ridsz == 4) {
switch (_valsz) {
case 1:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get4(_mem,off);
long v=_mem[off + 4] & 0xFF;
vals[i]=v == C1Chunk._NA ? NA : v;
}
break;
case 2:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get4(_mem,off);
long v=UnsafeUtils.get2(_mem,off + 4);
vals[i]=v == C2Chunk._NA ? NA : v;
}
break;
case 4:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get4(_mem,off);
long v=UnsafeUtils.get4(_mem,off + 4);
vals[i]=v == C4Chunk._NA ? NA : v;
}
break;
case 8:
for (int i=0; i < _sparseLen; ++i, off+=inc) {
ids[i]=UnsafeUtils.get4(_mem,off);
long v=UnsafeUtils.get8(_mem,off + 4);
vals[i]=v == C8Chunk._NA ? NA : v;
}
break;
}
}
 else throw H2O.unimpl();
return sparseLenZero();
}
