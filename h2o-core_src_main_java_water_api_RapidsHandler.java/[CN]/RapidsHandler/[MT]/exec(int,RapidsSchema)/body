{
  if (rapids == null)   return null;
  if (rapids.ast == null || rapids.ast.equals(""))   return rapids;
  Val val;
  try {
    val=water.currents.Exec.exec(rapids.ast);
  }
 catch (  IllegalArgumentException e) {
    throw e;
  }
catch (  Throwable e) {
    Log.err(e);
    throw e;
  }
switch (val.type()) {
case Val.NUM:
    return new RapidsScalarV3(val.getNum());
case Val.STR:
  return new RapidsStringV3(val.getStr());
case Val.FUN:
return new RapidsFunctionV3(val.getFun().toString());
case Val.FRM:
Frame fr=val.getFrame();
if (rapids.id == null) {
fr.delete();
throw new IllegalArgumentException("Missing the result key 'id' for the returned frame");
}
Key k=Key.make(rapids.id);
Iced i=DKV.getGet(k);
if (i instanceof Lockable) ((Lockable)i).delete();
 else if (i instanceof Keyed) ((Keyed)i).remove();
 else if (i != null) throw new IllegalArgumentException("Attempting to overright an unexpected key");
DKV.put(fr=new Frame(k,fr._names,fr.vecs()));
return new RapidsFrameV3(fr);
default :
throw H2O.fail();
}
}
