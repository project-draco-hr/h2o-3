{
  double x=0.782347234;
  boolean identityLink=new Distribution(parms).link(x) == x;
  DataInfo dinfo=new DataInfo(train,valid,parms._autoencoder ? 0 : 1,parms._autoencoder || parms._use_all_factor_levels,parms._standardize ? (parms._autoencoder ? DataInfo.TransformType.NORMALIZE : parms._sparse ? DataInfo.TransformType.DESCALE : DataInfo.TransformType.STANDARDIZE) : DataInfo.TransformType.NONE,!parms._standardize || train.lastVec().isCategorical() ? DataInfo.TransformType.NONE : identityLink ? DataInfo.TransformType.STANDARDIZE : DataInfo.TransformType.NONE,parms._missing_values_handling == DeepLearningParameters.MissingValuesHandling.Skip,false,true,parms._weights_column != null,parms._offset_column != null,parms._fold_column != null);
  GLMTask.YMUTask ymt=new GLMTask.YMUTask(dinfo,nClasses,true,!parms._autoencoder && nClasses == 1,parms._missing_values_handling == MissingValuesHandling.Skip,!parms._autoencoder).doAll(dinfo._adaptedFrame);
  if (ymt._wsum == 0 && parms._missing_values_handling == DeepLearningParameters.MissingValuesHandling.Skip)   throw new H2OIllegalArgumentException("No rows left in the dataset after filtering out rows with missing values. Ignore columns with many NAs or set missing_values_handling to 'MeanImputation'.");
  if (parms._weights_column != null && parms._offset_column != null) {
    Log.warn("Combination of offset and weights can lead to slight differences because Rollupstats aren't weighted - need to re-calculate weighted mean/sigma of the response including offset terms.");
  }
  if (parms._weights_column != null && parms._offset_column == null) {
    dinfo.updateWeightedSigmaAndMean(ymt._basicStats.sigma(),ymt._basicStats.mean());
    if (nClasses == 1)     dinfo.updateWeightedSigmaAndMeanForResponse(ymt._basicStatsResponse.sigma(),ymt._basicStatsResponse.mean());
  }
  return dinfo;
}
