{
  try {
    lock_data();
    checkJob();
    checkParams();
    final DataInfo dinfo=prepareDataInfo();
    final Vec resp=dinfo._adaptedFrame.lastVec();
    float[] priorDist=classification ? new MRUtils.ClassDist(resp).doAll(resp).rel_dist() : null;
    final DeepLearningModel model=new DeepLearningModel(dest(),self(),source._key,dinfo,this,priorDist);
    model.model_info().initializeMembers();
    return model;
  }
  finally {
    unlock_data();
  }
}
