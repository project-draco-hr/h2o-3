{
  Frame validScoreFrame=null;
  Frame train, trainScoreFrame;
  try {
    lock_data();
    if (model == null) {
      model=DKV.get(dest()).get();
    }
    model.write_lock(self());
    final DeepLearning mp=model.model_info().get_params();
    ValidationAdapter validAdapter=new ValidationAdapter(validation,classification);
    validAdapter.prepareValidationWithModel(model);
    final long model_size=model.model_info().size();
    if (!quiet_mode)     Log.info("Number of model parameters (weights/biases): " + String.format("%,d",model_size));
    train=model.model_info().data_info()._adaptedFrame;
    if (mp.force_load_balance)     train=reBalance(train,mp.replicate_training_data);
    float[] trainSamplingFactors;
    if (mp.classification && mp.balance_classes) {
      trainSamplingFactors=new float[train.lastVec().domain().length];
      train=sampleFrameStratified(train,train.lastVec(),trainSamplingFactors,(long)(mp.max_after_balance_size * train.numRows()),mp.seed,true,false);
      model.setModelClassDistribution(new MRUtils.ClassDist(train.lastVec()).doAll(train.lastVec()).rel_dist());
    }
    model.training_rows=train.numRows();
    trainScoreFrame=sampleFrame(train,mp.score_training_samples,mp.seed);
    if (!quiet_mode)     Log.info("Number of chunks of the training data: " + train.anyVec().nChunks());
    if (validation != null) {
      Frame adaptedValid=validAdapter.getValidation();
      if (validAdapter.getValidAdaptor().needsAdaptation2CM()) {
        int rIndex=0;
        for (int i=0; i < source.vecs().length; i++) {
          if (source.vecs()[i] == response)           rIndex=i;
        }
        final String responseName=source._names != null && rIndex >= 0 ? source._names[rIndex] : "response";
        adaptedValid.add(validAdapter.getValidAdaptor().adaptedValidationResponse(responseName),validAdapter.getValidAdaptor().getAdaptedValidationResponse2CM());
      }
      if (mp.classification && mp.balance_classes && mp.score_validation_sampling == ClassSamplingMethod.Stratified) {
        validScoreFrame=sampleFrameStratified(adaptedValid,adaptedValid.lastVec(),null,mp.score_validation_samples > 0 ? mp.score_validation_samples : adaptedValid.numRows(),mp.seed + 1,false,false);
      }
 else {
        validScoreFrame=sampleFrame(adaptedValid,mp.score_validation_samples,mp.seed + 1);
      }
      if (mp.force_load_balance)       validScoreFrame=reBalance(validScoreFrame,false);
      if (!quiet_mode)       Log.info("Number of chunks of the validation data: " + validScoreFrame.anyVec().nChunks());
    }
    mp.actual_train_samples_per_iteration=computeTrainSamplesPerIteration(mp.train_samples_per_iteration,train.numRows(),mp.replicate_training_data,mp.quiet_mode);
    if (mp.replicate_training_data && (mp.actual_train_samples_per_iteration == train.numRows() * H2O.CLOUD.size()) && !mp.shuffle_training_data&& H2O.CLOUD.size() > 1) {
      Log.warn("Enabling training data shuffling, because all nodes train on the full dataset (replicated training data).");
      mp.shuffle_training_data=true;
    }
    final float rowUsageFraction=computeRowUsageFraction(train.numRows(),mp.actual_train_samples_per_iteration,mp.replicate_training_data);
    if (!mp.quiet_mode)     Log.info("Initial model:\n" + model.model_info());
    Log.info("Starting to train the Deep Learning model.");
    do     model.set_model_info(H2O.CLOUD.size() > 1 && mp.replicate_training_data ? (mp.single_node_mode ? new DeepLearningTask2(train,model.model_info(),rowUsageFraction).doAll(Key.make()).model_info() : new DeepLearningTask2(train,model.model_info(),rowUsageFraction).doAllNodes().model_info()) : new DeepLearningTask(model.model_info(),rowUsageFraction).doAll(train).model_info());
 while (model.doScoring(train,trainScoreFrame,validScoreFrame,self(),validAdapter.getValidAdaptor()));
    _state=JobState.DONE;
    model.get_params()._state=_state;
    Log.info("Finished training the Deep Learning model.");
    return model;
  }
 catch (  RuntimeException ex) {
    model=DKV.get(dest()).get();
    _state=JobState.CANCELLED;
    model.get_params()._state=_state;
    Log.info("Deep Learning model building was cancelled.");
    return model;
  }
catch (  Throwable t) {
    t.printStackTrace();
    throw t;
  }
 finally {
    if (model != null)     model.unlock(self());
    unlock_data();
  }
}
