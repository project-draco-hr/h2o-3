{
  Frame validScoreFrame=null;
  Frame train, trainScoreFrame;
  try {
    if (model == null) {
      model=DKV.get(dest()).get();
    }
    model.write_lock(self());
    final DeepLearningModel.DeepLearningParameters mp=model._parms;
    Frame tra_fr=_train;
    Frame val_fr=_valid;
    final long model_size=model.model_info().size();
    if (!_parms._quiet_mode)     Log.info("Number of model parameters (weights/biases): " + String.format("%,d",model_size));
    train=model.model_info().data_info()._adaptedFrame;
    if (mp._force_load_balance)     train=reBalance(train,mp._replicate_training_data);
    if (model._output.isClassifier() && mp._balance_classes) {
      float[] trainSamplingFactors=new float[train.lastVec().domain().length];
      if (mp._class_sampling_factors != null) {
        if (mp._class_sampling_factors.length != train.lastVec().domain().length)         throw new IllegalArgumentException("class_sampling_factors must have " + train.lastVec().domain().length + " elements");
        trainSamplingFactors=mp._class_sampling_factors.clone();
      }
      train=sampleFrameStratified(train,train.lastVec(),trainSamplingFactors,(long)(mp._max_after_balance_size * train.numRows()),mp._seed,true,false);
      model._output._modelClassDist=new MRUtils.ClassDist(train.lastVec()).doAll(train.lastVec()).rel_dist();
    }
    model.training_rows=train.numRows();
    trainScoreFrame=sampleFrame(train,mp._score_training_samples,mp._seed);
    if (!_parms._quiet_mode)     Log.info("Number of chunks of the training data: " + train.anyVec().nChunks());
    if (val_fr != null) {
      model.validation_rows=val_fr.numRows();
      if (model._output.isClassifier() && mp._balance_classes && mp._score_validation_sampling == DeepLearningModel.DeepLearningParameters.ClassSamplingMethod.Stratified) {
        validScoreFrame=sampleFrameStratified(val_fr,val_fr.lastVec(),null,mp._score_validation_samples > 0 ? mp._score_validation_samples : val_fr.numRows(),mp._seed + 1,false,false);
      }
 else {
        validScoreFrame=sampleFrame(val_fr,mp._score_validation_samples,mp._seed + 1);
      }
      if (mp._force_load_balance)       validScoreFrame=reBalance(validScoreFrame,false);
      if (!_parms._quiet_mode)       Log.info("Number of chunks of the validation data: " + validScoreFrame.anyVec().nChunks());
    }
    model.actual_train_samples_per_iteration=computeTrainSamplesPerIteration(mp,train.numRows(),model);
    if (mp._replicate_training_data && (model.actual_train_samples_per_iteration == train.numRows() * (mp._single_node_mode ? 1 : H2O.CLOUD.size())) && !mp._shuffle_training_data&& H2O.CLOUD.size() > 1 && !mp._reproducible) {
      Log.warn("Enabling training data shuffling, because all nodes train on the full dataset (replicated training data).");
      mp._shuffle_training_data=true;
    }
    model._timeLastScoreEnter=System.currentTimeMillis();
    if (!mp._quiet_mode)     Log.info("Initial model:\n" + model.model_info());
    if (_parms._autoencoder)     model.doScoring(train,trainScoreFrame,validScoreFrame,self());
    model.update(self());
    Log.info("Starting to train the Deep Learning model.");
    do {
      model.set_model_info(mp._epochs == 0 ? model.model_info() : H2O.CLOUD.size() > 1 && mp._replicate_training_data ? (mp._single_node_mode ? new DeepLearningTask2(self(),train,model.model_info(),rowFraction(train,mp,model)).doAll(Key.make()).model_info() : new DeepLearningTask2(self(),train,model.model_info(),rowFraction(train,mp,model)).doAllNodes().model_info()) : new DeepLearningTask(self(),model.model_info(),rowFraction(train,mp,model)).doAll(train).model_info());
      update(model.actual_train_samples_per_iteration);
      if (!mp._quiet_mode)       Log.info("Progress: " + PrettyPrint.formatPct(progress()));
    }
 while (model.doScoring(train,trainScoreFrame,validScoreFrame,self()));
    if (!isCancelledOrCrashed() && _parms._override_with_best_model && model.actual_best_model_key != null && _parms._n_folds == 0) {
      DeepLearningModel best_model=DKV.get(model.actual_best_model_key).get();
      if (best_model != null && best_model.error() < model.error() && Arrays.equals(best_model.model_info().units,model.model_info().units)) {
        Log.info("Setting the model to be the best model so far (based on scoring history).");
        DeepLearningModel.DeepLearningModelInfo mi=best_model.model_info().deep_clone();
        mi.set_processed_global(model.model_info().get_processed_global());
        mi.set_processed_local(model.model_info().get_processed_local());
        model.set_model_info(mi);
        model.update(self());
        model.doScoring(train,trainScoreFrame,validScoreFrame,self());
        assert(best_model.error() == model.error());
      }
    }
    Log.info(model);
    Log.info("Finished training the Deep Learning model.");
  }
 catch (  RuntimeException ex) {
    model=DKV.get(dest()).get();
    _state=JobState.CANCELLED;
    Log.info("Deep Learning model building was cancelled.");
    throw ex;
  }
 finally {
    if (model != null)     model.unlock(self());
    for (    Frame f : _delete_me)     f.delete();
  }
  return model;
}
