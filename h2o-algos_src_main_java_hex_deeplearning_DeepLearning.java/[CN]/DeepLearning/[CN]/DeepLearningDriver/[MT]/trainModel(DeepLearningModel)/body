{
  Frame validScoreFrame=null;
  Frame train, trainScoreFrame;
  try {
    if (model == null) {
      model=DKV.get(dest()).get();
    }
    Log.info("Model category: " + (_parms._autoencoder ? "Auto-Encoder" : isClassifier() ? "Classification" : "Regression"));
    final long model_size=model.model_info().size();
    Log.info("Number of model parameters (weights/biases): " + String.format("%,d",model_size));
    model.write_lock(_job);
    _job.update(0,"Setting up training data...");
    final DeepLearningParameters mp=model.model_info().get_params();
    Frame tra_fr=new Frame(mp._train,_train.names(),_train.vecs());
    Frame val_fr=_valid != null ? new Frame(mp._valid,_valid.names(),_valid.vecs()) : null;
    train=tra_fr;
    if (model._output.isClassifier() && mp._balance_classes) {
      _job.update(0,"Balancing class distribution of training data...");
      float[] trainSamplingFactors=new float[train.lastVec().domain().length];
      if (mp._class_sampling_factors != null) {
        if (mp._class_sampling_factors.length != train.lastVec().domain().length)         throw new IllegalArgumentException("class_sampling_factors must have " + train.lastVec().domain().length + " elements");
        trainSamplingFactors=mp._class_sampling_factors.clone();
      }
      train=sampleFrameStratified(train,train.lastVec(),train.vec(model._output.weightsName()),trainSamplingFactors,(long)(mp._max_after_balance_size * train.numRows()),mp._seed,true,false);
      Vec l=train.lastVec();
      Vec w=train.vec(model._output.weightsName());
      MRUtils.ClassDist cd=new MRUtils.ClassDist(l);
      model._output._modelClassDist=_weights != null ? cd.doAll(l,w).rel_dist() : cd.doAll(l).rel_dist();
    }
    model.training_rows=train.numRows();
    trainScoreFrame=sampleFrame(train,mp._score_training_samples,mp._seed);
    if (trainScoreFrame != train)     Scope.track(trainScoreFrame);
    if (!_parms._quiet_mode)     Log.info("Number of chunks of the training data: " + train.anyVec().nChunks());
    if (val_fr != null) {
      model.validation_rows=val_fr.numRows();
      if (model._output.isClassifier() && mp._balance_classes && mp._score_validation_sampling == DeepLearningParameters.ClassSamplingMethod.Stratified) {
        _job.update(0,"Sampling validation data (stratified)...");
        validScoreFrame=sampleFrameStratified(val_fr,val_fr.lastVec(),val_fr.vec(model._output.weightsName()),null,mp._score_validation_samples > 0 ? mp._score_validation_samples : val_fr.numRows(),mp._seed + 1,false,false);
      }
 else {
        _job.update(0,"Sampling validation data...");
        validScoreFrame=sampleFrame(val_fr,mp._score_validation_samples,mp._seed + 1);
        if (validScoreFrame != val_fr)         Scope.track(validScoreFrame);
      }
      if (!_parms._quiet_mode)       Log.info("Number of chunks of the validation data: " + validScoreFrame.anyVec().nChunks());
    }
    model.actual_train_samples_per_iteration=computeTrainSamplesPerIteration(mp,train.numRows(),model);
    if (mp._replicate_training_data && (model.actual_train_samples_per_iteration == train.numRows() * (mp._single_node_mode ? 1 : H2O.CLOUD.size())) && !mp._shuffle_training_data&& H2O.CLOUD.size() > 1 && !mp._reproducible) {
      if (!mp._quiet_mode)       Log.info("Enabling training data shuffling, because all nodes train on the full dataset (replicated training data).");
      mp._shuffle_training_data=true;
    }
    if (!mp._shuffle_training_data && model.actual_train_samples_per_iteration == train.numRows() && train.anyVec().nChunks() == 1) {
      if (!mp._quiet_mode)       Log.info("Enabling training data shuffling to avoid training rows in the same order over and over (no Hogwild since there's only 1 chunk).");
      mp._shuffle_training_data=true;
    }
    long now=System.currentTimeMillis();
    model._timeLastIterationEnter=now;
    if (_parms._autoencoder) {
      _job.update(0,"Scoring null model of autoencoder...");
      if (!mp._quiet_mode)       Log.info("Scoring the null model of the autoencoder.");
      model.doScoring(trainScoreFrame,validScoreFrame,_job._key,0,false);
    }
    model.update(_job);
    model.total_setup_time_ms+=now - _job.start_time();
    Log.info("Total setup time: " + PrettyPrint.msecs(model.total_setup_time_ms,true));
    Log.info("Starting to train the Deep Learning model.");
    _job.update(0,"Training...");
    do {
      model.iterations++;
      model.set_model_info(mp._epochs == 0 ? model.model_info() : H2O.CLOUD.size() > 1 && mp._replicate_training_data ? (mp._single_node_mode ? new DeepLearningTask2(_job._key,train,model.model_info(),rowFraction(train,mp,model),model.iterations).doAll(Key.make(H2O.SELF)).model_info() : new DeepLearningTask2(_job._key,train,model.model_info(),rowFraction(train,mp,model),model.iterations).doAllNodes().model_info()) : new DeepLearningTask(_job._key,model.model_info(),rowFraction(train,mp,model),model.iterations).doAll(train).model_info());
    }
 while (!_job.stop_requested() && model.doScoring(trainScoreFrame,validScoreFrame,_job._key,model.iterations,false));
    if (!_job.stop_requested() && _parms._overwrite_with_best_model && model.actual_best_model_key != null && _parms._nfolds == 0) {
      DeepLearningModel best_model=DKV.getGet(model.actual_best_model_key);
      if (best_model != null && best_model.loss() < model.loss() && Arrays.equals(best_model.model_info().units,model.model_info().units)) {
        if (!_parms._quiet_mode)         Log.info("Setting the model to be the best model so far (based on scoring history).");
        DeepLearningModelInfo mi=best_model.model_info().deep_clone();
        mi.set_processed_global(model.model_info().get_processed_global());
        mi.set_processed_local(model.model_info().get_processed_local());
        model.set_model_info(mi);
        model.update(_job);
        model.doScoring(trainScoreFrame,validScoreFrame,_job._key,model.iterations,true);
        assert(best_model.loss() == model.loss());
      }
    }
    model.model_info().data_info().coefNames();
    if (!_parms._quiet_mode) {
      Log.info("==============================================================================================================================================================================");
      if (_job.stop_requested()) {
        Log.info("Deep Learning model training was interrupted.");
      }
 else {
        Log.info("Finished training the Deep Learning model.");
        Log.info(model);
      }
      Log.info("==============================================================================================================================================================================");
    }
  }
  finally {
    if (model != null) {
      model.deleteElasticAverageModels();
      model.unlock(_job);
      if (model.actual_best_model_key != null) {
        assert(model.actual_best_model_key != model._key);
        DKV.remove(model.actual_best_model_key);
      }
    }
  }
  return model;
}
