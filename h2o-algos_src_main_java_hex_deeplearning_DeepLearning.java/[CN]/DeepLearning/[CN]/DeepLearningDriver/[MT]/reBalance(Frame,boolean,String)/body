{
  int chunks=(int)Math.min(4 * H2O.NUMCPUS * (local ? 1 : H2O.CLOUD.size()),fr.numRows());
  if (fr.anyVec().nChunks() > chunks && !_parms._reproducible) {
    if (!_parms._quiet_mode)     Log.info("Dataset already contains " + fr.anyVec().nChunks() + " chunks. No need to rebalance.");
    return fr;
  }
 else   if (_parms._reproducible) {
    if (!_parms._quiet_mode)     Log.warn("Reproducibility enforced - using only 1 thread - can be slow.");
    chunks=1;
  }
  if (!_parms._quiet_mode)   Log.info("ReBalancing dataset into (at least) " + chunks + " chunks.");
  Key newKey=Key.make(name + ".chunks" + chunks);
  RebalanceDataSet rb=new RebalanceDataSet(fr,newKey,chunks);
  H2O.submitTask(rb);
  rb.join();
  Frame f=DKV.get(newKey).get();
  _delete_me.add(f);
  return f;
}
