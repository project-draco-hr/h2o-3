{
  Key<Model>[] gridModelKeys=grid.getModelKeys();
  List<Key<Model>> modelKeys=new ArrayList<>(gridModelKeys.length);
  for (  Key k : gridModelKeys) {
    if (k != null && DKV.get(k) != null) {
      modelKeys.add(k);
    }
  }
  if (sort_by == null && modelKeys.size() > 0 && modelKeys.get(0) != null) {
    Model m=DKV.getGet(modelKeys.get(0));
    if (m != null && m.isSupervised()) {
      if (m._output.nclasses() > 1) {
        sort_by="logloss";
        decreasing=false;
      }
 else {
        sort_by="residual_deviance";
        decreasing=false;
      }
    }
  }
  if (modelKeys.size() > 0 && sort_by != null) {
    Set<String> possibleMetrics=ModelMetrics.getAllowedMetrics(modelKeys.get(0));
    if (!possibleMetrics.contains(sort_by)) {
      throw new H2OIllegalArgumentException("Invalid argument for sort_by specified. Must be one of: " + Arrays.toString(possibleMetrics.toArray(new String[0])));
    }
  }
  if (null != sort_by && !sort_by.isEmpty()) {
    modelKeys=ModelMetrics.sortModelsByMetric(sort_by,decreasing,modelKeys);
    training_metrics=new ModelMetricsBase[modelKeys.size()];
    validation_metrics=new ModelMetricsBase[modelKeys.size()];
    cross_validation_metrics=new ModelMetricsBase[modelKeys.size()];
    for (int i=0; i < modelKeys.size(); i++) {
      Model m=DKV.getGet(modelKeys.get(i));
      if (null != m) {
        Model.Output o=m._output;
        training_metrics[i]=(ModelMetricsBase)Schema.schema(3,o._training_metrics).fillFromImpl(o._training_metrics);
        if (null != o._validation_metrics)         validation_metrics[i]=(ModelMetricsBase)Schema.schema(3,o._validation_metrics).fillFromImpl(o._validation_metrics);
        if (null != o._cross_validation_metrics)         cross_validation_metrics[i]=(ModelMetricsBase)Schema.schema(3,o._cross_validation_metrics).fillFromImpl(o._cross_validation_metrics);
      }
    }
  }
  KeyV3.ModelKeyV3[] modelIds=new KeyV3.ModelKeyV3[modelKeys.size()];
  Key<Model>[] keys=new Key[modelKeys.size()];
  for (int i=0; i < modelIds.length; i++) {
    modelIds[i]=new KeyV3.ModelKeyV3(modelKeys.get(i));
    keys[i]=modelIds[i].key();
  }
  grid_id=new KeyV3.GridKeyV3(grid._key);
  model_ids=modelIds;
  hyper_names=grid.getHyperNames();
  failed_params=toModelParametersSchema(grid.getFailedParameters());
  failure_details=grid.getFailureDetails();
  failure_stack_traces=grid.getFailureStackTraces();
  failed_raw_params=grid.getFailedRawParameters();
  TwoDimTable t=grid.createSummaryTable(keys,sort_by,decreasing);
  if (t != null)   summary_table=new TwoDimTableBase().fillFromImpl(t);
  return this;
}
