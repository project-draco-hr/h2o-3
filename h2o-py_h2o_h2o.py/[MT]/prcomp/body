def prcomp(x, validation_x=None, k=None, model_id=None, max_iterations=None, transform=None, seed=None, use_all_factor_levels=None, training_frame=None, validation_frame=None, pca_method=None):
    '\n  Principal components analysis of a H2O dataset using the power method\n  to calculate the singular value decomposition of the Gram matrix.\n\n  :param k: The number of principal components to be computed. This must be between 1 and min(ncol(training_frame), nrow(training_frame)) inclusive.\n  :param model_id: (Optional) The unique hex key assigned to the resulting model. Automatically generated if none is provided.\n  :param max_iterations: The maximum number of iterations to run each power iteration loop. Must be between 1 and 1e6 inclusive.\n  :param transform: A character string that indicates how the training data should be transformed before running PCA.\n  Possible values are "NONE": for no transformation, "DEMEAN": for subtracting the mean of each column, "DESCALE":\n  for dividing by the standard deviation of each column, "STANDARDIZE": for demeaning and descaling, and "NORMALIZE":\n  for demeaning and dividing each column by its range (max - min).\n  :param seed: (Optional) Random seed used to initialize the right singular vectors at the beginning of each power method iteration.\n  :param use_all_factor_levels: (Optional) A logical value indicating whether all factor levels should be included\n  in each categorical column expansion. If FALSE, the indicator column corresponding to the first factor level of\n  every categorical variable will be dropped. Defaults to FALSE.\n  :return: a new dim reduction model\n  '
    parms = {k: v for (k, v) in locals().items() if ((k in ['training_frame', 'validation_frame', 'validation_x', 'validation_y', 'offset_column', 'weights_column', 'fold_column']) or (v is not None))}
    parms['algo'] = 'pca'
    return h2o_model_builder.unsupervised(parms)
