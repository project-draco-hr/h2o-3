def prcomp(x, validation_x=None, k=None, model_id=None, max_iterations=None, transform=None, seed=None, use_all_factor_levels=None, training_frame=None, validation_frame=None, pca_method=None, max_runtime_secs=None):
    '\n  Principal components analysis of a H2O dataset.\n\n  Parameters\n  ----------\n\n  k : int\n    The number of principal components to be computed. This must be between 1 and min(ncol(training_frame), nrow(training_frame)) inclusive.\n  model_id : str\n    (Optional) The unique hex key assigned to the resulting model. Automatically generated if none is provided.\n  max_iterations : int\n    The maximum number of iterations to run each power iteration loop. Must be between 1 and 1e6 inclusive.\n  transform : str\n    A character string that indicates how the training data should be transformed before running PCA.\n    Possible values are "NONE": for no transformation, "DEMEAN": for subtracting the mean of each column, "DESCALE":\n    for dividing by the standard deviation of each column, "STANDARDIZE": for demeaning and descaling, and "NORMALIZE":\n    for demeaning and dividing each column by its range (max - min).\n  seed : int\n    (Optional) Random seed used to initialize the right singular vectors at the beginning of each power method iteration.\n  use_all_factor_levels : bool\n    (Optional) A logical value indicating whether all factor levels should be included in each categorical column expansion.\n    If FALSE, the indicator column corresponding to the first factor level of every categorical variable will be dropped. Defaults to FALSE.\n  pca_method : str\n    A character string that indicates how PCA should be calculated.\n    Possible values are "GramSVD": distributed computation of the Gram matrix followed by a local SVD using the JAMA package,\n    "Power": computation of the SVD using the power iteration method, "Randomized": approximate SVD by projecting onto a random\n    subspace, "GLRM": fit a generalized low rank model with an l2 loss function (no regularization) and solve for the SVD using\n    local matrix algebra.\n\n  :return: a new dim reduction model\n  '
    warnings.warn('`h2o.prcomp` is deprecated. Use the transforms sub module to build an H2OPCA.', category=DeprecationWarning, stacklevel=2)
    parms = {k: v for (k, v) in locals().items() if ((k in ['training_frame', 'validation_frame', 'validation_x', 'validation_y', 'offset_column', 'weights_column', 'fold_column']) or (v is not None))}
    parms['algo'] = 'pca'
    return unsupervised(parms)
