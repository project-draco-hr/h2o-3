def download_pojo(model, path=u'', get_jar=True):
    u'\n    Download the POJO for this model to the directory specified by path; if path is "", then dump to screen.\n\n    :param model: the model whose scoring POJO should be retrieved.\n    :param path: an absolute path to the directory where POJO should be saved.\n    :param get_jar: retrieve the h2o-genmodel.jar also.\n    '
    assert_is_type(model, ModelBase)
    assert_is_type(path, str)
    assert_is_type(get_jar, bool)
    java = api((u'GET /3/Models.java/%s' % model.model_id))
    regex = re.compile(u'[+\\-* !@#$%^&()={}\\[\\]|;:\'"<>,.?/]')
    pojoname = regex.sub(u'_', model.model_id)
    if (path == u''):
        print(java)
    else:
        filepath = os.path.join(path, (pojoname + u'.java'))
        print(u'Filepath: {}'.format(filepath))
        with open(filepath, u'wb') as f:
            f.write(java.encode(u'utf-8'))
    if (get_jar and (path != u'')):
        url = h2oconn.make_url(u'h2o-genmodel.jar')
        filename = ((path + u'/') + u'h2o-genmodel.jar')
        response = urlopen()(url)
        with open(filename, u'wb') as f:
            f.write(response.read())
