def cluster_status():
    u'This is possibly confusing because this can come back without warning,\n    but if a user tries to do any remoteSend, they will get a "cloud sick warning"\n    Retrieve information on the status of the cluster running H2O.\n    '
    cluster_json = H2OConnection.get_json(u'Cloud?skip_ticks=true')
    print(u'Version: {0}'.format(cluster_json[u'version']))
    print(u'Cloud name: {0}'.format(cluster_json[u'cloud_name']))
    print(u'Cloud size: {0}'.format(cluster_json[u'cloud_size']))
    if cluster_json[u'locked']:
        print(u'Cloud is locked\n')
    else:
        print(u'Accepting new members\n')
    if ((cluster_json[u'nodes'] == None) or (len(cluster_json[u'nodes']) == 0)):
        print(u'No nodes found')
        return
    status = []
    for node in cluster_json[u'nodes']:
        for (k, v) in zip(node.keys(), node.values()):
            if (k in [u'h2o', u'healthy', u'last_ping', u'num_cpus', u'sys_load', u'mem_value_size', u'free_mem', u'pojo_mem', u'swap_mem', u'free_disk', u'max_disk', u'pid', u'num_keys', u'tcps_active', u'open_fds', u'rpcs_active']):
                status.append((k + u': {0}'.format(v)))
        print(u', '.join(status))
        print()
