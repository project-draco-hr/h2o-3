def import_sql_select(connection_url, select_query, username, password, optimize=None):
    'Imports the SQL table that is the result of the specified SQL query to H2OFrame in memory. \n  Creates a temporary SQL table from the specified sql_query.\n  Runs multiple SELECT SQL queries on the temporary table concurrently for parallel ingestion, then drops the table. \n  Also see h2o.import_sql_table.\n  \n  Parameters\n  ----------\n    connection_url : str\n      URL of the SQL database connection as specified by the Java Database Connectivity (JDBC) Driver.\n      For example, "jdbc:mysql://localhost:3306/menagerie?&useSSL=false"\n      \n    select_query : str\n      SQL query starting with `SELECT` that returns rows from one or more database tables.\n      \n    username : str\n      Username for SQL server\n      \n    password : str\n      Password for SQL server\n      \n    optimize : bool, optional, default is True\n      Optimize import of SQL table for faster imports. Experimental.  \n      \n  Returns\n  -------\n    H2OFrame containing data of specified SQL select query\n  '
    p = {}
    p.update({k: v for (k, v) in locals().items() if (k is not 'p')})
    p['_rest_version'] = 99
    j = H2OJob(H2OConnection.post_json(url_suffix='ImportSQLTable', **p), 'Import SQL Table').poll()
    return get_frame(j.dest_key)
