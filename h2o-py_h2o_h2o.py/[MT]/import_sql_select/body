def import_sql_select(connection_url, select_query, username, password, optimize=True):
    u'\n    Import the SQL table that is the result of the specified SQL query to H2OFrame in memory.\n\n    Creates a temporary SQL table from the specified sql_query.\n    Runs multiple SELECT SQL queries on the temporary table concurrently for parallel ingestion, then drops the table.\n    Be sure to start the h2o.jar in the terminal with your downloaded JDBC driver in the classpath::\n\n      java -cp <path_to_h2o_jar>:<path_to_jdbc_driver_jar> water.H2OApp\n\n    Also see h2o.import_sql_table. Currently supported SQL databases are MySQL, PostgreSQL, and MariaDB. Support\n    for Oracle 12g and Microsoft SQL Server is forthcoming.\n\n    :param connection_url: URL of the SQL database connection as specified by the Java Database Connectivity (JDBC)\n        Driver. For example, "jdbc:mysql://localhost:3306/menagerie?&useSSL=false"\n    :param select_query: SQL query starting with `SELECT` that returns rows from one or more database tables.\n    :param username: username for SQL server\n    :param password: password for SQL server\n    :param optimize: optimize import of SQL table for faster imports. Experimental.\n\n    :returns: :class:`H2OFrame` containing data of specified SQL query\n\n    Examples\n    --------\n        >>> conn_url = "jdbc:mysql://172.16.2.178:3306/ingestSQL?&useSSL=false"\n        >>> select_query = "SELECT bikeid from citibike20k"\n        >>> username = "root"\n        >>> password = "abc123"\n        >>> my_citibike_data = h2o.import_sql_select(conn_url, select_query, username, password)\n    '
    assert_is_type(connection_url, str)
    assert_is_type(select_query, str)
    assert_is_type(username, str)
    assert_is_type(password, str)
    assert_is_type(optimize, bool)
    p = {u'connection_url': connection_url, u'select_query': select_query, u'username': username, u'password': password, u'optimize': optimize, }
    j = H2OJob(api(u'POST /99/ImportSQLTable', data=p), u'Import SQL Table').poll()
    return get_frame(j.dest_key)
