def import_sql_table(connection_url, table, username, password, columns=None, optimize=True):
    u'\n    Import SQL table to H2OFrame in memory.\n\n    Assumes that the SQL table is not being updated and is stable.\n    Runs multiple SELECT SQL queries concurrently for parallel ingestion.\n    Be sure to start the h2o.jar in the terminal with your downloaded JDBC driver in the classpath::\n\n        java -cp <path_to_h2o_jar>:<path_to_jdbc_driver_jar> water.H2OApp\n\n    Also see :func:`import_sql_select`.\n    Currently supported SQL databases are MySQL, PostgreSQL, and MariaDB. Support for Oracle 12g and Microsoft SQL\n    Server is forthcoming.\n\n    :param connection_url: URL of the SQL database connection as specified by the Java Database Connectivity (JDBC)\n        Driver. For example, "jdbc:mysql://localhost:3306/menagerie?&useSSL=false"\n    :param table: name of SQL table\n    :param columns: a list of column names to import from SQL table. Default is to import all columns.\n    :param username: username for SQL server\n    :param password: password for SQL server\n    :param optimize: optimize import of SQL table for faster imports. Experimental.\n\n    :returns: :class:`H2OFrame` containing data of specified SQL table\n\n    Examples\n    --------\n        >>> conn_url = "jdbc:mysql://172.16.2.178:3306/ingestSQL?&useSSL=false"\n        >>> table = "citibike20k"\n        >>> username = "root"\n        >>> password = "abc123"\n        >>> my_citibike_data = h2o.import_sql_table(conn_url, table, username, password)\n    '
    assert_is_type(connection, str)
    assert_is_type(table, str)
    assert_is_type(username, str)
    assert_is_type(password, str)
    assert_is_type(columns, [str], None)
    assert_is_type(optimize, bool)
    p = {u'connection': connection, u'table': table, u'username': username, u'password': password, u'optimize': optimize, }
    if columns:
        p[u'columns'] = u', '.join(columns)
    j = H2OJob(api(u'POST /99/ImportSQLTable', data=p), u'Import SQL Table').poll()
    return get_frame(j.dest_key)
