def import_sql_table(connection_url, table, username, password, columns=None, optimize=None):
    'Import SQL table to H2OFrame in memory. Assumes that the SQL table is not being updated and is stable.\n  Runs multiple SELECT SQL queries concurrently for parallel ingestion. \n  \n  Parameters\n  ----------\n    connection_url : str\n      URL of the SQL database connection as specified by the Java Database Connectivity (JDBC) Driver.\n      For example, "jdbc:mysql://localhost:3306/menagerie?&useSSL=false"\n      \n    table : str\n      Name of SQL table\n      \n    username : str\n      Username for SQL server\n      \n    password : str\n      Password for SQL server\n      \n    columns : list of strings, optional\n      A list of column names to import from SQL table. Default is to import all columns.\n      \n    optimize : bool, optional, default is True\n      Optimize import of SQL table for faster imports. Experimental.  \n      \n  Returns\n  -------\n    H2OFrame containing data of specified SQL table\n'
    if (columns is not None):
        if (not isinstance(columns, list)):
            raise ValueError('`columns` must be a list of column names')
        columns = ', '.join(columns)
    p = {}
    p.update({k: v for (k, v) in locals().items() if (k is not 'p')})
    p['_rest_version'] = 99
    j = H2OJob(H2OConnection.post_json(url_suffix='ImportSQLTable', **p), 'Import SQL Table').poll()
    return get_frame(j.dest_key)
