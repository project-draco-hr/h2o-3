def ifelse(test, yes, no):
    '\n  Semantically equivalent to R\'s ifelse.\n  Based on the booleans in the test vector, the output has the values of the yes and no\n  vectors interleaved (or merged together).\n\n  :param test: A "test" H2OFrame\n  :param yes:  A "yes" H2OFrame\n  :param no:   A "no"  H2OFrame\n  :return: An H2OFrame\n  '
    test_a = None
    yes_a = None
    no_a = None
    test_tmp = None
    yes_tmp = None
    no_tmp = None
    if isinstance(test, bool):
        test_a = ('%TRUE' if test else '%FALSE')
    else:
        if isinstance(test, H2OVec):
            test_tmp = test._expr.eager()
        else:
            test_tmp = test.key()
        test_a = (("'" + test_tmp) + "'")
    if isinstance(yes, (int, float)):
        yes_a = '#{}'.format(str(yes))
    elif (yes is None):
        yes_a = '#NaN'
    else:
        if isinstance(yes, H2OVec):
            yes_tmp = yes._expr.eager()
        else:
            yes_tmp = yes.key()
        yes_a = (("'" + yes_tmp) + "'")
    if isinstance(no, (int, float)):
        no_a = '#{}'.format(str(no))
    elif (no is None):
        no_a = '#NaN'
    else:
        if isinstance(no, H2OVec):
            no_tmp = no._expr.eager()
        else:
            no_tmp = no.key()
        no_a = (("'" + no_tmp) + "'")
    tmp_key = H2OFrame.py_tmp_key()
    expr = '(= !{} (ifelse {} {} {}))'.format(tmp_key, test_a, yes_a, no_a)
    rapids(expr)
    j = frame(tmp_key)
    fr = j['frames'][0]
    rows = fr['rows']
    veckeys = fr['vec_ids']
    cols = fr['columns']
    colnames = [col['label'] for col in cols]
    vecs = H2OVec.new_vecs(zip(colnames, veckeys), rows)
    removeFrameShallow(tmp_key)
    if (yes_tmp is not None):
        removeFrameShallow(str(yes_tmp))
    if (no_tmp is not None):
        removeFrameShallow(str(no_tmp))
    if (test_tmp is not None):
        removeFrameShallow(str(test_tmp))
    return H2OFrame(vecs=vecs)
