def create_frame(key=None, rows=10000, cols=10, randomize=True, value=0, real_range=100, categorical_fraction=0.2, factors=100, integer_fraction=0.2, integer_range=100, binary_fraction=0.1, binary_ones_fraction=0.02, missing_fraction=0.01, response_factors=2, has_response=False, seed=None):
    '\n  Data Frame Creation in H2O.\n  Creates a data frame in H2O with real-valued, categorical, integer, and binary columns specified by the user.\n  :param key: A string indicating the destination key. If empty, this will be auto-generated by H2O.\n  :param rows: The number of rows of data to generate.\n  :param cols: The number of columns of data to generate. Excludes the response column if has_response == True}.\n  :param randomize: A logical value indicating whether data values should be randomly generated. This must be TRUE if\n  either categorical_fraction or integer_fraction is non-zero.\n  :param value: If randomize == FALSE, then all real-valued entries will be set to this value.\n  :param real_range: The range of randomly generated real values.\n  :param categorical_fraction:  The fraction of total columns that are categorical.\n  :param factors: The number of (unique) factor levels in each categorical column.\n  :param integer_fraction: The fraction of total columns that are integer-valued.\n  :param integer_range: The range of randomly generated integer values.\n  :param binary_fraction: The fraction of total columns that are binary-valued.\n  :param binary_ones_fraction: The fraction of values in a binary column that are set to 1.\n  :param missing_fraction: The fraction of total entries in the data frame that are set to NA.\n  :param response_factors: If has_response == TRUE, then this is the number of factor levels in the response column.\n  :param has_response: A logical value indicating whether an additional response column should be pre-pended to the\n  final H2O data frame. If set to TRUE, the total number of columns will be cols+1.\n  :param seed: A seed used to generate random values when randomize = TRUE.\n  :return: the H2OFrame that was created\n  '
    if ((not isinstance(rows, (int, float))) or (rows < 1)):
        raise ValueError('`rows` must be a positive number, but got {0}'.format(rows))
    if ((not isinstance(cols, (int, float))) or (cols < 1)):
        raise ValueError('`cols` must be a positive number, but got {0}'.format(cols))
    if (not isinstance(randomize, bool)):
        raise ValueError('`randomize` must be a True or False, but got {0}'.format(randomize))
    if (not isinstance(value, (int, float))):
        raise ValueError('`value` must be an number, but got {0}'.format(value))
    if (not isinstance(real_range, (int, float))):
        raise ValueError('`real_range` must be a number, but got {0}'.format(real_range))
    if (not isinstance(categorical_fraction, (int, float))):
        raise ValueError('`categorical_fracter` must be a number, but got {0}'.format(categorical_fraction))
    if ((not isinstance(factors, int)) or (factors < 1)):
        raise ValueError('`factors` must be a positive integer, but got {0}'.format(factors))
    if (not isinstance(integer_fraction, (int, float))):
        raise ValueError('`integer_fraction` must be a number, but got {0}'.format(integer_fraction))
    if (not isinstance(integer_range, int)):
        raise ValueError('`integer_range` must be an integer, but got {0}'.format(integer_range))
    if (not isinstance(binary_fraction, (int, float))):
        raise ValueError('`binary_fraction` must be an number, but got {0}'.format(binary_fraction))
    if (not isinstance(binary_ones_fraction, (int, float))):
        raise ValueError('`binary_ones_fraction` must be an number, but got {0}'.format(binary_ones_fraction))
    if (not isinstance(missing_fraction, (int, float))):
        raise ValueError('`missing_fraction` must be an number, but got {0}'.format(missing_fraction))
    if ((not isinstance(response_factors, int)) or (response_factors < 1)):
        raise ValueError('`response_factors` must be a positive integer, but got {0}'.format(response_factors))
    if (not isinstance(has_response, bool)):
        raise ValueError('`has_response` must be True or False, but got {0}'.format(has_response))
    if ((seed != None) and (not isinstance(seed, int))):
        raise ValueError('`seed` must be an integer, but got {0}'.format(seed))
    if ((key == None) or (not isinstance(key, str))):
        dest = H2OFrame.py_tmp_key()
    else:
        dest = key
    kwargs = dict([('dest', dest), ('rows', rows), ('cols', cols), ('randomize', randomize), ('value', value), ('real_range', real_range), ('categorical_fraction', categorical_fraction), ('factors', factors), ('integer_fraction', integer_fraction), ('integer_range', integer_range), ('binary_fraction', binary_fraction), ('binary_ones_fraction', binary_ones_fraction), ('missing_fraction', missing_fraction), ('response_factors', response_factors), ('has_response', has_response), ('seed', (seed if (seed != None) else (-1)))])
    job = {}
    job['job'] = H2OConnection.post_json('CreateFrame', **kwargs)
    H2OJob(job, job_type='Create Frame').poll()
    res = H2OConnection.get_json(('Frames/' + dest))
    res = res['frames'][0]
    colnames = [v['label'] for v in res['columns']]
    veckeys = res['vec_ids']
    vecs = H2OVec.new_vecs(zip(colnames, veckeys), res['rows'])
    return H2OFrame(vecs=vecs)
