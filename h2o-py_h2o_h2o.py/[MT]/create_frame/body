def create_frame(frame_id=None, rows=10000, cols=10, randomize=True, value=0, real_range=100, categorical_fraction=0.2, factors=100, integer_fraction=0.2, integer_range=100, binary_fraction=0.1, binary_ones_fraction=0.02, time_fraction=0, string_fraction=0, missing_fraction=0.01, response_factors=2, has_response=False, seed=None, seed_for_column_types=None):
    u'\n    Create a new frame with random data in H2O.\n\n    Creates a data frame in H2O with real-valued, categorical, integer,\n    and binary columns specified by the user.\n\n    :param frame_id: the destination key. If empty, this will be auto-generated by H2O.\n    :param rows: the number of rows of data to generate.\n    :param cols: the number of columns of data to generate. Excludes the response column if has_response is True.\n    :param randomize: If True, data values will be randomly generated. This must be True if either\n        categorical_fraction or integer_fraction is non-zero.\n    :param value: if randomize is False, then all real-valued entries will be set to this value.\n    :param real_range: the range of randomly generated real values.\n    :param categorical_fraction: the fraction of total columns that are categorical.\n    :param factors: the number of (unique) factor levels in each categorical column.\n    :param integer_fraction: the fraction of total columns that are integer-valued.\n    :param integer_range: the range of randomly generated integer values.\n    :param binary_fraction: the fraction of total columns that are binary-valued.\n    :param binary_ones_fraction: the fraction of values in a binary column that are set to 1.\n    :param time_fraction: the fraction of randomly created date/time columns.\n    :param string_fraction: the fraction of randomly created string columns.\n    :param missing_fraction: the fraction of total entries in the data frame that are set to NA.\n    :param response_factors: if has_response is True, then this is the number of factor levels in the response column.\n    :param has_response: A logical value indicating whether an additional response column should be prepended to the\n        final H2O data frame. If set to True, the total number of columns will be ``cols + 1``.\n    :param seed: a seed used to generate random values when ``randomize`` is True.\n    :param seed_for_column_types: a seed used to generate random column types when ``randomize`` is True.\n\n    :returns: an :class:`H2OFrame` object\n    '
    assert_is_type(frame_id, str, None)
    assert_is_type(rows, int)
    assert_is_type(cols, int)
    assert_is_type(randomize, bool)
    assert_is_type(value, numeric)
    assert_is_type(real_range, numeric)
    assert_is_type(factors, int)
    assert_is_type(integer_range, int)
    assert_is_type(categorical_fraction, numeric)
    assert_is_type(integer_fraction, numeric)
    assert_is_type(binary_fraction, numeric)
    assert_is_type(time_fraction, numeric)
    assert_is_type(string_fraction, numeric)
    assert_is_type(missing_fraction, numeric)
    assert_is_type(response_factors, int, None)
    assert_is_type(has_response, bool)
    assert_is_type(seed, int, None)
    assert_is_type(seed_for_column_types, int, None)
    assert_satisfies(categorical_fraction, (0 <= categorical_fraction <= 1))
    assert_satisfies(integer_fraction, (0 <= integer_fraction <= 1))
    assert_satisfies(binary_fraction, (0 <= binary_fraction <= 1))
    assert_satisfies(time_fraction, (0 <= time_fraction <= 1))
    assert_satisfies(string_fraction, (0 <= string_fraction <= 1))
    assert_satisfies(missing_fraction, (0 <= missing_fraction <= 1))
    assert_satisfies(binary_ones_fraction, (0 <= binary_ones_fraction <= 1))
    if ((categorical_fraction or integer_fraction) and (not randomize)):
        raise H2OValueError(u'`randomize` should be True when either categorical or integer columns are used.')
    if (((((categorical_fraction + integer_fraction) + binary_fraction) + time_fraction) + string_fraction) > 1):
        raise H2OValueError(u'Fractions of binary, integer, categorical, time and string columns should add up to a number less than 1.')
    parms = {u'dest': (py_tmp_key(append=h2oconn.session_id) if (frame_id is None) else frame_id), u'rows': rows, u'cols': cols, u'randomize': randomize, u'value': value, u'real_range': real_range, u'categorical_fraction': categorical_fraction, u'factors': factors, u'integer_fraction': integer_fraction, u'integer_range': integer_range, u'binary_fraction': binary_fraction, u'binary_ones_fraction': binary_ones_fraction, u'time_fraction': time_fraction, u'string_fraction': string_fraction, u'missing_fraction': missing_fraction, u'response_factors': response_factors, u'has_response': has_response, u'seed': ((-1) if (seed is None) else seed), u'seed_for_column_types': ((-1) if (seed_for_column_types is None) else seed_for_column_types), }
    H2OJob(api(u'POST /3/CreateFrame', data=parms), u'Create Frame').poll()
    return get_frame(parms[u'dest'])
