def create_frame(frame_id=None, rows=10000, cols=10, randomize=True, real_fraction=None, categorical_fraction=None, integer_fraction=None, binary_fraction=None, time_fraction=None, string_fraction=None, value=0, real_range=100, factors=100, integer_range=100, binary_ones_fraction=0.02, missing_fraction=0.01, response_factors=2, has_response=False, seed=None, seed_for_column_types=None):
    u'\n    Create a new frame with random data.\n\n    Creates a data frame in H2O with real-valued, categorical, integer, and binary columns specified by the user.\n\n    :param frame_id: the destination key. If empty, this will be auto-generated.\n    :param rows: the number of rows of data to generate.\n    :param cols: the number of columns of data to generate. Excludes the response column if has_response is True.\n    :param randomize: If True, data values will be randomly generated. This must be True if either\n        categorical_fraction or integer_fraction is non-zero.\n    :param value: if randomize is False, then all real-valued entries will be set to this value.\n    :param real_range: the range of randomly generated real values.\n    :param real_fraction: the fraction of columns that are real-valued.\n    :param categorical_fraction: the fraction of total columns that are categorical.\n    :param factors: the number of (unique) factor levels in each categorical column.\n    :param integer_fraction: the fraction of total columns that are integer-valued.\n    :param integer_range: the range of randomly generated integer values.\n    :param binary_fraction: the fraction of total columns that are binary-valued.\n    :param binary_ones_fraction: the fraction of values in a binary column that are set to 1.\n    :param time_fraction: the fraction of randomly created date/time columns.\n    :param string_fraction: the fraction of randomly created string columns.\n    :param missing_fraction: the fraction of total entries in the data frame that are set to NA.\n    :param response_factors: if has_response is True, then this is the number of factor levels in the response column.\n    :param has_response: A logical value indicating whether an additional response column should be prepended to the\n        final H2O data frame. If set to True, the total number of columns will be ``cols + 1``.\n    :param seed: a seed used to generate random values when ``randomize`` is True.\n    :param seed_for_column_types: a seed used to generate random column types when ``randomize`` is True.\n\n    :returns: an :class:`H2OFrame` object\n    '
    t_fraction = U(None, BoundNumeric(0, 1))
    assert_is_type(frame_id, str, None)
    assert_is_type(rows, BoundInt(1))
    assert_is_type(cols, BoundInt(1))
    assert_is_type(randomize, bool)
    assert_is_type(value, numeric)
    assert_is_type(real_range, BoundNumeric(0))
    assert_is_type(real_fraction, t_fraction)
    assert_is_type(categorical_fraction, t_fraction)
    assert_is_type(integer_fraction, t_fraction)
    assert_is_type(binary_fraction, t_fraction)
    assert_is_type(time_fraction, t_fraction)
    assert_is_type(string_fraction, t_fraction)
    assert_is_type(missing_fraction, t_fraction)
    assert_is_type(binary_ones_fraction, t_fraction)
    assert_is_type(factors, BoundInt(1))
    assert_is_type(integer_range, BoundInt(1))
    assert_is_type(response_factors, None, BoundInt(1))
    assert_is_type(has_response, bool)
    assert_is_type(seed, int, None)
    assert_is_type(seed_for_column_types, int, None)
    if ((categorical_fraction or integer_fraction) and (not randomize)):
        raise H2OValueError(u'`randomize` should be True when either categorical or integer columns are used.')
    frcs = [real_fraction, categorical_fraction, integer_fraction, binary_fraction, time_fraction, string_fraction]
    wgts = [0.5, 0.2, 0.2, 0.1, 0.0, 0.0]
    sum_explicit_fractions = sum(((0 if (f is None) else f) for f in frcs))
    count_explicit_fractions = sum(((0 if (f is None) else 1) for f in frcs))
    remainder = (1 - sum_explicit_fractions)
    if (sum_explicit_fractions >= (1 + 1e-10)):
        raise H2OValueError(u'Fractions of binary, integer, categorical, time and string columns should add up to a number less than 1.')
    elif (sum_explicit_fractions >= (1 - 1e-10)):
        pass
    else:
        if (count_explicit_fractions == 6):
            raise H2OValueError(u'Fraction of binary, integer, categorical, time and string columns add up to a number less than 1.')
        sum_implicit_weights = sum(((wgts[i] if (frcs[i] is None) else 0) for i in range(6)))
        for (i, f) in enumerate(frcs):
            if (frcs[i] is not None):
                continue
            if (sum_implicit_weights == 0):
                frcs[i] = remainder
            else:
                frcs[i] = ((remainder * wgts[i]) / sum_implicit_weights)
            remainder -= frcs[i]
            sum_implicit_weights -= wgts[i]
    for (i, f) in enumerate(frcs):
        if (f is None):
            frcs[i] = 0
    (real_fraction, categorical_fraction, integer_fraction, binary_fraction, time_fraction, string_fraction) = frcs
    parms = {u'dest': (frame_id if frame_id else py_tmp_key(append=h2oconn.session_id)), u'rows': rows, u'cols': cols, u'randomize': randomize, u'categorical_fraction': categorical_fraction, u'integer_fraction': integer_fraction, u'binary_fraction': binary_fraction, u'time_fraction': time_fraction, u'string_fraction': string_fraction, u'value': value, u'real_range': real_range, u'factors': factors, u'integer_range': integer_range, u'binary_ones_fraction': binary_ones_fraction, u'missing_fraction': missing_fraction, u'response_factors': response_factors, u'has_response': has_response, u'seed': ((-1) if (seed is None) else seed), u'seed_for_column_types': ((-1) if (seed_for_column_types is None) else seed_for_column_types), }
    H2OJob(api(u'POST /3/CreateFrame', data=parms), u'Create Frame').poll()
    return get_frame(parms[u'dest'])
