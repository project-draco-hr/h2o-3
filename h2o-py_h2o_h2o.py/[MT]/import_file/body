def import_file(path=None, destination_frame=u'', parse=True, header=0, sep=None, col_names=None, col_types=None, na_strings=None):
    u'\n    Import a dataset that is already on the cluster.\n\n    The path to the data must be a valid path for each node in the H2O cluster. If some node in the H2O cluster\n    cannot see the file, then an exception will be thrown by the H2O cluster. Does a parallel/distributed\n    multi-threaded pull of the data. Also see :func:`upload_file`.\n\n    :param path: a path / paths specifying the location of the data to import.\n    :param destination_frame: The unique hex key assigned to the imported file. If none is given, a key will be\n        automatically generated.\n    :param parse: If True, the file should be parsed after import.\n    :param header: -1 means the first line is data, 0 means guess, 1 means first line is header.\n    :param sep: The field separator character. Values on each line of the file are separated by\n        this character. If not provided, the parser will automatically detect the separator.\n    :param col_names: A list of column names for the file.\n    :param col_types: A list of types or a dictionary of column names to types to specify whether columns\n        should be forced to a certain type upon import parsing. If a list, the types for elements that are\n        one will be guessed. The possible types a column may have are:\n        * "unknown" - this will force the column to be parsed as all NA\n        * "uuid"    - the values in the column must be true UUID or will be parsed as NA\n        * "string"  - force the column to be parsed as a string\n        * "numeric" - force the column to be parsed as numeric. H2O will handle the compression of the numeric\n            data in the optimal manner.\n        * "enum"    - force the column to be parsed as a categorical column.\n        * "time"    - force the column to be parsed as a time column. H2O will attempt to parse the following\n            list of date time formats: (date) "yyyy-MM-dd", "yyyy MM dd", "dd-MMM-yy", "dd MMM yy", (time)\n            "HH:mm:ss", "HH:mm:ss:SSS", "HH:mm:ss:SSSnnnnnn", "HH.mm.ss" "HH.mm.ss.SSS", "HH.mm.ss.SSSnnnnnn".\n            Times can also contain "AM" or "PM".\n    :param na_strings: A list of strings, or a list of lists of strings (one list per column), or a dictionary\n        of column names to strings which are to be interpreted as missing values.\n\n    :returns: a new H2OFrame instance.\n    '
    coltype = U(None, u'unknown', u'uuid', u'string', u'float', u'real', u'double', u'int', u'numeric', u'categorical', u'factor', u'enum', u'time')
    natype = U(str, [str])
    assert_is_type(path, str, [str])
    assert_is_type(destination_frame, str)
    assert_is_type(parse, bool)
    assert_is_type(header, (-1), 0, 1)
    assert_is_type(sep, None, I(str, (lambda s: (len(s) == 1))))
    assert_is_type(col_names, [str], None)
    assert_is_type(col_types, [coltype], {str: coltype, }, None)
    assert_is_type(na_strings, [natype], {str: natype, }, None)
    patharr = (path if isinstance(path, list) else [path])
    if any(((os.path.split(p)[0] == u'~') for p in patharr)):
        raise H2OValueError(u'Paths relative to a current user (~) are not valid in the server environment. Please use absolute paths if possible.')
    if (not parse):
        return lazy_import(path)
    else:
        return H2OFrame()._import_parse(path, destination_frame, header, sep, col_names, col_types, na_strings)
