def upload_file(path, destination_frame=u'', header=0, sep=None, col_names=None, col_types=None, na_strings=None):
    u'\n    Upload a dataset from the provided local path to the H2O cluster.\n\n    Does a single-threaded push to H2O. Also see :meth:`import_file`.\n\n    :param path: A path specifying the location of the data to upload.\n    :param destination_frame:  The unique hex key assigned to the imported file. If none is given, a key will\n        be automatically generated.\n    :param header: -1 means the first line is data, 0 means guess, 1 means first line is header.\n    :param sep: The field separator character. Values on each line of the file are separated by\n        this character. If not provided, the parser will automatically detect the separator.\n    :param col_names: A list of column names for the file.\n    :param col_types: A list of types or a dictionary of column names to types to specify whether columns\n        should be forced to a certain type upon import parsing. If a list, the types for elements that are\n        one will be guessed. The possible types a column may have are:\n        * "unknown" - this will force the column to be parsed as all NA\n        * "uuid"    - the values in the column must be true UUID or will be parsed as NA\n        * "string"  - force the column to be parsed as a string\n        * "numeric" - force the column to be parsed as numeric. H2O will handle the compression of the numeric\n            data in the optimal manner.\n        * "enum"    - force the column to be parsed as a categorical column.\n        * "time"    - force the column to be parsed as a time column. H2O will attempt to parse the following\n            list of date time formats: (date) "yyyy-MM-dd", "yyyy MM dd", "dd-MMM-yy", "dd MMM yy", (time)\n            "HH:mm:ss", "HH:mm:ss:SSS", "HH:mm:ss:SSSnnnnnn", "HH.mm.ss" "HH.mm.ss.SSS", "HH.mm.ss.SSSnnnnnn".\n            Times can also contain "AM" or "PM".\n    :param na_strings: A list of strings, or a list of lists of strings (one list per column), or a dictionary\n        of column names to strings which are to be interpreted as missing values.\n\n    :returns: a new H2OFrame instance.\n\n    Examples\n    --------\n      >> h2o.upload_file(path="/path/to/local/data", destination_frame="my_local_data")\n    '
    coltype = U(None, u'unknown', u'uuid', u'string', u'float', u'real', u'double', u'int', u'numeric', u'categorical', u'factor', u'enum', u'time')
    natype = U(str, [str])
    assert_is_type(path, str)
    assert_is_type(destination_frame, str)
    assert_is_type(header, (-1), 0, 1)
    assert_is_type(sep, None, I(str, (lambda s: (len(s) == 1))))
    assert_is_type(col_names, [str], None)
    assert_is_type(col_types, [coltype], {str: coltype, }, None)
    assert_is_type(na_strings, [natype], {str: natype, }, None)
    return H2OFrame()._upload_parse(path, destination_frame, header, sep, col_names, col_types, na_strings)
