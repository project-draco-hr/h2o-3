def svd(x, validation_x=None, nv=None, max_iterations=None, transform=None, seed=None, use_all_factor_levels=None, training_frame=None, validation_frame=None):
    '\n  Singular value decomposition of a H2O dataset using the power method.\n\n  Parameters\n  ----------\n\n  nv : int\n    The number of right singular vectors to be computed. This must be between 1 and min(ncol(training_frame), snrow(training_frame)) inclusive. \n  max_iterations : int\n    The maximum number of iterations to run each power iteration loop. Must be between 1 and\n    1e6 inclusive.max_iterations The maximum number of iterations to run each power iteration loop. Must be between 1\n    and 1e6 inclusive.   \n  transform : str\n    A character string that indicates how the training data should be transformed before running PCA.\n    Possible values are "NONE": for no transformation, "DEMEAN": for subtracting the mean of each column, "DESCALE": for\n    dividing by the standard deviation of each column, "STANDARDIZE": for demeaning and descaling, and "NORMALIZE": for\n    demeaning and dividing each column by its range (max - min).\n  seed : int\n    (Optional) Random seed used to initialize the right singular vectors at the beginning of each power method iteration.\n  use_all_factor_levels : bool\n    (Optional) A logical value indicating whether all factor levels should be included in each categorical column expansion. \n    If FALSE, the indicator column corresponding to the first factor level of every categorical variable will be dropped. Defaults to TRUE.\n  \n \n  :return: a new dim reduction model\n  '
    parms = {k: v for (k, v) in locals().items() if ((k in ['training_frame', 'validation_frame', 'validation_x', 'validation_y', 'offset_column', 'weights_column', 'fold_column']) or (v is not None))}
    parms['algo'] = 'svd'
    parms['_rest_version'] = 99
    return h2o_model_builder.unsupervised(parms)
