def parse(setup, h2o_name, first_line_is_header=((-1), 0, 1)):
    '\n  Trigger a parse; blocking; removeFrame just keep the Vec keys.\n  :param setup: The result of calling parse_setup\n  :param h2o_name: The name of the H2O Frame on the back end.\n  :param first_line_is_header: -1 means data, 0 means guess, 1 means header\n  :return: Return a new parsed object\n  '
    p = {'delete_on_done': True, 'blocking': True, 'removeFrame': True, 'hex': h2o_name, 'ncols': None, 'sep': None, 'pType': None, 'singleQuotes': None, 'checkHeader': None, }
    if isinstance(first_line_is_header, tuple):
        first_line_is_header = 0
    if setup['columnNames']:
        setup['columnNames'] = [_quoted(name) for name in setup['columnNames']]
        p['columnNames'] = None
    p.update({k: v for (k, v) in setup.iteritems() if (k in p)})
    p['checkHeader'] = first_line_is_header
    p['srcs'] = [_quoted(src['name']) for src in setup['srcs']]
    j = H2OJob(H2OConnection.post_json(url_suffix='Parse', **p), 'Parse').poll()
    return j.jobs
