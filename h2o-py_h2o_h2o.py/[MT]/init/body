def init(ip='localhost', port=54321, start_h2o=True, enable_assertions=True, license=None, nthreads=(-1), max_mem_size=None, min_mem_size=None, ice_root=None, strict_version_check=True, proxy=None, https=False, insecure=False, username=None, password=None, max_mem_size_GB=None, min_mem_size_GB=None):
    "Initiate an H2O connection to the specified ip and port.\n\n  Parameters\n  ----------\n  ip : str\n    A string representing the hostname or IP address of the server where H2O is running.\n  port : int\n    A port, default is 54321\n  start_h2o : bool\n    A boolean dictating whether this module should start the H2O jvm. An attempt is made\n    anyways if _connect fails.\n  enable_assertions : bool\n    If start_h2o, pass `-ea` as a VM option.\n  license : str\n    If not None, is a path to a license file.\n  nthreads : int\n    Number of threads in the thread pool. This relates very closely to the number of CPUs used. \n    -1 means use all CPUs on the host. A positive integer specifies the number of CPUs directly. \n    This value is only used when Python starts H2O.\n  max_mem_size : int\n    Maximum heap size (jvm option Xmx) in gigabytes.\n  min_mem_size : int\n    Minimum heap size (jvm option Xms) in gigabytes.\n  ice_root : str\n    A temporary directory (default location is determined by tempfile.mkdtemp()) to hold\n    H2O log files.\n  strict_version_check : bool \n    Setting this to False is unsupported and should only be done when advised by technical support.\n  proxy : dict\n    A dictionary with keys 'ftp', 'http', 'https' and values that correspond to a proxy path.\n  https: bool\n    Set this to True to use https instead of http.\n  insecure: bool\n    Set this to True to disable SSL certificate checking.\n  username : str\n    Username to login with.\n  password : str\n    Password to login with.\n  max_mem_size_GB: DEPRECATED\n    Use max_mem_size instead.\n  min_mem_size_GB: DEPRECATED\n    Use min_mem_size instead.\n  \n\n  Examples\n  --------\n  Using the 'proxy' parameter\n\n  >>> import h2o\n  >>> import urllib\n  >>> proxy_dict = urllib.getproxies()\n  >>> h2o.init(proxy=proxy_dict)\n  Starting H2O JVM and connecting: ............... Connection successful!\n\n  "
    H2OConnection(ip=ip, port=port, start_h2o=start_h2o, enable_assertions=enable_assertions, license=license, nthreads=nthreads, max_mem_size=max_mem_size, min_mem_size=min_mem_size, ice_root=ice_root, strict_version_check=strict_version_check, proxy=proxy, https=https, insecure=insecure, username=username, password=password, max_mem_size_GB=max_mem_size_GB, min_mem_size_GB=min_mem_size_GB)
    return None
