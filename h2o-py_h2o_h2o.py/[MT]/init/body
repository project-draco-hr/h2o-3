def init(ip='localhost', port=54321, size=1, start_h2o=False, enable_assertions=False, license=None, max_mem_size_GB=None, min_mem_size_GB=None, ice_root=None, strict_version_check=True, proxies=None):
    "Initiate an H2O connection to the specified ip and port.\n\n  Parameters\n  ----------\n  ip : str\n    A string representing the hostname or IP address of the server where H2O is running.\n  port : int\n    A port, default is 54321\n  size : int\n    The expected number of h2o instances (ignored if start_h2o is True)\n  start_h2o : bool\n    A boolean dictating whether this module should start the H2O jvm. An attempt is made\n    anyways if _connect fails.\n  enable_assertions : bool\n    If start_h2o, pass `-ea` as a VM option.s\n  license : str\n    If not None, is a path to a license file.\n  max_mem_size_GB : int\n    Maximum heap size (jvm option Xmx) in gigabytes.\n  min_mem_size_GB : int\n    Minimum heap size (jvm option Xms) in gigabytes.\n  ice_root : str\n    A temporary directory (default location is determined by tempfile.mkdtemp()) to hold\n    H2O log files.\n  proxies : dict\n    A dictionary with keys 'ftp', 'http', 'https' and values that correspond to a proxy\n    path.\n\n  Examples\n  --------\n  Using the 'proxies' parameter\n\n  >>> import h2o\n  >>> import urllib\n  >>> proxy_dict = urllib.getproxies()\n  >>> h2o.init(proxies=proxy_dict)\n  Starting H2O JVM and connecting: ............... Connection successful!\n\n  "
    H2OConnection(ip=ip, port=port, start_h2o=start_h2o, enable_assertions=enable_assertions, license=license, max_mem_size_GB=max_mem_size_GB, min_mem_size_GB=min_mem_size_GB, ice_root=ice_root, strict_version_check=strict_version_check, proxies=proxies)
    return None
