def init(ip=u'localhost', port=54321, https=False, insecure=False, username=None, password=None, cluster_name=None, proxy=None, start_h2o=True, nthreads=(-1), ice_root=None, enable_assertions=True, max_mem_size=None, min_mem_size=None, strict_version_check=True, **kwargs):
    u'DEPRECATED. Use h2o.start() or h2o.connect() instead.'
    scheme = (u'https' if https else u'http')
    proxy = (proxy[scheme] if ((proxy is not None) and (scheme in proxy)) else (kwargs[u'proxies'][scheme] if ((u'proxies' in kwargs) and (scheme in kwargs[u'proxies'])) else None))
    mmax = (int(max_mem_size) if (max_mem_size is not None) else ((kwargs[u'max_mem_size_GB'] << 30) if (u'max_mem_size_GB' in kwargs) else None))
    mmin = (int(min_mem_size) if (min_mem_size is not None) else ((kwargs[u'min_mem_size_GB'] << 30) if (u'min_mem_size_GB' in kwargs) else None))
    try:
        connect(ip=ip, port=port, https=https, verify_ssl_cert=(not insecure), auth=(username, password), proxy=proxy, cluster_name=cluster_name, verbose=True)
    except H2OConnectionError:
        if start_h2o:
            start(nthreads=nthreads, enable_assertions=enable_assertions, max_mem_size=mmax, min_mem_size=mmin, ice_root=ice_root)
        else:
            raise
    if strict_version_check:
        version_check()
