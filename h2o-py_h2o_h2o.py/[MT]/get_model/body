def get_model(model_id):
    u'\n    Return the specified model.\n\n    :param model_id: The model identification in h2o\n\n    :returns: Subclass of H2OEstimator\n    '
    assert_is_type(model_id, str)
    model_json = api((u'GET /3/Models/%s' % model_id))[u'models'][0]
    algo = model_json[u'algo']
    if (algo == u'svd'):
        m = H2OSVD()
    elif (algo == u'pca'):
        m = H2OPCA()
    elif (algo == u'drf'):
        m = H2ORandomForestEstimator()
    elif (algo == u'naivebayes'):
        m = H2ONaiveBayesEstimator()
    elif (algo == u'kmeans'):
        m = H2OKMeansEstimator()
    elif (algo == u'glrm'):
        m = H2OGeneralizedLowRankEstimator()
    elif (algo == u'glm'):
        m = H2OGeneralizedLinearEstimator()
    elif (algo == u'gbm'):
        m = H2OGradientBoostingEstimator()
    elif (algo == u'deeplearning'):
        if (model_json[u'output'][u'model_category'] == u'AutoEncoder'):
            m = H2OAutoEncoderEstimator()
        else:
            m = H2ODeepLearningEstimator()
    else:
        raise ValueError((u'Unknown algo type: ' + algo))
    m._resolve_model(model_id, model_json)
    return m
