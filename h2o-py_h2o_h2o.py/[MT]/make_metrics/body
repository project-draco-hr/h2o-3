def make_metrics(predicted, actual, domain=None, distribution=None):
    u'\n    Create Model Metrics from predicted and actual values in H2O.\n\n    :params H2OFrame predicted: an H2OFrame containing predictions.\n    :params H2OFrame actuals: an H2OFrame containing actual values.\n    :params domain: list of response factors for classification.\n    :params distribution: distribution for regression.\n    '
    assert_is_type(predicted, H2OFrame)
    assert_is_type(actual, H2OFrame)
    assert (actual.ncol == 1), u'`actual` frame should have exactly 1 column'
    assert_is_type(distribution, str, None)
    assert_satisfies(actual.ncol, (actual.ncol == 1))
    if ((domain is None) and any(actual.isfactor())):
        domain = actual.levels()[0]
    res = api((u'POST /3/ModelMetrics/predictions_frame/%s/actuals_frame/%s' % (predicted.frame_id, actual.frame_id)), data={u'domain': domain, u'distribution': distribution, })
    return res[u'model_metrics']
