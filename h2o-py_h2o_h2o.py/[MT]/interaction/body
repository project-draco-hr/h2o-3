def interaction(data, factors, pairwise, max_factors, min_occurrence, destination_frame=None):
    '\n  Categorical Interaction Feature Creation in H2O.\n  Creates a frame in H2O with n-th order interaction features between categorical columns, as specified by\n  the user.\n  :param data: the H2OFrame that holds the target categorical columns.\n  :param factors: factors Factor columns (either indices or column names).\n  :param pairwise: Whether to create pairwise interactions between factors (otherwise create one\n  higher-order interaction). Only applicable if there are 3 or more factors.\n  :param max_factors: Max. number of factor levels in pair-wise interaction terms (if enforced, one extra catch-all\n  factor will be made)\n  :param min_occurrence: Min. occurrence threshold for factor levels in pair-wise interaction terms\n  :param destination_frame: A string indicating the destination key. If empty, this will be auto-generated by H2O.\n  :return: H2OFrame\n  '
    if (not (False in [isinstance(f, int) for f in factors])):
        factors = [data.names()[n] for n in factors]
    elif (False in [isinstance(f, str) for f in factors]):
        raise ValueError('`factors` argument must be a list of integers or column names (strings), but got {0}'.format(factors))
    if (factors == []):
        raise ValueError('no factors were provided')
    if (max_factors < 1):
        raise ValueError('max_factors cannot be < 1')
    if (not isinstance(max_factors, (int, float))):
        raise ValueError('max_factors must be a numeric value')
    if (min_occurrence < 1):
        raise ValueError('min_occurrence cannot be < 1')
    if (not isinstance(min_occurrence, (int, float))):
        raise ValueError('min_occurrence must be a numeric value')
    if ((destination_frame == None) or (not isinstance(destination_frame, str))):
        dest = H2OFrame.py_tmp_key()
    source_frame = H2OFrame.send_frame(data)
    factor_columns = [(('"' + f) + '"') for f in factors]
    kwargs = dict([('dest', dest), ('source_frame', source_frame), ('factor_columns', factor_columns), ('pairwise', pairwise), ('max_factors', max_factors), ('min_occurrence', min_occurrence)])
    job = {}
    job['job'] = H2OConnection.post_json('Interaction', **kwargs)
    H2OJob(job, job_type='Make Interactions Frame').poll()
    res = H2OConnection.get_json(('Frames/' + dest))
    res = res['frames'][0]
    colnames = [v['label'] for v in res['columns']]
    veckeys = res['vec_ids']
    vecs = H2OVec.new_vecs(zip(colnames, veckeys), res['rows'])
    removeFrameShallow(source_frame)
    return H2OFrame(vecs=vecs)
