def start(jar_path=None, nthreads=(-1), enable_assertions=True, max_mem_size=None, min_mem_size=None, ice_root=None, port=u'54321+', verbose=True):
    u"\n    Start a new local H\u2082O server.\n\n    This server object can then be passed to `h2o.connect()` to connect to that server; or you can launch multiple\n    local servers and connect to only one of them. The servers will connect into a cloud.\n    :param jar_path: Path to the h2o.jar executable (if not given, we'll try to autodetect).\n    :param nthreads: Number of threads in the server's thread pool, or -1 to set to the number of CPUs.\n    :param enable_assertions: If True, then the server will start with the -ea JVM option (enabling code assertions).\n    :param max_mem_size: Maximum heap size (jvm option Xmx), in bytes.\n    :param min_mem_size: Minimum heap size (jvm option Xms), in bytes.\n    :param ice_root: A temporary directory where H\u2082O log files will be placed. If not specified, then the folder will\n        be chosen by `tempfile.mkdtemp()`.\n    :param port: Port that the server should start listening to.\n    :param verbose: Whether to print connection progress messages to the stdout or not.\n    :return:\n    "
    return H2OLocalServer.start(**locals())
