def get_grid(grid_id):
    u'Return the specified grid.\n\n    Parameters\n    ----------\n      grid_id : str\n        The grid identification in h2o\n\n    Returns\n    -------\n      H2OGridSearch instance\n    '
    grid_json = api((u'GET /99/Grids/%s' % grid_id))
    models = [get_model(key[u'name']) for key in grid_json[u'model_ids']]
    first_model_json = api((u'GET /3/Models/%s' % grid_json[u'model_ids'][0][u'name']))[u'models'][0]
    gs = H2OGridSearch(None, {}, grid_id)
    gs._resolve_grid(grid_id, grid_json, first_model_json)
    gs.models = models
    hyper_params = {param: set() for param in gs.hyper_names}
    for param in gs.hyper_names:
        for model in models:
            hyper_params[param].add(model.full_parameters[param][u'actual_value'][0])
    hyper_params = {str(param): list(vals) for (param, vals) in hyper_params.items()}
    gs.hyper_params = hyper_params
    gs.model = model.__class__()
    return gs
