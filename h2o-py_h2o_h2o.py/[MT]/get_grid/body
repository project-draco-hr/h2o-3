def get_grid(grid_id):
    'Return the specified grid\n\n  Parameters\n  ----------\n    grid_id : str\n      The grid identification in h2o\n\n  Returns\n  -------\n    H2OGridSearch instance\n  '
    grid_json = H2OConnection.get_json(('Grids/' + grid_id), _rest_version=99)
    models = [get_model(key['name']) for key in grid_json['model_ids']]
    first_model_json = H2OConnection.get_json(('Models/' + grid_json['model_ids'][0]['name']), _rest_version=99)['models'][0]
    gs = H2OGridSearch(None, {}, grid_id)
    gs._resolve_grid(grid_id, grid_json, first_model_json)
    gs.models = models
    hyper_params = {param: set() for param in gs.hyper_names}
    for param in gs.hyper_names:
        for model in models:
            hyper_params[param].add(model.full_parameters[param][u'actual_value'][0])
    hyper_params = {str(param): list(vals) for (param, vals) in hyper_params.items()}
    gs.hyper_params = hyper_params
    gs.model = model.__class__()
    return gs
