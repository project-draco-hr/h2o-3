def random_forest(x, y, validation_x=None, validation_y=None, training_frame=None, model_id=None, mtries=None, sample_rate=None, build_tree_one_node=None, ntrees=None, max_depth=None, min_rows=None, nbins=None, nbins_cats=None, binomial_double_trees=None, validation_frame=None, balance_classes=None, max_after_balance_size=None, seed=None, offset_column=None, weights_column=None, nfolds=None, fold_column=None, fold_assignment=None, keep_cross_validation_predictions=None, checkpoint=None):
    '\n  Build a Big Data Random Forest Model\n  Builds a Random Forest Model on an H2OFrame\n\n  :param x: An H2OFrame containing the predictors in the model.\n  :param y: An H2OFrame of the response variable in the model.\n  :param training_frame: (Optional) An H2OFrame. Only used to retrieve weights, offset, or nfolds columns, if they aren\'t already provided in x.\n  :param model_id: (Optional) The unique id assigned to the resulting model. If none is given, an id will automatically be generated.\n  :param mtries: Number of variables randomly sampled as candidates at each split. If set to -1, defaults to sqrt{p} for classification, and p/3 for regression, where p is the number of predictors.\n  :param sample_rate: Sample rate, from 0 to 1.0.\n  :param build_tree_one_node: Run on one node only; no network overhead but fewer cpus used.  Suitable for small datasets.\n  :param ntrees: A nonnegative integer that determines the number of trees to grow.\n  :param max_depth: Maximum depth to grow the tree.\n  :param min_rows: Minimum number of rows to assign to teminal nodes.\n  :param nbins: For numerical columns (real/int), build a histogram of this many bins, then split at the best point.\n  :param nbins_cats: For categorical columns (enum), build a histogram of this many bins, then split at the best point. Higher values can lead to more overfitting.\n  :param binomial_double_trees: For binary classification: Build 2x as many trees (one per class) - can lead to higher accuracy.\n  :param validation_frame: An H2OFrame object containing the variables in the model.\n  :param balance_classes: logical, indicates whether or not to balance training data class counts via over/under-sampling (for imbalanced data)\n  :param max_after_balance_size: Maximum relative size of the training data after balancing class counts (can be less than 1.0)\n  :param seed: Seed for random numbers (affects sampling) - Note: only reproducible when running single threaded\n  :param offset_column: Specify the offset column.\n  :param weights_column: Specify the weights column.\n  :param nfolds: (Optional) Number of folds for cross-validation. If nfolds >= 2, then validation must remain empty.\n  :param fold_column: (Optional) Column with cross-validation fold index assignment per observation\n  :param fold_assignment: Cross-validation fold assignment scheme, if fold_column is not specified Must be "AUTO", "Random" or "Modulo"\n  :param keep_cross_validation_predictions: Whether to keep the predictions of the cross-validation models\n  :return: A new classifier or regression model.\n  '
    parms = {k: v for (k, v) in locals().items() if ((k in ['training_frame', 'validation_frame', 'validation_x', 'validation_y', 'offset_column', 'weights_column', 'fold_column']) or (v is not None))}
    parms['algo'] = 'drf'
    return h2o_model_builder.supervised(parms)
