def test_billion_rows(self):
    timeoutSecs = 1500
    csvFilenameAll = ['billion_rows.csv.gz']
    csvFilenameList = csvFilenameAll
    for csvFilename in csvFilenameList:
        start = time.time()
        parseResult = h2i.import_parse(bucket='home-0xdiag-datasets', path=('standard/' + csvFilename), timeoutSecs=timeoutSecs, pollTimeoutSecs=60)
        elapsed = (time.time() - start)
        print csvFilename, 'completed in', elapsed, 'seconds.', ('%d pct. of timeout' % ((elapsed * 100) / timeoutSecs))
        (numRows, numCols, parse_key) = h2o_cmd.infoFromParse(parseResult)
        inspect = h2o_cmd.runInspect(key=parse_key)
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspectResult)
        parameters = {'response_column': 1, 'n_folds': 0, 'alpha': 0, 'lambda': 0, }
        model_key = 'B.hex'
        bmResult = h2o.n0.build_model(algo='glm', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=10)
        bm = OutputObj(bmResult, 'bm')
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        h2o_glm.simpleCheckGLM(self, model, parameters, labelList, labelListUsed)
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mm = OutputObj(mmResult, 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
        h2o_cmd.runStoreView()
        labelListUsed = labelList
        h2o_glm.simpleCheckGLM(self, model, parameters, labelList, labelListUsed)
