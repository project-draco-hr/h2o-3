def __init__(self, dataset, x, ntrees=50, shrinkage=0.1, interaction_depth=5, distribution='AUTO'):
    if (not isinstance(dataset, H2OFrame)):
        raise ValueError(('dataset must be a H2OFrame not ' + str(type(dataset))))
    self.dataset = dataset
    if (not dataset[x]):
        raise ValueError(((x + ' must be column in ') + str(dataset)))
    self.x = x
    if (not (0 <= ntrees <= 1000000)):
        raise ValueError('ntrees must be between 0 and a million')
    self.ntrees = ntrees
    if (not (0.0 <= shrinkage <= 1.0)):
        raise ValueError('shrinkage must be between 0 and 1')
    self.shrinkage = 0.1
    if (not (1 <= interaction_depth)):
        raise ValueError('interaction_depth must be at least 1')
    self.interaction_depth = interaction_depth
    self.distribution = distribution
    fr = _py_tmp_key()
    cbind = (('(= !' + fr) + ' (cbind ')
    for vec in dataset._vecs:
        cbind += (('%' + vec._expr.eager()) + ' ')
    cbind += '))'
    H2OCONN.Rapids(cbind)
    colnames = (((('(colnames= %' + fr) + ' {(: #0 #') + str((len(dataset._vecs) - 1))) + ')} {')
    for vec in dataset._vecs:
        colnames += (vec._name + ';')
    colnames = (colnames[:(-1)] + '})')
    H2OCONN.Rapids(colnames)
    j = H2OCONN.GBM(distribution, shrinkage, ntrees, interaction_depth, x, fr)
    H2OCONN.Remove(fr)
