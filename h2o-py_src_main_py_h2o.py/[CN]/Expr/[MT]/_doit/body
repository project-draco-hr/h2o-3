def _doit(self):
    if self.isComputed():
        return
    assign_vec = (self._left._left if ((self._op == '=') and (self._left._op == '[')) else None)
    global _CMD
    cnt = (sys.getrefcount(self) - 1)
    py_tmp = ((cnt != 4) and (self._len > 1) and (not assign_vec))
    if py_tmp:
        self._data = _py_tmp_key()
        _CMD += (('(= !' + self._data) + ' ')
    _CMD += (('(' + self._op) + ' ')
    left = self._left
    if left:
        if left.isPending():
            left._doit()
        elif isinstance(left._data, (int, float)):
            _CMD += ('#' + str(left._data))
        elif isinstance(left._data, unicode):
            _CMD += ('%' + str(left._data))
        else:
            pass
    _CMD += ' '
    rite = self._rite
    if rite:
        if rite.isPending():
            rite._doit()
        elif isinstance(rite._data, (int, float)):
            _CMD += ('#' + str(rite._data))
        elif isinstance(rite._data, unicode):
            _CMD += ('%' + str(rite._data))
        else:
            pass
    if (self._op == '+'):
        if isinstance(left._data, (int, float)):
            if isinstance(rite._data, (int, float)):
                self._data = (left + rite)
            elif rite.isLocal():
                self._data = [(left + x) for x in rite._data]
            else:
                pass
        elif isinstance(rite._data, (int, float)):
            if left.isLocal():
                self._data = [(x + rite) for x in left._data]
            else:
                pass
        elif (left.isLocal() and rite.isLocal()):
            self._data = [(x + y) for (x, y) in zip(left._data, rite._data)]
        elif ((left.isRemote() or (left._data is None)) and (rite.isRemote() or (rite._data is None))):
            pass
        else:
            raise NotImplementedError
    elif (self._op == '=='):
        if isinstance(left._data, (int, float)):
            raise NotImplementedError
        elif isinstance(rite._data, (int, float)):
            if left.isLocal():
                self._data = [(x == rite._data) for x in left._data]
            else:
                pass
        else:
            raise NotImplementedError
    elif (self._op == '['):
        if left.isLocal():
            self._data = left._data[rite._data]
        else:
            _CMD += ' "null"'
    elif (self._op == '='):
        if left.isLocal():
            raise NotImplementedError
        elif (rite is None):
            _CMD += '#NaN'
    elif (self._op == 'mean'):
        if left.isLocal():
            self._data = (sum(left._data) / len(left._data))
        else:
            _CMD += ' #0 %TRUE'
    elif (self._op == 'as.factor'):
        if left.isLocal():
            self._data = map(str, left._data)
        else:
            pass
    else:
        raise NotImplementedError
    _CMD += ')'
    if py_tmp:
        _CMD += ')'
    self._left = None
    self._rite = None
    if assign_vec:
        if (assign_vec._op != 'rawdata'):
            raise NotImplementedError
        self._left = assign_vec
        self._data = assign_vec._data
    return
