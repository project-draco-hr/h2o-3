{
  if (s == null)   return;
  try {
    BufferedReader reader=new BufferedReader(new StringReader(s));
    String line=reader.readLine();
{
      Pattern p=Pattern.compile("cpu\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+).*");
      Matcher m=p.matcher(line);
      boolean b=m.matches();
      if (!b) {
        return;
      }
      long systemUserTicks=Long.parseLong(m.group(1));
      long systemNiceTicks=Long.parseLong(m.group(2));
      long systemSystemTicks=Long.parseLong(m.group(3));
      _systemIdleTicks=Long.parseLong(m.group(4));
      _systemTotalTicks=systemUserTicks + systemNiceTicks + systemSystemTicks+ _systemIdleTicks;
    }
    _cpuTicks=new ArrayList<long[]>();
    line=reader.readLine();
    while (line != null) {
      Pattern p=Pattern.compile("cpu(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+)\\s+(\\d+).*");
      Matcher m=p.matcher(line);
      boolean b=m.matches();
      if (!b) {
        break;
      }
      long cpuUserTicks=0;
      long cpuSystemTicks=0;
      long cpuOtherTicks=0;
      long cpuIdleTicks=0;
      cpuUserTicks+=Long.parseLong(m.group(2));
      cpuOtherTicks+=Long.parseLong(m.group(3));
      cpuSystemTicks+=Long.parseLong(m.group(4));
      cpuIdleTicks+=Long.parseLong(m.group(5));
      cpuOtherTicks+=Long.parseLong(m.group(6));
      cpuSystemTicks+=Long.parseLong(m.group(7));
      cpuSystemTicks+=Long.parseLong(m.group(8));
      long[] oneCpuTicks={cpuUserTicks,cpuSystemTicks,cpuOtherTicks,cpuIdleTicks};
      _cpuTicks.add(oneCpuTicks);
      line=reader.readLine();
    }
  }
 catch (  Exception ignore) {
  }
}
