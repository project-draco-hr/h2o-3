{
  QuantileModel.QuantileParameters parms=new QuantileModel.QuantileParameters();
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  Frame fr_wkey=new Frame(fr);
  DKV.put(fr_wkey);
  parms._train=fr_wkey._key;
  parms._probs=((ASTNumList)asts[2]).expand();
  for (  double d : parms._probs)   if (d < 0 || d > 1)   throw new IllegalArgumentException("Probability must be between 0 and 1: " + d);
  String inter=asts[3].exec(env).getStr();
  parms._combine_method=QuantileModel.CombineMethod.valueOf(inter.toUpperCase());
  parms._weights_column=asts[4].str().equals("_") ? null : asts[4].str();
  QuantileModel q=new Quantile(parms).trainModel().get();
  DKV.remove(fr_wkey._key);
  int ncols=fr.numCols();
  if (parms._weights_column != null)   ncols--;
  Vec[] vecs=new Vec[1 + ncols];
  String[] names=new String[vecs.length];
  vecs[0]=Vec.makeCon(null,parms._probs);
  names[0]="Probs";
  int w=0;
  for (int i=0; i < vecs.length - 1; ++i) {
    if (fr._names[i].equals(parms._weights_column))     w=1;
    assert(w == 0 || w == 1);
    vecs[i + 1]=Vec.makeCon(null,q._output._quantiles[i]);
    names[i + 1]=fr._names[w + i] + "Quantiles";
  }
  q.delete();
  return new ValFrame(new Frame(names,vecs));
}
