def cv_carsGBM(ip, port):
    cars = h2o.import_frame(path=h2o.locate('smalldata/junit/cars_20mpg.csv'))
    problem = random.sample(range(3), 1)[0]
    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']
    if (problem == 1):
        response_col = 'economy_20mpg'
        distribution = 'bernoulli'
        cars[response_col] = cars[response_col].asfactor()
    elif (problem == 2):
        response_col = 'cylinders'
        distribution = 'multinomial'
        cars[response_col] = cars[response_col].asfactor()
    else:
        response_col = 'economy'
        distribution = 'gaussian'
    print 'Distribution: {0}'.format(distribution)
    print 'Response column: {0}'.format(response_col)
    nfolds = random.randint(3, 10)
    gbm1 = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, distribution=distribution, fold_assignment='Modulo')
    gbm2 = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, distribution=distribution, fold_assignment='Modulo')
    h2o.check_models(gbm1, gbm2, True)
    nfolds = random.randint(3, 10)
    gbm1 = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, distribution=distribution, fold_assignment='Random')
    gbm2 = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=nfolds, distribution=distribution, fold_assignment='Random')
    try:
        h2o.check_models(gbm1, gbm2, True)
        assert False, 'Expected models to be different over repeated Random runs'
    except AssertionError:
        assert True
    gbm = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=cars.nrow(), distribution=distribution, fold_assignment='Modulo')
    gbm1 = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=0, distribution=distribution)
    gbm2 = h2o.gbm(y=cars[response_col], x=cars[predictors], distribution=distribution)
    h2o.check_models(gbm1, gbm2)
    gbm = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=random.randint(3, 10), validation_y=cars[response_col], validation_x=cars[predictors], distribution=distribution)
    try:
        gbm = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=random.randint((-10000), (-1)), distribution=distribution)
        gbm = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=1, distribution=distribution)
        assert False, 'Expected model-build to fail when nfolds is 1 or < 0'
    except EnvironmentError:
        assert True
    try:
        gbm = h2o.gbm(y=cars[response_col], x=cars[predictors], nfolds=(cars.nrow() + 1), distribution=distribution, fold_assignment='Modulo')
        assert False, 'Expected model-build to fail when nfolds > nobs'
    except EnvironmentError:
        assert True
