def test_parse_time(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_time.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = None
    colCount = COLS
    rowCount = ROWS
    write_syn_dataset(csvPathname, rowCount, colCount, headerData)
    for trial in range(20):
        rowData = rand_rowData()
        hex_key = (((csvFilename + '_') + str(trial)) + '.hex')
        parseResultA = h2i.import_parse(path=csvPathname, schema='local', hex_key=hex_key)
        print 'A trial #', trial
        pA = h2o_cmd.ParseObj(parseResultA, expectedNumRows=rowCount, expectedNumCols=colCount)
        print pA.numRows
        print pA.numCols
        print pA.parse_key
        iA = h2o_cmd.InspectObj(pA.parse_key, expectedNumRows=rowCount, expectedNumCols=colCount, expectedMissinglist=[])
        csvDownloadPathname = (SYNDATASETS_DIR + '/csvDownload.csv')
        h2o.nodes[0].csv_download(key=pA.parse_key, csvPathname=csvDownloadPathname)
        if (1 == 0):
            h2o.nodes[0].remove_key(pA.parse_key)
        parseResultB = h2i.import_parse(path=csvDownloadPathname, schema='put', hex_key=hex_key)
        print 'B trial #', trial
        pB = h2o_cmd.ParseObj(parseResultB, expectedNumRows=rowCount, expectedNumCols=colCount)
        print pB.numRows
        print pB.numCols
        print pB.parse_key
        iB = h2o_cmd.InspectObj(pB.parse_key, expectedNumRows=rowCount, expectedNumCols=colCount, expectedMissinglist=[])
        self.assertEqual(iA.missingList, iB.missingList, 'missingValuesList mismatches after re-parse of downloadCsv result')
        self.assertEqual(iA.numCols, iB.numCols, 'numCols mismatches after re-parse of downloadCsv result')
        self.assertEqual(iA.numRows, iB.numRows, ('pA.numRows: %s pB.numRows: %s mismatch after re-parse of downloadCsv result' % (iA.numRows, iB.numRows)))
        print 'H2O writes the internal format (number) out for time.'
        h2o.check_sandbox_for_errors()
