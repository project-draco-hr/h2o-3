{
  Frame adaptFrm=new Frame(adaptedFr);
  for (int i=0; i < _parms._nv; i++)   adaptFrm.add("PC" + String.valueOf(i + 1),adaptFrm.anyVec().makeZero());
  new MRTask(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[_output._names.length];
      double preds[]=new double[_parms._nv];
      for (int row=0; row < chks[0]._len; row++) {
        double p[]=score0(chks,row,tmp,preds);
        for (int c=0; c < preds.length; c++)         chks[_output._names.length + c].set(row,p[c]);
      }
    }
  }
.doAll(adaptFrm);
  int x=_output._names.length, y=adaptFrm.numCols();
  Frame f=adaptFrm.extractFrame(x,y);
  f=new Frame((null == destination_key ? Key.make() : Key.make(destination_key)),f.names(),f.vecs());
  DKV.put(f);
  makeMetricBuilder(null).makeModelMetrics(this,orig,null);
  return f;
}
