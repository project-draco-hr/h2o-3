import sys
import os
import json
import pickle
import copy
import subprocess
'\nIn summary, this script given a jenkins job full console url and a summary log filename will\n1. scrape the console output log, all unit tests outputs and all java_*_0.out.txt of the\n   latest build.\n2. From all the logs, it will generate potentially two log files: jenkins_job_name_build_number_failed_tests.log\n   and jenkins_job_name_build_number_passed_tests.log.  Inside each log file, it contains the job name, build number,\n   timestamp, git hash, git branch, node name, build failure and build timeout information.  In addition, it will list\n   unit tests that failed/passed with the corresponding java WARN/ERRR/FATAL/STACKTRACE messages associated with the unit tests.\n3. Users can choose to ignore certain java messages that are deemed okay.  These ignored java messages are stored in a pickle\n   file with a default name and location.  However, if the user wants to use their own ignored java messages, they can do\n   so by specifying a third optional argument to this script as the name to where their own personal pickle file name.\n4. If there are okay ignored java messages stored in a pickle file, this script will not grab them and store them in\n   any log files.\n5. For details on how to generate ignore java messages and save them to a pickle file, please see addjavamessage2ignore.py.\n'
g_test_root_dir = os.path.dirname(os.path.realpath(__file__))
g_script_name = ''
g_node_name = 'Building remotely on'
g_git_hash_branch = 'Checking out Revision'
g_build_timeout = 'Build timed out'
g_build_success = ['Finished: SUCCESS', 'BUILD SUCCESSFUL']
g_build_success_tests = ['generate_rest_api_docs.py', 'generate_java_bindings.py']
g_build_id_text = 'Build id is'
g_view_name = ''
g_temp_filename = os.path.join(g_test_root_dir, 'tempText')
g_output_filename_failed_tests = os.path.join(g_test_root_dir, 'failedMessage_failed_tests.log')
g_output_filename_passed_tests = os.path.join(g_test_root_dir, 'failedMessage_passed_tests.log')
g_output_pickle_filename = os.path.join(g_test_root_dir, 'failedMessage.pickle.log')
g_failed_test_info_dict = {}
g_failed_test_info_dict['7.build_failure'] = 'No'
g_weekdays = 'Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday'
g_months = 'January, Feburary, March, May, April, May, June, July, August, September, October, November, December'
g_failure_occurred = False
g_failed_jobs = []
g_failed_job_java_message_types = []
g_failed_job_java_messages = []
g_success_jobs = []
g_success_job_java_message_types = []
g_success_job_java_messages = []
g_before_java_file = ['H2O Cloud', 'Node', 'started with output file']
g_java_filenames = []
g_java_message_type = ['WARN:', ':WARN:', 'ERRR:', 'FATAL:', 'TRACE:']
g_all_java_message_type = ['WARN:', ':WARN:', 'ERRR:', 'FATAL:', 'TRACE:', 'DEBUG:', 'INFO:']
g_java_general_bad_message_types = []
g_java_general_bad_messages = []
g_jenkins_url = ''
g_toContinue = False
g_current_testname = ''
g_java_start_text = 'STARTING TEST:'
g_ok_java_messages = {}
g_java_message_pickle_filename = 'bad_java_messages_to_exclude.pickle'
g_build_failed_message = ['Finished: FAILURE'.lower(), 'BUILD FAILED'.lower()]
g_summary_text_filename = ''
'\nThe sole purpose of this function is to enable us to be able to call\nany function that is specified as the first argument using the argument\nlist specified in second argument.\n'
'\nThis function is written to remove extra characters before the actual string we are\nlooking for.  The Jenkins console output is encoded using utf-8.  However, the stupid\nredirect function can only encode using ASCII.  I have googled for half a day with no\nresults to how.  Hence, we are going to the heat and just manually get rid of the junk.\n'
'\nFunction find_time is written to extract the timestamp when a job is built.\n'
g_build_func_list = [find_time, find_node_name, find_build_id, find_git_hash_branch, find_build_timeout, find_build_failure, find_java_filename]
'\nThis function is written to extract the error messages from console output and\npossible from the java_*_*.out to warn users of potentially bad runs.\n\n'
'\nThis function is written to extract the console output that has already been stored\nin a text file in a remote place and saved it in a local directory that we have accessed\nto.  We want to be able to read in the local text file and proces it.\n'
if (__name__ == '__main__'):
    main(sys.argv)
