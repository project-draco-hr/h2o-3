def poll_job2(self, firstResult, algo=None, timeoutSecs=60, noPoll=False, **kwargs):
    if noPoll:
        result = firstResult
    elif ('validation_error_count' in firstResult):
        h2p.yellow_print(('parameter error in %s' % algo))
        result = firstResult
    else:
        job_result = result1['jobs'][0]
        job_key = job_result['key']['name']
        verboseprint(('%s job_key: %s' % (algo, job_key)))
        job_result = self.poll_job(job_key, timeoutSecs=timeoutSecs)
        verboseprint(job_result)
        elapsed = (time.time() - start)
        print algo, ' end on ', training_frame, 'took', (time.time() - start), 'seconds'
        print ('%d pct. of timeout' % ((elapsed / timeoutSecs) * 100))
        if job_result:
            jobs = job_result['jobs'][0]
            description = jobs['description']
            dest = jobs['dest']
            msec = jobs['msec']
            status = jobs['status']
            progress = jobs['progress']
            if (status == 'FAILED'):
                print dump_json(job_result)
                raise Exception(('Taking exception on %s job status: %s %s %s %s' % (algo, status, progress, msec, description)))
            result = job_result
        else:
            raise Exception("build_model didn't get a job_result when it expected one")
    verboseprint('result:', result)
    h2o_sandbox.check_sandbox_for_errors()
    return result
