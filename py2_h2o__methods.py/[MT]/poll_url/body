def poll_url(self, response, timeoutSecs=10, retryDelaySecs=0.5, initialDelaySecs=0, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, reuseFirstPollUrl=False, noPrint=False):
    verboseprint('poll_url input: response:', dump_json(response))

    def get_redirect_url(response):
        url = None
        params = None
        if ('response_info' in response):
            response_info = response['response_info']
            if ('redirect_url' not in response_info):
                raise Exception(("Response during polling must have 'redirect_url'\n%s" % dump_json(response)))
            if (response_info['status'] != 'done'):
                redirect_url = response_info['redirect_url']
                if redirect_url:
                    url = self.url(redirect_url)
                    params = None
                elif (response_info['status'] != 'done'):
                    raise Exception(("'redirect_url' during polling is null but status!='done': \n%s" % dump_json(response)))
        else:
            if ('response' not in response):
                raise Exception(("'response' not in response.\n%s" % dump_json(response)))
            if (response['response']['status'] != 'done'):
                if ('redirect_request' not in response['response']):
                    raise Exception(("'redirect_request' not in response. \n%s" % dump_json(response)))
                url = self.url(response['response']['redirect_request'])
                params = response['response']['redirect_request_args']
        return (url, params)
    msgUsed = None
    if ('response_info' in response):
        status = response['response_info']['status']
        progress = response.get('progress', '')
    else:
        r = response['response']
        status = r['status']
        progress = r.get('progress', '')
    doFirstPoll = (status != 'done')
    (url, params) = get_redirect_url(response)
    if params:
        paramsStr = '&'.join([('%s=%s' % (k, v)) for (k, v) in params.items()])
    else:
        paramsStr = ''
    noise_enable = (noise and (noise != ('JStack', None)))
    if noise_enable:
        print 'Using noise during poll_url:', noise
        (noise_json, noiseParams) = noise
        noiseUrl = self.url((noise_json + '.json'))
        if (noiseParams is None):
            noiseParamsStr = ''
        else:
            noiseParamsStr = '&'.join([('%s=%s' % (k, v)) for (k, v) in noiseParams.items()])
    start = time.time()
    count = 0
    if initialDelaySecs:
        time.sleep(initialDelaySecs)
    while ((status == 'poll') or doFirstPoll or ((status == 'redirect') and ('Inspect' not in url))):
        count += 1
        if ((time.time() - start) > timeoutSecs):
            emsg = (('Exceeded timeoutSecs: %d secs while polling.' % timeoutSecs) + ('status: %s, url: %s?%s' % (status, urlUsed, paramsUsedStr)))
            raise Exception(emsg)
        if benchmarkLogging:
            import h2o
            h2o.cloudPerfH2O.get_log_save(benchmarkLogging)
        create_noise = (noise_enable and ((count % 2) == 0))
        if create_noise:
            urlUsed = noiseUrl
            paramsUsed = noiseParams
            paramsUsedStr = noiseParamsStr
            msgUsed = '\nNoise during polling with'
        else:
            urlUsed = url
            paramsUsed = params
            paramsUsedStr = paramsStr
            msgUsed = '\nPolling with'
        print status, progress, urlUsed
        time.sleep(retryDelaySecs)
        response = self.do_json_request(fullUrl=urlUsed, timeout=pollTimeoutSecs, params=paramsUsed)
        verboseprint(msgUsed, urlUsed, paramsUsedStr, 'Response:', dump_json(response))
        if ((count % 6) == 0):
            check_sandbox_for_errors(python_test_name=h2o_args.python_test_name)
        if create_noise:
            status = 'poll'
            progress = ''
        else:
            doFirstPoll = False
            status = response['response_info']['status']
            progress = response.get('progress', '')
            if (not reuseFirstPollUrl):
                (url, params) = get_redirect_url(response)
            if noPoll:
                return response
    if msgUsed:
        verboseprint(msgUsed, urlUsed, paramsUsedStr, 'Response:', dump_json(response))
    return response
