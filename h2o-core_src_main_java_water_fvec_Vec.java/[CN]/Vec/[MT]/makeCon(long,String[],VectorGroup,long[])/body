{
  final int nchunks=espc.length - 1;
  final Vec v0=new Vec(group.addVec(),espc,domain);
  new MRTask(){
    @Override protected void setupLocal(){
      for (int i=0; i < nchunks; i++) {
        Key k=v0.chunkKey(i);
        if (k.home())         DKV.put(k,new C0LChunk(l,v0.chunkLen(i)),_fs);
      }
    }
  }
.doAllNodes();
  DKV.put(v0._key,v0);
  Vec v=v0;
  int chunks=(int)Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),v0.length());
  if (v0.nChunks() < chunks && v0.length() > 10 * chunks) {
    Key newKey=Key.make(".makeConRebalance" + chunks);
    RebalanceDataSet rb=new RebalanceDataSet(new Frame(v0),newKey,chunks);
    H2O.submitTask(rb);
    rb.join();
    Keyed.remove(v0._key);
    v=((Frame)DKV.getGet(newKey)).anyVec();
  }
  return v;
}
