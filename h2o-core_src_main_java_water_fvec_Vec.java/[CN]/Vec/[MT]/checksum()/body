{
  final long now=_last_write_timestamp;
  if (-1 != now && now == _checksum_timestamp) {
    return _checksum;
  }
  final long checksum=new ChecksummerTask().doAll(this).getChecksum();
  new TAtomic<Vec>(){
    @Override public Vec atomic(    Vec v){
      if (v != null) {
        v._checksum=checksum;
        v._checksum_timestamp=now;
      }
      return v;
    }
  }
.invoke(_key);
  this._checksum=checksum;
  this._checksum_timestamp=now;
  return checksum;
}
