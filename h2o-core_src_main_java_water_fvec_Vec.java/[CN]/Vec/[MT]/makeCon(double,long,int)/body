{
  int nchunks=(int)Math.max(1,len >> log_rows_per_chunk);
  long[] espc=new long[nchunks + 1];
  for (int i=0; i < nchunks; i++)   espc[i]=((long)i) << log_rows_per_chunk;
  espc[nchunks]=len;
  Vec v0=makeCon(x,VectorGroup.VG_LEN1,espc);
  Vec v=v0;
  int chunks=(int)Math.min(4 * H2O.NUMCPUS * H2O.CLOUD.size(),v0.length());
  if (v0.nChunks() < chunks && v0.length() > 10 * chunks) {
    Key newKey=Key.make(".makeConRebalance" + chunks);
    RebalanceDataSet rb=new RebalanceDataSet(new Frame(v0),newKey,chunks);
    H2O.submitTask(rb);
    rb.join();
    Keyed.remove(v0._key);
    v=((Frame)DKV.getGet(newKey)).anyVec();
  }
  DKV.put(v._key,v);
  return v;
}
