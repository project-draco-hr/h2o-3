{
  for (int k=0; k < _nclass; k++) {
    final DTree tree=_ktrees[k];
    if (tree == null)     continue;
    final Chunk nids=chk_nids(chks,k);
    final Chunk ct=chk_tree(chks,k);
    final Chunk y=chk_resp(chks);
    final Chunk weights=hasWeightCol() ? chk_weight(chks) : new C0DChunk(1,chks[0]._len);
    double factor=1;
    if (_parms._pred_noise_bandwidth != 0) {
      _rand.setSeed((0xDECAF + _parms._seed) ^ (0xFAAAAAAB + k * _parms._ntrees + _ntrees));
      factor+=_rand.nextGaussian() * _parms._pred_noise_bandwidth;
    }
    for (int row=0; row < nids._len; row++) {
      int nid=(int)nids.at8(row);
      nids.set(row,ScoreBuildHistogram.FRESH);
      if (nid < 0)       continue;
      if (y.isNA(row))       continue;
      if (weights.atd(row) == 0)       continue;
      ct.set(row,(float)(ct.atd(row) + factor * ((LeafNode)tree.node(nid))._pred));
    }
  }
}
