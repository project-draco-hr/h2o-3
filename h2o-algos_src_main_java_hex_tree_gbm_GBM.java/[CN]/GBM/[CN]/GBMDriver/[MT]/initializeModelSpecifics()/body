{
  _mtry=Math.max(1,(int)(_parms._col_sample_rate * _ncols));
  if (!(1 <= _mtry && _mtry <= _ncols))   throw new IllegalArgumentException("Computed mtry should be in interval <1," + _ncols + "> but it is "+ _mtry);
  _initialPrediction=_nclass > 2 ? 0 : getInitialValue();
  if (hasOffsetCol() && _parms._distribution == Distribution.Family.bernoulli) {
    _initialPrediction=getInitialValueBernoulliOffset(_train);
  }
  _model._output._init_f=_initialPrediction;
  if (_initialPrediction != 0.0) {
    final double init=_initialPrediction;
    new MRTask(){
      @Override public void map(      Chunk tree){
        for (int i=0; i < tree._len; i++)         tree.set(i,init);
      }
    }
.doAll(vec_tree(_train,0),_parms._build_tree_one_node);
  }
}
