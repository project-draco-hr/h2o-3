{
  assert(_nclass == 1);
  final DTree tree=ktrees[0];
  assert(tree != null);
  IcedLong nidx=new IcedLong(0);
  for (int i=0; i < tree._len - leafs[0]; i++) {
    final LeafNode node=((LeafNode)tree.node(leafs[0] + i));
    nidx._val=node.nid();
    double nodeMax=maxValues.get(nidx)._val;
    if (nodeMax + node._pred > Distribution.MAX_LOG) {
      node._pred=(float)(Distribution.MAX_LOG - nodeMax);
    }
    double nodeMin=minValues.get(nidx)._val;
    if (nodeMin + node._pred < Distribution.MIN_LOG) {
      node._pred=(float)(Distribution.MIN_LOG - nodeMin);
    }
  }
}
