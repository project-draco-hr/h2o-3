{
  assert(_nclass == 1);
  final DTree tree=ktrees[0];
  assert(tree != null);
  IcedLong nidx=new IcedLong(0);
  for (int i=0; i < tree._len - leafs[0]; i++) {
    final LeafNode node=((LeafNode)tree.node(leafs[0] + i));
    nidx._val=node.nid();
    IcedDouble nodeMax=maxValues.get(nidx);
    if (nodeMax != null) {
      if (nodeMax._val + node._pred > MAX_LOG_TRUNC) {
        node._pred=(float)(MAX_LOG_TRUNC - nodeMax._val);
      }
    }
    IcedDouble nodeMin=minValues.get(nidx);
    if (nodeMin != null) {
      if (nodeMin._val + node._pred < MIN_LOG_TRUNC) {
        node._pred=(float)(MIN_LOG_TRUNC - nodeMin._val);
      }
    }
  }
}
