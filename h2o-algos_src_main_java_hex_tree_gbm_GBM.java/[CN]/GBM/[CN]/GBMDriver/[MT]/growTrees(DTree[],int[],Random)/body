{
  DHistogram hcs[][][]=new DHistogram[_nclass][1][_ncols];
  int adj_nbins=Math.max(_parms._nbins_top_level,_parms._nbins);
  long rseed=rand.nextLong();
  for (int k=0; k < _nclass; k++) {
    if (_model._output._distribution[k] != 0) {
      if (k == 1 && _nclass == 2)       continue;
      ktrees[k]=new DTree(_train,_ncols,(char)_parms._nbins,(char)_parms._nbins_cats,(char)_nclass,_parms._min_rows,_mtry,rseed);
      new UndecidedNode(ktrees[k],-1,DHistogram.initialHist(_train,_ncols,adj_nbins,_parms._nbins_cats,hcs[k][0]));
    }
  }
  if (_parms._sample_rate < 1) {
    Sample ss[]=new Sample[_nclass];
    for (int k=0; k < _nclass; k++)     if (ktrees[k] != null)     ss[k]=new Sample(ktrees[k],_parms._sample_rate).dfork(null,new Frame(vec_nids(_train,k),vec_resp(_train)),_parms._build_tree_one_node);
    for (int k=0; k < _nclass; k++)     if (ss[k] != null)     ss[k].getResult();
  }
  int depth=0;
  for (; depth < _parms._max_depth; depth++) {
    if (_job.stop_requested())     return;
    hcs=buildLayer(_train,_parms._nbins,_parms._nbins_cats,ktrees,leafs,hcs,_mtry < _model._output.nfeatures(),_parms._build_tree_one_node);
    if (hcs == null)     break;
  }
  for (int k=0; k < _nclass; k++) {
    DTree tree=ktrees[k];
    if (tree == null)     continue;
    int leaf=leafs[k]=tree.len();
    for (int nid=0; nid < leaf; nid++) {
      if (tree.node(nid) instanceof DecidedNode) {
        DecidedNode dn=tree.decided(nid);
        if (dn._split._col == -1) {
          if (nid == 0)           new LeafNode(tree,-1,0);
          continue;
        }
        for (int i=0; i < dn._nids.length; i++) {
          int cnid=dn._nids[i];
          if (cnid == -1 || tree.node(cnid) instanceof UndecidedNode || (tree.node(cnid) instanceof DecidedNode && ((DecidedNode)tree.node(cnid))._split.col() == -1))           dn._nids[i]=new LeafNode(tree,nid).nid();
        }
      }
    }
  }
}
