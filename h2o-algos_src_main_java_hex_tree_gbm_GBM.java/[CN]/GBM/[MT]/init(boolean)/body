{
  super.init(expensive);
  double mean=0;
  if (expensive) {
    if (error_count() > 0) {
      GBM.this.updateValidationMessages();
      throw H2OModelBuilderIllegalArgumentException.makeFromBuilder(GBM.this);
    }
    mean=responseMean();
    _initialPrediction=_nclass == 1 ? mean : (_nclass == 2 ? -0.5 * Math.log(mean / (1.0 - mean)) : 0.0);
    if (_parms._distribution == GBMModel.GBMParameters.Family.AUTO) {
      if (_nclass == 1)       _parms._distribution=GBMModel.GBMParameters.Family.gaussian;
      if (_nclass == 2)       _parms._distribution=GBMModel.GBMParameters.Family.bernoulli;
      if (_nclass >= 3)       _parms._distribution=GBMModel.GBMParameters.Family.multinomial;
    }
 else     if (_parms._distribution == GBMModel.GBMParameters.Family.poisson) {
      if (_response.min() < 0)       error("_response","Response cannot be negative for Gamma distribution.");
      _initialPrediction=poissonInitialValue();
    }
 else     if (_parms._distribution == GBMModel.GBMParameters.Family.gamma) {
      if (_response.min() < 0)       error("_response","Response cannot be negative for Gamma distribution.");
      _initialPrediction=gammaInitialValue();
    }
    if (hasOffset() && isClassifier() && _parms._distribution == GBMModel.GBMParameters.Family.multinomial) {
      error("_offset_column","Offset is not supported for multinomial distribution.");
    }
    if (hasOffset() && _parms._distribution == GBMModel.GBMParameters.Family.bernoulli) {
      if (_offset.max() > 1)       error("_offset_column","Offset cannot be larger than 1 for Bernoulli distribution.");
    }
  }
switch (_parms._distribution) {
case bernoulli:
    if (_nclass != 2)     error("_distribution","Binomial requires the response to be a 2-class categorical");
 else     if (_response != null) {
      _initialPrediction=Math.log(mean / (1.0 - mean));
    }
  break;
case multinomial:
if (!isClassifier()) error("_distribution","Multinomial requires an enum response.");
break;
case poisson:
if (isClassifier()) error("_distribution","Poisson requires the response to be numeric.");
break;
case gamma:
if (isClassifier()) error("_distribution","Gamma requires the response to be numeric.");
break;
case gaussian:
if (isClassifier()) error("_distribution","Gaussian requires the response to be numeric.");
break;
case AUTO:
break;
default :
error("_distribution","Invalid distribution: " + _parms._distribution);
}
if (!(0. < _parms._learn_rate && _parms._learn_rate <= 1.0)) error("_learn_rate","learn_rate must be between 0 and 1");
}
