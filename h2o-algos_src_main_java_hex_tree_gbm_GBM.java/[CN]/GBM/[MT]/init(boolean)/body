{
  super.init(expensive);
  double mean=0;
  if (expensive) {
    if (error_count() > 0) {
      GBM.this.updateValidationMessages();
      throw H2OModelBuilderIllegalArgumentException.makeFromBuilder(GBM.this);
    }
    if (_parms._distribution == Distribution.Family.AUTO) {
      if (_nclass == 1)       _parms._distribution=Distribution.Family.gaussian;
      if (_nclass == 2)       _parms._distribution=Distribution.Family.bernoulli;
      if (_nclass >= 3)       _parms._distribution=Distribution.Family.multinomial;
    }
    checkDistributions();
    if (hasOffsetCol() && isClassifier() && _parms._distribution == Distribution.Family.multinomial) {
      error("_offset_column","Offset is not supported for multinomial distribution.");
    }
    if (hasOffsetCol() && _parms._distribution == Distribution.Family.bernoulli) {
      if (_offset.max() > 1)       error("_offset_column","Offset cannot be larger than 1 for Bernoulli distribution.");
    }
    _initialPrediction=_nclass > 2 ? 0 : getInitialValue();
  }
switch (_parms._distribution) {
case bernoulli:
    if (_nclass != 2)     error("_distribution",H2O.technote(2,"Binomial requires the response to be a 2-class categorical"));
  break;
case multinomial:
if (!isClassifier()) error("_distribution",H2O.technote(2,"Multinomial requires an enum response."));
break;
case poisson:
if (isClassifier()) error("_distribution",H2O.technote(2,"Poisson requires the response to be numeric."));
break;
case gamma:
if (isClassifier()) error("_distribution",H2O.technote(2,"Gamma requires the response to be numeric."));
break;
case tweedie:
if (isClassifier()) error("_distribution",H2O.technote(2,"Tweedie requires the response to be numeric."));
break;
case gaussian:
if (isClassifier()) error("_distribution",H2O.technote(2,"Gaussian requires the response to be numeric."));
break;
case AUTO:
break;
default :
error("_distribution","Invalid distribution: " + _parms._distribution);
}
if (!(0. < _parms._learn_rate && _parms._learn_rate <= 1.0)) error("_learn_rate","learn_rate must be between 0 and 1");
if (!(0. < _parms._col_sample_rate && _parms._col_sample_rate <= 1.0)) error("_col_sample_rate","col_sample_rate must be between 0 and 1");
}
