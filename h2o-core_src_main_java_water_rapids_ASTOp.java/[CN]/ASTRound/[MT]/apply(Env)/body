{
  final int digits=_digits;
  if (env.isAry()) {
    Frame fr=env.pop0Ary();
    for (int i=0; i < fr.vecs().length; i++) {
      if (fr.vecs()[i].isEnum())       throw new IllegalArgumentException("Non-numeric column " + String.valueOf(i + 1) + " in data frame");
    }
    Frame fr2=new MRTask(){
      @Override public void map(      Chunk chks[],      NewChunk nchks[]){
        for (int i=0; i < nchks.length; i++) {
          NewChunk n=nchks[i];
          Chunk c=chks[i];
          int rlen=c._len;
          for (int r=0; r < rlen; r++)           n.addNum(roundDigits(c.at0(r),digits));
        }
      }
    }
.doAll(fr.numCols(),fr).outputFrame(fr.names(),fr.domains());
    env.cleanup(fr);
    env.push(new ValFrame(fr2));
  }
 else   env.push(new ValNum(roundDigits(env.popDbl(),digits)));
}
