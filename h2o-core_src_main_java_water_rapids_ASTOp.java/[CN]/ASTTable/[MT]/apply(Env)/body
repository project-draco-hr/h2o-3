{
  Frame two=env.peekType() == Env.NULL ? null : env.popAry();
  if (two == null)   env.pop();
  Frame one=env.popAry();
  if (two != null)   if (two.numCols() != 1 || one.numCols() != 1)   throw new IllegalArgumentException("`table` supports at *most* two vectors");
 else   if (one.numCols() < 1 || one.numCols() > 2)   throw new IllegalArgumentException("`table` supports at *most* two vectors and at least one vector.");
  Frame fr;
  if (two != null)   fr=new Frame(one.add(two));
 else   fr=one;
  int ncol;
  if ((ncol=fr.vecs().length) > 2)   throw new IllegalArgumentException("table does not apply to more than two cols.");
  for (int i=0; i < ncol; i++)   if (!fr.vecs()[i].isInt())   throw new IllegalArgumentException("table only applies to integer vectors.");
  String[][] domains=new String[ncol][];
  long[][] levels=new long[ncol][];
  for (int i=0; i < ncol; i++) {
    Vec v=fr.vecs()[i];
    levels[i]=new Vec.CollectDomain().doAll(new Frame(v)).domain();
    domains[i]=v.domain();
  }
  long[][] counts=new Tabularize(levels).doAll(fr)._counts;
  Key keys[]=Vec.VectorGroup.VG_LEN1.addVecs(counts.length + 1);
  Vec[] vecs=new Vec[counts.length + 1];
  String[] colnames=new String[counts.length + 1];
  AppendableVec v0=new AppendableVec(keys[0]);
  v0.setDomain(fr.vecs()[0].domain() == null ? null : fr.vecs()[0].domain().clone());
  NewChunk c0=new NewChunk(v0,0);
  for (int i=0; i < levels[0].length; i++)   c0.addNum((double)levels[0][i]);
  c0.close(0,null);
  Futures fs=new Futures();
  vecs[0]=v0.close(fs);
  colnames[0]="row.names";
  if (ncol == 1)   colnames[1]="Count";
  for (int level1=0; level1 < counts.length; level1++) {
    AppendableVec v=new AppendableVec(keys[level1 + 1]);
    NewChunk c=new NewChunk(v,0);
    v.setDomain(null);
    for (int level0=0; level0 < counts[level1].length; level0++)     c.addNum((double)counts[level1][level0]);
    c.close(0,null);
    vecs[level1 + 1]=v.close(fs);
    if (ncol > 1) {
      colnames[level1 + 1]=domains[1] == null ? Long.toString(levels[1][level1]) : domains[1][(int)(levels[1][level1])];
    }
  }
  fs.blockForPending();
  Frame fr2=new Frame(colnames,vecs);
  env.pushAry(fr2);
}
