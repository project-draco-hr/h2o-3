{
  final DateTimeZone dtz=ParseTime.getTimezone();
  if (!env.isAry()) {
    double d=env.peekDbl();
    if (!Double.isNaN(d))     d=op(new MutableDateTime((long)d,dtz));
    env.poppush(1,new ValNum(d));
    return;
  }
  Frame fr=env.peekAry();
  final ASTTimeOp uni=this;
  Frame fr2=new MRTask(){
    @Override public void map(    Chunk chks[],    NewChunk nchks[]){
      MutableDateTime dt=new MutableDateTime(0,dtz);
      for (int i=0; i < nchks.length; i++) {
        NewChunk n=nchks[i];
        Chunk c=chks[i];
        int rlen=c._len;
        for (int r=0; r < rlen; r++) {
          double d=c.atd(r);
          if (!Double.isNaN(d)) {
            dt.setMillis((long)d);
            d=uni.op(dt);
          }
          n.addNum(d);
        }
      }
    }
  }
.doAll(fr.numCols(),fr).outputFrame(fr._names,factors());
  env.poppush(1,new ValFrame(fr2));
}
