{
  Frame ary=env.popAry();
  if (ary.numCols() != 1)   throw new IllegalArgumentException("factor requires a single column");
  Vec v0=ary.anyVec();
  if (v0.isString()) {
    StringCollectDomain t=new StringCollectDomain().doAll(ary.anyVec());
    if (t.size() > LEVELSCAP)     throw new IllegalArgumentException("More than" + LEVELSCAP + " unique levels found. Too many levels.");
    final String[] dom=t.domain();
    String[][] doms=new String[1][];
    doms[0]=dom;
    Vec v1=new MRTask(){
      @Override public void map(      Chunk oc,      NewChunk nc){
        ValueString v=new ValueString();
        for (int i=0; i < oc._len; ++i)         nc.addNum(Arrays.binarySearch(dom,oc.atStr(v,i).toString()),0);
      }
    }
.doAll(1,v0).outputFrame(ary._names,doms).anyVec();
    env.pushAry(new Frame(ary._names,new Vec[]{v1}));
    return;
  }
  if (v0.isEnum()) {
    env.pushAry(ary);
    return;
  }
  env.pushAry(new Frame(ary._names,new Vec[]{v0.toEnum()}));
}
