{
  AST ary=E.parse();
  AST breaks=E.parse();
  if (breaks instanceof ASTDoubleList)   _cuts=((ASTDoubleList)breaks)._d;
 else   if (breaks instanceof ASTLongList) {
    int i=0;
    _cuts=new double[((ASTLongList)breaks)._l.length];
    for (    long l : ((ASTLongList)breaks)._l)     _cuts[i++]=l;
  }
 else   if (breaks instanceof ASTNum)   _cuts=new double[]{((ASTNum)breaks)._d};
 else   throw new IllegalArgumentException("`breaks` argument expected to be a dlist or number. Got: " + breaks.getClass());
  AST labels=E.parse();
  if (labels instanceof ASTStringList)   _labels=((ASTStringList)labels)._s;
 else   if (labels instanceof ASTString)   _labels=new String[]{((ASTString)labels)._s};
 else   if (labels instanceof ASTFrame)   _labels=new String[]{((ASTFrame)labels)._key};
 else   if (labels instanceof ASTNull)   _labels=null;
 else   throw new IllegalArgumentException("`labels` argument expected to be a slist or String. Got: " + labels.getClass());
  if (_labels != null)   for (int i=0; i < _labels.length; ++i)   _labels[i]=_labels[i].replace("\"","").replace("\'","");
  AST inc_lowest=E.parse();
  inc_lowest=E._env.lookup((ASTId)inc_lowest);
  try {
    _includelowest=((ASTNum)inc_lowest).dbl() == 1;
  }
 catch (  ClassCastException e) {
    e.printStackTrace();
    throw new IllegalArgumentException("Argument `include.lowest` expected to be TRUE/FALSE.");
  }
  AST right=E.parse();
  right=E._env.lookup((ASTId)right);
  try {
    _right=((ASTNum)right).dbl() == 1;
  }
 catch (  ClassCastException e) {
    e.printStackTrace();
    throw new IllegalArgumentException("Argument `right` expected to be a TRUE/FALSE.");
  }
  ASTNum diglab;
  try {
    diglab=(ASTNum)E.parse();
  }
 catch (  ClassCastException e) {
    e.printStackTrace();
    throw new IllegalArgumentException("Argument `dig.lab` expected to be a number.");
  }
  _diglab=diglab.dbl();
  _diglab=_diglab >= 12 ? 12 : _diglab;
  E.eatEnd();
  ASTCut res=(ASTCut)clone();
  res._asts=new AST[]{ary};
  return res;
}
