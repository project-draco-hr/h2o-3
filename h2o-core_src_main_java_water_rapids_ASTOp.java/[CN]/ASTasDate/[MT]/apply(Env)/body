{
  final String format=_format;
  if (format.isEmpty())   throw new IllegalArgumentException("as.Date requires a non-empty format string");
  Frame fr=env.pop0Ary();
  if (fr.vecs().length != 1 || !fr.vecs()[0].isEnum())   throw new IllegalArgumentException("as.Date requires a single column of factors");
  Frame fr2=new MRTask(){
    @Override public void map(    Chunk chks[],    NewChunk nchks[]){
      DateTimeFormatter dtf=ParseTime.forStrptimePattern(format).withZone(ParseTime.getTimezone());
      for (int i=0; i < nchks.length; i++) {
        NewChunk n=nchks[i];
        Chunk c=chks[i];
        int rlen=c._len;
        for (int r=0; r < rlen; r++) {
          if (!c.isNA(r)) {
            String date=c.vec().domain()[(int)c.atd(r)];
            n.addNum(DateTime.parse(date,dtf).getMillis(),0);
          }
 else           n.addNA();
        }
      }
    }
  }
.doAll(fr.numCols(),fr).outputFrame(fr._names,null);
  env.cleanup(fr);
  env.push(new ValFrame(fr2));
}
