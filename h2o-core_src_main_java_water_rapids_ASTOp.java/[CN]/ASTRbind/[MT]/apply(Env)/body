{
  if (argcnt == 1) {
    return;
  }
  Frame f1=null;
  ArrayList<long[]> espcs_al=new ArrayList<>();
  ArrayList<String[]> doms=new ArrayList<>();
  ArrayList<Byte> types=new ArrayList<>();
  ArrayList<long[]> new_starts=new ArrayList<>();
  for (int i=0; i < argcnt; ++i) {
    Frame t=env.peekAryAt(-i);
    if (f1 == null) {
      f1=t;
      espcs_al.add(f1.vec(f1.numCols() - 1).get_espc().clone());
      for (int c=0; c < f1.numCols(); ++c) {
        doms.add(f1.vec(c).domain());
        types.add(f1.vec(c).get_type());
      }
      continue;
    }
 else {
      long offset=espcs_al.get(i - 1)[espcs_al.get(i - 1).length - 1];
      long t_espc[]=Arrays.copyOfRange(t.anyVec().get_espc(),1,t.anyVec().get_espc().length);
      espcs_al.add(ArrayUtils.add(t_espc,offset));
      new_starts.add(new long[]{offset + 1});
    }
    if (t.numCols() != f1.numCols())     throw new IllegalArgumentException("Column mismatch! Expected " + f1.numCols() + " but frame has "+ t.numCols());
    for (int c=0; c < f1.numCols(); ++c) {
      if (f1.vec(c).get_type() != t.vec(c).get_type())       throw new IllegalArgumentException("Column type mismatch! Expected type " + get_type(f1.vec(c).get_type()) + " but vec has type "+ get_type(t.vec(c).get_type()));
      try {
        doms.set(c,doms.get(c) == null ? null : ArrayUtils.domainUnion(doms.get(c),t.vec(c).domain()));
      }
 catch (      NullPointerException e) {
        throw new IllegalArgumentException("The factor levels for vec " + (c + 1) + " in frame "+ (i + 1)+ " was null");
      }
    }
  }
  final Vec[] vecs=new Vec[f1.numCols()];
  final long[][] espcs=new long[espcs_al.size()][];
  long espc_completa[]=new long[0];
  for (int i=0; i < espcs.length; ++i)   espc_completa=ArrayUtils.join(espc_completa,espcs[i]=espcs_al.get(i));
  Key[] keys=Vec.VectorGroup.VG_LEN1.addVecs(f1.numCols());
  for (int i=0; i < vecs.length; ++i)   vecs[i]=new Vec(keys[i],espc_completa,doms.get(i),types.get(i));
  final Futures fs=new Futures();
  for (int i=0; i < argcnt; ++i) {
    final long espc[]=i == 0 ? espcs[i] : ArrayUtils.join(new_starts.get(i - 1),espcs[i]);
    new MRTask(){
      @Override public void map(      Chunk[] cs){
        int cidx=cs[0].cidx();
        Log.info("CIDX: " + cidx);
        for (int c=0; c < cs.length; ++c) {
          Key ckey=Vec.chunkKey(vecs[c]._key,vecs[c].elem2ChunkIdx(espc[cidx]));
          Log.info(vecs[c].elem2ChunkIdx((espc[cidx])));
          Chunk cc=(Chunk)cs[c].clone();
          cc.setVec(vecs[c]);
          cc.setBytes(cc.getBytes().clone());
          cc.setStart(-1);
          cc.flushChk2();
          DKV.put(ckey,cc);
        }
      }
    }
.doAll(env.pop0Ary());
  }
  for (  Vec v : vecs) {
    DKV.put(v,fs);
    v.postWrite(fs);
  }
  fs.blockForPending();
  Frame res=new Frame(f1.names(),vecs);
  env.push(new ValFrame(res));
}
