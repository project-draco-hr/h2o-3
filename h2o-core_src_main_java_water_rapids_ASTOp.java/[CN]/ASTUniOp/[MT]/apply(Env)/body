{
  if (env.isNum()) {
    env.push(new ValNum(op(env.popDbl())));
    return;
  }
  Frame fr=env.popAry();
  final ASTUniOp uni=this;
  Frame fr2=new MRTask(){
    @Override public void map(    Chunk[] chks,    NewChunk[] nchks){
      for (int i=0; i < nchks.length; i++) {
        NewChunk n=nchks[i];
        Chunk c=chks[i];
        int rlen=c._len;
        if (c.vec().isEnum() || c.vec().isUUID() || c.vec().isString()) {
          for (int r=0; r < rlen; r++)           n.addNum(Double.NaN);
        }
 else {
          for (int r=0; r < rlen; r++)           n.addNum(uni.op(c.atd(r)));
        }
      }
    }
  }
.doAll(fr.numCols(),fr).outputFrame(Key.make(),fr._names,null);
  env.pushAry(fr2);
}
