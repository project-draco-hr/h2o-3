{
  ArrayList<AST> dblarys=new ArrayList<>();
  if (!E.hasNext())   throw new IllegalArgumentException("End of input unexpected. Badly formed AST.");
  AST ary=E.parse();
  dblarys.add(ary);
  AST a;
  E.skipWS();
  while (true) {
    if (!E.skipWS().hasNext())     throw new IllegalArgumentException("End of input unexpected. Badly formed AST.");
    a=E.skipWS().parse();
    if (a instanceof ASTId) {
      AST ast=E._env.lookup((ASTId)a);
      if (ast instanceof ASTFrame) {
        dblarys.add(a);
        continue;
      }
 else       break;
    }
    if (a instanceof ASTNum || a instanceof ASTFrame || a instanceof ASTSlice|| a instanceof ASTBinOp|| a instanceof ASTUniOp|| a instanceof ASTReducerOp)     dblarys.add(a);
 else     break;
  }
  a=E._env.lookup((ASTId)a);
  _narm=((ASTNum)a).dbl() == 1;
  ASTReducerOp res=(ASTReducerOp)clone();
  AST[] arys=new AST[_argcnt=dblarys.size()];
  for (int i=0; i < dblarys.size(); i++)   arys[i]=dblarys.get(i);
  res._asts=arys;
  return res;
}
