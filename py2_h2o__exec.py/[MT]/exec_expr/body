def exec_expr(node=None, execExpr=None, resultKey=None, timeoutSecs=10, ignoreH2oError=False, doFuns=False):
    if (not node):
        if (len(h2o_nodes.nodes) == 0):
            raise Exception((('You appeared to have not h2o.init() a h2o cloud? nodes is empty.' + 'You may be misusing xl/rapids objects so they try to talk to h2o, before you have a cloud built.') + ("Check if you're using .do() or Assign() with default do==True h2o_nodes.nodes: %s" % h2o_nodes.nodes)))
        node = h2o_nodes.nodes[0]
    if doFuns:
        kwargs = {'funs': execExpr, }
    else:
        kwargs = {'ast': execExpr, }
    start = time.time()
    if resultKey:
        node.rapids_iseval(ast_key=resultKey)
    resultExec = h2o_cmd.runExec(node, timeoutSecs=timeoutSecs, ignoreH2oError=ignoreH2oError, **kwargs)
    verboseprint('exec took', (time.time() - start), 'seconds')
    shortenIt = resultExec
    if ('head' in shortenIt):
        shortenIt['head'] = 'chopped out by python exec_expr for print brevity'
    print 'exec:', dump_json(shortenIt)
    if ((resultExec['num_rows'] != 0) and ('key' in resultExec) and resultExec['key']):
        if ('name' not in resultExec['key']):
            raise Exception(("'name' not in 'key'" % dump_json(resultExec)))
        resultKey = resultExec['key']['name']
        if (('funstr' in resultExec) and resultExec['funstr']):
            raise Exception(("cols and funstr shouldn't both be in resultExec: %s" % dump_json(resultExec)))
        else:
            print 'Frame return'
            if (resultKey is None):
                pass
                result = None
            elif (resultKey == '_'):
                print ("WARNING: key/name in result, but leading '_' means it's deleted, so can't view. %s" % resultKey)
                result = None
            else:
                inspect = h2o_cmd.runInspect(key=resultKey)
                rows = inspect['frames'][0]['rows']
                if (rows == 0):
                    raise Exception(("Inspect of resultKey %s has zero rows %s But resultExec didn't have zero rows %s" % (resultKey, resultExec['num_rows'], rows)))
                result = inspect['frames'][0]['columns'][0]['mins'][0]
    elif ((resultExec['num_rows'] == 0) and ('key' in resultExec) and resultExec['key']):
        print 'zero row key return'
        result = None
    elif (('funstr' in resultExec) and resultExec['funstr']):
        print 'function return'
        result = resultExec['funstr']
    else:
        print 'scalar return'
        result = resultExec['scalar']
    return (resultExec, result)
