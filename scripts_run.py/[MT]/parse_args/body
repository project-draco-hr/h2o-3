def parse_args(argv):
    global g_base_port
    global g_num_clouds
    global g_nodes_per_cloud
    global g_wipe_test_state
    global g_wipe_output_dir
    global g_test_to_run
    global g_test_list_file
    global g_test_group
    global g_run_small
    global g_run_medium
    global g_run_large
    global g_run_xlarge
    global g_use_cloud
    global g_use_cloud2
    global g_use_client
    global g_config
    global g_use_ip
    global g_use_port
    global g_no_run
    global g_jvm_xmx
    global g_nopass
    global g_convenient
    global g_path_to_h2o_jar
    global g_path_to_tar
    global g_path_to_whl
    global g_produce_unit_reports
    global g_phantomjs_to
    i = 1
    while (i < len(argv)):
        s = argv[i]
        if (s == '--baseport'):
            i += 1
            if (i > len(argv)):
                usage()
            g_base_port = int(argv[i])
        elif (s == '--numclouds'):
            i += 1
            if (i > len(argv)):
                usage()
            g_num_clouds = int(argv[i])
        elif (s == '--numnodes'):
            i += 1
            if (i > len(argv)):
                usage()
            g_nodes_per_cloud = int(argv[i])
        elif (s == '--wipeall'):
            g_wipe_test_state = True
            g_wipe_output_dir = True
        elif (s == '--wipe'):
            g_wipe_output_dir = True
        elif (s == '--test'):
            i += 1
            if (i > len(argv)):
                usage()
            g_test_to_run = TestRunner.find_test(argv[i])
        elif (s == '--testlist'):
            i += 1
            if (i > len(argv)):
                usage()
            g_test_list_file = argv[i]
        elif (s == '--testgroup'):
            i += 1
            if (i > len(argv)):
                usage()
            g_test_group = argv[i]
        elif (s == '--testsize'):
            i += 1
            if (i > len(argv)):
                usage()
            v = argv[i]
            if re.match('(s)?(m)?(l)?', v):
                if ('s' not in v):
                    g_run_small = False
                if ('m' not in v):
                    g_run_medium = False
                if ('l' not in v):
                    g_run_large = False
                if ('x' not in v):
                    g_run_xlarge = False
            else:
                bad_arg(s)
        elif (s == '--usecloud'):
            i += 1
            if (i > len(argv)):
                usage()
            s = argv[i]
            m = re.match('(\\S+):([1-9][0-9]*)', s)
            if (m is None):
                unknown_arg(s)
            g_use_cloud = True
            g_use_ip = m.group(1)
            port_string = m.group(2)
            g_use_port = int(port_string)
        elif (s == '--usecloud2'):
            i += 1
            if (i > len(argv)):
                usage()
            s = argv[i]
            if (s is None):
                unknown_arg(s)
            g_use_cloud2 = True
            g_config = s
        elif (s == '--client'):
            g_use_client = True
        elif (s == '--nopass'):
            g_nopass = True
        elif (s == '--c'):
            g_convenient = True
        elif (s == '--h2ojar'):
            i += 1
            g_path_to_h2o_jar = os.path.abspath(argv[i])
        elif (s == '--pto'):
            i += 1
            g_phantomjs_to = int(argv[i])
        elif (s == '--tar'):
            i += 1
            g_path_to_tar = os.path.abspath(argv[i])
        elif (s == '--whl'):
            i += 1
            g_path_to_whl = os.path.abspath(argv[i])
        elif (s == '--jvm.xmx'):
            i += 1
            if (i > len(argv)):
                usage()
            g_jvm_xmx = argv[i]
        elif (s == '--norun'):
            g_no_run = True
        elif (s == '--noxunit'):
            g_produce_unit_reports = False
        elif ((s == '-h') or (s == '--h') or (s == '-help') or (s == '--help')):
            usage()
        else:
            unknown_arg(s)
        i += 1
    if (((int(g_use_client) + int(g_use_cloud)) + int(g_use_cloud2)) > 1):
        print ''
        print 'ERROR: --client, --usecloud and --usecloud2 are mutually exclusive.'
        print ''
        sys.exit(1)
