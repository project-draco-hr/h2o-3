'\nTest harness.\n\n:copyright: (c) 2016 H2O.ai\n:license:   Apache License Version 2.0 (see LICENSE for details)\n'
import sys
import os
import shutil
import signal
import time
import random
import getpass
import re
import subprocess
import requests
import socket
import multiprocessing
import platform
if (sys.version_info[0] < 3):
    import ConfigParser as configparser
else:
    import configparser
'\nfunction grab_java_message() will look through the java text output and try to extract the\njava messages from Java side.\n'
g_script_name = ''
g_base_port = 40000
g_num_clouds = 5
g_nodes_per_cloud = 1
g_wipe_test_state = False
g_wipe_output_dir = False
g_test_to_run = None
g_test_list_file = None
g_exclude_list_file = None
g_test_group = None
g_run_small = True
g_run_medium = True
g_run_large = True
g_run_xlarge = True
g_use_cloud = False
g_use_cloud2 = False
g_use_client = False
g_config = None
g_use_ip = None
g_use_port = None
g_no_run = False
g_jvm_xmx = '1g'
g_jvm_cp = ''
g_nopass = False
g_nointernal = False
g_convenient = False
g_jacoco_include = False
g_jacoco_options = [None, None]
g_path_to_h2o_jar = None
g_path_to_tar = None
g_path_to_whl = None
g_produce_unit_reports = True
g_phantomjs_to = 3600
g_phantomjs_packs = 'examples'
g_r_pkg_ver_chk = False
g_on_hadoop = False
g_hadoop_namenode = None
g_build_id = None
g_perf = False
g_git_hash = None
g_git_branch = None
g_job_name = None
g_py3 = False
g_pycoverage = False
g_use_xml2 = False
g_java_start_text = 'STARTING TEST:'
g_output_dir = None
g_runner = None
g_handling_signal = False
g_r_pkg_ver_chk_script = os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../h2o-r/scripts/package_version_check_update.R'))
g_r_test_setup = os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../h2o-r/scripts/h2o-r-test-setup.R'))
g_py_test_setup = os.path.realpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '../h2o-py/scripts/h2o-py-test-setup.py'))
g_date = time.strftime('%Y-%m-%d', time.localtime(time.time()))
try:
    g_machine_ip = socket.gethostbyname(socket.gethostname())
except socket.gaierror:
    g_machine_ip = '127.0.0.1'
g_ncpu = multiprocessing.cpu_count()
g_os = platform.system()
if (__name__ == '__main__'):
    main(sys.argv)
