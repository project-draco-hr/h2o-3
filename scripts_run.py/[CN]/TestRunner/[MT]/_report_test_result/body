def _report_test_result(self, test, nopass):
    self.completed_tests_count += 1
    index = self.completed_tests_count
    port = test.get_port()
    finish_seconds = time.time()
    duration = (finish_seconds - test.start_seconds)
    test_name = test.get_test_name()
    if (not test.get_skipped()):
        if (self.perf and (not is_javascript_test_file(test.test_name))):
            self._report_perf(test, finish_seconds)
    if test.get_passed():
        s = ('%-4d pass  %005d %4ds %s' % (index, port, duration, test_name))
        self._log(s)
        if self.produce_unit_reports:
            self._report_xunit_result('r_suite', test_name, duration, False)
    elif test.get_skipped():
        s = ('%-4d skip  %005d %4ds %s' % (index, port, duration, test_name))
        self._log(s)
        if self.produce_unit_reports:
            self._report_xunit_result('r_suite', test_name, duration, False)
    else:
        s = ('%-4d FAIL  %005d %4ds %s  %s  %s' % (index, port, duration, test.get_test_name(), test.get_output_dir_file_name(), test.get_seed_used()))
        self._log(s)
        f = self._get_failed_filehandle_for_appending()
        f.write((test.get_test_dir_file_name() + '\n'))
        f.close()
        if self.produce_unit_reports:
            if (not test.get_nopass(nopass)):
                self._report_xunit_result('r_suite', test_name, duration, False, 'TestFailure', 'Test failed', 'See {}'.format(test.get_output_dir_file_name()))
            else:
                self._report_xunit_result('r_suite', test_name, duration, True)
        if ((not test.get_nopass(nopass)) and (not test.get_nofeature(nopass))):
            shutil.copy(test.get_output_dir_file_name(), self.failed_output_dir)
