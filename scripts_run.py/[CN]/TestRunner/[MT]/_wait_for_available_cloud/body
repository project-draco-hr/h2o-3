def _wait_for_available_cloud(self, nopass, timeout=60):
    '\n        Waits for an available cloud to appear by either a test completing or by a cloud on the suspicious_clouds list\n        reporting as healthy, and then returns a tuple containing its ip and port. If no tests are running and no clouds\n        are reporting as healthy, then the function will wait until the designated timeout time expires before returning\n        None.\n        '
    timer_on = False
    t_start = None
    while True:
        if timer_on:
            if ((time.time() - t_start) > timeout):
                return None
        for (ip, port) in self.suspicious_clouds:
            if self._h2o_exists_and_healthy(ip, port):
                self.suspicious_clouds.remove([ip, port])
                return (ip, port)
        if (len(self.tests_running) > 0):
            for test in self.tests_running:
                if test.is_completed():
                    self.tests_running.remove(test)
                    self._report_test_result(test, nopass)
                    return (test.get_ip(), test.get_port())
        elif (len(self.suspicious_clouds) == 0):
            self._log('WAITING FOR ONE TEST TO COMPLETE, BUT THERE ARE NO RUNNING TESTS. EXITING...')
            sys.exit(1)
        else:
            t_start = time.time()
            timer_on = True
