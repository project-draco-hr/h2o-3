def __init__(self, test_root_dir, use_cloud, use_cloud2, cloud_config, use_ip, use_port, num_clouds, nodes_per_cloud, h2o_jar, base_port, xmx, output_dir, failed_output_dir):
    '\n        Create a runner.\n\n        @param test_root_dir: h2o/R/tests directory.\n        @param use_cloud: Use this one user-specified cloud.  Overrides num_clouds.\n        @param use_cloud2: Use the cloud_config to define the list of H2O clouds.\n        @param cloud_config: (if use_cloud2) the config file listing the H2O clouds.\n        @param use_ip: (if use_cloud) IP of one cloud to use.\n        @param use_port: (if use_cloud) Port of one cloud to use.\n        @param num_clouds: Number of H2O clouds to start.\n        @param nodes_per_cloud: Number of H2O nodes to start per cloud.\n        @param h2o_jar: Path to H2O jar file to run.\n        @param base_port: Base H2O port (e.g. 54321) to start choosing from.\n        @param xmx: Java -Xmx parameter.\n        @param output_dir: Directory for output files.\n        @return: The runner object.\n        '
    self.test_root_dir = test_root_dir
    self.use_cloud = use_cloud
    self.use_cloud2 = use_cloud2
    self.use_ip = use_ip
    self.use_port = use_port
    self.num_clouds = num_clouds
    self.nodes_per_cloud = nodes_per_cloud
    self.h2o_jar = h2o_jar
    self.base_port = base_port
    self.output_dir = output_dir
    self.failed_output_dir = failed_output_dir
    self.start_seconds = time.time()
    self.terminated = False
    self.clouds = []
    self.tests = []
    self.tests_not_started = []
    self.tests_running = []
    self.regression_passed = False
    self._create_output_dir()
    self._create_failed_output_dir()
    self.nopass_counter = 0
    if use_cloud:
        node_num = 0
        cloud = H2OUseCloud(node_num, use_ip, use_port)
        self.clouds.append(cloud)
    elif use_cloud2:
        clouds = TestRunner.read_config(cloud_config)
        node_num = 0
        for c in clouds:
            cloud = H2OUseCloud(node_num, c[0], c[1])
            self.clouds.append(cloud)
            node_num += 1
    else:
        for i in range(self.num_clouds):
            cloud = H2OCloud(i, self.nodes_per_cloud, h2o_jar, self.base_port, xmx, self.output_dir)
            self.clouds.append(cloud)
