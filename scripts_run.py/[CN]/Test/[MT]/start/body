def start(self, ip, port):
    '\n        Start the test in a non-blocking fashion.\n\n        :param ip: IP address of cloud to run on.\n        :param port: Port of cloud to run on.\n        :return none\n        '
    if (self.cancelled or self.terminated):
        return
    self.start_seconds = time.time()
    self.ip = ip
    self.port = port
    if (is_rdemo(self.test_name) or is_runit(self.test_name) or is_rbooklet(self.test_name)):
        cmd = self._rtest_cmd(self.test_name, self.ip, self.port, self.on_hadoop, self.hadoop_namenode)
    elif (is_ipython_notebook(self.test_name) or is_pydemo(self.test_name) or is_pyunit(self.test_name) or is_pybooklet(self.test_name)):
        cmd = self._pytest_cmd(self.test_name, self.ip, self.port, self.on_hadoop, self.hadoop_namenode)
    elif is_gradle_build_python_test(self.test_name):
        cmd = ['python', self.test_name, '--usecloud', ((self.ip + ':') + str(self.port))]
    elif is_javascript_test_file(self.test_name):
        cmd = self._javascript_cmd(self.test_name, self.ip, self.port)
    else:
        print ''
        print ('ERROR: Test runner failure with test: ' + self.test_name)
        print ''
        sys.exit(1)
    test_short_dir_with_no_slashes = re.sub('[\\\\/]', '_', self.test_short_dir)
    if (len(test_short_dir_with_no_slashes) > 0):
        test_short_dir_with_no_slashes += '_'
    self.output_file_name = os.path.join(self.output_dir, ((test_short_dir_with_no_slashes + self.test_name) + '.out.txt'))
    f = open(self.output_file_name, 'w')
    self.child = subprocess.Popen(args=cmd, stdout=f, stderr=subprocess.STDOUT, cwd=self.test_dir)
    self.pid = self.child.pid
