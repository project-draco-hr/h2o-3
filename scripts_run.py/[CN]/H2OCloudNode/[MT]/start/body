def start(self):
    '\n        Start one node of H2O.\n        (Stash away the self.child and self.pid internally here.)\n\n        @return: none\n        '
    if self.is_client:
        main_class = 'water.H2OClientApp'
    else:
        main_class = 'water.H2OApp'
    java = (os.environ['JAVA_HOME'] + '/bin/java')
    cmd = [java, ('-Xmx' + self.xmx), '-ea', '-cp', self.h2o_jar, main_class, '-name', self.cloud_name, '-baseport', str(self.my_base_port), '-ga_opt_out']
    if g_include_jacoco:
        root_dir = os.path.abspath((__file__ + '/../../'))
        agent_dir = (root_dir + '/jacoco/jacocoagent.jar')
        jresults_dir = (self.output_dir + '/jacoco/')
        if (not os.path.exists(jresults_dir)):
            os.mkdir(jresults_dir)
        jresults_dir += '{cloud}_{node}'.format(cloud=self.cloud_num, node=self.node_num)
        jacoco = ((((('-javaagent:' + agent_dir) + '=destfile=') + jresults_dir) + '/{cloud}_{node}.exec'.format(cloud=self.cloud_num, node=self.node_num)) + ',dumponext=false,excludes={dir}/h2o-core/src/main/java/water/HeartBeatThread.java'.format(dir=root_dir))
        cmd = ((cmd[:1] + [jacoco]) + cmd[1:])
    self.output_file_name = os.path.join(self.output_dir, (((('java_' + str(self.cloud_num)) + '_') + str(self.node_num)) + '.out.txt'))
    f = open(self.output_file_name, 'w')
    if g_convenient:
        cwd = os.getcwd()
        here = os.path.abspath(os.path.dirname(__file__))
        there = os.path.abspath(os.path.join(here, '..'))
        os.chdir(there)
        self.child = subprocess.Popen(args=cmd, stdout=f, stderr=subprocess.STDOUT, cwd=there)
        os.chdir(cwd)
    else:
        self.child = subprocess.Popen(args=cmd, stdout=f, stderr=subprocess.STDOUT, cwd=self.output_dir)
    self.pid = self.child.pid
    print ('+ CMD: ' + ' '.join(cmd))
