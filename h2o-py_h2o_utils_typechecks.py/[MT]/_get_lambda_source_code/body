def _get_lambda_source_code(lambda_fn, src):
    u'Attempt to find the source code of the ``lambda_fn`` within the string ``src``.'

    def gen_lambdas():

        def gen():
            yield (src + u'\n')
        g = gen()
        step = 0
        tokens = []
        for tok in tokenize.generate_tokens(getattr(g, u'next', getattr(g, u'__next__', None))):
            if (step == 0):
                if ((tok[0] == tokenize.NAME) and (tok[1] == u'lambda')):
                    step = 1
                    tokens = [tok]
                    level = 0
            elif (step == 1):
                if (tok[0] == tokenize.NAME):
                    tokens.append(tok)
                    step = 2
                else:
                    step = 0
            elif (step == 2):
                if ((tok[0] == tokenize.OP) and (tok[1] == u':')):
                    tokens.append(tok)
                    step = 3
                else:
                    step = 0
            elif (step == 3):
                if ((level == 0) and (((tok[0] == tokenize.OP) and (tok[1] in u',)')) or (tok[0] == tokenize.ENDMARKER))):
                    yield tokenize.untokenize(tokens).strip()
                    step = 0
                else:
                    tokens.append(tok)
                    if (tok[0] == tokenize.OP):
                        if (tok[1] in u'[({'):
                            level += 1
                        if (tok[1] in u'])}'):
                            level -= 1
        assert (not tokens)
    actual_code = lambda_fn.__code__.co_code
    for lambda_src in gen_lambdas():
        try:
            fn = eval(lambda_src, globals(), locals())
            if (fn.__code__.co_code == actual_code):
                return lambda_src.split(u':', 1)[1].strip()
        except Exception:
            pass
    return u'<lambda>'
