def _retrieve_assert_arguments():
    u'\n    Magic variable name retrieval.\n\n    This function is designed as a helper for assert_*() functions. Typically such assertion is used like this::\n\n        assert_is_type(num_threads, int)\n\n    If the variable `num_threads` turns out to be non-integer, we would like to raise an exception such as\n\n        H2OTypeError("`num_threads` is expected to be integer, but got <str>")\n\n    and in order to compose an error message like that, we need to know that the variables that was passed to\n    assert_is_type() carries a name "num_threads". Naturally, the variable itself knows nothing about that.\n\n    This is where this function comes in: we walk up the stack trace until the first frame outside of this\n    file, find the original line that called the assert_is_int() function, and extract the variable name from\n    that line. This is slightly fragile, in particular we assume that only one assert_* statement can be per line,\n    or that this statement does not spill over multiple lines, or that the argument is not a complicated\n    expression like `assert_is_int(foo(x))` or `assert_is_str(x[1,2])`. I do not foresee such complexities in the\n    code, but if they arise this function can be amended to parse those cases properly.\n    '
    try:
        raise RuntimeError(u'Catch me!')
    except RuntimeError:
        tb = sys.exc_info()[2]
        assert (tb.tb_frame.f_code.co_name == u'_retrieve_assert_arguments')
        this_filename = tb.tb_frame.f_code.co_filename
        fr = tb.tb_frame
        while ((fr is not None) and (fr.f_code.co_filename == this_filename)):
            fr = fr.f_back
        try:
            with open(fr.f_code.co_filename, u'r') as f:
                for i in range((fr.f_lineno - 1)):
                    next(f)
                g = tokenize.generate_tokens(f.readline)
                step = 0
                args_tokens = []
                level = 0
                for ttt in g:
                    if (step == 0):
                        if (ttt[0] != tokenize.NAME):
                            continue
                        if (not ttt[1].startswith(u'assert_')):
                            continue
                        step = 1
                    elif (step == 1):
                        assert ((ttt[0] == tokenize.OP) and (ttt[1] == u'('))
                        args_tokens.append([])
                        step = 2
                    elif (step == 2):
                        if ((level == 0) and (ttt[0] == tokenize.OP) and (ttt[1] == u',')):
                            args_tokens.append([])
                        elif ((level == 0) and (ttt[0] == tokenize.OP) and (ttt[1] == u')')):
                            break
                        else:
                            if ((ttt[0] == tokenize.OP) and (ttt[1] in u'([{')):
                                level += 1
                            if ((ttt[0] == tokenize.OP) and (ttt[1] in u')]}')):
                                level -= 1
                            assert (level >= 0), u'Parse error: parentheses level became negative'
                            args_tokens[(-1)].append(ttt)
                args = [tokenize.untokenize(at).strip().replace(u'\n', u' ') for at in args_tokens]
                return args
        except IOError:
            return (u'arg',)
