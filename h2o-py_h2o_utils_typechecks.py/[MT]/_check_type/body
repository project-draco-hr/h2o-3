def _check_type(var, types):
    u'\n    Return True if the variable is of one of the specified types, and False otherwise.\n\n    :param var: variable to check\n    :param types: iterable of types\n    '
    for tt in types:
        if (tt is None):
            if (var is None):
                return True
        elif (tt is str):
            if isinstance(var, _str_type):
                return True
        elif (tt is int):
            if isinstance(var, _int_type):
                return True
        elif (tt is numeric):
            if isinstance(var, _num_type):
                return True
        elif (isinstance(tt, _str_type) or isinstance(tt, _int_type)):
            if (var == tt):
                return True
        elif isinstance(tt, U):
            if _check_type(var, tt):
                return True
        elif isinstance(tt, I):
            if all((_check_type(var, [tttt]) for tttt in tt)):
                return True
        elif isinstance(tt, type):
            if isinstance(var, tt):
                return True
        elif isinstance(tt, list):
            if (isinstance(var, list) and all((_check_type(item, tt) for item in var))):
                return True
        elif isinstance(tt, set):
            if (isinstance(var, set) and all((_check_type(item, tt) for item in var))):
                return True
        elif isinstance(tt, tuple):
            if (isinstance(var, tuple) and (len(tt) == len(var)) and all((_check_type(var[i], [tt[i]]) for i in range(len(tt))))):
                return True
        elif isinstance(tt, dict):
            ttkv = viewitems(tt)
            if (isinstance(var, dict) and all((_check_type(kv, ttkv) for kv in viewitems(var)))):
                return True
        else:
            raise RuntimeError((u'Ivalid type %r in _check_type()' % tt))
    return False
