def assert_is_type(var, *types, **kwargs):
    u'\n    Assert that the argument has the specified type.\n\n    This function is used to check that the type of the argument is correct, otherwises it raises an H2OTypeError.\n    The following use cases are supported::\n\n        # simple check\n        assert_is_type(flag, bool)\n        assert_is_type(fr, H2OFrame)\n        assert_is_type(arr, list)\n\n        # this works as expected (even though None is not a type): asserts that v is None\n        assert_is_type(v, None)\n\n        # ``int`` and ``str`` are special-cased to work on Py2 same way as on Py3\n        assert_is_type(x, int)\n        assert_is_type(y, str)\n\n        # ``numeric`` is a special type, meaning ``U(int, float)``\n        assert_is_type(x, numeric)\n\n        # check for a variable that may have multiple different types\n        assert_is_type(ip, None, str)\n        assert_is_type(x, int, float, str, None)\n        assert_is_type(x, U(int, float, str, None))\n        assert_is_type(scheme, "http", "https", "ftp")\n        assert_is_type(dir, -1, 0, 1)\n\n        # check for a list of ints or set of ints\n        assert_is_type(arr, [int], {int})\n\n        # check for a 2-dimensional array of numeric variables\n        assert_is_type(arr2, [[numeric]])\n\n        # check for a dictionary<str, H2OFrame>\n        assert_is_type(cols, {str: H2OFrame})\n\n        # check for a dictionary<str, int|float>\n        assert_is_type(vals, {str: U(int, float)})\n\n        # check for a struct with the specific shape\n        assert_is_type({"foo": 1, "bar": 2}, {"foo": int, "bar": U(int, float, None), "baz": bool})\n\n        # check for a tuple with the specific type signature\n        assert_is_type(t, (int, int, int, [str]))\n\n    Note that in Python everything is an ``object``, so you can use "object" to mean "any".\n\n    :param var: variable to check\n    :param types: the expected types\n    :param kwargs:\n        message: override the error message\n        skip_frames: how many local frames to skip when printing out the error.\n\n    :raises H2OTypeError: if the argument is not of the desired type.\n    '
    assert types, u'The list of expected types was not provided'
    if _check_type(var, types):
        return
    assert set(kwargs).issubset({u'message', u'skip_frames'}), (u'Unexpected keyword arguments: %r' % kwargs)
    vname = _retrieve_assert_arguments()[0]
    message = kwargs.get(u'message', None)
    skip_frames = kwargs.get(u'skip_frames', 1)
    raise H2OTypeError(var_name=vname, var_value=var, exp_types=types, message=message, skip_frames=skip_frames)
