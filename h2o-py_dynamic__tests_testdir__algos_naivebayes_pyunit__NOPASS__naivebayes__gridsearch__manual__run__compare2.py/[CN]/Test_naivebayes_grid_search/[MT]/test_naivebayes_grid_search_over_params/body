def test_naivebayes_grid_search_over_params(self):
    '\n        test_naivebayes_grid_search_over_params performs the following:\n        run gridsearch model and then build each model manually and see if we receive the same error messages.\n        '
    print('*******************************************************************************************')
    print('test_naivebayes_grid_search_over_params for naivebayes ')
    h2o.cluster_info()
    print('Hyper-parameters used here is {0}'.format(self.final_hyper_params))
    params_dict = dict()
    params_dict['nfolds'] = self.nfolds
    manual_model = ([None] * self.possible_number_models)
    model_index = 0
    for fold_v in self.final_hyper_params['fold_assignment']:
        for max_t in self.final_hyper_params['max_runtime_secs']:
            for laplace_v in self.final_hyper_params['laplace']:
                params_list = dict()
                params_list['fold_assignment'] = fold_v
                params_list['max_runtime_secs'] = max_t
                params_list['laplace'] = laplace_v
                print('Hyper-parameters used here is {0}\n'.format(params_list))
                params_list.update(params_dict)
                model_params = dict()
                if ('max_runtime_secs' in params_list):
                    model_params['max_runtime_secs'] = params_list['max_runtime_secs']
                    max_runtime = params_list['max_runtime_secs']
                    del params_list['max_runtime_secs']
                else:
                    max_runtime = 0
                manual_model[model_index] = H2ONaiveBayesEstimator(**params_list)
                manual_model[model_index].train(x=self.x_indices, y=self.y_index, training_frame=self.training1_data, **model_params)
                model_index += 1
