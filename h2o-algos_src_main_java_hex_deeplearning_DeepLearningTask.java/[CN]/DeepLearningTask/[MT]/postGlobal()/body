{
  DeepLearningModel.DeepLearningParameters dlp=_localmodel.get_params();
  if (H2O.CLOUD.size() > 1 && !dlp._replicate_training_data) {
    long now=System.currentTimeMillis();
    if (_chunk_node_count < H2O.CLOUD.size() && (now - _lastWarn > 5000) && _warnCount < 3) {
      Log.warn(H2O.CLOUD.size() - _chunk_node_count + " node(s) (out of " + H2O.CLOUD.size() + ") are not contributing to model updates. Consider setting replicate_training_data to true or using a larger training dataset (or fewer H2O nodes).");
      _lastWarn=now;
      _warnCount++;
    }
  }
  if (!dlp._replicate_training_data || H2O.CLOUD.size() == 1) {
    _localmodel.add_processed_global(_localmodel.get_processed_local());
    _localmodel.set_processed_local(0l);
    if (_chunk_node_count > 1)     _localmodel.div(_chunk_node_count);
    if (dlp._elastic_averaging) {
{
        _localmodel.computeStats();
        assert(!_localmodel.unstable());
      }
      final float pa=(float)_localmodel.get_params()._elastic_averaging_moving_rate;
      _sharedmodel=DKV.getGet(_sharedmodel.sharedModelInfoKey());
      _localmodel.mult(pa);
      _sharedmodel.mult(1 - pa);
      _sharedmodel.add(_localmodel);
      _sharedmodel.set_processed_global(_localmodel.get_processed_global());
      _sharedmodel.set_processed_local(0);
{
        _sharedmodel.computeStats();
        assert(!_sharedmodel.unstable());
      }
      DKV.put(_sharedmodel.sharedModelInfoKey(),_sharedmodel);
      _localmodel=null;
    }
 else {
      _sharedmodel=_localmodel;
    }
  }
}
