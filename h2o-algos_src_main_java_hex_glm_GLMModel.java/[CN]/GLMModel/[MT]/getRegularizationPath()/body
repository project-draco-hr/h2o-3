{
  RegularizationPath rp=new RegularizationPath();
  rp._coefficient_names=_output._coefficient_names;
  int N=_output._submodels.length;
  int P=_output._dinfo.fullN() + 1;
  rp._lambdas=new double[N];
  rp._coefficients=new double[N][];
  rp._explained_deviance_train=new double[N];
  if (_parms._valid != null)   rp._explained_deviance_valid=new double[N];
  if (_parms._standardize)   rp._coefficients_std=new double[N][];
  for (int i=0; i < N; ++i) {
    Submodel sm=_output._submodels[i];
    rp._lambdas[i]=sm.lambda_value;
    rp._coefficients[i]=sm.getBeta(MemoryManager.malloc8d(P));
    if (_parms._standardize) {
      rp._coefficients_std[i]=rp._coefficients[i];
      rp._coefficients[i]=_output._dinfo.denormalizeBeta(rp._coefficients_std[i]);
    }
    rp._explained_deviance_train[i]=1 - sm.devianceTrain / ((GLMMetrics)_output._training_metrics).null_deviance();
    if (rp._explained_deviance_valid != null)     rp._explained_deviance_valid[i]=1 - sm.devianceTest / ((GLMMetrics)_output._validation_metrics).null_deviance();
  }
  return rp;
}
