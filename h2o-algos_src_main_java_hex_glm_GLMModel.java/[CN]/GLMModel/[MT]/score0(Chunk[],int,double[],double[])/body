{
  double eta=0.0;
  final double[] b=beta();
  for (int i=0; i < _dinfo._catOffsets.length - 1; ++i) {
    if (chks[i].isNA(row_in_chunk)) {
      eta=Double.NaN;
      break;
    }
    long lval=chks[i].at8(row_in_chunk);
    int ival=(int)lval;
    if (ival != lval)     throw new IllegalArgumentException("categorical value out of range");
    if (_parms._use_all_factor_levels)     eta+=b[_dinfo._catOffsets[i] + ival];
 else     if (ival != 0)     eta+=b[_dinfo._catOffsets[i] + ival - 1];
  }
  final int noff=_dinfo.numStart() - _dinfo._cats;
  for (int i=_dinfo._cats; i < b.length - 1 - noff; ++i)   eta+=b[noff + i] * chks[i].atd(row_in_chunk);
  eta+=b[b.length - 1];
  double mu=_parms.linkInv(eta);
  preds[0]=mu;
  if (_parms._family == Family.binomial) {
    if (Double.isNaN(mu)) {
      preds[0]=Double.NaN;
      preds[1]=Double.NaN;
      preds[2]=Double.NaN;
    }
 else {
      preds[0]=(mu >= _output._threshold ? 1 : 0);
      preds[1]=1.0 - mu;
      preds[2]=mu;
    }
  }
  return preds;
}
