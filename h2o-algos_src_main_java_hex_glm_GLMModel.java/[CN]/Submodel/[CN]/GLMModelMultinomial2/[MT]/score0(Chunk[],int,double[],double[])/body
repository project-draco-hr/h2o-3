{
  double[] eta=MemoryManager.malloc8d(_output.nclasses());
  final double[][] b=_output._global_beta_multinomial;
  final int P=b[0].length;
  int[] catOffs=dinfo()._catOffsets;
  for (int i=0; i < catOffs.length - 1; ++i) {
    if (chks[i].isNA(row_in_chunk)) {
      Arrays.fill(eta,Double.NaN);
      break;
    }
    long lval=chks[i].at8(row_in_chunk);
    int ival=(int)lval;
    if (ival != lval)     throw new IllegalArgumentException("categorical value out of range");
    if (!_parms._use_all_factor_levels)     --ival;
    int from=catOffs[i];
    int to=catOffs[i + 1];
    if (ival >= 0 && (ival + from) < catOffs[i + 1])     for (int j=0; j < _output.nclasses(); ++j)     eta[j]+=b[j][ival + from];
  }
  final int noff=dinfo().numStart() - dinfo()._cats;
  for (int i=dinfo()._cats; i < b.length - 1 - noff; ++i) {
    double d=chks[i].atd(row_in_chunk);
    for (int j=0; j < _output.nclasses(); ++j)     eta[j]+=b[j][noff + i] * d;
  }
  double sumExp=0;
  for (int j=0; j < _output.nclasses(); ++j)   sumExp+=eta[j]=Math.exp(eta[j] + b[j][P - 1]);
  sumExp=1.0 / sumExp;
  preds[0]=ArrayUtils.maxIndex(eta);
  for (int i=0; i < eta.length; ++i)   preds[i + 1]=eta[i] * sumExp;
  return preds;
}
