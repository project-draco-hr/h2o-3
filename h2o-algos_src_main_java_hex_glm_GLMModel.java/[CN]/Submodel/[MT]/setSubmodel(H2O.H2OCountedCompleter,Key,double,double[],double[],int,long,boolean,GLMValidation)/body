{
  final Submodel sm=new Submodel(lambda,beta,norm_beta,runtime,iteration,sparseCoef);
  sm.validation=val;
  cmp.addToPendingCount(1);
  new TAtomic<GLMModel>(cmp){
    @Override public GLMModel atomic(    GLMModel old){
      if (old == null)       return old;
      if (old._output._submodels == null) {
        old._output=(GLMOutput)old._output.clone();
        old._output._submodels=new Submodel[]{sm};
      }
 else {
        int id=old._output.submodelIdForLambda(lambda);
        if (id < 0) {
          id=-id - 1;
          Submodel[] sms=Arrays.copyOf(old._output._submodels,old._output._submodels.length + 1);
          for (int i=sms.length - 1; i > id; --i)           sms[i]=sms[i - 1];
          sms[id]=sm;
          old._output=(GLMOutput)old._output.clone();
          old._output._submodels=sms;
        }
 else {
          if (old._output._submodels[id].iteration < sm.iteration)           old._output._submodels[id]=sm;
        }
      }
      old._output.pickBestModel(false);
      old._run_time=Math.max(old._run_time,sm.run_time);
      return old;
    }
  }
.fork(modelKey);
}
