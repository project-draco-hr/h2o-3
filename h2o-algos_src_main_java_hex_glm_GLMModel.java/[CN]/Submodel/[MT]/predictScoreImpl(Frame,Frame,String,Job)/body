{
  final int nc=_output.nclasses();
  final int ncols=nc == 1 ? 1 : nc + 1;
  GLMScore gs=makeScoringTask(adaptFrm,true,j).doAll(ncols,Vec.T_NUM,adaptFrm);
  if (gs._computeMetrics)   gs._mb.makeModelMetrics(this,fr,adaptFrm,gs.outputFrame());
  String[] names=new String[ncols];
  names[0]="predict";
  for (int i=1; i < names.length; ++i) {
    names[i]=_output.classNames()[i - 1];
    try {
      Integer.valueOf(names[i]);
      names[i]="p" + names[i];
    }
 catch (    Throwable t) {
    }
  }
  String[][] domains=new String[names.length][];
  domains[0]=gs._domain;
  return gs.outputFrame((null == destination_key ? Key.make() : Key.make(destination_key)),names,domains);
}
