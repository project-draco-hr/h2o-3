{
  if (_parms._family == Family.multinomial) {
    if (o != 0)     throw H2O.unimpl("Offset is not implemented for multinomial.");
    double[] eta=_eta.get();
    if (eta == null || eta.length < _output.nclasses())     _eta.set(eta=MemoryManager.malloc8d(_output.nclasses()));
    final double[][] bm=_output._global_beta_multinomial;
    double sumExp=0;
    double maxRow=0;
    for (int c=0; c < bm.length; ++c) {
      double e=bm[c][bm[c].length - 1];
      double[] b=bm[c];
      for (int i=0; i < _output._dinfo._cats; ++i)       e+=b[_output._dinfo.getCategoricalId(i,data[i])];
      int coff=_output._dinfo._cats;
      int boff=_output._dinfo.numStart();
      for (int i=0; i < _output._dinfo._nums; ++i) {
        double d=data[coff + i];
        if (!_output._dinfo._skipMissing && Double.isNaN(d))         d=_output._dinfo._numMeans[i];
        e+=d * b[boff + i];
      }
      if (e > maxRow)       maxRow=e;
      eta[c]=e;
    }
    for (int c=0; c < bm.length; ++c)     sumExp+=eta[c]=Math.exp(eta[c] - maxRow);
    sumExp=1.0 / sumExp;
    for (int c=0; c < bm.length; ++c)     preds[c + 1]=eta[c] * sumExp;
    preds[0]=ArrayUtils.maxIndex(eta);
  }
 else {
    double[] b=beta();
    double eta=b[b.length - 1] + o;
    for (int i=0; i < _output._dinfo._cats && !Double.isNaN(eta); ++i) {
      int l=_output._dinfo.getCategoricalId(i,data[i]);
      if (l >= 0)       eta+=b[l];
    }
    int numStart=_output._dinfo.numStart();
    int ncats=_output._dinfo._cats;
    for (int i=0; i < _output._dinfo._nums && !Double.isNaN(eta); ++i) {
      double d=data[ncats + i];
      if (!_output._dinfo._skipMissing && Double.isNaN(d))       d=_output._dinfo._numMeans[i];
      eta+=b[numStart + i] * d;
    }
    double mu=_parms.linkInv(eta);
    if (_parms._family == Family.binomial) {
      preds[0]=mu >= defaultThreshold() ? 1 : 0;
      preds[1]=1.0 - mu;
      preds[2]=mu;
    }
 else     preds[0]=mu;
  }
  return preds;
}
