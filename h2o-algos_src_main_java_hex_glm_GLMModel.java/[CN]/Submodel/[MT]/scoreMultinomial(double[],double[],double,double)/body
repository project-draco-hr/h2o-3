{
  double[] eta=MemoryManager.malloc8d(_output.nclasses());
  final double[][] b=_output._global_beta_multinomial;
  final int P=b[0].length;
  final DataInfo dinfo=_output._dinfo;
  for (int i=0; i < dinfo._cats; ++i) {
    if (Double.isNaN(data[i])) {
      Arrays.fill(eta,Double.NaN);
      break;
    }
    int ival=(int)data[i];
    if (ival != data[i])     throw new IllegalArgumentException("categorical value out of range");
    ival+=dinfo._catOffsets[i];
    if (!_parms._use_all_factor_levels)     --ival;
    if (ival >= dinfo._catOffsets[i] && ival < dinfo._catOffsets[i + 1])     for (int j=0; j < eta.length; ++j)     eta[j]+=b[j][ival];
  }
  int noff=dinfo.numStart();
  for (int i=0; i < dinfo._nums; ++i) {
    double d=data[dinfo._cats + i];
    for (int j=0; j < eta.length; ++j)     eta[j]+=b[j][noff + i] * d;
  }
  double sumExp=0;
  double max_row=0;
  for (int j=0; j < eta.length; ++j) {
    eta[j]+=b[j][P - 1];
    if (eta[j] > max_row)     max_row=eta[j];
  }
  for (int j=0; j < eta.length; ++j)   sumExp+=(eta[j]=Math.exp(eta[j] - max_row));
  sumExp=1.0 / sumExp;
  preds[0]=ArrayUtils.maxIndex(eta);
  for (int i=0; i < eta.length; ++i)   preds[1 + i]=eta[i] * sumExp;
  return preds;
}
