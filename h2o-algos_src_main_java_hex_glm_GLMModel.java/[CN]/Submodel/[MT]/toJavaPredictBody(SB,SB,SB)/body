{
  final int nclass=_output.nclasses();
  String mname=JCodeGen.toJavaId(_key.toString());
  JCodeGen.toStaticVar(classCtx,"BETA",beta(),"The Coefficients");
  JCodeGen.toStaticVar(classCtx,"CATOFFS",_dinfo._catOffsets,"Categorical Offsets");
  body.ip("double eta = 0.0;").nl();
  body.ip("final double [] b = BETA;").nl();
  if (!_parms._use_all_factor_levels) {
    body.ip("for(int i = 0; i < CATOFFS.length-1; ++i) if(data[i] != 0)").nl();
    body.ip("  eta += b[CATOFFS[i] + (int)(data[i]-1)];").nl();
  }
 else {
    body.ip("for(int i = 0; i < CATOFFS.length-1; ++i)").nl();
    body.ip("  eta += b[CATOFFS[i] + (int)(data[i])];").nl();
  }
  final int noff=_dinfo.numStart() - _dinfo._cats;
  body.ip("for(int i = ").p(_dinfo._cats).p("; i < data.length; ++i)").nl();
  body.ip("  eta += b[").p(noff).p("+i]*data[i];").nl();
  body.ip("eta += b[b.length-1]; // add intercept").nl();
  body.ip("double mu = hex.genmodel.GenModel.GLM_").p(_parms._link.toString()).p("Inv(eta");
  if (_parms._link == hex.glm.GLMModel.GLMParameters.Link.tweedie)   body.p(",").p(_parms._tweedie_link_power);
  body.p(");").nl();
  body.ip("preds[0] = mu;").nl();
  if (_parms._family == Family.binomial) {
    body.ip("preds[0] = mu > ").p(_output._threshold).p(" ? 1 : 0);").nl();
    body.ip("preds[1] = 1.0 - mu; // class 0").nl();
    body.ip("preds[2] =       mu; // class 1").nl();
  }
}
