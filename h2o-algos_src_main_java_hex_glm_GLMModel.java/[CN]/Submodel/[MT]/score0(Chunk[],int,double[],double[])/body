{
  if (_parms._family == Family.multinomial)   return scoreMultinomial(chks,row_in_chunk,tmp,preds);
  double eta=0.0;
  final double[] b=beta();
  int[] catOffs=dinfo()._catOffsets;
  for (int i=0; i < catOffs.length - 1; ++i) {
    if (chks[i].isNA(row_in_chunk)) {
      eta=Double.NaN;
      break;
    }
    long lval=chks[i].at8(row_in_chunk);
    int ival=(int)lval;
    if (ival != lval)     throw new IllegalArgumentException("categorical value out of range");
    if (!_parms._use_all_factor_levels)     --ival;
    int from=catOffs[i];
    int to=catOffs[i + 1];
    if (ival >= 0 && (ival + from) < catOffs[i + 1])     eta+=b[ival + from];
  }
  final int noff=dinfo().numStart() - dinfo()._cats;
  for (int i=dinfo()._cats; i < b.length - 1 - noff; ++i)   eta+=b[noff + i] * chks[i].atd(row_in_chunk);
  eta+=b[b.length - 1];
  double mu=_parms.linkInv(eta);
  preds[0]=mu;
  if (_parms._family == Family.binomial) {
    if (Double.isNaN(mu)) {
      preds[0]=Double.NaN;
      preds[1]=Double.NaN;
      preds[2]=Double.NaN;
    }
 else {
      preds[1]=1.0 - mu;
      preds[2]=mu;
    }
  }
  return preds;
}
