{
  ModelCategory category=model.getModelCategory();
  CSVReader reader=new CSVReader(new FileReader(inputCSVFileName));
  BufferedWriter output=new BufferedWriter(new FileWriter(outputCSVFileName));
switch (category) {
case AutoEncoder:
    output.write(model.getHeader());
  break;
case Binomial:
case Multinomial:
output.write("predict");
String[] responseDomainValues=model.getResponseDomainValues();
for (String s : responseDomainValues) {
output.write(",");
output.write(s);
}
break;
case Clustering:
output.write("cluster");
break;
case Regression:
output.write("predict");
break;
default :
throw new Exception("Unknown model category " + category);
}
output.write("\n");
int lineNum=0;
try {
String[] inputColumnNames=null;
String[] splitLine;
while ((splitLine=reader.readNext()) != null) {
lineNum++;
if (lineNum == 1) {
inputColumnNames=splitLine;
continue;
}
RowData row=formatDataRow(splitLine,inputColumnNames);
switch (category) {
case AutoEncoder:
{
throw new UnsupportedOperationException();
}
case Binomial:
{
BinomialModelPrediction p=model.predictBinomial(row);
output.write(p.label);
output.write(",");
for (int i=0; i < p.classProbabilities.length; i++) {
if (i > 0) {
output.write(",");
}
output.write(myDoubleToString(p.classProbabilities[i]));
}
break;
}
case Multinomial:
{
MultinomialModelPrediction p=model.predictMultinomial(row);
output.write(p.label);
output.write(",");
for (int i=0; i < p.classProbabilities.length; i++) {
if (i > 0) {
output.write(",");
}
output.write(myDoubleToString(p.classProbabilities[i]));
}
break;
}
case Clustering:
{
ClusteringModelPrediction p=model.predictClustering(row);
output.write(myDoubleToString(p.cluster));
break;
}
case Regression:
{
RegressionModelPrediction p=model.predictRegression(row);
output.write(myDoubleToString(p.value));
break;
}
default :
throw new Exception("Unknown model category " + category);
}
output.write("\n");
}
}
 catch (Exception e) {
System.out.println("Caught exception on line " + lineNum);
System.out.println("");
e.printStackTrace();
System.exit(1);
}
output.close();
reader.close();
}
