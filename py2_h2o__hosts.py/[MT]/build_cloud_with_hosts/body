def build_cloud_with_hosts(node_count=None, **kwargs):
    if (node_count is not None):
        kwargs['h2o_per_host'] = node_count
        node_count = None
    allParamsDefault = {'force_ip': False, 'network': None, 'use_flatfile': False, 'use_hdfs': True, 'hdfs_name_node': None, 'hdfs_config': None, 'hdfs_version': None, 'java_heap_GB': None, 'java_heap_MB': None, 'java_extra_args': None, 'timeoutSecs': 60, 'retryDelaySecs': 2, 'cleanup': True, 'slow_connection': False, 'h2o_per_host': 2, 'ip': '["127.0.0.1"]', 'base_port': None, 'username': '0xdiag', 'password': None, 'rand_shuffle': True, 'use_home_for_ice': False, 'key_filename': None, 'aws_credentials': None, 'redirect_import_folder_to_s3_path': None, 'redirect_import_folder_to_s3n_path': None, 'disable_h2o_log': False, 'enable_benchmark_log': False, 'h2o_remote_buckets_root': None, 'conservative': False, 'create_json': False, 'delete_keys_at_teardown': False, 'clone_cloud': False, 'cloud_name': None, 'force_tcp': None, 'random_udp_drop': None, 'sandbox_ignore_errors': None, }
    paramsToUse = {}
    for (k, v) in allParamsDefault.iteritems():
        paramsToUse[k] = allParamsDefault.setdefault(k, v)
    if h2o_args.config_json:
        configFilename = find_config(h2o_args.config_json)
    else:
        configFilename = find_config(h2o_bc.default_hosts_file())
    verboseprint('Loading host config from', configFilename)
    with open(configFilename, 'rb') as fp:
        hostDict = json.load(fp)
    for (k, v) in hostDict.iteritems():
        if (k in paramsToUse):
            paramsToUse[k] = hostDict.setdefault(k, v)
    for (k, v) in kwargs.iteritems():
        paramsToUse[k] = kwargs.setdefault(k, v)
    if paramsToUse['username']:
        paramsToUse['h2o_remote_buckets_root'] = ('/home/' + paramsToUse['username'])
    verboseprint('All build_cloud_with_hosts params:', paramsToUse)
    global hosts
    hosts = []
    if (paramsToUse['ip'] == ['127.0.0.1']):
        hosts = None
    else:
        verboseprint('About to RemoteHost, likely bad ip if hangs')
        hosts = []
        for h in paramsToUse['ip']:
            verboseprint('Connecting to:', h)
            key_filename = paramsToUse['key_filename']
            if key_filename:
                key_filename = os.path.expanduser(key_filename)
            hosts.append(RemoteHost(addr=h, username=paramsToUse['username'], password=paramsToUse['password'], key_filename=key_filename))
    paramsToUse.pop('ip')
    paramsToUse.pop('password')
    paramsToUse.pop('key_filename')
    clean_sandbox()
    base_port = h2o_bc.get_base_port(base_port=paramsToUse['base_port'])
    h2o_bc.write_flatfile(node_count=paramsToUse['h2o_per_host'], base_port=base_port, hosts=hosts, rand_shuffle=paramsToUse['rand_shuffle'])
    if (hosts is not None):
        upload_jar_to_remote_hosts(hosts, slow_connection=paramsToUse['slow_connection'])
        timeoutSecs = max(60, (8 * (len(hosts) * paramsToUse['h2o_per_host'])))
    else:
        timeoutSecs = 60
    paramsToUse.pop('slow_connection')
    node_count = paramsToUse['h2o_per_host']
    paramsToUse.pop('h2o_per_host')
    print 'java_heap_GB', paramsToUse['java_heap_GB']
    nodes = h2o_bc.build_cloud(node_count, hosts=hosts, init_sandbox=False, **paramsToUse)
    return nodes
