@staticmethod
def start(jar_path=None, nthreads=(-1), enable_assertions=True, max_mem_size=None, min_mem_size=None, ice_root=None, port=u'54321+', verbose=True):
    u'\n        Start new H2O server on the local machine.\n\n        :param jar_path: Path to the h2o.jar executable. If not given, then we will search for h2o.jar in the\n            locations returned by `._jar_paths()`.\n        :param nthreads: Number of threads in the thread pool. This should be related to the number of CPUs used.\n            -1 means use all CPUs on the host. A positive integer specifies the number of CPUs directly.\n        :param enable_assertions: If True, pass `-ea` option to the JVM.\n        :param max_mem_size: Maximum heap size (jvm option Xmx), in bytes.\n        :param min_mem_size: Minimum heap size (jvm option Xms), in bytes.\n        :param ice_root: A directory where H2O stores its temporary files. Default location is determined by\n            tempfile.mkdtemp().\n        :param port: Port where to start the new server. This could be either an integer, or a string of the form\n            "DDDDD+", indicating that the server should start looking for an open port starting from DDDDD and up.\n        :param verbose: If True, then connection info will be printed to the stdout.\n\n        :returns: a new H2OLocalServer instance\n        '
    assert_is_type(jar_path, None, str)
    assert_is_type(port, None, int, str)
    assert_is_type(nthreads, (-1), BoundInt(1, 4096))
    assert_is_type(enable_assertions, bool)
    assert_is_type(min_mem_size, None, int)
    assert_is_type(max_mem_size, None, BoundInt((1 << 25)))
    assert_is_type(ice_root, None, I(str, os.path.isdir))
    if jar_path:
        assert_satisfies(jar_path, jar_path.endswith(u'h2o.jar'))
    if ((min_mem_size is not None) and (max_mem_size is not None) and (min_mem_size > max_mem_size)):
        raise H2OValueError((u'`min_mem_size`=%d is larger than the `max_mem_size`=%d' % (min_mem_size, max_mem_size)))
    if (port is None):
        port = u'54321+'
    baseport = None
    if is_type(port, str):
        if port.isdigit():
            port = int(port)
        else:
            if (not ((port[(-1)] == u'+') and port[:(-1)].isdigit())):
                raise H2OValueError((u"`port` should be of the form 'DDDD+', where D is a digit. Got: %s" % port))
            baseport = int(port[:(-1)])
            port = 0
    hs = H2OLocalServer()
    hs._verbose = bool(verbose)
    hs._jar_path = hs._find_jar(jar_path)
    hs._ice_root = ice_root
    if (not ice_root):
        hs._ice_root = tempfile.mkdtemp()
        hs._tempdir = hs._ice_root
    if verbose:
        print(u'Attempting to start a local H2O server...')
    hs._launch_server(port=port, baseport=baseport, nthreads=int(nthreads), ea=enable_assertions, mmax=max_mem_size, mmin=min_mem_size)
    if verbose:
        print((u'  Server is running at %s://%s:%d' % (hs.scheme, hs.ip, hs.port)))
    atexit.register((lambda : hs.shutdown()))
    return hs
