{
  BufferedString bs=new BufferedString();
  for (int cIdx=0; cIdx < inSchema.length; cIdx++) {
    int inputFieldIdx=inSchema[cIdx].pos();
    Schema.Type inputType=AvroUtil.toPrimitiveType(inSchema[cIdx].schema());
    Object value=gr.get(inputFieldIdx);
    if (value == null) {
      dout.addInvalidCol(cIdx);
    }
 else {
switch (inputType) {
case BOOLEAN:
        dout.addNumCol(cIdx,((Boolean)value) ? 1 : 0);
      break;
case INT:
    dout.addNumCol(cIdx,((Integer)value),0);
  break;
case LONG:
dout.addNumCol(cIdx,((Long)value),0);
break;
case FLOAT:
dout.addNumCol(cIdx,(Float)value);
break;
case DOUBLE:
dout.addNumCol(cIdx,(Double)value);
break;
case ENUM:
GenericData.EnumSymbol es=(GenericData.EnumSymbol)value;
dout.addNumCol(cIdx,es.getSchema().getEnumOrdinal(es.toString()));
break;
case BYTES:
dout.addStrCol(cIdx,bs.set(((ByteBuffer)value).array()));
break;
case STRING:
dout.addStrCol(cIdx,bs.set(((String)value).getBytes()));
break;
case NULL:
dout.addInvalidCol(cIdx);
break;
}
}
}
}
