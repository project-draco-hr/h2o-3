def test_0_NA_2enum(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(100, 30, '0', 'cC', 100), (100, 30, '0.0', 'cC', 100), (100, 30, '0.0000000', 'cC', 100)]
    for (rowCount, colCount, zero, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, zero, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=30, doSummary=False)
        pA = h2o_cmd.ParseObj(parseResult, expectedNumRows=rowCount, expectedNumCols=colCount)
        print pA.numRows, pA.numCols, pA.parse_key
        iA = h2o_cmd.InspectObj(pA.parse_key, expectedNumRows=rowCount, expectedNumCols=colCount, expectedMissinglist=[])
        print iA.missingList, iA.labelList, iA.numRows, iA.numCols
        co = h2o_cmd.runSummary(key=hex_key, column=0)
        print co.label, co.type, co.missing, co.domain, sum(co.bins)
        coList = [co.base, len(co.bins), len(co.data), co.domain, co.label, co.maxs, co.mean, co.mins, co.missing, co.ninfs, co.pctiles, co.pinfs, co.precision, co.sigma, co.str_data, co.stride, co.type, co.zeros]
        for (k, v) in co:
            print k, v
        if DO_REBALANCE:
            print 'Rebalancing it to create an artificially large # of chunks'
            rb_key = ('rb_%s' % hex_key)
            start = time.time()
            print ('Rebalancing %s to %s with %s chunks' % (hex_key, rb_key, REBALANCE_CHUNKS))
            rebalanceResult = h2o.nodes[0].rebalance(source=hex_key, after=rb_key, chunks=REBALANCE_CHUNKS)
            elapsed = (time.time() - start)
            print 'rebalance end on ', csvFilename, 'took', elapsed, 'seconds'
        else:
            rb_key = hex_key
        print ('Now doing to_enum across all columns of %s' % hex_key)
        for column_index in range(colCount):
            result = h2o.nodes[0].to_enum(None, src_key=hex_key, column_index=(column_index + 1))
            co = h2o_cmd.runSummary(key=hex_key, column=(column_index + 1))
            print co.label, co.type, co.missing, co.domain, sum(co.bins)
            coList = [co.base, len(co.bins), len(co.data), co.domain, co.label, co.maxs, co.mean, co.mins, co.missing, co.ninfs, co.pctiles, co.pinfs, co.precision, co.sigma, co.str_data, co.stride, co.type, co.zeros]
            if (co.type != 'Enum'):
                raise Exception(("column %s, which has name %s, didn't convert to Enum, is %s" % (column_index, colname, co.type)))
            if ((co.missing <= 0) or (co.missing > rowCount)):
                raise Exception(('column %s, which has name %s, somehow got NA cnt wrong after convert to Enum  %s %s' % (column_index, colname, co.missing, rowCount)))
            if (co.domain != 1):
                print 'column:', h2o.dump_json(co)
                raise Exception(('column %s, which has name %s, should have cardinality 1, got: %s' % (column_index, co.label, domain)))
