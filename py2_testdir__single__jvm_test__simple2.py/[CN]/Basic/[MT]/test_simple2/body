def test_simple2(self):
    csvPathname = find_file('bigdata/laptop/poker-hand-testing.data')
    import_result = h2o.n0.import_files(path=csvPathname)
    k = import_result['keys'][0]
    frames_result = h2o.n0.frames(key=k)
    frame = frames_result['frames'][0]
    byteSize = frame['byteSize']
    rows = frame['rows']
    columns = frame['columns']
    for c in columns:
        label = c['label']
        missing = c['missing']
        stype = c['type']
        zeros = c['zeros']
        domain = c['domain']
    frames = h2o.n0.frames()['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    for (k, v) in frames_dict.items():
        print 'frames_dict key:', k
    parse_result = h2o.n0.parse(key=k, intermediateResults=DO_INTERMEDIATE_RESULTS)
    frame = parse_result['frames'][0]
    hex_key = frame['key']['name']
    colCount = 11
    rowCount = 1000000
    start = time.time()
    inspect = h2o_cmd.runInspect(None, hex_key)
    print 'Inspect:', hex_key, 'took', (time.time() - start), 'seconds'
    numCols = len(inspect['frames'][0]['columns'])
    numRows = inspect['frames'][0]['rows']
    print ('\n' + csvPathname), '    rows:', '{:,}'.format(numRows), '    len(columns):', '{:,}'.format(numCols)
    self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
    self.assertEqual(numRows, rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (numRows, rowCount)))
    verboseprint(hex_key, ':', dump_json(parse_result))
