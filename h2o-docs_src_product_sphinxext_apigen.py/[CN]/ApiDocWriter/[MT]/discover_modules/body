def discover_modules(self):
    " Return module sequence discovered from ``self.package_name`` \n\n\n        Parameters\n        ----------\n        None\n\n        Returns\n        -------\n        mods : sequence\n            Sequence of module names within ``self.package_name``\n\n        Examples\n        --------\n        >>> dw = ApiDocWriter('sphinx')\n        >>> mods = dw.discover_modules()\n        >>> 'sphinx.util' in mods\n        True\n        >>> dw.package_skip_patterns.append('\\.util$')\n        >>> 'sphinx.util' in dw.discover_modules()\n        False\n        >>> \n        "
    modules = [self.package_name]
    for (dirpath, dirnames, filenames) in os.walk(self.root_path):
        root_uri = self._path2uri(os.path.join(self.root_path, dirpath))
        for dirname in dirnames[:]:
            package_uri = '.'.join((root_uri, dirname))
            if (self._uri2path(package_uri) and self._survives_exclude(package_uri, 'package')):
                modules.append(package_uri)
            else:
                dirnames.remove(dirname)
        for filename in filenames:
            module_name = filename[:(-3)]
            module_uri = '.'.join((root_uri, module_name))
            if (self._uri2path(module_uri) and self._survives_exclude(module_uri, 'module')):
                modules.append(module_uri)
    return sorted(modules)
