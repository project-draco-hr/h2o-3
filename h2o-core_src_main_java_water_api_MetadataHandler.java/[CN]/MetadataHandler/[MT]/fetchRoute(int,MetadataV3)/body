{
  Route route=null;
  if (docs.path != null && docs.http_method != null) {
    try {
      route=RequestServer.lookupRoute(new RequestUri(docs.http_method,docs.path));
    }
 catch (    MalformedURLException e) {
      route=null;
    }
  }
 else {
    if (docs.path != null)     try {
      docs.num=Integer.parseInt(docs.path);
    }
 catch (    NumberFormatException e) {
    }
    if (docs.num >= 0 && docs.num < RequestServer.numRoutes())     route=RequestServer.routes().get(docs.num);
    docs.routes=new RouteBase[]{(RouteBase)Schema.schema(version,Route.class).fillFromImpl(route)};
  }
  if (route == null)   return null;
  Schema sinput, soutput;
  if (route._handler_class.equals(water.api.ModelBuilderHandler.class) || route._handler_class.equals(water.api.GridSearchHandler.class)) {
    String ss[]=route._url.split("/");
    String algoURLName=ss[3];
    String algoName=ModelBuilder.algoName(algoURLName);
    String schemaDir=ModelBuilder.schemaDirectory(algoURLName);
    int version2=Integer.valueOf(ss[1]);
    try {
      String inputSchemaName=schemaDir + algoName + "V"+ version2;
      sinput=(Schema)TypeMap.getTheFreezableOrThrow(TypeMap.onIce(inputSchemaName));
    }
 catch (    java.lang.ClassNotFoundException e) {
      sinput=(Schema)TypeMap.theFreezable(TypeMap.onIce(schemaDir + algoName + "V3"));
    }
    sinput.init_meta();
    soutput=sinput;
  }
 else {
    sinput=Schema.newInstance(Handler.getHandlerMethodInputSchema(route._handler_method));
    soutput=Schema.newInstance(Handler.getHandlerMethodOutputSchema(route._handler_method));
  }
  docs.routes[0].input_schema=sinput.getClass().getSimpleName();
  docs.routes[0].output_schema=soutput.getClass().getSimpleName();
  docs.routes[0].markdown=route.markdown(sinput,soutput).toString();
  return docs;
}
