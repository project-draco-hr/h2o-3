{
  Route route=null;
  if (null != docs.path && null != docs.http_method) {
    route=RequestServer.lookup(docs.http_method,docs.path);
  }
 else {
    int i=0;
    for (    Route r : RequestServer.routes())     if (i++ == docs.num) {
      route=r;
      break;
    }
    docs.routes=new RouteBase[]{(RouteBase)Schema.schema(version,Route.class).fillFromImpl(route)};
  }
  Schema sinput, soutput;
  if (route._handler_class.equals(water.api.ModelBuilderHandler.class)) {
    String ss[]=route._url_pattern_raw.split("/");
    String algoURLName=ss[3];
    int version2=Integer.valueOf(ss[1]);
    String algoName=ModelBuilder.algoName(algoURLName);
    String schemaDir=ModelBuilder.schemaDirectory(algoURLName);
    String inputSchemaName=schemaDir + algoName + "V"+ version2;
    sinput=(Schema)TypeMap.theFreezable(TypeMap.onIce(inputSchemaName));
    sinput.init_meta();
    soutput=sinput;
  }
 else {
    sinput=Schema.newInstance(Handler.getHandlerMethodInputSchema(route._handler_method));
    soutput=Schema.newInstance(Handler.getHandlerMethodOutputSchema(route._handler_method));
  }
  docs.routes[0].input_schema=sinput.getClass().getSimpleName();
  docs.routes[0].output_schema=soutput.getClass().getSimpleName();
  docs.routes[0].markdown=route.markdown(sinput,soutput).toString();
  return docs;
}
