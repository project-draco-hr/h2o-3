def test_GLM_basic_1(self):
    importFolderPath = 'logreg'
    csvFilename = 'benign.csv'
    hex_key = 'benign.hex'
    csvPathname = ((importFolderPath + '/') + csvFilename)
    parseResult = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=hex_key, check_header=1, timeoutSecs=180, doSummary=False)
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    expected = []
    allowedDelta = 0
    labelListUsed = list(labelList)
    labelListUsed.remove('STR')
    labelListUsed.remove('FNDX')
    numColsUsed = (numCols - 2)
    for trial in range(1):
        parameters = {'validation_frame': parse_key, 'response_column': 'FNDX', }
        model_key = 'benign_glm.hex'
        bmResult = h2o.n0.build_model(algo='glm', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=10)
        bm = OutputObj(bmResult, 'bm')
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        h2o_glm.simpleCheckGLM(self, model, parameters, labelList, labelListUsed)
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        mcms = OutputObj({'data': cmm.max_criteria_and_metric_scores.data, }, 'mcms')
        m1 = mcms.data[1:]
        h0 = mcms.data[0]
        print '\nmcms', tabulate(m1, headers=h0)
        thms = OutputObj(cmm.thresholds_and_metric_scores, 'thms')
        cmms = OutputObj({'cm': cmm.confusion_matrices, }, 'cmms')
        if (1 == 0):
            print ''
            for (i, c) in enumerate(cmms.cm):
                print ('\ncmms.cm[%s]' % i), tabulate(c)
            print ''
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mm = OutputObj(mmResult['model_metrics'][0], 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
