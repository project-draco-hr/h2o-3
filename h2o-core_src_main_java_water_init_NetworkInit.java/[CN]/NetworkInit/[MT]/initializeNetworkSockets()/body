{
  H2O.API_PORT=H2O.ARGS.port == 0 ? H2O.ARGS.baseport : H2O.ARGS.port;
  if (H2O.getJetty() == null) {
    H2O.setJetty(new JettyHTTPD());
  }
  ServerSocket apiSocket=null;
  while (true) {
    H2O.H2O_PORT=H2O.API_PORT + 1;
    try {
      if (!H2O.ARGS.disable_web) {
        apiSocket=H2O.ARGS.web_ip == null ? new ServerSocket(H2O.API_PORT) : new ServerSocket(H2O.API_PORT,-1,getInetAddress(H2O.ARGS.web_ip,null));
        apiSocket.setReuseAddress(true);
      }
      _udpSocket=DatagramChannel.open();
      _udpSocket.socket().setReuseAddress(true);
      InetSocketAddress isa=new InetSocketAddress(H2O.SELF_ADDRESS,H2O.H2O_PORT);
      _udpSocket.socket().bind(isa);
      _tcpSocket=ServerSocketChannel.open();
      _tcpSocket.socket().setReceiveBufferSize(water.AutoBuffer.TCP_BUF_SIZ);
      _tcpSocket.socket().bind(isa);
      if (!H2O.ARGS.disable_web) {
        apiSocket.close();
        try {
          H2O.getJetty().start(H2O.ARGS.web_ip,H2O.API_PORT);
        }
 catch (        Exception e) {
          Log.err("Cannot start Jetty server for REST interface!",e);
          H2O.exit(-1);
        }
      }
      break;
    }
 catch (    Exception e) {
      if (apiSocket != null)       try {
        apiSocket.close();
      }
 catch (      IOException ohwell) {
        Log.err(ohwell);
      }
      if (_udpSocket != null)       try {
        _udpSocket.close();
      }
 catch (      IOException ie) {
      }
      if (_tcpSocket != null)       try {
        _tcpSocket.close();
      }
 catch (      IOException ie) {
      }
      apiSocket=null;
      _udpSocket=null;
      _tcpSocket=null;
      if (H2O.ARGS.port != 0)       H2O.die("On " + H2O.SELF_ADDRESS + " some of the required ports "+ H2O.ARGS.port+ ", "+ (H2O.ARGS.port + 1)+ " are not available, change -port PORT and try again.");
    }
    H2O.API_PORT+=2;
    if (H2O.API_PORT > (1 << 16)) {
      Log.err("Cannot find free port for " + H2O.SELF_ADDRESS);
      H2O.exit(-1);
    }
  }
  boolean isIPv6=H2O.SELF_ADDRESS instanceof Inet6Address;
  H2O.SELF=H2ONode.self(H2O.SELF_ADDRESS);
  Log.info("Internal communication uses port: ",H2O.H2O_PORT,"\n" + "Listening for HTTP and REST traffic on " + H2O.getURL(H2O.getJetty().getScheme()) + "/");
  try {
    Log.debug("Interface MTU: ",(NetworkInterface.getByInetAddress(H2O.SELF_ADDRESS)).getMTU());
  }
 catch (  SocketException se) {
    Log.debug("No MTU due to SocketException. " + se.toString());
  }
  String embeddedConfigFlatfile=null;
  AbstractEmbeddedH2OConfig ec=H2O.getEmbeddedH2OConfig();
  if (ec != null) {
    ec.notifyAboutEmbeddedWebServerIpPort(H2O.SELF_ADDRESS,H2O.API_PORT);
    if (ec.providesFlatfile()) {
      try {
        embeddedConfigFlatfile=ec.fetchFlatfile();
      }
 catch (      Exception e) {
        Log.err("Failed to get embedded config flatfile");
        Log.err(e);
        H2O.exit(1);
      }
    }
  }
  if (embeddedConfigFlatfile != null)   H2O.STATIC_H2OS=parseFlatFileFromString(embeddedConfigFlatfile);
 else   H2O.STATIC_H2OS=parseFlatFile(H2O.ARGS.flatfile);
  int hash=H2O.ARGS.name.hashCode();
  try {
    H2O.CLOUD_MULTICAST_GROUP=isIPv6 ? NetworkUtils.getIPv6MulticastGroup(hash,NetworkUtils.getIPv6Scope(H2O.SELF_ADDRESS)) : NetworkUtils.getIPv4MulticastGroup(hash);
  }
 catch (  UnknownHostException e) {
    Log.err("Cannot get multicast group address for " + H2O.SELF_ADDRESS);
    Log.throwErr(e);
  }
  H2O.CLOUD_MULTICAST_PORT=NetworkUtils.getMulticastPort(hash);
}
