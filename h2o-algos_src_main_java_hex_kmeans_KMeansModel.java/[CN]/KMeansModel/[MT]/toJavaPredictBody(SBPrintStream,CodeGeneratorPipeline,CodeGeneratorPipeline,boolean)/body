{
  final String mname=JCodeGen.toJavaId(_key.toString());
  if (_parms._standardize) {
    fileCtx.add(new CodeGenerator(){
      @Override public void generate(      JCodeSB out){
        JCodeGen.toClassWithArray(out,null,mname + "_MEANS",_output._normSub,"Column means of training data");
        JCodeGen.toClassWithArray(out,null,mname + "_MULTS",_output._normMul,"Reciprocal of column standard deviations of training data");
        JCodeGen.toClassWithArray(out,null,mname + "_CENTERS",_output._centers_std_raw,"Normalized cluster centers[K][features]");
      }
    }
);
    body.ip("preds[0] = KMeans_closest(").pj(mname + "_CENTERS","VALUES").p(", data, DOMAINS, ").pj(mname + "_MEANS","VALUES").p(", ").pj(mname + "_MULTS","VALUES").p(");").nl();
  }
 else {
    fileCtx.add(new CodeGenerator(){
      @Override public void generate(      JCodeSB out){
        JCodeGen.toClassWithArray(out,null,mname + "_CENTERS",_output._centers_raw,"Denormalized cluster centers[K][features]");
      }
    }
);
    body.ip("preds[0] = KMeans_closest(").pj(mname + "_CENTERS","VALUES").p(",data, DOMAINS, null, null);").nl();
  }
}
