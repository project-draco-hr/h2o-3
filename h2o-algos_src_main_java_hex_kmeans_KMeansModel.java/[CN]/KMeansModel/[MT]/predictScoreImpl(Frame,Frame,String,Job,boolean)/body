{
  if (!_parms._pred_indicator) {
    return super.predictScoreImpl(orig,adaptedFr,destination_key,j,computeMetrics);
  }
 else {
    final int len=_parms._k;
    String prefix="cluster_";
    Frame adaptFrm=new Frame(adaptedFr);
    for (int c=0; c < len; c++)     adaptFrm.add(prefix + Double.toString(c + 1),adaptFrm.anyVec().makeZero());
    new MRTask(){
      @Override public void map(      Chunk chks[]){
        if (isCancelled() || j != null && j.stop_requested())         return;
        double tmp[]=new double[_output._names.length];
        double preds[]=new double[len];
        for (int row=0; row < chks[0]._len; row++) {
          double p[]=score_indicator(chks,row,tmp,preds);
          for (int c=0; c < preds.length; c++)           chks[_output._names.length + c].set(row,p[c]);
        }
        if (j != null)         j.update(1);
      }
    }
.doAll(adaptFrm);
    int x=_output._names.length, y=adaptFrm.numCols();
    Frame f=adaptFrm.extractFrame(x,y);
    f=new Frame(Key.<Frame>make(destination_key),f.names(),f.vecs());
    DKV.put(f);
    makeMetricBuilder(null).makeModelMetrics(this,orig,null,null);
    return f;
  }
}
