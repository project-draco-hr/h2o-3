{
  GLM job=null;
  GLMModel model=null;
  Frame scoreTrain=null;
  String[] cfs1=new String[]{"Intercept","Merit.1","Merit.2","Merit.3","Class.2","Class.3","Class.4","Class.5"};
  double[] vals=new double[]{-2.0357,-0.1378,-0.2207,-0.4930,0.2998,0.4691,0.5259,0.2156};
  GLMParameters parms=new GLMParameters(Family.poisson);
  parms._train=_canCarTrain._key;
  parms._ignored_columns=new String[]{"Insured","Premium","Cost"};
  parms._response_column="Claims";
  parms._offset_column="logInsured";
  parms._standardize=false;
  parms._lambda=new double[]{0};
  parms._alpha=new double[]{0};
  parms._objective_epsilon=0;
  parms._gradient_epsilon=1e-10;
  parms._max_iterations=1000;
  for (  Solver s : GLMParameters.Solver.values()) {
    try {
      parms._solver=s;
      job=new GLM(Key.make("prostate_model"),"glm test simple poisson",parms);
      model=job.trainModel().get();
      HashMap<String,Double> coefs=model.coefficients();
      System.out.println("coefs = " + coefs);
      for (int i=0; i < cfs1.length; ++i)       assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
      assertEquals(33850,GLMTest.nullDeviance(model),5);
      assertEquals(579.5,GLMTest.residualDeviance(model),1e-4 * 579.5);
      assertEquals(19,GLMTest.nullDOF(model),0);
      assertEquals(12,GLMTest.resDOF(model),0);
      assertEquals(805.9,GLMTest.aic(model),1e-4 * 805.9);
      try {
        Frame fr=new Frame(_canCarTrain.names(),_canCarTrain.vecs());
        fr.remove(parms._offset_column);
        scoreTrain=model.score(fr);
        assertTrue("shoul've thrown IAE",false);
      }
 catch (      IllegalArgumentException iae) {
        assertTrue(iae.getMessage().contains("Test/Validation dataset is missing offset vector"));
      }
      scoreTrain=model.score(_canCarTrain);
      hex.ModelMetricsRegressionGLM mmTrain=(ModelMetricsRegressionGLM)hex.ModelMetricsRegression.getFromDKV(model,_canCarTrain);
      assertEquals(model._output._training_metrics._MSE,mmTrain._MSE,1e-8);
      assertEquals(GLMTest.residualDeviance(model),mmTrain._resDev,1e-8);
      assertEquals(GLMTest.nullDeviance(model),mmTrain._nullDev,1e-8);
    }
  finally {
      if (job != null)       job.remove();
      if (model != null)       model.delete();
      if (scoreTrain != null)       scoreTrain.delete();
    }
  }
}
