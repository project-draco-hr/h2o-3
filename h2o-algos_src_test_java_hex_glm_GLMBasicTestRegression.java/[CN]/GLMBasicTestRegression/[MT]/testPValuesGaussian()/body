{
  GLMParameters params=new GLMParameters(Family.gaussian);
  params._response_column="CAPSULE";
  params._standardize=false;
  params._train=_prostateTrain._key;
  params._compute_p_values=true;
  params._lambda=new double[]{0};
  GLM job0=null;
  try {
    job0=new GLM(Key.make("prostate_model"),"glm test p-values",params);
    params._solver=Solver.L_BFGS;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
    if (job0 != null)     job0.remove();
  }
  try {
    job0=new GLM(Key.make("prostate_model"),"glm test p-values",params);
    params._solver=Solver.COORDINATE_DESCENT_NAIVE;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
    if (job0 != null)     job0.remove();
  }
  try {
    job0=new GLM(Key.make("prostate_model"),"glm test p-values",params);
    params._solver=Solver.COORDINATE_DESCENT;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with IRLSM",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
    if (job0 != null)     job0.remove();
  }
  params._solver=Solver.IRLSM;
  try {
    job0=new GLM(Key.make("prostate_model"),"glm test p-values",params);
    params._lambda=new double[]{1};
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with no regularization",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
    if (job0 != null)     job0.remove();
  }
  params._lambda=new double[]{0};
  try {
    params._lambda_search=true;
    GLMModel model=job0.trainModel().get();
    assertFalse("should've thrown, p-values only supported with no regularization (i.e. no lambda search)",true);
  }
 catch (  H2OModelBuilderIllegalArgumentException t) {
    if (job0 != null)     job0.remove();
  }
  params._lambda_search=false;
  GLM job=new GLM(Key.make("prostate_model"),"glm test p-values",params);
  GLMModel model=null;
  try {
    model=job.trainModel().get();
    String[] names_expected=new String[]{"Intercept","ID","AGE","RACE.R2","RACE.R3","DPROS.b","DPROS.c","DPROS.d","DCAPS.b","PSA","VOL","GLEASON"};
    double[] stder_expected=new double[]{0.4035941476,0.0002387281,0.0040245520,0.2511007120,0.2593492335,0.0657117271,0.0713659021,0.0937207659,0.0888124376,0.0015060289,0.0013919737,0.0273258788};
    double[] zvals_expected=new double[]{-1.70241133,1.29061005,-0.14920829,-0.05883397,-0.56178799,2.22564893,3.21891333,1.22168646,1.61119882,3.13650800,-1.39379859,5.26524961};
    double[] pvals_expected=new double[]{8.979610e-02,1.979113e-01,8.814975e-01,9.531266e-01,5.747131e-01,2.683977e-02,1.439295e-03,2.228612e-01,1.082711e-01,1.893210e-03,1.644916e-01,2.805776e-07};
    String[] names_actual=model._output.coefficientNames();
    HashMap<String,Integer> coefMap=new HashMap<>();
    for (int i=0; i < names_expected.length; ++i)     coefMap.put(names_expected[i],i);
    double[] stder_actual=model._output.stdErr();
    double[] zvals_actual=model._output.zValues();
    double[] pvals_actual=model._output.pValues();
    for (int i=0; i < stder_expected.length; ++i) {
      int id=coefMap.get(names_actual[i]);
      assertEquals(stder_expected[id],stder_actual[i],stder_expected[id] * 1e-5);
      assertEquals(zvals_expected[id],zvals_actual[i],Math.abs(zvals_expected[id]) * 1e-5);
      assertEquals(pvals_expected[id],pvals_actual[i],pvals_expected[id] * 1e-3);
    }
  }
  finally {
    if (model != null)     model.delete();
    if (job != null)     job.remove();
  }
  params._standardize=true;
  job=new GLM(Key.make("prostate_model"),"glm test p-values",params);
  try {
    model=job.trainModel().get();
    String[] names_expected=new String[]{"Intercept","ID","AGE","RACE.R2","RACE.R3","DPROS.b","DPROS.c","DPROS.d","DCAPS.b","PSA","VOL","GLEASON"};
    double[] zvals_expected=new double[]{1.14158283,1.29061005,-0.14920829,-0.05883397,-0.56178799,2.22564893,3.21891333,1.22168646,1.61119882,3.13650800,-1.39379859,5.26524961};
    double[] pvals_expected=new double[]{2.546098e-01,1.979113e-01,8.814975e-01,9.531266e-01,5.747131e-01,2.683977e-02,1.439295e-03,2.228612e-01,1.082711e-01,1.893210e-03,1.644916e-01,2.805776e-07};
    String[] names_actual=model._output.coefficientNames();
    HashMap<String,Integer> coefMap=new HashMap<>();
    for (int i=0; i < names_expected.length; ++i)     coefMap.put(names_expected[i],i);
    double[] zvals_actual=model._output.zValues();
    double[] pvals_actual=model._output.pValues();
    for (int i=0; i < zvals_expected.length; ++i) {
      int id=coefMap.get(names_actual[i]);
      assertEquals(zvals_expected[id],zvals_actual[i],Math.abs(zvals_expected[id]) * 1e-5);
      assertEquals(pvals_expected[id],pvals_actual[i],pvals_expected[id] * 1e-3);
    }
  }
  finally {
    if (model != null)     model.delete();
    if (job != null)     job.remove();
  }
}
