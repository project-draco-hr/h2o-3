{
  GLM job=null;
  GLMModel model=null;
  Frame scoreTrain=null;
  String[] cfs1=new String[]{"Intercept","Swimmer.Occas","Location.NonBeach","Age.20-24","Age.25-29","Sex.Male"};
  double[][] vals=new double[][]{{0.89100,0.82210,0.72660,-0.50330,-0.26790,-0.10560},{-0.12261,0.61149,0.53454,-0.37442,-0.18973,-0.08985},{1.02964,-0.14079,-0.12200,0.08502,0.04269,0.02105},{1.05665,-0.25891,-0.22185,0.15325,0.07624,0.03908},{1.08076,-0.35690,-0.30154,0.20556,0.10122,0.05375},{1.10230,-0.43751,-0.36337,0.24318,0.11830,0.06467}};
  int dof=286, res_dof=281;
  double[] nullDev=new double[]{1564,824.5,834.2,967.0,1518,964.4};
  double[] resDev=new double[]{1469,755.4,770.8,908.9,1465,915.7};
  double[] varPow=new double[]{0,1.0,1.25,1.5,1.75,2.0};
  GLMParameters parms=new GLMParameters(Family.tweedie);
  parms._train=_earinf._key;
  parms._ignored_columns=new String[]{};
  parms._response_column="Infections";
  parms._standardize=false;
  parms._lambda=new double[]{0};
  parms._alpha=new double[]{0};
  parms._objective_epsilon=0;
  parms._gradient_epsilon=1e-10;
  parms._max_iterations=1000;
  for (int x=0; x < varPow.length; ++x) {
    double p=varPow[x];
    parms._tweedie_variance_power=p;
    for (    Solver s : GLMParameters.Solver.values()) {
      try {
        parms._solver=s;
        job=new GLM(Key.make("prostate_model"),"glm test simple poisson",parms);
        model=job.trainModel().get();
        HashMap<String,Double> coefs=model.coefficients();
        System.out.println("coefs = " + coefs);
        for (int i=0; i < cfs1.length; ++i)         assertEquals(vals[x][i],coefs.get(cfs1[i]),1e-4);
        assertEquals(nullDev[x],(GLMTest.nullDeviance(model)),5e-4 * nullDev[x]);
        assertEquals(resDev[x],(GLMTest.residualDeviance(model)),5e-4 * resDev[x]);
        assertEquals(dof,GLMTest.nullDOF(model),0);
        assertEquals(res_dof,GLMTest.resDOF(model),0);
        scoreTrain=model.score(_earinf);
        hex.ModelMetricsRegressionGLM mmTrain=(ModelMetricsRegressionGLM)hex.ModelMetricsRegression.getFromDKV(model,_earinf);
        assertEquals(model._output._training_metrics._MSE,mmTrain._MSE,1e-8);
        assertEquals(GLMTest.residualDeviance(model),mmTrain._resDev,1e-8);
        assertEquals(GLMTest.nullDeviance(model),mmTrain._nullDev,1e-8);
      }
  finally {
        if (job != null)         job.remove();
        if (model != null)         model.delete();
        if (scoreTrain != null)         scoreTrain.delete();
      }
    }
  }
}
