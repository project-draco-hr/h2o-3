def setup_model(self):
    '\n        This function setup the gridsearch hyper-parameters that will be used later on:\n\n        1. It will first try to grab all the parameters that are griddable and parameters used by deeplearning.\n        2. It will find the intersection of parameters that are both griddable and used by deeplearning.\n        3. There are several extra parameters that are used by deeplearning that are denoted as griddable but actually\n        is not.  These parameters have to be discovered manually and they These are captured in\n        self.exclude_parameter_lists.\n        4. We generate the gridsearch hyper-parameter.  For numerical parameters, we will generate those randomly.\n        For enums, we will include all of them.\n\n        :return: None\n        '
    model = H2ODeepLearningEstimator(distribution=self.family, seed=self.seed, nfolds=self.nfolds, hidden=[10, 10, 10])
    model.train(x=self.x_indices, y=self.y_index, training_frame=self.training1_data)
    self.model_run_time = pyunit_utils.find_grid_runtime([model])
    print('Time taken to build a base barebone model is {0}'.format(self.model_run_time))
    summary_list = model._model_json['output']['scoring_history']
    num_iterations = summary_list['iterations'][2]
    if (num_iterations == 0):
        self.min_runtime_per_iteration = self.model_run_time
    else:
        self.min_runtime_per_iteration = (self.model_run_time / num_iterations)
    (self.gridable_parameters, self.gridable_types, self.gridable_defaults) = pyunit_utils.get_gridables(model._model_json['parameters'])
    (self.hyper_params, self.gridable_parameters, self.gridable_types, self.gridable_defaults) = pyunit_utils.gen_grid_search(model.full_parameters.keys(), self.hyper_params, self.exclude_parameter_lists, self.gridable_parameters, self.gridable_types, self.gridable_defaults, random.randint(1, self.max_int_number), self.max_int_val, self.min_int_val, random.randint(1, self.max_real_number), self.max_real_val, self.min_real_val)
    time_scale = (self.time_scale * self.model_run_time)
    if ('max_runtime_secs' in list(self.hyper_params)):
        self.hyper_params['max_runtime_secs'] = [(time_scale * x) for x in self.hyper_params['max_runtime_secs']]
    if ('epsilon' in list(self.hyper_params)):
        self.hyper_params['epsilon'] = [(0.0001 * x) for x in self.hyper_params['epsilon']]
    if ('input_dropout_ratio' in list(self.hyper_params)):
        self.hyper_params['input_dropout_ratio'] = [(0.5 * x) for x in self.hyper_params['input_dropout_ratio']]
    if ('hidden_dropout_ratio' in list(self.hyper_params)):
        self.hyper_params['hidden_dropout_ratio'] = [(0.5 * x) for x in self.hyper_params['hidden_dropout_ratio']]
    if ('hidden' in list(self.hyper_params)):
        num_layer = random.randint(1, 3)
        self.hyper_params['hidden'] = [random.randint(1, self.max_int_val) for p in range(0, num_layer)]
    if ('epochs' in self.hyper_params):
        self.hyper_params['epochs'] = [random.randint(self.min_int_val, self.max_int_val) for p in range(0, self.max_int_number)]
    [self.possible_number_models, self.final_hyper_params] = pyunit_utils.check_and_count_models(self.hyper_params, [], [], [], [], self.max_grid_model)
    if (('max_runtime_secs' not in list(self.final_hyper_params)) and ('max_runtime_secs' in list(self.hyper_params))):
        self.final_hyper_params['max_runtime_secs'] = self.hyper_params['max_runtime_secs']
    self.final_hyper_params['seed'] = [self.seed]
    pyunit_utils.write_hyper_parameters_json(self.current_dir, self.sandbox_dir, self.json_filename, self.final_hyper_params)
