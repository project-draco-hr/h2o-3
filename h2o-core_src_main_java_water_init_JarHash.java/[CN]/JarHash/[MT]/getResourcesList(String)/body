{
  Set<String> resList=new HashSet<>();
  try {
    URL classUrl=JarHash.class.getResource("/water/H2O.class");
    if (classUrl != null && classUrl.getProtocol().equals("jar")) {
      String jarPath=classUrl.getPath().substring(5,classUrl.getPath().indexOf("!"));
      JarFile jar=new JarFile(URLDecoder.decode(jarPath,"UTF-8"));
      Enumeration<JarEntry> files=jar.entries();
      while (files.hasMoreElements()) {
        String fName=files.nextElement().getName();
        if (fName.startsWith(path + "/")) {
          String resourceName=fName.substring((path + "/").length());
          int checkSubdir=resourceName.indexOf("/");
          if (checkSubdir >= 0)           resourceName=resourceName.substring(0,checkSubdir);
          if (resourceName.length() > 0)           resList.add(resourceName);
        }
      }
    }
 else {
      String resourceName;
      BufferedReader resources=new BufferedReader(new InputStreamReader(JarHash.class.getResourceAsStream("/gaid")));
      if (resources != null) {
        while ((resourceName=resources.readLine()) != null)         if (resourceName.length() > 0)         resList.add(resourceName);
      }
    }
  }
 catch (  Exception ignore) {
    Log.debug("Failed in reading gaid resources.");
  }
  return new ArrayList<>(resList);
}
