def anomaly():
    print 'Deep Learning Anomaly Detection MNIST'
    train = h2o.import_file(tests.locate('bigdata/laptop/mnist/train.csv.gz'))
    test = h2o.import_file(tests.locate('bigdata/laptop/mnist/test.csv.gz'))
    predictors = range(0, 784)
    resp = 784
    train = train[predictors]
    test = test[predictors]
    from h2o.estimators.deeplearning import H2OAutoEncoderEstimator
    ae_model = H2OAutoEncoderEstimator(activation='Tanh', hidden=[2], l1=1e-05, ignore_const_cols=False, epochs=1)
    ae_model.train(X=predictors, training_frame=train)
    old_model_style = h2o.deeplearning(x=train[predictors], autoencoder=True, activation='Tanh', hidden=[2], l1=1e-05, ignore_const_cols=False, epochs=1)
    old_model_style.anomaly(test).show()
    test_rec_error = ae_model.anomaly(test)
    test_recon = ae_model.predict(test)
