{
  if (ratios.length < 0)   throw new IllegalArgumentException("No ratio specified!");
  if (ratios.length > 100)   throw new IllegalArgumentException("Too many frame splits demanded!");
  for (  double p : ratios)   if (p < 0.0 || p > 1.0)   throw new IllegalArgumentException("Ratios must be between 0 and 1!");
  if (dest_keys != null && ratios.length != dest_keys.length - 1)   throw new IllegalArgumentException("Number of destination keys has to match to a number of split ratios!");
  if (dest_keys == null)   dest_keys=generateNumKeys(dataset._key,ratios.length + 1);
  H2O.H2OCountedCompleter hcc=new H2O.H2OCountedCompleter(){
    @Override protected void compute2(){
      FrameSplitter fs=new FrameSplitter(this,dataset,ratios,dest_keys,_key);
      H2O.submitTask(fs);
    }
    @Override public void onCompletion(    CountedCompleter caller){
      FrameSplitter fs=(FrameSplitter)caller;
      Job j=DKV.getGet(_key);
      if (fs.getErrors() != null)       j.failed(fs.getErrors()[0]);
 else       j.done();
    }
    @Override public boolean onExceptionalCompletion(    Throwable ex,    CountedCompleter caller){
      ((Job)DKV.getGet(_key)).failed(ex);
      return false;
    }
  }
;
  return (SplitFrame)start(hcc,ratios.length + 1);
}
