{
  _mapping=new GIDMapping();
  List<Exemplar> exemplars=new ArrayList<>();
  List<Long> counts=new ArrayList<>();
  Chunk[] dataChks=Arrays.copyOf(chks,chks.length - 1);
  Chunk assignmentChk=chks[chks.length - 1];
  DataInfo di=((DataInfo)_dataInfoKey.get());
  assert(di != null);
  DataInfo.Row row=di.newDenseRow();
  final int nCols=row.nNums;
  for (int r=0; r < chks[0]._len; ++r) {
    long rowIndex=chks[0].start() + r;
    row=di.extractDenseRow(dataChks,r,row);
    double[] data=Arrays.copyOf(row.numVals,nCols);
    if (r == 0) {
      Exemplar ex=new Exemplar(data,rowIndex);
      exemplars.add(ex);
      counts.add(1L);
      assignmentChk.set(r,ex.gid);
    }
 else {
      double distanceToNearestExemplar=Double.MAX_VALUE;
      Iterator<Exemplar> it=exemplars.iterator();
      int closestExemplarIndex=0;
      int index=0;
      long gid=-1;
      while (it.hasNext()) {
        Exemplar e=it.next();
        double d=squaredEuclideanDistance(e.data,data,nCols,distanceToNearestExemplar);
        if (d < distanceToNearestExemplar) {
          distanceToNearestExemplar=d;
          closestExemplarIndex=index;
          gid=e.gid;
        }
        if (distanceToNearestExemplar < _delta)         break;
        index++;
      }
      if (distanceToNearestExemplar < _delta) {
        Long count=counts.get(closestExemplarIndex);
        counts.set(closestExemplarIndex,count + 1);
        assignmentChk.set(r,gid);
      }
 else {
        Exemplar ex=new Exemplar(data,rowIndex);
        exemplars.add(ex);
        counts.add(1L);
        assignmentChk.set(r,rowIndex);
      }
    }
  }
  _exemplars=exemplars.toArray(new Exemplar[0]);
  Object[] countsArray=counts.toArray();
  _counts=new long[counts.size()];
  for (int i=0; i < counts.size(); i++) {
    _counts[i]=(Long)countsArray[i];
  }
  assert(_exemplars.length <= chks[0].len());
  assert(_counts.length == _exemplars.length);
  long sum=0;
  for (  long c : _counts)   sum+=c;
  assert(sum <= chks[0].len());
  ((Job)_jobKey.get()).update(1,"Aggregating.");
}
