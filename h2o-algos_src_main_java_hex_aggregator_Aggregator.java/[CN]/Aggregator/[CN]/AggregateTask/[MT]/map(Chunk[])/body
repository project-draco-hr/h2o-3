{
  _mapping=new GIDMapping();
  Exemplar[] es=new Exemplar[4];
  Chunk[] dataChks=Arrays.copyOf(chks,chks.length - 1);
  Chunk assignmentChk=chks[chks.length - 1];
  DataInfo di=((DataInfo)_dataInfoKey.get());
  assert(di != null);
  DataInfo.Row row=di.newDenseRow();
  final int nCols=row.nNums;
  for (int r=0; r < chks[0]._len; ++r) {
    long rowIndex=chks[0].start() + r;
    row=di.extractDenseRow(dataChks,r,row);
    double[] data=Arrays.copyOf(row.numVals,nCols);
    if (r == 0) {
      Exemplar ex=new Exemplar(data,rowIndex);
      es=Exemplar.addExemplar(es,ex);
      assignmentChk.set(r,ex.gid);
    }
 else {
      double distanceToNearestExemplar=Double.MAX_VALUE;
      int closestExemplarIndex=0;
      int index=0;
      long gid=-1;
      for (      Exemplar e : es) {
        if (null == e)         break;
        double distToExemplar=e.squaredEuclideanDistance(data,distanceToNearestExemplar);
        if (distToExemplar < distanceToNearestExemplar) {
          distanceToNearestExemplar=distToExemplar;
          closestExemplarIndex=index;
          gid=e.gid;
        }
        if (distanceToNearestExemplar < _delta)         break;
        index++;
      }
      if (distanceToNearestExemplar < _delta) {
        es[closestExemplarIndex]._cnt++;
        assignmentChk.set(r,gid);
      }
 else {
        Exemplar ex=new Exemplar(data,rowIndex);
        es=Exemplar.addExemplar(es,ex);
        assignmentChk.set(r,rowIndex);
      }
    }
  }
  _exemplars=Exemplar.trim(es);
  assert(_exemplars.length <= chks[0].len());
  long sum=0;
  for (  Exemplar e : _exemplars)   sum+=e._cnt;
  assert(sum <= chks[0].len());
  ((Job)_jobKey.get()).update(1,"Aggregating.");
}
