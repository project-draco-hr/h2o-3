{
  for (int i=0; i < mrt._mapping.len; ++i)   _mapping.set(mrt._mapping.pairSet[i].first,mrt._mapping.pairSet[i].second);
  Exemplar[] exemplars=mrt._exemplars;
  long localCounts=0;
  for (  Exemplar e : _exemplars)   localCounts+=e._cnt;
  long remoteCounts=0;
  for (  Exemplar e : mrt._exemplars)   remoteCounts+=e._cnt;
  for (int r=0; r < mrt._exemplars.length; ++r) {
    double distanceToNearestExemplar=Double.MAX_VALUE;
    int closestExemplarIndex=0;
    int index=0;
    for (    Exemplar le : _exemplars) {
      if (null == le)       break;
      double distToExemplar=le.squaredEuclideanDistance(mrt._exemplars[r].data,distanceToNearestExemplar);
      if (distToExemplar < distanceToNearestExemplar) {
        distanceToNearestExemplar=distToExemplar;
        closestExemplarIndex=index;
      }
      if (distanceToNearestExemplar < _delta)       break;
      index++;
    }
    if (distanceToNearestExemplar < _delta) {
      _exemplars[closestExemplarIndex]._cnt+=mrt._exemplars[r]._cnt;
      _mapping.set(exemplars[r].gid,_exemplars[closestExemplarIndex].gid);
    }
 else {
      _exemplars=Exemplar.addExemplar(_exemplars,IcedUtils.deepCopy(mrt._exemplars[r]));
    }
  }
  mrt._exemplars=null;
  _exemplars=Exemplar.trim(_exemplars);
  assert(_exemplars.length <= localCounts + remoteCounts);
  long sum=0;
  for (  Exemplar e : _exemplars)   sum+=e._cnt;
  assert(sum == localCounts + remoteCounts);
  ((Job)_jobKey.get()).update(1,"Aggregating.");
}
