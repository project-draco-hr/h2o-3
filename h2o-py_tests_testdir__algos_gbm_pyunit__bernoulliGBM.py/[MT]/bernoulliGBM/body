def bernoulliGBM(ip, port):
    prostate_train = h2o.import_frame(path=h2o.locate('smalldata/logreg/prostate_train.csv'))
    prostate_train['CAPSULE'] = prostate_train['CAPSULE'].asfactor()
    trainData = np.loadtxt(h2o.locate('smalldata/logreg/prostate_train.csv'), delimiter=',', skiprows=1)
    trainDataResponse = trainData[:, 0]
    trainDataFeatures = trainData[:, 1:]
    ntrees = 100
    learning_rate = 0.1
    depth = 5
    min_rows = 10
    gbm_h2o = h2o.gbm(x=prostate_train[1:], y=prostate_train['CAPSULE'], ntrees=ntrees, learn_rate=learning_rate, max_depth=depth, min_rows=min_rows, distribution='bernoulli')
    gbm_sci = ensemble.GradientBoostingClassifier(learning_rate=learning_rate, n_estimators=ntrees, max_depth=depth, min_samples_leaf=min_rows, max_features=None)
    gbm_sci.fit(trainDataFeatures, trainDataResponse)
    prostate_test = h2o.import_frame(path=h2o.locate('smalldata/logreg/prostate_test.csv'))
    prostate_test['CAPSULE'] = prostate_test['CAPSULE'].asfactor()
    testData = np.loadtxt(h2o.locate('smalldata/logreg/prostate_test.csv'), delimiter=',', skiprows=1)
    testDataResponse = testData[:, 0]
    testDataFeatures = testData[:, 1:]
    auc_sci = roc_auc_score(testDataResponse, gbm_sci.predict_proba(testDataFeatures)[:, 1])
    gbm_perf = gbm_h2o.model_performance(prostate_test)
    auc_h2o = gbm_perf.auc()
    assert (auc_h2o >= auc_sci), 'h2o (auc) performance degradation, with respect to scikit'
