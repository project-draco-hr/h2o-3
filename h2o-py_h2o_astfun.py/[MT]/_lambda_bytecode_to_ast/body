def _lambda_bytecode_to_ast(co, ops):
    s = (len(ops) - 1)
    keys = [o[0] for o in ops]
    result = (([ASTId(u'{')] + [ASTId(arg) for arg in co.co_varnames]) + [ASTId(u'.')])
    instr = keys[s]
    if is_return(instr):
        s -= 1
        instr = keys[s]
    if (is_bytecode_instruction(instr) or is_load_fast(instr) or is_load_global(instr)):
        (body, s) = _opcode_read_arg(s, ops, keys)
    else:
        raise ValueError((u'unimpl bytecode instr: ' + instr))
    if (s > 0):
        print(u'Dumping disassembled code: ')
        for i in range(len(ops)):
            if (i == s):
                print(i, (u' --> ' + str(ops[i])))
            else:
                print(i, str(ops[i]).rjust(5))
        raise ValueError((u'Unexpected bytecode disassembly @ ' + str(s)))
    result += ([body] + [ASTId(u'}')])
    return result
