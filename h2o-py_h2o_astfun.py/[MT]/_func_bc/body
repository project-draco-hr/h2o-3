def _func_bc(nargs, idx, ops, keys):
    named_args = {}
    unnamed_args = []
    while (nargs > 0):
        if (nargs >= 256):
            (arg, idx) = _opcode_read_arg(idx, ops, keys)
            named_args[ops[idx][1][0]] = arg
            idx -= 1
            nargs -= 256
        else:
            (arg, idx) = _opcode_read_arg(idx, ops, keys)
            unnamed_args.insert(0, arg)
            nargs -= 1
    op = ops[idx][1][0]
    frcls = h2o.H2OFrame
    if (not hasattr(frcls, op)):
        raise ValueError((u'Unimplemented: op <%s> not bound in H2OFrame' % op))
    if is_attr(ops[idx][0]):
        if PY2:
            argspec = inspect.getargspec(getattr(frcls, op))
            argnames = argspec.args[1:]
            argdefs = (argspec.defaults or ())
        else:
            argspec = inspect.signature(getattr(frcls, op))
            argnames = list(argspec.parameters.keys())[1:]
            argdefs = [i.default for i in list(argspec.parameters.values())[1:]]
        args = (unnamed_args + list(argdefs[len(unnamed_args):]))
        for a in named_args:
            args[argnames.index(a)] = named_args[a]
    if (op == u'ceil'):
        op = u'ceiling'
    if ((op == u'sum') and (len(args) > 0) and args[0]):
        op = u'sumNA'
    if ((op == u'min') and (len(args) > 0) and args[0]):
        op = u'minNA'
    if ((op == u'max') and (len(args) > 0) and args[0]):
        op = u'maxNA'
    idx -= 1
    if is_bytecode_instruction(ops[idx][0]):
        (arg, idx) = _opcode_read_arg(idx, ops, keys)
        args.insert(0, arg)
    elif is_load_fast(ops[idx][0]):
        args.insert(0, _load_fast(ops[idx][1][0]))
        idx -= 1
    return [ExprNode(op, *args), idx]
