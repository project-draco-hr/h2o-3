def baddataKmeans():
    rows = 100
    cols = 10
    rawdata = [[random.random() for c in range(cols)] for r in range(rows)]
    data = rawdata[:]
    for (cidx, cval) in enumerate(data[24]):
        data[24][cidx] = None
    frame = h2o.H2OFrame.fromPython(data)
    km_model = h2o.kmeans(x=frame, k=5)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    for c in range(len(centers)):
        assert (len(centers[c]) == 10), 'expected center to be 10 dimensional'
    data = rawdata[:]
    for (idx, val) in enumerate(data):
        data[idx][4] = 5
    frame = h2o.H2OFrame.fromPython(data)
    km_model = h2o.kmeans(x=frame, k=5)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    for c in range(len(centers)):
        assert (len(centers[c]) == 9), 'expected center to be 9 '
    data = rawdata[:]
    for (idx, val) in enumerate(data):
        data[idx][4] = None
        data[idx][7] = 0
    frame = h2o.H2OFrame.fromPython(data)
    km_model = h2o.kmeans(x=frame, k=5)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    for c in range(len(centers)):
        assert (len(centers[c]) == 8), 'expected center to be 9 '
    data = [[None for c in range(cols)] for r in range(rows)]
    frame = h2o.H2OFrame.fromPython(data)
    try:
        h2o.kmeans(x=frame, k=5)
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    data = [[random.choice(string.ascii_uppercase) for c in range(cols)] for r in range(rows)]
    frame = h2o.H2OFrame.fromPython(data)
    km_model = h2o.kmeans(x=frame, k=5)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    for c in range(len(centers)):
        assert (len(centers[c]) == 10), ('expected center to be 10 ' + str(len(centers[c])))
    iris = h2o.import_file(path=tests.locate('smalldata/iris/iris.csv'))
    km_model = h2o.kmeans(x=iris, k=5)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    for c in range(len(centers)):
        assert (len(centers[c]) == 5), ('expected center to be 5 ' + str(len(centers[c])))
