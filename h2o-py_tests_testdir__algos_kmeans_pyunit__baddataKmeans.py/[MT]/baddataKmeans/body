def baddataKmeans():
    random.seed(1234)
    rows = 100
    cols = 10
    rawdata = [[random.random() for c in range(cols)] for r in range(rows)]
    data = rawdata[:]
    data[24] = ([None] * cols)
    frame = h2o.H2OFrame(data)
    km_model = H2OKMeansEstimator(k=5)
    km_model.train(x=list(range(cols)), training_frame=frame)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    assert (len(centers[0]) == 10), 'expected center to be 10 dimensional'
    data = rawdata[:]
    for row in data:
        row[4] = 5
    frame = h2o.H2OFrame(data)
    km_model = H2OKMeansEstimator(k=5)
    km_model.train(x=list(range(cols)), training_frame=frame)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    assert (len(centers[0]) == 9), 'expected center to be 9-dimensional'
    data = rawdata[:]
    for row in data:
        row[4] = None
        row[7] = 0
    frame = h2o.H2OFrame(data)
    km_model = H2OKMeansEstimator(k=5)
    km_model.train(x=list(range(cols)), training_frame=frame)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    assert (len(centers[0]) == 8), 'expected center to be 8-dim '
    data = [[None for r in range(cols)] for c in range(rows)]
    frame = h2o.H2OFrame(data)
    try:
        H2OKMeansEstimator(k=5).train(x=list(range(cols)), training_frame=frame)
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    data = [[random.choice(string.ascii_uppercase) for r in range(cols)] for c in range(rows)]
    frame = h2o.H2OFrame(data)
    km_model = H2OKMeansEstimator(k=5)
    km_model.train(x=list(range(cols)), training_frame=frame)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    assert (len(centers[0]) == 10), ('expected center to be 10 ' + str(len(centers)))
    iris = h2o.import_file(path=pyunit_utils.locate('smalldata/iris/iris.csv'))
    km_model = H2OKMeansEstimator(k=5)
    km_model.train(x=list(range(iris.ncol)), training_frame=iris)
    centers = km_model.centers()
    assert (len(centers) == 5), 'expected 5 centers'
    assert (len(centers[0]) == 5), ('expected center to be 5 ' + str(len(centers)))
