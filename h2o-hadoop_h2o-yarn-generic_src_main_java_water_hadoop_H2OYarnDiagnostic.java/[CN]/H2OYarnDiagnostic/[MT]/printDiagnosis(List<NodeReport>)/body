{
{
    boolean containerFitsOnSomeNode=false;
    for (    NodeReport node : clusterNodeReports) {
      if (node.getNodeState() == NodeState.RUNNING) {
        Resource capability=node.getCapability();
        int m=capability.getMemory();
        if (m >= this.nodeMemoryMb) {
          containerFitsOnSomeNode=true;
          break;
        }
      }
    }
    if (!containerFitsOnSomeNode) {
      printErrorDiagnosis("Job container memory request (" + prettyPrintMb(nodeMemoryMb) + ") does not fit on any YARN cluster node");
      return;
    }
  }
{
    int n=0;
    for (    NodeReport node : clusterNodeReports) {
      if (node.getNodeState() == NodeState.RUNNING) {
        Resource capability=node.getCapability();
        n+=capability.getMemory();
      }
    }
    int jobMb=this.numNodes * this.nodeMemoryMb;
    if (n < jobMb) {
      printErrorDiagnosis("Job memory request (" + prettyPrintMb(jobMb) + ") exceeds available YARN cluster memory ("+ prettyPrintMb(n)+ ")");
      return;
    }
  }
{
    int n=0;
    for (    NodeReport node : clusterNodeReports) {
      if (node.getNodeState() == NodeState.RUNNING) {
        Resource capability=node.getCapability();
        n+=capability.getVirtualCores();
      }
    }
    int jobVirtualCores=this.numNodes * this.nodeVirtualCores;
    if (n < jobVirtualCores) {
      printErrorDiagnosis("YARN cluster available virtual cores (" + n + ") < requested H2O containers ("+ jobVirtualCores+ ")");
      return;
    }
  }
{
    int jobMb=this.numNodes * this.nodeMemoryMb;
    if (this.queueAvailableMemory < jobMb) {
      printWarningDiagnosis("Job memory request (" + prettyPrintMb(jobMb) + ") exceeds queue available memory capacity ("+ prettyPrintMb(this.queueAvailableMemory)+ ")");
      return;
    }
  }
{
    int jobVirtualCores=this.numNodes * this.nodeVirtualCores;
    if (this.queueAvailableVirtualCores < jobVirtualCores) {
      printWarningDiagnosis("Job virtual cores request (" + jobVirtualCores + ") exceeds queue available virtual cores capacity ("+ this.queueAvailableVirtualCores+ ")");
      return;
    }
  }
{
    printBar();
    System.out.println("");
    System.out.println("ERROR: Unable to start cluster; you may want to check YARN settings for the following properties:");
    System.out.println("");
    System.out.println("           yarn.nodemanager.resource.memory-mb");
    System.out.println("           yarn.scheduler.maximum-allocation-mb");
    System.out.println("");
    printBar();
  }
}
