def test_rapids_row_range(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 5, 'cA', 200)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        inspect = h2o_cmd.runInspect(key=hex_key)
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
        self.assertEqual(numRows, rowCount, ('parse created result with the wrong number of rows %s %s' % (numRows, rowCount)))
        REPEAT = 1
        data_key = hex_key
        for i in range(REPEAT):
            result_key = ((data_key + '_') + str(i))
            Assign('s1', Seq(range(5)))
            Assign('s2', Fcn('c', Seq(range(5))))
            print dump_json(Xbase.lastExecResult)
            print dump_json(Xbase.lastResult)
            Assign('s3', Col(Seq(range(5))))
            inspect = h2o_cmd.runInspect(key='s3')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 5)
            assert (numCols == 1)
            Assign('s2', Col(Seq(range(5))))
            inspect = h2o_cmd.runInspect(key='s2')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 5)
            assert (numCols == 1)
            f = Fcn('c', Seq(Colon(99, 400), '#2', 1, range(1, 5), range(7, 10), range(50, 52)))
            Assign('s1', f)
            f = Col(Seq(Colon(99, 400), '#2', 1, range(1, 5), range(7, 10), range(50, 52)))
            Assign('s2', f)
            inspect = h2o_cmd.runInspect(key='s2')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 313)
            assert (numCols == 1)
            print 'z1'
            Assign(result_key, KeyIndexed(data_key, row=Seq(range(1, 5))))
            print 'z2'
            Assign('s1', KeyIndexed(data_key, row=Seq(Colon(99, 400), '#2', 1, range(1, 5))))
            print 'z3'
            Assign(result_key, KeyIndexed(data_key, row='#1')).do
            print 'z4'
            Assign(result_key, KeyIndexed(data_key, row=Colon('#1', '#100')))
            print 'z5'
            Assign(result_key, KeyIndexed(data_key, row=Colon(1, 100)))
            print 'z6'
            Assign(result_key, KeyIndexed(data_key, row=Colon('#-2', '#-1')))
            print 'z7'
            Assign(result_key, KeyIndexed(data_key, row=Colon((-2), (-1))))
            print 'z8'
            Assign(result_key, KeyIndexed(data_key, row=Colon('#1', (rowCount - 10))))
            print 'z9'
            Assign(result_key, KeyIndexed(data_key, col=Colon('#1', (colCount - 1))))
            print 'z10'
            result = KeyIndexed(data_key, row=Colon('#1', (rowCount - 10))).do()
            print 'z11'
            print 'z12'
            print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
