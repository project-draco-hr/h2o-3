def glrm_nnmf():
    m = 1000
    n = 100
    k = 10
    print ((('Uploading random uniform matrix with rows = ' + str(m)) + ' and cols = ') + str(n))
    Y = np.random.rand(k, n)
    X = np.random.rand(m, k)
    train = np.dot(X, Y)
    train_h2o = h2o.H2OFrame(zip(*train.tolist()))
    print 'Run GLRM with non-negative regularization'
    initial_y = np.random.rand(n, k)
    initial_y_h2o = h2o.H2OFrame(initial_y.tolist())
    glrm_h2o = H2OGeneralizedLowRankEstimator(k=k, init='User', user_y=initial_y_h2o, loss='Quadratic', regularization_x='NonNegative', regularization_y='NonNegative', gamma_x=1, gamma_y=1)
    glrm_h2o.train(x=train_h2o.names, training_frame=train_h2o)
    glrm_h2o.show()
    print 'Check that X and Y matrices are non-negative'
    fit_y = glrm_h2o._model_json['output']['archetypes'].cell_values
    fit_y_np = [[float(s) for s in list(row)[1:]] for row in fit_y]
    fit_y_np = np.array(fit_y_np)
    assert np.all((fit_y_np >= 0)), 'Y must contain only non-negative elements'
    print 'Check final objective function value'
    glrm_obj = glrm_h2o._model_json['output']['objective']
    print 'Impute XY and check error metrics'
    pred_h2o = glrm_h2o.predict(train_h2o)
    pred_np = np.array(h2o.as_list(pred_h2o))
    glrm_numerr = glrm_h2o._model_json['output']['training_metrics']._metric_json['numerr']
    glrm_caterr = glrm_h2o._model_json['output']['training_metrics']._metric_json['caterr']
    assert (abs((glrm_numerr - glrm_obj)) < 0.001), ((('Numeric error was ' + str(glrm_numerr)) + ' but should equal final objective ') + str(glrm_obj))
    assert (glrm_caterr == 0), (('Categorical error was ' + str(glrm_caterr)) + ' but should be zero')
