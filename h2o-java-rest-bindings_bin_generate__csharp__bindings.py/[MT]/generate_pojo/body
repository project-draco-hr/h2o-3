def generate_pojo(schema, pojo_name):
    global args
    global enums
    if args.verbose:
        print 'Generating POJO: ', pojo_name
    pojo = []
    pojo.append('namespace water.bindings.pojos')
    pojo.append('{')
    pojo.append('   using System;')
    has_map = False
    for field in schema['fields']:
        if field['type'].startswith('Map'):
            has_map = True
    if has_map:
        pojo.append('using System.Collections.Generic;')
        pojo.append('')
    superclass = schema['superclass']
    if ('Iced' == superclass):
        superclass = 'Object'
    pojo.append(((('public class ' + pojo_name) + ': {superclass} '.format(superclass=superclass)) + '{'))
    first = True
    for field in schema['fields']:
        help = field['help']
        type = field['type']
        name = field['name']
        schema_name = field['schema_name']
        if (name == '__meta'):
            continue
        if (type == 'Iced'):
            continue
        if type.startswith('Map'):
            CSharp_type = string.replace(type, 'Map', 'Dictionary')
        else:
            CSharp_type = cons_CSharp_type(pojo_name, name, type, schema_name)
        if type.startswith('enum'):
            enum_name = field['schema_name']
            if (enum_name not in enums):
                enums[enum_name] = field['values']
        if (not first):
            pojo.append('')
        pojo.append('    /// <summary>{help}</summary>'.format(help=help))
        pojo.append('    public {type} {name} {{ get; set; }}'.format(type=CSharp_type, name=name))
        first = False
    pojo.append('}')
    pojo.append('}')
    return pojo
