@test(groups=['rgm'], depends_on=[testComputeAndCheckModelMetricsProstate])
def testPredictAndCheckModelMetricsProstate(self):
    p = self.a_node.predict(model=self.dl_prostate_model_name, frame=self.prostate_key)
    assert (p is not None), ((('Got a null result for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key)
    assert ('model_metrics' in p), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain a model_metrics object.')
    mm = p['model_metrics'][0]
    h2o.H2O.verboseprint('mm: ', repr(mm))
    assert ('auc' in mm), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain an AUC.')
    assert ('cm' in mm), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain a CM.')
    assert ('predictions' in mm), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain an predictions section.')
    predictions = mm['predictions']
    h2o.H2O.verboseprint('p: ', repr(p))
    assert ('columns' in predictions), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain an columns section.')
    assert (len(predictions['columns']) > 0), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain any columns.')
    assert ('label' in predictions['columns'][0]), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' column 0 has no label element.')
    assert ('predict' == predictions['columns'][0]['label']), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + " column 0 is not 'predict'.")
    assert (380 == predictions['rows']), (((('Predictions for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' has an unexpected number of rows.')
    found_dl = False
    dl_model = None
    for model in self.models['models']:
        if (model['key'] == self.dl_airlines_model_name):
            found_dl = True
            dl_model = model
    assert found_dl, (('Did not find ' + self.dl_airlines_model_name) + ' in the models list.')
    validate_actual_parameters(self.dl_airline_1_parameters, dl_model['parameters'], self.airlines_key, None)
