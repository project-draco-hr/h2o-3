@test(groups=['rgm'], depends_on=[testDeepLearningModelProstate])
def testDeepLearningModelAirlines(self):
    self.dl_airlines_model_name = 'airlines_DeepLearning_1'
    self.dl_airline_1_parameters = {'classification': True, 'response_column': 'IsDepDelayed', }
    jobs = self.a_node.build_model(algo='deeplearning', destination_key=self.dl_airlines_model_name, training_frame=self.airlines_key, parameters=self.dl_airline_1_parameters, timeoutSecs=self.timeoutSecs)
    self.models = self.a_node.models()
    found_kmeans = False
    kmeans_model = None
    for model in self.models['models']:
        if (model['key'] == self.kmeans_model_name):
            found_kmeans = True
            kmeans_model = model
    assert found_kmeans, (('Did not find ' + self.kmeans_model_name) + ' in the models list.')
    validate_actual_parameters(self.kmeans_parameters, kmeans_model['parameters'], self.prostate_key, None)
    found_dl = False
    dl_model = None
    for model in self.models['models']:
        if (model['key'] == self.dl_prostate_model_name):
            found_dl = True
            dl_model = model
    assert found_dl, (('Did not find ' + self.dl_prostate_model_name) + ' in the models list.')
    validate_actual_parameters(self.dl_prostate_1_parameters, dl_model['parameters'], self.prostate_key, None)
