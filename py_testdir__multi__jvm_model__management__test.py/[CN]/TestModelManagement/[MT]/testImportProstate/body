@test(groups=['rgm'], depends_on=[testModelBuilders])
def testImportProstate(self):
    cleanup(self.a_node)
    import_result = self.a_node.import_files(path=os.path.join(self.cfg.basedir, self.cfg.data['prostate']))
    parse_result = self.a_node.parse(key=import_result['keys'][0])
    self.prostate_key = parse_result['frames'][0]['key']['name']
    frames = self.a_node.frames()['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    assert ('prostate.hex' in frames_dict), 'Failed to find prostate.hex in Frames list.'
    frames = self.a_node.frames(key='prostate.hex')['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    assert ('prostate.hex' in frames_dict), 'Failed to find prostate.hex in Frames list.'
    columns_dict = h2o_util.list_to_dict(frames[0]['columns'], 'label')
    assert ('CAPSULE' in columns_dict), 'Failed to find CAPSULE in Frames/prostate.hex.'
    assert ('AGE' in columns_dict), 'Failed to find AGE in Frames/prostate.hex/columns.'
    assert ('bins' in columns_dict['AGE']), 'Failed to find bins in Frames/prostate.hex/columns/AGE.'
    assert (None is columns_dict['AGE']['bins']), 'Failed to clear bins field.'
    frames = self.a_node.columns(key='prostate.hex')['frames']
    columns_dict = h2o_util.list_to_dict(frames[0]['columns'], 'label')
    assert ('ID' in columns_dict), 'Failed to find ID in Frames/prostate.hex/columns.'
    assert ('AGE' in columns_dict), 'Failed to find AGE in Frames/prostate.hex/columns.'
    assert ('bins' in columns_dict['AGE']), 'Failed to find bins in Frames/prostate.hex/columns/AGE.'
    assert (None is columns_dict['AGE']['bins']), 'Failed to clear bins field.'
    frames = self.a_node.column(key='prostate.hex', column='AGE')['frames']
    columns_dict = h2o_util.list_to_dict(frames[0]['columns'], 'label')
    assert ('AGE' in columns_dict), 'Failed to find AGE in Frames/prostate.hex/columns.'
    assert ('bins' in columns_dict['AGE']), 'Failed to find bins in Frames/prostate.hex/columns/AGE.'
    assert (None is columns_dict['AGE']['bins']), 'Failed to clear bins field.'
    frames = self.a_node.summary(key='prostate.hex', column='AGE')['frames']
    columns_dict = h2o_util.list_to_dict(frames[0]['columns'], 'label')
    assert ('AGE' in columns_dict), 'Failed to find AGE in Frames/prostate.hex/columns/AGE/summary.'
    col = columns_dict['AGE']
    h2o_util.assertKeysExistAndNonNull(col, '', ['label', 'missing', 'zeros', 'pinfs', 'ninfs', 'mins', 'maxs', 'mean', 'sigma', 'type', 'data', 'precision', 'bins', 'base', 'stride', 'pctiles'])
    h2o_util.assertKeysExist(col, '', ['domain', 'str_data'])
    assert (col['mins'][0] == 43), 'Failed to find 43 as the first min for AGE.'
    assert (col['maxs'][0] == 79), 'Failed to find 79 as the first max for AGE.'
    assert (col['mean'] == 66.03947368421052), 'Failed to find 66.03947368421052 as the mean for AGE.'
    assert (col['sigma'] == 6.527071269173308), 'Failed to find 6.527071269173308 as the sigma for AGE.'
    assert (col['type'] == 'int'), 'Failed to find int as the type for AGE.'
    assert (col['data'][0] == 65), 'Failed to find 65 as the first data for AGE.'
    assert (col['precision'] == (-1)), 'Failed to find -1 as the precision for AGE.'
    assert (col['bins'][0] == 1), 'Failed to find 1 as the first bin for AGE.'
    assert (col['base'] == 43), 'Failed to find 43 as the base for AGE.'
    assert (col['stride'] == 1), 'Failed to find 1 as the stride for AGE.'
    assert (col['pctiles'][0] == 50.5), 'Failed to find 50.5 as the first pctile for AGE.'
