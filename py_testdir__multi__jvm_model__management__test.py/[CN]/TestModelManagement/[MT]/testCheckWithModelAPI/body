@test(groups=['pending'], depends_on=[testPredictAndCheckModelMetricsProstate])
def testCheckWithModelAPI(self):
    model = self.a_node.models(key=self.kmeans_model_name, find_compatible_frames=True)
    found_kmeans = False
    h2o_util.assertKeysExist(model['models'][0], '', ['compatible_frames'])
    assert (self.prostate_key in model['models'][0]['compatible_frames']), (('Failed to find ' + self.prostate_key) + ' in compatible_frames list.')
    result = self.a_node.frames(key='prostate.hex', find_compatible_models=True)
    frames = result['frames']
    frames_dict = h2o_util.list_to_dict(frames, 'key/name')
    assert_true(('prostate.hex' in frames_dict), 'Failed to find prostate.hex in Frames list.')
    compatible_models = result['compatible_models']
    models_dict = h2o_util.list_to_dict(compatible_models, 'key')
    assert_true((self.dl_prostate_model_name in models_dict), (('Failed to find ' + self.dl_prostate_model_name) + ' in compatible models list.'))
    assert_true((self.dl_prostate_model_name in frames[0]['compatible_models']))
    assert_true((self.kmeans_model_name in frames[0]['compatible_models']))
