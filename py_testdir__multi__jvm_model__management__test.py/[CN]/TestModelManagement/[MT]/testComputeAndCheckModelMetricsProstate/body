@test(groups=['rgm'], depends_on=[testDeepLearningModelAirlines])
def testComputeAndCheckModelMetricsProstate(self):
    mm = self.a_node.compute_model_metrics(model=self.dl_prostate_model_name, frame=self.prostate_key)
    assert (mm is not None), ((('Got a null result for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key)
    assert ('auc' in mm), (((('ModelMetrics for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain an AUC.')
    assert ('cm' in mm), (((('ModelMetrics for scoring: ' + self.dl_prostate_model_name) + ' on: ') + self.prostate_key) + ' does not contain a CM.')
    mms = self.a_node.model_metrics()
    assert ('model_metrics' in mms), 'Failed to find model_metrics in result of /3/ModelMetrics.'
    found_mm = False
    for mm in mms['model_metrics']:
        model_key = mm['model']['key']
        frame_key = mm['frame']['key']['name']
        if ((model_key == self.dl_prostate_model_name) and (frame_key == self.prostate_key)):
            found_mm = True
    assert found_mm, ((('Failed to find ModelMetrics object for model: ' + self.dl_prostate_model_name) + ' and frame: ') + self.prostate_key)
