def __init__(self, use_this_ip_addr=None, port=54321, capture_output=True, force_ip=False, network=None, use_debugger=None, classpath=None, use_hdfs=False, use_maprfs=False, hdfs_version=None, hdfs_name_node=None, hdfs_config=None, aws_credentials=None, use_flatfile=False, java_heap_GB=None, java_heap_MB=None, java_extra_args=None, use_home_for_ice=False, node_id=None, username=None, random_udp_drop=False, force_tcp=False, redirect_import_folder_to_s3_path=None, redirect_import_folder_to_s3n_path=None, disable_h2o_log=False, enable_benchmark_log=False, h2o_remote_buckets_root=None, delete_keys_at_teardown=False, cloud_name=None, disable_assertions=None, sandbox_ignore_errors=False):
    if use_hdfs:
        try:
            a = requests.get('http://172.16.2.176:80', timeout=1)
            hdfs_0xdata_visible = True
        except:
            hdfs_0xdata_visible = False
        if (hdfs_name_node is None):
            if hdfs_0xdata_visible:
                hdfs_name_node = '172.16.2.176'
            else:
                hdfs_name_node = '10.78.14.235:9000'
        if (hdfs_version is None):
            if hdfs_0xdata_visible:
                hdfs_version = 'cdh4'
            else:
                hdfs_version = '0.20.2'
    self.redirect_import_folder_to_s3_path = redirect_import_folder_to_s3_path
    self.redirect_import_folder_to_s3n_path = redirect_import_folder_to_s3n_path
    self.aws_credentials = aws_credentials
    self.port = port
    if h2o_args.ip_from_cmd_line:
        self.h2o_addr = h2o_args.ip_from_cmd_line
    else:
        self.h2o_addr = use_this_ip_addr
    self.force_ip = (force_ip or (self.h2o_addr != None))
    if self.h2o_addr:
        self.http_addr = self.h2o_addr
    else:
        self.http_addr = h2o_args.python_cmd_ip
    if h2o_args.network_from_cmd_line:
        self.network = h2o_args.network_from_cmd_line
    else:
        self.network = network
    if h2o_args.debugger:
        use_debugger = True
    self.use_debugger = use_debugger
    self.classpath = classpath
    self.capture_output = capture_output
    self.use_hdfs = use_hdfs
    self.use_maprfs = use_maprfs
    self.hdfs_name_node = hdfs_name_node
    self.hdfs_version = hdfs_version
    self.hdfs_config = hdfs_config
    self.use_flatfile = use_flatfile
    self.java_heap_GB = java_heap_GB
    self.java_heap_MB = java_heap_MB
    self.java_extra_args = java_extra_args
    self.use_home_for_ice = use_home_for_ice
    self.node_id = node_id
    if username:
        self.username = username
    else:
        self.username = getpass.getuser()
    self.sandbox_error_was_reported = False
    self.sandbox_ignore_errors = sandbox_ignore_errors
    self.random_udp_drop = random_udp_drop
    self.force_tcp = force_tcp
    self.disable_h2o_log = disable_h2o_log
    self.enable_benchmark_log = enable_benchmark_log
    self.h2o_remote_buckets_root = h2o_remote_buckets_root
    self.delete_keys_at_teardown = delete_keys_at_teardown
    self.disable_assertions = disable_assertions
    if cloud_name:
        self.cloud_name = cloud_name
    else:
        self.cloud_name = ('pytest-%s-%s' % (getpass.getuser(), os.getpid()))
