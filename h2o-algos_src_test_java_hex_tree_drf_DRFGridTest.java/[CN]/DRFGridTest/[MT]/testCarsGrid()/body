{
  Grid<DRFModel.DRFParameters> grid=null;
  Frame fr=null;
  Vec old=null;
  try {
    fr=parse_test_file("smalldata/junit/cars.csv");
    fr.remove("name").remove();
    old=fr.remove("cylinders");
    fr.add("cylinders",old.toCategoricalVec());
    DKV.put(fr);
    HashMap<String,Object[]> hyperParms=new HashMap<>();
    hyperParms.put("_ntrees",new Integer[]{2,4});
    hyperParms.put("_max_depth",new Integer[]{10,20});
    hyperParms.put("_mtries",new Integer[]{-1,4});
    Float[] legalSampleRateOpts=new Float[]{0.5f};
    Float[] illegalSampleRateOpts=new Float[]{1f};
    hyperParms.put("_sample_rate",ArrayUtils.join(legalSampleRateOpts,illegalSampleRateOpts));
    String[] hyperParamNames=hyperParms.keySet().toArray(new String[hyperParms.size()]);
    Arrays.sort(hyperParamNames);
    int hyperSpaceSize=ArrayUtils.crossProductSize(hyperParms);
    DRFModel.DRFParameters params=new DRFModel.DRFParameters();
    params._train=fr._key;
    params._response_column="cylinders";
    Job<Grid> gs=GridSearch.startGridSearch(params,hyperParms,DRF_MODEL_FACTORY);
    grid=(Grid<DRFModel.DRFParameters>)gs.get();
    Assert.assertEquals("Size of grid should match to size of hyper space",hyperSpaceSize,grid.getModelCount() + grid.getFailureCount());
    String[] gridHyperNames=grid.getHyperNames();
    Arrays.sort(gridHyperNames);
    Assert.assertArrayEquals("Hyper parameters names should match!",hyperParamNames,gridHyperNames);
    Model[] ms=grid.getModels();
    Map<String,Set<Object>> usedModelParams=GridTestUtils.initMap(hyperParamNames);
    for (    Model m : ms) {
      DRFModel drf=(DRFModel)m;
      System.out.println(drf._output._scored_train[drf._output._ntrees]._mse + " " + Arrays.deepToString(ArrayUtils.zip(grid.getHyperNames(),grid.getHyperValues(drf._parms))));
      GridTestUtils.extractParams(usedModelParams,drf._parms,hyperParamNames);
    }
    hyperParms.put("_sample_rate",legalSampleRateOpts);
    GridTestUtils.assertParamsEqual("Grid models parameters have to cover specified hyper space",hyperParms,usedModelParams);
    Map<String,Set<Object>> failedHyperParams=GridTestUtils.initMap(hyperParamNames);
    for (    Model.Parameters failedParams : grid.getFailedParameters()) {
      GridTestUtils.extractParams(failedHyperParams,failedParams,hyperParamNames);
    }
    hyperParms.put("_sample_rate",illegalSampleRateOpts);
    GridTestUtils.assertParamsEqual("Failed model parameters have to correspond to specified hyper space",hyperParms,failedHyperParams);
  }
  finally {
    if (old != null) {
      old.remove();
    }
    if (fr != null) {
      fr.remove();
    }
    if (grid != null) {
      grid.remove();
    }
  }
}
