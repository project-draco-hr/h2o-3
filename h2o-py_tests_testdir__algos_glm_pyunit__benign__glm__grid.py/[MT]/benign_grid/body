def benign_grid():
    training_data = h2o.import_file(pyunit_utils.locate('smalldata/logreg/benign.csv'))
    Y = 3
    X = (list(range(3)) + list(range(4, 11)))
    hyper_parameters = {'alpha': [0.01, 0.5, 'a'], 'lambda': [1e-05, 1e-06], }
    gs = H2OGridSearch(H2OGeneralizedLinearEstimator(family='binomial'), hyper_parameters)
    gs.train(x=X, y=Y, training_frame=training_data)
    for model in gs:
        assert isinstance(model, H2OGeneralizedLinearEstimator)
    gs.show()
    print(gs.sort_by('F1', False))
    best_model_id = gs.sort_by('F1', False)['Model Id'][0]
    best_model = h2o.get_model(best_model_id)
    best_model.predict(training_data)
    gs.predict(training_data)
    print(gs.get_hyperparams(best_model_id))
    print(gs.grid_id)
    new_g = H2OGridSearch.get_grid(H2OGeneralizedLinearEstimator(family='binomial'), hyper_parameters, gs.grid_id)
    new_g.show()
    print(new_g.grid_id)
    print(new_g.sort_by('F1', False))
    assert (best_model.params['family']['actual'] == 'binomial')
    search_criteria = {'strategy': 'RandomDiscrete', 'max_models': 3, }
    max_models_g = H2OGridSearch(H2OGeneralizedLinearEstimator(family='binomial'), hyper_parameters, search_criteria=search_criteria)
    max_models_g.train(x=X, y=Y, training_frame=training_data)
    max_models_g.show()
    print(max_models_g.grid_id)
    print(max_models_g.sort_by('F1', False))
    assert (len(max_models_g.models) == 3), 'expected 3 models, got: {}'.format(len(max_models_g.models))
