{
  Vec[] vecxs=frx.vecs();
  int ncolx=vecxs.length;
  Vec[] vecys=fry.vecs();
  int ncoly=vecys.length;
  if (mode.equals(Mode.Everything) || mode.equals(Mode.AllObs)) {
    if (mode.equals(Mode.AllObs)) {
      for (      Vec v : vecxs)       if (v.naCnt() != 0)       throw new IllegalArgumentException("Mode is 'all.obs' but NAs are present");
    }
    CorTaskEverything[] cvs=new CorTaskEverything[ncoly];
    double[] xmeans=new double[ncolx];
    for (int x=0; x < ncolx; x++) {
      xmeans[x]=vecxs[x].mean();
    }
    for (int y=0; y < ncoly; y++)     cvs[y]=new CorTaskEverything(vecys[y].mean(),xmeans).dfork(new Frame(vecys[y]).add(frx));
    if (ncolx == 1 && ncoly == 1) {
      return new ValNum(cvs[0].getResult()._cors[0]);
    }
    Vec[] res=new Vec[ncoly];
    Key<Vec>[] keys=Vec.VectorGroup.VG_LEN1.addVecs(ncoly);
    for (int y=0; y < ncoly; y++)     res[y]=Vec.makeVec(cvs[y].getResult()._cors,keys[y]);
    return new ValFrame(new Frame(fry._names,res));
  }
 else {
    CorTaskCompleteObsMean taskCompleteObsMean=new CorTaskCompleteObsMean(ncoly,ncolx).doAll(new Frame(fry).add(frx));
    long NACount=taskCompleteObsMean._NACount;
    double[] ymeans=ArrayUtils.div(taskCompleteObsMean._ysum,fry.numRows() - NACount);
    double[] xmeans=ArrayUtils.div(taskCompleteObsMean._xsum,fry.numRows() - NACount);
    CorTaskCompleteObs cvs=new CorTaskCompleteObs(ymeans,xmeans).doAll(new Frame(fry).add(frx));
    if (ncolx == 1 && ncoly == 1) {
      return new ValNum(cvs._cors[0][0] / (fry.numRows() - 1 - NACount));
    }
    Vec[] res=new Vec[ncoly];
    Key<Vec>[] keys=Vec.VectorGroup.VG_LEN1.addVecs(ncoly);
    for (int y=0; y < ncoly; y++)     res[y]=Vec.makeVec(ArrayUtils.div(cvs._cors[y],(fry.numRows() - 1 - NACount)),keys[y]);
    return new ValFrame(new Frame(fry._names,res));
  }
}
