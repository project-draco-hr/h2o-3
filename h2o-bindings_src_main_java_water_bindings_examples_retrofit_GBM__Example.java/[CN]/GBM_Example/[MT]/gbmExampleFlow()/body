{
  H2oApi h2o=new H2oApi();
  try {
    JobV3 job=null;
    ImportFilesV3 importBody=h2o.importFiles("http://s3.amazonaws.com/h2o-public-test-data/smalldata/flow_examples/arrhythmia.csv.gz",null);
    System.out.println("import: " + importBody);
    ParseSetupV3 parseSetupBody=h2o.guessParseSetup(H2oApi.stringArrayToFrameKeyArray(importBody.destinationFrames));
    System.out.println("parseSetupBody: " + parseSetupBody);
    ParseV3 parseParms=new ParseV3();
    GBM_Example.copyFields(parseParms,parseSetupBody);
    parseParms.destinationFrame=H2oApi.stringToFrameKey("arrhythmia.hex");
    parseParms.blocking=true;
    ParseV3 parseBody=h2o.parse(parseParms);
    System.out.println("parseBody: " + parseBody);
    String tmpVec="tmp_" + UUID.randomUUID().toString();
    String splitExpr="(, " + "  (tmp= " + tmpVec + " (h2o.runif arrhythmia.hex 906317))"+ "  (assign train "+ "    (rows arrhythmia.hex (<= "+ tmpVec+ " 0.75)))"+ "  (assign test "+ "    (rows arrhythmia.hex (> "+ tmpVec+ " 0.75)))"+ "  (rm "+ tmpVec+ "))";
    RapidsSchemaV3 rapidsParms=new RapidsSchemaV3();
    rapidsParms.ast=splitExpr;
    h2o.rapidsExec(rapidsParms);
    GBMParametersV3 gbmParms=new GBMParametersV3();
    gbmParms.trainingFrame=H2oApi.stringToFrameKey("train");
    gbmParms.validationFrame=H2oApi.stringToFrameKey("test");
    ColSpecifierV3 responseColumn=new ColSpecifierV3();
    responseColumn.columnName="C1";
    gbmParms.responseColumn=responseColumn;
    System.out.println("About to train GBM. . .");
    GBMV3 gbmBody=(GBMV3)h2o.train_gbm(gbmParms);
    System.out.println("gbmBody: " + gbmBody);
    job=h2o.waitForJobCompletion(gbmBody.job.key);
    System.out.println("GBM build done.");
    ModelKeyV3 model_key=(ModelKeyV3)job.dest;
    ModelsV3 models=h2o.model(model_key);
    System.out.println("models: " + models);
    GBMModelV3 model=(GBMModelV3)models.models[0];
    System.out.println("new GBM model: " + model);
    ModelMetricsListSchemaV3 predict_params=new ModelMetricsListSchemaV3();
    predict_params.model=model_key;
    predict_params.frame=gbmParms.trainingFrame;
    predict_params.predictionsFrame=H2oApi.stringToFrameKey("predictions");
    ModelMetricsListSchemaV3 predictions=h2o.predict(predict_params);
    System.out.println("predictions: " + predictions);
  }
 catch (  IOException e) {
    System.err.println("Caught exception: " + e);
  }
}
