{
  DataInfo dinfo=null, scoreInfo=null;
  Frame fr=null, expanded=null;
  Frame[] frSplits=null, expandSplits=null;
  String[] interactions=new String[]{"class","sepal_len"};
  boolean useAll=false;
  boolean standardize=false;
  boolean skipMissing=true;
  try {
    fr=parse_test_file(Key.make("a.hex"),"smalldata/iris/iris_wheader.csv");
    fr.swap(3,4);
    expanded=GLMModel.GLMOutput.expand(fr,interactions,useAll,standardize,skipMissing);
    long seed;
    frSplits=ShuffleSplitFrame.shuffleSplitFrame(fr,new Key[]{Key.make(),Key.make()},new double[]{0.8,0.2},seed=new Random().nextLong());
    expandSplits=ShuffleSplitFrame.shuffleSplitFrame(expanded,new Key[]{Key.make(),Key.make()},new double[]{0.8,0.2},seed);
    checkSplits(frSplits,expandSplits,interactions,useAll,standardize);
    dinfo=makeInfo(frSplits[0],interactions,useAll,standardize);
    GLMModel.GLMParameters parms=new GLMModel.GLMParameters();
    parms._response_column="petal_wid";
    Model.adaptTestForTrain(frSplits[1],null,null,dinfo._adaptedFrame.names(),dinfo._adaptedFrame.domains(),parms,true,false,interactions,null,null);
    scoreInfo=dinfo.scoringInfo(frSplits[1]);
    checkFrame(scoreInfo,expandSplits[1]);
  }
  finally {
    cleanup(fr,expanded);
    cleanup(frSplits);
    cleanup(expandSplits);
    cleanup(dinfo,scoreInfo);
  }
}
