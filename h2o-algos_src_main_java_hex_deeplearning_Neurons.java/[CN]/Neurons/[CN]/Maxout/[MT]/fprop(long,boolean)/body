{
  assert(_b.size() == _a.size() * _k);
  assert(_w.size() == _a.size() * _previous._a.size() * _k);
  final int rows=_a.size();
  double[] channel=new double[_k];
  for (int row=0; row < rows; row++) {
    _a.set(row,0);
    if (!training || _dropout == null || _dropout.unit_active(row)) {
      final int cols=_previous._a.size();
      short maxK=0;
      for (short k=0; k < _k; k++) {
        channel[k]=0;
        for (int col=0; col < cols; col++) {
          channel[k]+=_w.raw()[_k * (row * cols + col) + k] * _previous._a.get(col);
        }
        channel[k]+=_b.raw()[_k * row + k];
        if (channel[k] > channel[maxK])         maxK=k;
      }
      _maxIncoming[row]=maxK;
      _a.set(row,channel[maxK]);
    }
  }
  compute_sparsity();
}
