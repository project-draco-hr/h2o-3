{
  assert(_b.size() == _a[0].size() * _k);
  assert(_w.size() == _a[0].size() * _previous._a[0].size() * _k);
  final int rows=_a[0].size();
  double[] channel=new double[_k];
  for (int row=0; row < rows; row++) {
    for (int mb=0; mb < n; ++mb) {
      _a[mb].set(row,0);
      if (!training || _dropout == null || _dropout.unit_active(row)) {
        final int cols=_previous._a[mb].size();
        short maxK=0;
        for (short k=0; k < _k; k++) {
          channel[k]=0;
          for (int col=0; col < cols; col++) {
            channel[k]+=_w.raw()[_k * (row * cols + col) + k] * _previous._a[mb].get(col);
          }
          channel[k]+=_b.raw()[_k * row + k];
          if (channel[k] > channel[maxK])           maxK=k;
        }
        _maxIncoming[mb][row]=maxK;
        _a[mb].set(row,channel[maxK]);
      }
    }
    compute_sparsity();
  }
}
