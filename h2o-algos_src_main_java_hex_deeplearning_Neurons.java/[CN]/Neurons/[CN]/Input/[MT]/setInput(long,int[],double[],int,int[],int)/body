{
  Arrays.fill(_a[mb].raw(),0f);
  if (params._max_categorical_features < _dinfo.fullN() - _dinfo._nums) {
    assert(nums.length == _dinfo._nums);
    final int M=nums.length + params._max_categorical_features;
    assert(_a[mb].size() == M);
    final int cM=params._max_categorical_features;
    assert(_a[mb].size() == M);
    MurmurHash murmur=MurmurHash.getInstance();
    for (int i=0; i < numcat; ++i) {
      ByteBuffer buf=ByteBuffer.allocate(4);
      int hashval=murmur.hash(buf.putInt(cats[i]).array(),4,(int)params._seed);
      _a[mb].add(Math.abs(hashval % cM),1f);
    }
    for (int i=0; i < nums.length; ++i)     _a[mb].set(cM + i,Double.isNaN(nums[i]) ? 0f : nums[i]);
  }
 else {
    assert(_a[mb].size() == _dinfo.fullN());
    for (int i=0; i < numcat; ++i)     _a[mb].set(cats[i],1f);
    if (numIds != null) {
      for (int i=0; i < numIds.length; ++i)       _a[mb].set(numIds[i],Double.isNaN(nums[i]) ? 0f : nums[i]);
    }
 else {
      for (int i=0; i < nums.length; ++i)       _a[mb].set(_dinfo.numStart() + i,Double.isNaN(nums[i]) ? 0f : nums[i]);
    }
  }
  if (_dropout == null)   return;
  if (params._autoencoder && params._input_dropout_ratio > 0) {
    System.arraycopy(_a[mb].raw(),0,_origa[mb].raw(),0,_a[mb].raw().length);
  }
  seed+=params._seed + 0x1337B4BE;
  _dropout.randomlySparsifyActivation(_a[mb],seed);
}
