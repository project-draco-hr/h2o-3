{
  final float rho=(float)params._rho;
  final float eps=(float)params._epsilon;
  final float l1=(float)params._l1;
  final float l2=(float)params._l2;
  final boolean have_momenta=_minfo.has_momenta();
  final boolean have_ada=_minfo.adaDelta();
  final boolean nesterov=params._nesterov_accelerated_gradient;
  final boolean update_prev=prev_e != null;
  final int cols=prev_a.size();
  final int rows=_a.size();
  for (int row=0; row < rows; row++) {
    final float partial_grad=_e.get(row) * (1f - _a.get(row) * _a.get(row));
    final float weight=w.get(row,col);
    if (update_prev)     prev_e.add(col,partial_grad * weight);
    assert(previous_a != 0);
    if (_shortcut && partial_grad == 0f)     continue;
    float grad=partial_grad * previous_a - Math.signum(weight) * l1 - weight * l2;
    if (_wEA != null)     throw H2O.unimpl("elastic averaging is not implemented for sparse input handling with column-major matrix format.");
    if (have_ada) {
      assert(!have_momenta);
      float brate=computeAdaDeltaRateForWeight(grad,row,col,adaxg,rho,eps);
      w.add(row,col,brate * grad);
    }
 else {
      if (!nesterov) {
        final float delta=rate * grad;
        w.add(row,col,delta);
        if (have_momenta) {
          w.add(row,col,momentum * wm.get(row,col));
          wm.set(row,col,delta);
        }
      }
 else {
        float tmp=grad;
        if (have_momenta) {
          float val=wm.get(row,col);
          val*=momentum;
          val+=tmp;
          tmp=val;
          wm.set(row,col,val);
        }
        w.add(row,col,rate * tmp);
      }
    }
    assert(_bEA == null);
    update_bias(b,_bEA,bm,row,partial_grad / cols,grad * grad / cols,rate,momentum);
  }
}
