{
  final boolean have_momenta=_minfo.has_momenta();
  final boolean have_ada=_minfo.adaDelta();
  final float l1=(float)params._l1;
  final float l2=(float)params._l2;
  final int b=_k != 0 ? _k * row + _maxIncoming[row] : row;
  final double bias=_b.get(b);
  partial_grad-=Math.signum(bias) * l1 + bias * l2;
  if (_bEA != null)   partial_grad-=(bias - _bEA.get(b)) * params._elastic_averaging_regularization;
  if (have_ada) {
    final float rho=(float)params._rho;
    final float eps=(float)params._epsilon;
    rate=computeAdaDeltaRateForBias(avg_grad2,b,_bias_ada_dx_g,rho,eps);
  }
  if (!params._nesterov_accelerated_gradient) {
    final double delta=rate * partial_grad;
    _b.add(b,delta);
    if (have_momenta) {
      _b.add(b,momentum * _bm.get(b));
      _bm.set(b,delta);
    }
  }
 else {
    double d=partial_grad;
    if (have_momenta) {
      _bm.set(b,_bm.get(b) * momentum);
      _bm.add(b,d);
      d=_bm.get(b);
    }
    _b.add(b,rate * d);
  }
  if (params._autoencoder && params._sparsity_beta > 0 && !(this instanceof Output) && !(this instanceof Input) && (_index != params._hidden.length)) {
    _b.add(b,-(rate * params._sparsity_beta * (_avg_a.raw()[b] - params._average_activation)));
  }
  if (Double.isInfinite(_b.get(b)))   _minfo.setUnstable();
}
