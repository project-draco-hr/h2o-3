{
  _index=index - 1;
  params=(DeepLearningParameters)p.clone();
  params._hidden_dropout_ratios=minfo.get_params()._hidden_dropout_ratios;
  params._rate*=Math.pow(params._rate_decay,index - 1);
  params._distribution=minfo.get_params()._distribution;
  _dist=new Distribution(params);
  _dist.setHuberDelta(1);
  _a=new Storage.DenseVector[params._mini_batch_size];
  for (int mb=0; mb < _a.length; ++mb)   _a[mb]=new Storage.DenseVector(units);
  if (!(this instanceof Input)) {
    _e=new Storage.DenseVector[params._mini_batch_size];
    for (int mb=0; mb < _e.length; ++mb)     _e[mb]=new Storage.DenseVector(units);
  }
 else   if (params._autoencoder && params._input_dropout_ratio > 0) {
    _origa=new Storage.DenseVector[params._mini_batch_size];
    for (int mb=0; mb < _origa.length; ++mb)     _origa[mb]=new Storage.DenseVector(units);
  }
  if (training && (this instanceof MaxoutDropout || this instanceof TanhDropout || this instanceof RectifierDropout|| this instanceof ExpRectifierDropout|| this instanceof Input)) {
    _dropout=this instanceof Input ? (params._input_dropout_ratio == 0 ? null : new Dropout(units,params._input_dropout_ratio)) : new Dropout(units,params._hidden_dropout_ratios[_index]);
  }
  if (!(this instanceof Input)) {
    _previous=neurons[_index];
    _minfo=minfo;
    _w=minfo.get_weights(_index);
    _b=minfo.get_biases(_index);
    if (params._autoencoder && params._sparsity_beta > 0 && _index < params._hidden.length) {
      _avg_a=minfo.get_avg_activations(_index);
    }
    if (minfo.has_momenta()) {
      _wm=minfo.get_weights_momenta(_index);
      _bm=minfo.get_biases_momenta(_index);
    }
    if (minfo.adaDelta()) {
      _ada_dx_g=minfo.get_ada_dx_g(_index);
      _bias_ada_dx_g=minfo.get_biases_ada_dx_g(_index);
    }
    _shortcut=(params._fast_mode || (!params._adaptive_rate && !_minfo.has_momenta() && params._l1 == 0.0 && params._l2 == 0.0));
  }
  sanityCheck(training);
}
