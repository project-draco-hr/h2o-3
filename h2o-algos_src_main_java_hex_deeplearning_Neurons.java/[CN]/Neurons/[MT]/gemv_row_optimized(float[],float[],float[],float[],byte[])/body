{
  final int cols=x.length;
  final int rows=y.length;
  assert(res.length == rows);
  final int extra=cols - cols % 8;
  final int multiple=(cols / 8) * 8 - 1;
  int idx=0;
  for (int row=0; row < rows; row++) {
    res[row]=0;
    if (row_bits == null || (row_bits[row / 8] & (1 << (row % 8))) != 0) {
      float psum0=0, psum1=0, psum2=0, psum3=0, psum4=0, psum5=0, psum6=0, psum7=0;
      for (int col=0; col < multiple; col+=8) {
        int off=idx + col;
        psum0+=a[off] * x[col];
        psum1+=a[off + 1] * x[col + 1];
        psum2+=a[off + 2] * x[col + 2];
        psum3+=a[off + 3] * x[col + 3];
        psum4+=a[off + 4] * x[col + 4];
        psum5+=a[off + 5] * x[col + 5];
        psum6+=a[off + 6] * x[col + 6];
        psum7+=a[off + 7] * x[col + 7];
      }
      res[row]+=psum0 + psum1 + psum2+ psum3;
      res[row]+=psum4 + psum5 + psum6+ psum7;
      for (int col=extra; col < cols; col++)       res[row]+=a[idx + col] * x[col];
      res[row]+=y[row];
    }
    idx+=cols;
  }
}
