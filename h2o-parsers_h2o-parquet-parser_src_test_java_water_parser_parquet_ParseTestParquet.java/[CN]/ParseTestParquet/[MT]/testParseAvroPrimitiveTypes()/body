{
  FrameAssertion assertion=new GenFrameAssertion("avroPrimitiveTypes.parquet",TestUtil.ari(9,100)){
    @Override protected File prepareFile() throws IOException {
      return ParquetFileGenerator.generateAvroPrimitiveTypes(file,nrows(),new Date());
    }
    @Override public void check(    Frame f){
      assertArrayEquals("Column names need to match!",ar("myboolean","myint","mylong","myfloat","mydouble","mydate","myuuid","mystring","myenum"),f.names());
      assertArrayEquals("Column types need to match!",ar(Vec.T_NUM,Vec.T_NUM,Vec.T_NUM,Vec.T_NUM,Vec.T_NUM,Vec.T_TIME,Vec.T_UUID,Vec.T_STR,Vec.T_CAT),f.types());
      BufferedString bs=new BufferedString();
      for (int row=0; row < nrows(); row++) {
        assertEquals("Value in column myboolean",1 - (row % 2),f.vec(0).at8(row));
        assertEquals("Value in column myint",1 + row,f.vec(1).at8(row));
        assertEquals("Value in column mylong",2 + row,f.vec(2).at8(row));
        assertEquals("Value in column myfloat",3.1f + row,f.vec(3).at(row),EPSILON);
        assertEquals("Value in column myfloat",4.1 + row,f.vec(4).at(row),EPSILON);
        assertEquals("Value in column mystring","hello world: " + row,f.vec(7).atStr(bs,row).bytesToString());
        assertEquals("Value in column myenum",row % 2 == 0 ? "a" : "b",f.vec(8).factor(f.vec(8).at8(row)));
      }
    }
  }
;
  assertFrameAssertion(assertion);
}
