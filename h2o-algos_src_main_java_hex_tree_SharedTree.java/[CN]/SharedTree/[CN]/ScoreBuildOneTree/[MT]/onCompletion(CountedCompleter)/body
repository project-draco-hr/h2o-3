{
  ScoreBuildHistogram sbh=(ScoreBuildHistogram)caller;
  final int leafOffset=_leafOffsets[_k];
  int tmax=_tree.len();
  for (int leaf=leafOffset; leaf < tmax; leaf++) {
    DTree.UndecidedNode udn=_tree.undecided(leaf);
    DTree.DecidedNode dn=_st.makeDecided(udn,sbh._hcs[leaf - leafOffset]);
    if (dn._split == null)     udn.do_not_split();
 else {
      _did_split=true;
      DTree.Split s=dn._split;
      float improvement=(float)(s.pre_split_se() - s.se());
      assert(improvement >= 0);
      AtomicUtils.FloatArray.add(_improvPerVar,s.col(),improvement);
    }
  }
  _leafOffsets[_k]=tmax;
  int new_leafs=_tree.len() - tmax;
  _hcs[_k]=new DHistogram[new_leafs][];
  for (int nl=tmax; nl < _tree.len(); nl++)   _hcs[_k][nl - tmax]=_tree.undecided(nl)._hs;
  if (_did_split && new_leafs > 0)   _tree._depth++;
}
