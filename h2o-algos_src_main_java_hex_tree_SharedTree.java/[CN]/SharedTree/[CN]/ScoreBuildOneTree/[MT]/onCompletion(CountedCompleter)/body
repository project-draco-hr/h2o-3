{
  ScoreBuildHistogram sbh=(ScoreBuildHistogram)caller;
  final int leafk=_leafs[_k];
  int tmax=_tree.len();
  for (int leaf=leafk; leaf < tmax; leaf++) {
    DTree.UndecidedNode udn=_tree.undecided(leaf);
    DTree.DecidedNode dn=makeDecided(udn,sbh._hcs[leaf - leafk]);
    if (dn._split.col() == -1)     udn.do_not_split();
 else {
      _did_split=true;
      DTree.Split s=dn._split;
      AtomicUtils.FloatArray.add(_improvPerVar,s.col(),(float)(s.pre_split_se() - s.se()));
    }
  }
  _leafs[_k]=tmax;
  int new_leafs=_tree.len() - tmax;
  _hcs[_k]=new DHistogram[new_leafs][];
  for (int nl=tmax; nl < _tree.len(); nl++)   _hcs[_k][nl - tmax]=_tree.undecided(nl)._hs;
  if (new_leafs > 0)   _tree._depth++;
}
