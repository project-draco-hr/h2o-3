{
  long now=System.currentTimeMillis();
  if (_firstScore == 0)   _firstScore=now;
  long sinceLastScore=now - _timeLastScoreStart;
  boolean updated=false;
  if (_parms._score_each_iteration || finalScoring || (now - _firstScore < 4000)|| (sinceLastScore > 4000 && (double)(_timeLastScoreEnd - _timeLastScoreStart) / sinceLastScore < 0.1)) {
    _model.update(_key);
    updated=true;
    _timeLastScoreStart=now;
    Score sc=new Score(this,oob,_model._output.getModelCategory()).doAll(_parms._valid == null ? train() : valid(),build_tree_one_node);
    ModelMetrics mm=sc.makeModelMetrics(_model,_parms._valid == null ? _parms.train() : _parms.valid(),_parms._response_column);
    Log.info("============================================================== ");
    if (mm instanceof ModelMetricsRegression) {
      SharedTreeModel.SharedTreeOutput out=_model._output;
      out._mse_train[out._ntrees]=_parms._valid == null ? ((ModelMetricsRegression)mm)._mse : Double.NaN;
      out._mse_valid[out._ntrees]=_parms._valid == null ? Double.NaN : ((ModelMetricsRegression)mm)._mse;
      Log.info("r2 is " + mm.r2() + ", with "+ _model._output._ntrees+ "x"+ _nclass+ " trees (average of "+ (_model._output._treeStats._meanLeaves)+ " nodes)");
    }
    if (mm instanceof ModelMetricsBinomial) {
      ConfusionMatrix cm=((ModelMetricsBinomial)mm)._cm;
      Log.info(cm.toASCII());
      Log.info((_nclass > 1 ? "Total of " + cm.errCount() + " errors" : "Reported") + " on " + cm.totalRows()+ " rows");
    }
    _timeLastScoreEnd=System.currentTimeMillis();
  }
  if (_parms._variable_importance && _model._output._ntrees > 0) {
    if (!updated)     _model.update(_key);
    updated=true;
    Timer vi_timer=new Timer();
    _model._output._varimp=doVarImpCalc(false);
    Log.info("Computation of variable importance took: " + vi_timer.toString());
  }
  if (updated)   _model.update(_key);
}
