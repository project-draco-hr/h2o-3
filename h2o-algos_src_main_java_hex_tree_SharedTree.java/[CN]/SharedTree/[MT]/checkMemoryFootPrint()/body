{
  if (_model._output._ntrees == 0)   return;
  int model_mem_size=0;
  int n=_model._output._ntrees;
  for (int i=0; i < n; ++i) {
    Key<CompressedTree>[] per_class=_model._output._treeKeys[i];
    for (int j=0; j < per_class.length; ++j) {
      if (per_class[j] == null)       continue;
      model_mem_size+=DKV.get(per_class[j]).memOrLoad().length;
    }
  }
  double avg_tree_mem_size=(double)model_mem_size / n;
  Log.debug("Average tree size (for all classes): " + PrettyPrint.bytes((long)avg_tree_mem_size));
  if (_parms._ntrees * avg_tree_mem_size > H2O.CLOUD._memary[0]._heartbeat.get_max_mem()) {
    String msg="The tree model will not fit in memory (" + PrettyPrint.bytes((long)avg_tree_mem_size) + " per tree) - try decreasing ntrees and/or max_depth or increasing min_rows!";
    error("_ntrees",msg);
    throw new IllegalArgumentException(msg);
  }
}
