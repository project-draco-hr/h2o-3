{
  ScoreBuildOneTree sb1ts[]=new ScoreBuildOneTree[_nclass];
  Vec vecs[]=fr.vecs();
  for (int k=0; k < _nclass; k++) {
    final DTree tree=ktrees[k];
    if (tree == null)     continue;
    Frame fr2=new Frame(Arrays.copyOf(fr._names,_ncols + 1),Arrays.copyOf(vecs,_ncols + 1));
    int weightIdx=fr2.find(_parms._weights_column);
    fr2.add(fr._names[idx_tree(k)],vecs[idx_tree(k)]);
    int workIdx=fr2.numCols();
    fr2.add(fr._names[idx_work(k)],vecs[idx_work(k)]);
    int nidIdx=fr2.numCols();
    fr2.add(fr._names[idx_nids(k)],vecs[idx_nids(k)]);
    if (DEV_DEBUG) {
      System.out.println("Building a layer for class " + k + ":\n"+ fr2.toString());
    }
    H2O.submitTask(sb1ts[k]=new ScoreBuildOneTree(this,k,nbins,nbins_cats,tree,leafs,hcs,fr2,build_tree_one_node,_improvPerVar,_model._parms._distribution,weightIdx,workIdx,nidIdx));
  }
  boolean did_split=false;
  for (int k=0; k < _nclass; k++) {
    final DTree tree=ktrees[k];
    if (tree == null)     continue;
    sb1ts[k].join();
    if (sb1ts[k]._did_split)     did_split=true;
    if (DEV_DEBUG) {
      System.out.println("Done with this layer for class " + k + ":\n"+ new Frame(new String[]{"TREE","WORK","NIDS"},new Vec[]{vecs[idx_tree(k)],vecs[idx_work(k)],vecs[idx_nids(k)]}).toString());
    }
  }
  return did_split ? hcs : null;
}
