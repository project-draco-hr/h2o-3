{
  ScoreBuildOneTree sb1ts[]=new ScoreBuildOneTree[_nclass];
  Vec vecs[]=fr.vecs();
  for (int k=0; k < _nclass; k++) {
    final DTree tree=ktrees[k];
    if (tree == null)     continue;
    Frame fr2=new Frame(Arrays.copyOf(fr._names,_ncols + 1),Arrays.copyOf(vecs,_ncols + 1));
    fr2.add(fr._names[idx_tree(k)],vecs[idx_tree(k)]);
    fr2.add(fr._names[idx_work(k)],vecs[idx_work(k)]);
    fr2.add(fr._names[idx_nids(k)],vecs[idx_nids(k)]);
    H2O.submitTask(sb1ts[k]=new ScoreBuildOneTree(this,k,nbins,tree,leafs,hcs,fr2,subset,build_tree_one_node,_improvPerVar));
  }
  boolean did_split=false;
  for (int k=0; k < _nclass; k++) {
    final DTree tree=ktrees[k];
    if (tree == null)     continue;
    sb1ts[k].join();
    if (sb1ts[k]._did_split)     did_split=true;
  }
  return did_split ? hcs : null;
}
