def setup_model(self):
    '\n        This function setup the gridsearch parameters that will be used later on:\n\n        1. It will first try to grab all the parameters that are griddable and parameters used by GLM.\n        2. It will find the intersection of parameters that are both griddable and used by GLM.\n        3. There are several extra parameters that are used by GLM that are denoted as griddable but actually is not.\n        These parameters have to be discovered manually and they These are captured in self.exclude_parameter_lists.\n        4. We generate the gridsearch hyper-parameter.  For numerical parameters, we will generate those randomly.\n        For enums, we will include all of them.\n\n        :return: None\n        '
    model = H2OGeneralizedLinearEstimator(family=self.family)
    model.train(x=self.x_indices, y=self.y_index, training_frame=self.training1_data)
    (self.gridable_parameters, self.gridable_types, self.gridable_defaults) = pyunit_utils.get_gridables(model._model_json['parameters'])
    (self.hyper_params, self.gridable_parameters, self.gridable_types, self.gridable_defaults) = pyunit_utils.gen_grid_search(model._parms.keys(), self.hyper_params, self.exclude_parameter_lists, self.gridable_parameters, self.gridable_types, self.gridable_defaults, random.randint(1, self.max_int_number), self.max_int_val, self.min_int_val, random.randint(1, self.max_real_number), self.max_real_val, self.min_real_val)
    if ('lambda' in list(self.hyper_params)):
        self.hyper_params['lambda'] = [(self.lambda_scale * x) for x in self.hyper_params['lambda']]
    self.hyper_params['lambda'] = pyunit_utils.fix_float_precision(self.hyper_params['lambda'])
    self.possible_number_models = pyunit_utils.count_models(self.hyper_params)
    json_file = os.path.join(self.sandbox_dir, self.json_filename)
    with open(json_file, 'w') as test_file:
        json.dump(self.hyper_params, test_file)
