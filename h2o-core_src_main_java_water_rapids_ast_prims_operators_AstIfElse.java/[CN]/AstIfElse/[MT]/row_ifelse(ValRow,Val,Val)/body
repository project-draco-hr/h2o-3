{
  double[] test=tst.getRow();
  double[] True;
  double[] False;
  if (!(yes.isRow() || no.isRow()))   throw H2O.unimpl();
switch (yes.type()) {
case Val.NUM:
    True=new double[]{yes.getNum()};
  break;
case Val.ROW:
True=yes.getRow();
break;
default :
throw H2O.unimpl("row ifelse unimpl: " + yes.getClass());
}
switch (no.type()) {
case Val.NUM:
False=new double[]{no.getNum()};
break;
case Val.ROW:
False=no.getRow();
break;
default :
throw H2O.unimpl("row ifelse unimplL " + no.getClass());
}
double[] ds=new double[test.length];
String[] ns=new String[test.length];
for (int i=0; i < test.length; ++i) {
ns[i]="C" + (i + 1);
if (Double.isNaN(test[i])) ds[i]=Double.NaN;
 else ds[i]=test[i] == 0 ? False[i] : True[i];
}
return new ValRow(ds,ns);
}
