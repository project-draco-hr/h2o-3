{
  if (columnNames != null)   throw new UnsupportedOperationException("ARFFParser doesn't accept columnNames.");
  boolean haveData=false;
  int offset=0;
  String[][] data;
  String[] labels;
  String[][] domains;
  String[] headerlines=new String[0];
  byte[] ctypes;
  ArrayList<String> header=new ArrayList<>();
  offset=readArffHeader(offset,header,bits,singleQuotes);
  if (offset < bits.length && !CsvParser.isEOL(bits[offset]))   haveData=true;
  if (header.size() == 0)   throw new ParseDataset.H2OParseException("No data!");
  headerlines=header.toArray(headerlines);
  final int nlines=headerlines.length;
  int ncols=nlines;
  data=new String[ncols][];
  labels=new String[ncols];
  domains=new String[ncols][];
  ctypes=new byte[ncols];
  processArffHeader(ncols,headerlines,data,labels,domains,ctypes);
  if (haveData) {
    String[] datalines=new String[0];
    ArrayList<String> datablock=new ArrayList<>();
    while (offset < bits.length) {
      int lineStart=offset;
      while (offset < bits.length && !CsvParser.isEOL(bits[offset]))       ++offset;
      int lineEnd=offset;
      ++offset;
      if ((offset < bits.length) && (bits[offset] == CsvParser.CHAR_LF))       ++offset;
      if (bits[lineStart] == '#')       continue;
      if (bits[lineStart] == '%')       continue;
      if (lineEnd > lineStart) {
        String str=new String(bits,lineStart,lineEnd - lineStart).trim();
        if (!str.isEmpty())         datablock.add(str);
      }
    }
    if (datablock.size() == 0)     throw new ParseDataset.H2OParseException("Unexpected line.");
    datalines=datablock.toArray(datalines);
    int nlines2=Math.min(10,datalines.length);
    data=new String[nlines2][];
    if (nlines2 == 1) {
      if (sep == GUESS_SEP) {
        if (datalines[0].split(",").length > 2)         sep=(byte)',';
 else         if (datalines[0].split(" ").length > 2)         sep=' ';
 else         throw new ParseDataset.H2OParseException("Failed to detect separator.");
      }
      data[0]=determineTokens(datalines[0],sep,singleQuotes);
      ncols=(ncols > 0) ? ncols : data[0].length;
      labels=null;
    }
 else {
      if (sep == GUESS_SEP) {
        sep=guessSeparator(datalines[0],datalines[1],singleQuotes);
        if (sep == GUESS_SEP && nlines2 > 2) {
          sep=guessSeparator(datalines[1],datalines[2],singleQuotes);
          if (sep == GUESS_SEP)           sep=guessSeparator(datalines[0],datalines[2],singleQuotes);
        }
        if (sep == GUESS_SEP)         sep=(byte)' ';
      }
      for (int i=0; i < nlines2; ++i) {
        data[i]=determineTokens(datalines[i],sep,singleQuotes);
      }
    }
  }
  return new ParseSetup(ParserType.ARFF,sep,singleQuotes,ParseSetup.NO_HEADER,ncols,labels,ctypes,domains,naStrings,data);
}
