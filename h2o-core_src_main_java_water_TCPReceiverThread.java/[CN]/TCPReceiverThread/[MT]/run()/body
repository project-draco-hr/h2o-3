{
  Thread.currentThread().setPriority(Thread.MAX_PRIORITY);
  ServerSocketChannel errsock=null;
  boolean saw_error=false;
  while (true) {
    try {
      if (errsock != null) {
        final ServerSocketChannel tmp2=errsock;
        errsock=null;
        tmp2.close();
      }
      if (saw_error)       Thread.sleep(100);
      saw_error=false;
      if (SOCK == null) {
        SOCK=ServerSocketChannel.open();
        SOCK.socket().setReceiveBufferSize(AutoBuffer.BBP_BIG._size);
        SOCK.socket().bind(H2O.SELF._key);
      }
      SocketChannel sock=SOCK.accept();
      ByteBuffer bb=ByteBuffer.allocate(4).order(ByteOrder.nativeOrder());
      ByteChannel wrappedSocket=socketChannelFactory.serverChannel(sock);
      bb.limit(bb.capacity());
      bb.position(0);
      while (bb.hasRemaining()) {
        wrappedSocket.read(bb);
      }
      bb.flip();
      int chanType=bb.get();
      int port=bb.getChar();
      int sentinel=(0xFF) & bb.get();
      if (sentinel != 0xef) {
        if (H2O.SELF.getSecurityManager().securityEnabled) {
          throw new IOException("Missing EOM sentinel when opening new SSL tcp channel.");
        }
 else {
          throw H2O.fail("missing eom sentinel when opening new tcp channel");
        }
      }
      InetAddress inetAddress=sock.socket().getInetAddress();
      H2ONode h2o=H2ONode.intern(inetAddress,port);
switch (chanType) {
case 1:
        new UDP_TCP_ReaderThread(h2o,wrappedSocket).start();
      break;
case 2:
    new TCPReaderThread(wrappedSocket,new AutoBuffer(wrappedSocket,inetAddress),inetAddress).start();
  break;
default :
throw H2O.fail("unexpected channel type " + chanType + ", only know 1 - Small and 2 - Big");
}
}
 catch (java.nio.channels.AsynchronousCloseException ex) {
break;
}
catch (Exception e) {
e.printStackTrace();
Log.err("IO error on TCP port " + H2O.H2O_PORT + ": ",e);
saw_error=true;
errsock=SOCK;
SOCK=null;
}
}
}
