{
  if (row_count == 0)   row_count=100;
  if (column_count == 0)   column_count=f.numCols() - column_offset;
  row_count=(int)Math.min(row_count,row_offset + f.numRows());
  column_count=(int)Math.min(column_count,column_offset + f.numCols());
  this.frame_id=new FrameKeyV3(f._key);
  this.checksum=f.checksum();
  this.byte_size=f.byteSize();
  this.row_offset=row_offset;
  this.rows=f.numRows();
  this.row_count=row_count;
  this.total_column_count=f.numCols();
  this.column_offset=column_offset;
  this.column_count=column_count;
  this.columns=new ColV3[column_count];
  Vec[] vecs=f.vecs();
  for (int i=0; i < column_count; i++) {
    try {
      columns[i]=new ColV3(f._names[column_offset + i],vecs[column_offset + i],this.row_offset,this.row_count,force_summary);
    }
 catch (    Exception e) {
      Log.err("Caught exception processing FrameV2(",f._key.toString(),"): Vec: " + f._names[column_offset + i],e);
      throw e;
    }
  }
  this.is_text=f.numCols() == 1 && vecs[0] instanceof ByteVec;
  this.default_percentiles=Vec.PERCENTILES;
  ChunkSummary cs=FrameUtils.chunkSummary(f);
  TwoDimTable chunk_summary_table=cs.toTwoDimTableChunkTypes();
  this.chunk_summary=(TwoDimTableBase)Schema.schema(this.getSchemaVersion(),chunk_summary_table).fillFromImpl(chunk_summary_table);
  TwoDimTable distribution_summary_table=cs.toTwoDimTableDistribution();
  distribution_summary=(TwoDimTableBase)Schema.schema(this.getSchemaVersion(),distribution_summary_table).fillFromImpl(distribution_summary_table);
  this._fr=f;
  return this;
}
