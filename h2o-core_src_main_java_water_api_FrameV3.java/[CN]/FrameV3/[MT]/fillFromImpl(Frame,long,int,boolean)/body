{
  if (off2 == 0)   off2=1;
  if (len2 == 0)   len2=100;
  this._fr=f;
  this.key=new FrameKeyV3(f._key);
  this.checksum=_fr.checksum();
  row_offset=off2;
  rows=_fr.numRows();
  row_count=(int)Math.min(len2,rows);
  byte_size=_fr.byteSize();
  columns=new ColV2[_fr.numCols()];
  Key[] keys=_fr.keys();
  if (keys != null && keys.length > 0) {
    vec_keys=new VecKeyV3[keys.length];
    for (int i=0; i < keys.length; i++)     vec_keys[i]=new VecKeyV3(keys[i]);
  }
  Vec[] vecs=_fr.vecs();
  for (int i=0; i < columns.length; i++) {
    try {
      columns[i]=new ColV2(_fr._names[i],vecs[i],row_offset,row_count,force_summary);
    }
 catch (    Exception e) {
      Log.err("Caught exception processing FrameV2(",f._key.toString(),"): Vec: " + _fr._names[i],e);
      throw e;
    }
  }
  is_text=f.numCols() == 1 && vecs[0] instanceof ByteVec;
  default_percentiles=Vec.PERCENTILES;
  chunk_summary=new TwoDimTableV3().fillFromImpl(FrameUtils.chunkSummary(f).toTwoDimTable());
  return this;
}
