{
  double minmax[]=new double[]{_min2,_maxIn};
  for (int r=lo; r < hi; ++r) {
    int k=rows[r];
    double weight=ws[k];
    if (weight == 0)     continue;
    double col_data=cs[k];
    if (col_data < minmax[0])     minmax[0]=col_data;
    if (col_data > minmax[1])     minmax[1]=col_data;
    double y=ys[k];
    assert(!Double.isNaN(y));
    double wy=weight * y;
    double wyy=wy * y;
    if (Double.isNaN(col_data)) {
      _wNA.addAndGet(weight);
      _wYNA.addAndGet(wy);
      _wYYNA.addAndGet(wyy);
    }
 else {
      int b=bin(col_data);
      lh.wAdd(b,weight);
      lh.wYAdd(b,wy);
      lh.wYYAdd(b,wyy);
    }
  }
  setMin(minmax[0]);
  setMaxIn(minmax[1]);
  final int len=_w.length;
  for (int b=0; b < len; b++) {
    if (lh.w(b) != 0) {
      AtomicUtils.DoubleArray.add(_w,b,lh.w(b));
      lh.wClear(b);
    }
    if (lh.wY(b) != 0) {
      AtomicUtils.DoubleArray.add(_wY,b,(float)lh.wY(b));
      lh.wYClear(b);
    }
    if (lh.wYY(b) != 0) {
      AtomicUtils.DoubleArray.add(_wYY,b,(float)lh.wYY(b));
      lh.wYYClear(b);
    }
  }
}
