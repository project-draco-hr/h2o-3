{
  Frame tfr=null, vfr=null;
  final int N=5;
  double[] mses=new double[N];
  Scope.enter();
  try {
    tfr=parse_test_file("smalldata/covtype/covtype.20k.data");
    Key dest=Key.make("df.rebalanced.hex");
    RebalanceDataSet rb=new RebalanceDataSet(tfr,dest,256);
    H2O.submitTask(rb);
    rb.join();
    tfr.delete();
    tfr=DKV.get(dest).get();
    for (int i=0; i < N; ++i) {
      GBMModel.GBMParameters parms=new GBMModel.GBMParameters();
      parms._train=tfr._key;
      parms._response_column="C55";
      parms._nbins=1000;
      parms._ntrees=1;
      parms._max_depth=8;
      parms._learn_rate=0.1f;
      parms._min_rows=10;
      parms._loss=Family.gaussian;
      GBM job=new GBM(parms);
      GBMModel gbm=job.trainModel().get();
      assertEquals(gbm._output._ntrees,parms._ntrees);
      mses[i]=gbm._output._mse_train[gbm._output._mse_train.length - 1];
      job.remove();
      gbm.delete();
    }
  }
  finally {
    if (tfr != null)     tfr.remove();
    if (vfr != null)     vfr.remove();
  }
  Scope.exit();
  for (int i=0; i < mses.length; ++i) {
    Log.info("trial: " + i + " -> mse: "+ mses[i]);
  }
  for (int i=0; i < mses.length; ++i) {
    assertEquals(mses[i],mses[0],1e-15);
  }
}
