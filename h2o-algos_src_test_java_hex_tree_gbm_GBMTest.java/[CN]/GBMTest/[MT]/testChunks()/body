{
  Frame tfr;
  int[] chunks=new int[]{1,2,2,39,39,500};
  final int N=chunks.length;
  double[] mses=new double[N];
  for (int i=0; i < N; ++i) {
    Scope.enter();
    tfr=parse_test_file("smalldata/covtype/covtype.20k.data");
    Key dest=Key.make("df.rebalanced.hex");
    RebalanceDataSet rb=new RebalanceDataSet(tfr,dest,chunks[i]);
    H2O.submitTask(rb);
    rb.join();
    tfr.delete();
    tfr=DKV.get(dest).get();
    assertEquals(tfr.vec(0).nChunks(),chunks[i]);
    DKV.put(tfr);
    GBMModel.GBMParameters parms=new GBMModel.GBMParameters();
    parms._train=tfr._key;
    parms._response_column="C55";
    parms._seed=1234;
    parms._auto_rebalance=false;
    parms._col_sample_rate_per_tree=0.5f;
    parms._col_sample_rate=0.3f;
    parms._ntrees=5;
    parms._max_depth=5;
    GBM job=new GBM(parms);
    GBMModel drf=job.trainModel().get();
    assertEquals(drf._output._ntrees,parms._ntrees);
    mses[i]=drf._output._scored_train[drf._output._scored_train.length - 1]._mse;
    drf.delete();
    if (tfr != null)     tfr.remove();
    Scope.exit();
  }
  for (int i=0; i < mses.length; ++i) {
    Log.info("trial: " + i + " -> MSE: "+ mses[i]);
  }
  for (  double mse : mses)   assertEquals(mse,mses[0],1e-10);
}
