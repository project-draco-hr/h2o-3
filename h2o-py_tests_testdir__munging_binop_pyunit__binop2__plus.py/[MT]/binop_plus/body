def binop_plus(ip, port):
    iris = h2o.import_file(path=h2o.locate('smalldata/iris/iris_wheader_65_rows.csv'))
    (rows, cols) = iris.dim()
    iris.show()
    res = (2 + iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    for (x, y) in zip([res[c].sum() for c in range((cols - 1))], [469.9, 342.6, 266.9, 162.2]):
        assert (abs((x - y)) < 0.1), 'expected same values'
    res = (2 + iris[0])
    res2 = (1.1 + res[21, :])
    assert (abs((res2 - 8.2)) < 0.1), 'expected same values'
    res = (1.2 + iris[2])
    res2 = (res[21, :] + iris)
    res2.show()
    res = (1.2 + iris[2])
    res2 = (res[21, :] + iris[1])
    res2.show()
    res = (1.1 + iris[2])
    res2 = (res[21, :] + res[10, :])
    assert (abs((res2 - 5.2)) < 0.1), 'expected same values'
    res = (2 + iris[0])
    res2 = (res[21, :] + 3)
    assert (abs((res2 - 10.1)) < 0.1), 'expected same values'
    res = (1.2 + iris[2])
    res2 = (iris[1] + res[21, :])
    res2.show()
    res = (iris + iris)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    res = (iris[0:2] + iris[1:3])
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == 2)), 'dimension mismatch'
    res = (1.2 + iris[2])
    res2 = (iris + res[21, :])
    res2.show()
    res = (iris + 2)
    (res_rows, res_cols) = res.dim()
    assert ((res_rows == rows) and (res_cols == cols)), 'dimension mismatch'
    for (x, y) in zip([res[c].sum() for c in range((cols - 1))], [469.9, 342.6, 266.9, 162.2]):
        assert (abs((x - y)) < 0.1), 'expected same values'
