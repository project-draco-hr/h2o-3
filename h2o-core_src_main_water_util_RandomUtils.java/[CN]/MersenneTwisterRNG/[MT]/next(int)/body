{
  int y;
  try {
    lock.lock();
    if (mtIndex >= N) {
      int kk;
      for (kk=0; kk < N - M; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ MAG01[y & 0x1];
      }
      for (; kk < N - 1; kk++) {
        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);
        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ MAG01[y & 0x1];
      }
      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);
      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ MAG01[y & 0x1];
      mtIndex=0;
    }
    y=mt[mtIndex++];
  }
  finally {
    lock.unlock();
  }
  y^=(y >>> 11);
  y^=(y << 7) & GENERATE_MASK1;
  y^=(y << 15) & GENERATE_MASK2;
  y^=(y >>> 18);
  return y >>> (32 - bits);
}
