{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  if (fr.numCols() != 1 || !fr.anyVec().isCategorical())   throw new IllegalArgumentException("can only match on a single categorical column.");
  String[] strsTable2=null;
  double[] dblsTable2=null;
  if (asts[2] instanceof ASTNumList)   dblsTable2=((ASTNumList)asts[2]).sort().expand();
 else   if (asts[2] instanceof ASTNum)   dblsTable2=new double[]{asts[2].exec(env).getNum()};
 else   if (asts[2] instanceof ASTStrList) {
    strsTable2=((ASTStrList)asts[2])._strs;
    Arrays.sort(strsTable2);
  }
 else   if (asts[2] instanceof ASTStr)   strsTable2=new String[]{asts[2].exec(env).getStr()};
 else   throw new IllegalArgumentException("Expected numbers/strings. Got: " + asts[2].getClass());
  final String[] strsTable=strsTable2;
  final double[] dblsTable=dblsTable2;
  Frame rez=new MRTask(){
    @Override public void map(    Chunk c,    NewChunk n){
      String[] domain=c.vec().domain();
      int x, rows=c._len;
      for (int r=0; r < rows; ++r) {
        x=c.isNA(r) ? 0 : (strsTable == null ? in(dblsTable,c.atd(r)) : in(strsTable,domain[(int)c.at8(r)]));
        n.addNum(x,0);
      }
    }
  }
.doAll(new byte[]{Vec.T_NUM},fr.anyVec()).outputFrame();
  return new ValFrame(rez);
}
