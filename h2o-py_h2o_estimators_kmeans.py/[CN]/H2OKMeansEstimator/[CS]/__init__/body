def __init__(self, model_id=None, k=None, max_iterations=None, standardize=None, init=None, seed=None, nfolds=None, fold_assignment=None, user_points=None, ignored_columns=None, score_each_iteration=None, keep_cross_validation_predictions=None, ignore_const_cols=None, checkpoint=None):
    '\n    Performs k-means clustering on an H2O dataset.\n\n    Parameters\n    ----------\n      model_id : str, optional\n        The unique id assigned to the resulting model. If none is given, an id will\n        automatically be generated.\n      k : int\n        The number of clusters. Must be between 1 and 1e7 inclusive. k may be omitted\n        if the user specifies the initial centers in the init parameter. If k is not\n        omitted, in this case, then it should be equal to the number of user-specified\n        centers.\n      max_iterations : int\n        The maximum number of iterations allowed. Must be between 0 and 1e6 inclusive.\n      standardize : bool\n        Indicates whether the data should be standardized before running k-means.\n      init : str\n        A character string that selects the initial set of k cluster centers. Possible\n        values are\n            "Random": for random initialization,\n            "PlusPlus": for k-means plus initialization, or\n            "Furthest": for initialization at the furthest point from each successive\n                        center.\n\n        Additionally, the user may specify a the initial centers as a matrix,\n        data.frame, H2OFrame, or list of vectors. For matrices, data.frames,\n        and H2OFrames, each row of the respective structure is an initial center. For\n        lists of vectors, each vector is an initial center.\n      seed : int, optional\n        Random seed used to initialize the cluster centroids.\n      nfolds : int, optional\n        Number of folds for cross-validation. If nfolds >= 2, then validation must\n        remain empty.\n      fold_assignment : str\n        Cross-validation fold assignment scheme, if fold_column is not specified\n        Must be "AUTO", "Random" or "Modulo"\n\n    :return: An instance of H2OClusteringModel.\n    '
    super(H2OKMeansEstimator, self).__init__()
    self._parms = locals()
    self._parms = {k: v for (k, v) in self._parms.iteritems() if (k != 'self')}
