{
  I=new Persist[MAX_BACKENDS];
  stats=new PersistStatsEntry[MAX_BACKENDS];
  for (int i=0; i < stats.length; i++) {
    stats[i]=new PersistStatsEntry();
  }
  if (iceRoot == null) {
    Log.err("ice_root must be specified.  Exiting.");
    H2O.exit(1);
  }
  Persist ice=null;
  boolean windowsPath=iceRoot.toString().matches("^[a-zA-Z]:.*");
  if (windowsPath) {
    ice=new PersistFS(new File(iceRoot.toString()));
  }
 else   if ((iceRoot.getScheme() == null) || Schemes.FILE.equals(iceRoot.getScheme())) {
    ice=new PersistFS(new File(iceRoot.getPath()));
  }
 else   if (Schemes.HDFS.equals(iceRoot.getScheme())) {
    Log.err("HDFS ice_root not yet supported.  Exiting.");
    H2O.exit(1);
  }
  I[Value.ICE]=ice;
  I[Value.NFS]=new PersistNFS();
  try {
    Class klass=Class.forName("water.persist.PersistHdfs");
    java.lang.reflect.Constructor constructor=klass.getConstructor();
    I[Value.HDFS]=(Persist)constructor.newInstance();
    Log.info("HDFS subsystem successfully initialized");
  }
 catch (  Throwable ignore) {
    Log.info("HDFS subsystem not available");
  }
  try {
    Class klass=Class.forName("water.persist.PersistS3");
    java.lang.reflect.Constructor constructor=klass.getConstructor();
    I[Value.S3]=(Persist)constructor.newInstance();
    Log.info("S3 subsystem successfully initialized");
  }
 catch (  Throwable ignore) {
    Log.info("S3 subsystem not available");
  }
}
