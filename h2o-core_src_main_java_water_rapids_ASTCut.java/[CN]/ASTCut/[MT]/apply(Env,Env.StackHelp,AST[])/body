{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  double[] cuts=check(asts[2]);
  String[] labels=check2(asts[3]);
  final boolean lowest=asts[4].exec(env).getNum() == 1;
  final boolean rite=asts[5].exec(env).getNum() == 1;
  final int digits=Math.max((int)asts[6].exec(env).getNum(),12);
  if (fr.vecs().length != 1 || fr.vecs()[0].isCategorical())   throw new IllegalArgumentException("First argument must be a numeric column vector");
  double fmin=fr.anyVec().min();
  double fmax=fr.anyVec().max();
  int nbins=cuts.length - 1;
  double width;
  if (nbins == 0) {
    if (cuts[0] < 2)     throw new IllegalArgumentException("The number of cuts must be >= 2. Got: " + cuts[0]);
    nbins=(int)Math.floor(cuts[0]);
    width=(fmax - fmin) / nbins;
    cuts=new double[nbins];
    cuts[0]=fmin - 0.001 * (fmax - fmin);
    for (int i=1; i < cuts.length; ++i)     cuts[i]=(i == cuts.length - 1) ? (fmax + 0.001 * (fmax - fmin)) : (fmin + i * width);
  }
  if (labels != null && labels.length != nbins)   throw new IllegalArgumentException("`labels` vector does not match the number of cuts.");
  final double cutz[]=cuts;
  for (int i=0; i < cuts.length; ++i)   cuts[i]=Math.floor(cuts[i] * Math.pow(10,digits) + 0.5) / Math.pow(10,digits);
  String[][] domains=new String[1][nbins];
  if (labels == null) {
    domains[0][0]=(lowest ? "[" : left(rite)) + cuts[0] + ","+ cuts[1]+ rite(rite);
    for (int i=1; i < (cuts.length - 1); ++i)     domains[0][i]=left(rite) + cuts[i] + ","+ cuts[i + 1]+ rite(rite);
  }
 else   domains[0]=labels;
  Frame fr2=new MRTask(){
    @Override public void map(    Chunk c,    NewChunk nc){
      int rows=c._len;
      for (int r=0; r < rows; ++r) {
        double x=c.atd(r);
        if (Double.isNaN(x) || (lowest && x < cutz[0]) || (!lowest && x <= cutz[0])|| (rite && x > cutz[cutz.length - 1])|| (!rite && x >= cutz[cutz.length - 1]))         nc.addNum(Double.NaN);
 else {
          for (int i=1; i < cutz.length; ++i) {
            if (rite) {
              if (x <= cutz[i]) {
                nc.addNum(i - 1);
                break;
              }
            }
 else             if (x < cutz[i]) {
              nc.addNum(i - 1);
              break;
            }
          }
        }
      }
    }
  }
.doAll(1,fr).outputFrame(fr.names(),domains);
  return new ValFrame(fr2);
}
