def test_bayes_basic(self):
    bucket = 'home-0xdiag-datasets'
    importFolderPath = 'standard'
    trainFilename = 'covtype.shuffled.90pct.data'
    train_key = 'covtype.train.hex'
    b = Key(train_key)
    model_key = 'bayesModelKey'
    timeoutSecs = 1800
    csvPathname = ((importFolderPath + '/') + trainFilename)
    columnTypeDict = {54: 'Enum', }
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, columnTypeDict=columnTypeDict, schema='local', chunk_size=4194304, hex_key=train_key, timeoutSecs=timeoutSecs)
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    labelListUsed = list(labelList)
    numColsUsed = numCols
    parameters = []
    parameters.append({'response_column': 'C55', })
    model_key = 'covtype_bayes.hex'
    for p in parameters:
        bmResult = h2o.n0.build_model(algo='naivebayes', model_id=model_key, training_frame=train_key, validation_frame=train_key, parameters=p, timeoutSecs=60)
        bm = OutputObj(bmResult, 'bm')
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'model')
        cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        cmm = OutputObj(cmmResult, 'cmm')
        mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
        mmResultShort = mmResult['model_metrics'][0]
        del mmResultShort['frame']
        mm = OutputObj(mmResultShort, 'mm')
        prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
        pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
