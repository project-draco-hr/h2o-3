{
  Chunk ys=_bldr.chk_resp(chks);
  final int nclass=_bldr._nclass;
  String[] domain=_bldr.vresponse().domain();
  final int oobColIdx=_bldr.idx_oobt();
switch (_mcat) {
case Binomial:
    _mb=new ModelMetricsBinomial.MetricBuilderBinomial(domain,ModelUtils.DEFAULT_THRESHOLDS);
  break;
case Multinomial:
_mb=new ModelMetricsMultinomial.MetricBuilderMultinomial(domain,new float[]{0.5f});
break;
case Regression:
_mb=new ModelMetricsRegression.MetricBuilderRegression(domain);
break;
case Clustering:
_mb=new ModelMetricsClustering.MetricBuilderClustering(domain);
break;
case AutoEncoder:
_mb=new ModelMetricsAutoEncoder.MetricBuilderAutoEncoder(domain);
break;
default :
throw H2O.unimpl();
}
final float[] cdists=_mb._work;
final double[] tmp=_bldr._parms._valid != null ? new double[_bldr._ncols] : null;
for (int row=0; row < ys._len; row++) {
if (ys.isNA(row)) continue;
if (_oob && chks[oobColIdx].at8(row) != 0) continue;
if (_bldr._parms._valid != null) _bldr._model.score0(chks,row,tmp,cdists);
 else _bldr.score2(chks,cdists,row);
if (nclass > 1) cdists[0]=ModelUtils.getPrediction(cdists,row);
_mb.perRow(cdists,(float)ys.atd(row));
}
}
