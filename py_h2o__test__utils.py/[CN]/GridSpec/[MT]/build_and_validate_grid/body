def build_and_validate_grid(self, a_node):
    before = time.time()
    if isVerbose():
        print ((((((((('About to build: ' + self['dest_key']) + ', a ') + self['algo']) + ' model grid on frame: ') + self['frame_key']) + ' with params: ') + repr(self['params'])) + ' and grid_params: ') + repr(self['grid_params']))
    result = a_node.build_model_grid(algo=self['algo'], grid_id=self['dest_key'], training_frame=self['frame_key'], parameters=self['params'], grid_parameters=self['grid_params'], timeoutSecs=240)
    if isVerboser():
        print ('result: ' + repr(result))
    grid = a_node.grid(key=self['dest_key'])
    if isVerboser():
        print ('grid: ' + repr(grid))
    validate_grid_builder_result(grid, self['params'], self['grid_params'], self['dest_key'])
    for model_key_dict in grid['model_ids']:
        model_key = model_key_dict['name']
        model = validate_model_exists(a_node, model_key)
        validate_actual_parameters(self['params'], model['parameters'], self['frame_key'], None)
        validate_grid_parameters(self['grid_params'], model['parameters'])
        assert ('output' in model), ('FAIL: Failed to find output object in model: ' + self['dest_key'])
        assert ('model_category' in model['output']), ('FAIL: Failed to find model_category in model: ' + self['dest_key'])
        assert (model['output']['model_category'] == self['model_category']), ((((('FAIL: Expected model_category: ' + self['model_category']) + ' but got: ') + model['output']['model_category']) + ' for model: ') + self['dest_key'])
    combos = 1
    for (k, vals) in self['grid_params'].iteritems():
        combos *= len(vals)
    assert (combos == len(grid['model_ids'])), ((('FAIL: Expected ' + str(combos)) + ' models; got: ') + str(len(grid['model_ids'])))
    if isVerbose():
        print (((('Done building: ' + self['dest_key']) + ' (') + str((time.time() - before))) + ')')
    return grid
