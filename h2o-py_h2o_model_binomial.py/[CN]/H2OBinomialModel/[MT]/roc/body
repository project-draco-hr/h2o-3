def roc(self, train=False, valid=False, xval=False):
    'Return the coordinates of the ROC curve for a given set of data, as a two-tuple\n    containing the false positive rates as a list and true positive rates as a list.\n    If all are False (default), then return is the training data. If more than one ROC\n    curve is requested, the data is returned as a dictionary of two-tuples.\n\n    Parameters\n    ----------\n      train : bool, optional\n        If True, return the roc value for the training data.\n\n      valid : bool, optional\n        If True, return the roc value for the validation data.\n\n      xval : bool, optional\n        If True, return the roc value for each of the cross-validated splits.\n\n    Returns\n    -------\n      The roc values for the specified key(s).\n    '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in zip(list(tm.keys()), list(tm.values())):
        if (v is not None):
            m[k] = (v.fprs, v.tprs)
    return (list(m.values())[0] if (len(m) == 1) else m)
