def gains_lift(self, train=False, valid=False, xval=False):
    '\n    Get the Gains/Lift table for the specified metrics\n    If all are False (default), then return the training metric Gains/Lift table.\n    If more than one options is set to True, then return a dictionary of metrics where t\n    he keys are "train", "valid", and "xval"\n\n    Parameters\n    ----------\n      train : bool, optional\n        If True, return the gains_lift value for the training data.\n\n      valid : bool, optional\n        If True, return the gains_lift value for the validation data.\n\n      xval : bool, optional\n        If True, return the gains_lift value for each of the cross-validated splits.\n\n    Returns\n    -------\n      The gains_lift values for the specified key(s).\n    '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in zip(list(tm.keys()), list(tm.values())):
        m[k] = (None if (v is None) else v.gains_lift())
    return (list(m.values())[0] if (len(m) == 1) else m)
