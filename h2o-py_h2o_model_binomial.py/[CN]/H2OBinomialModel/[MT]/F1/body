def F1(self, thresholds=None, train=False, valid=False, xval=False):
    'Get the F1 value for a set of thresholds\n\n    If all are False (default), then return the training metric value.\n    If more than one options is set to True, then return a dictionary of metrics where\n    the keys are "train", "valid", and "xval".\n\n    Parameters\n    ----------\n      thresholds : list, optional\n        If None, then the thresholds in this set of metrics will be used.\n      train : bool, optional\n        If True, return the F1 value for the training data.\n      valid : bool, optional\n        If True, return the F1 value for the validation data.\n      xval : bool, optional\n        If True, return the F1 value for each of the cross-validated splits.\n\n    Returns\n    -------\n      The F1 values for the specified key(s).\n\n    Examples\n    --------\n    >>> import h2o as ml\n    >>> from h2o.estimators.gbm import H2OGradientBoostingEstimator\n    >>> ml.init()\n    >>> rows=[[1,2,3,4,0],[2,1,2,4,1],[2,1,4,2,1],[0,1,2,34,1],[2,3,4,1,0]]*50\n    >>> fr = ml.H2OFrame(rows)\n    >>> fr[4] = fr[4].asfactor()\n    >>> model = H2OGradientBoostingEstimator(ntrees=10, max_depth=10, nfolds=4)\n    >>> model.train(x=range(4), y=4, training_frame=fr)\n    >>> model.F1(train=True)\n    '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in tm.iteritems():
        m[k] = (None if (v is None) else v.metric('f1', thresholds=thresholds))
    return (m.values()[0] if (len(m) == 1) else m)
