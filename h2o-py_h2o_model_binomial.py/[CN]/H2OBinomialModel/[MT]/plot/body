def plot(self, timestep='AUTO', metric='AUTO', **kwargs):
    '\n    Plots training set (and validation set if available) scoring history for an H2OBinomialModel. The timestep and metric\n    arguments are restricted to what is available in its scoring history.\n\n    :param timestep: A unit of measurement for the x-axis.\n    :param metric: A unit of measurement for the y-axis.\n    :return: A scoring history plot.\n    '
    if (self._model_json['algo'] in ('deeplearning', 'drf', 'gbm')):
        if (metric == 'AUTO'):
            metric = 'logloss'
        elif (metric not in ('logloss', 'AUC', 'classification_error', 'MSE')):
            raise ValueError('metric for H2OBinomialModel must be one of: AUTO, logloss, AUC, classification_error, MSE')
    self._plot(timestep=timestep, metric=metric, **kwargs)
