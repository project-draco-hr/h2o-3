def test_exec2_runif(self):
    print "h2o syntax is not full R. Doesn't take min/max interval params. assumed 0/1 interval"
    print ' just one param, it must be a column or row vector. Result is same length'
    print ' R allows a scalar to be param'
    bucket = 'home-0xdiag-datasets'
    csvPathname = 'standard/covtype.data'
    hexKey = 'r.hex'
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, schema='put', hex_key=hexKey)
    execExprList = [str(Assign('r0.hex', Frame('r.hex', col=0))), str(Assign('s0.hex', Fcn('runif', Frame('r.hex', col=0), (-1)))), 's1.hex = runif(r.hex[,1],-1)', str(Assign('s1.hex', Fcn('runif', Frame('r.hex', col=0), (-1)))), 's2.hex = runif(r.hex[,1],-1)', str(Assign('s2.hex', Fcn('runif', Frame('r.hex', col=0), (-1))))]
    results = []
    for execExpr in execExprList:
        start = time.time()
        (execResult, result) = h2e.exec_expr(execExpr=execExpr, timeoutSecs=30)
        results.append(result)
        print 'exec end on ', 'operators', 'took', (time.time() - start), 'seconds'
        print 'exec result:', result
        print 'exec result (full):', h2o.dump_json(execResult)
        h2o.check_sandbox_for_errors()
    rSummary = h2o_cmd.runSummary(key='r0.hex', cols='0')
    rSummary = h2o_cmd.runSummary(key='s0.hex', cols='0')
    sSummary = h2o_cmd.runSummary(key='s1.hex', cols='0')
    sSummary = h2o_cmd.runSummary(key='s2.hex', cols='0')
    if (1 == 0):
        print 'Comparing summary of r.hex to summary of s.hex'
        df = h2o_util.JsonDiff(rSummary, sSummary, with_values=True)
        print 'df.difference:', h2o.dump_json(df.difference)
        self.assertLess(len(df.difference), 2)
        print 'results from the individual exec expresssions (ignore last which was an apply)'
        print 'results:', results
        self.assertEqual(results, [0.0, 0.0, 0.0, 1859.0, 581012.0, 581012.0, 2959.365300544567, 1859.0, 1859.0])
