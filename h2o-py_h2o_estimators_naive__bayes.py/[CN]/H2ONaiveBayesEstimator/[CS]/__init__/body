def __init__(self, laplace=None, threshold=None, eps=None, compute_metrics=None, balance_classes=None, max_after_balance_size=None, nfolds=None, fold_assignment=None, keep_cross_validation_predictions=None, checkpoint=None):
    '\n    The naive Bayes classifier assumes independence between predictor variables\n    conditional on the response, and a Gaussian distribution of numeric predictors with\n    mean and standard deviation computed from the training dataset. When building a naive\n    Bayes classifier, every row in the training dataset that contains at least one NA will\n    be skipped completely. If the test dataset has missing values, then those predictors\n    are omitted in the probability calculation during prediction.\n\n    Parameters\n    ----------\n    laplace : int\n      A positive number controlling Laplace smoothing. The default zero disables smoothing.\n    threshold : float\n      The minimum standard deviation to use for observations without enough data.\n      Must be at least 1e-10.\n    eps : float\n      A threshold cutoff to deal with numeric instability, must be positive.\n    compute_metrics : bool\n      A logical value indicating whether model metrics should be computed. Set to FALSE\n      to reduce the runtime of the algorithm.\n    nfolds : int, optional\n      Number of folds for cross-validation. If nfolds >= 2, then validation must remain\n      empty.\n    fold_assignment : str\n      Cross-validation fold assignment scheme, if fold_column is not specified\n      Must be "AUTO", "Random" or "Modulo"\n    keep_cross_validation_predictions :  bool\n      Whether to keep the predictions of the cross-validation models.\n\n    Returns\n    -------\n      Returns instance of H2ONaiveBayesEstimator\n    '
    super(H2ONaiveBayesEstimator, self).__init__()
    self._parms = locals()
    self._parms = {k: v for (k, v) in self._parms.iteritems() if (k != 'self')}
