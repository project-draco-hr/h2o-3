def init_err_casesKmeans(ip, port):
    benign_h2o = h2o.import_frame(path=h2o.locate('smalldata/logreg/benign.csv'))
    numcol = benign_h2o.ncol()
    numrow = benign_h2o.nrow()
    try:
        h2o.kmeans(x=benign_h2o, k=5, init='Test123')
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    try:
        h2o.kmeans(x=benign_h2o, k=0, user_points=[])
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    try:
        h2o.kmeans(x=benign_h2o, k=0, user_points=())
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    try:
        h2o.kmeans(x=benign_h2o, k=0, user_points={})
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    start_small = [[random.gauss(0, 1) for c in range((numcol - 2))] for r in range(5)]
    start_large = [[random.gauss(0, 1) for c in range((numcol + 2))] for r in range(5)]
    try:
        h2o.kmeans(x=benign_h2o, k=5, user_points=h2o.H2OFrame(start_small))
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    try:
        h2o.kmeans(x=benign_h2o, k=5, user_points=h2o.H2OFrame(start_large))
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    start = [[random.gauss(0, 1) for c in range(numcol)] for r in range((numrow + 2))]
    try:
        h2o.kmeans(x=benign_h2o, k=(numrow + 2), user_points=h2o.H2OFrame(start))
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    start = [[random.gauss(0, 1) for c in range(numcol)] for r in range(3)]
    for x in ['NA', 'NaN', 'Inf', '-Inf']:
        start_err = start[:]
        start_err[1][random.randint(0, (numcol - 1))] = x
        h2o.kmeans(x=benign_h2o, k=3, user_points=h2o.H2OFrame(start_err))
    start = [[random.gauss(0, 1) for c in range(numcol)] for r in range(3)]
    start[2] = start[0]
    h2o.kmeans(x=benign_h2o, k=3, user_points=h2o.H2OFrame(start))
