def init_err_casesKmeans():
    benign_h2o = h2o.import_file(path=pyunit_utils.locate('smalldata/logreg/benign.csv'))
    numcol = benign_h2o.ncol
    numrow = benign_h2o.nrow
    try:
        H2OKMeansEstimator(k=5, init='Test123').train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except H2OTypeError:
        pass
    try:
        H2OKMeansEstimator(k=0, user_points=[]).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except H2OTypeError:
        pass
    try:
        H2OKMeansEstimator(k=0, user_points=()).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except H2OTypeError:
        pass
    try:
        H2OKMeansEstimator(k=0, user_points={}).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except H2OTypeError:
        pass
    start_small = [[random.gauss(0, 1) for c in range((numcol - 2))] for r in range(5)]
    start_large = [[random.gauss(0, 1) for c in range((numcol + 2))] for r in range(5)]
    try:
        H2OKMeansEstimator(k=5, user_points=h2o.H2OFrame(start_small)).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except EnvironmentError:
        pass
    try:
        H2OKMeansEstimator(k=5, user_points=h2o.H2OFrame(start_large)).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except EnvironmentError:
        pass
    start = [[random.gauss(0, 1) for c in range(numcol)] for r in range((numrow + 2))]
    try:
        H2OKMeansEstimator(k=(numrow + 2), user_points=h2o.H2OFrame(start)).train(x=list(range(numcol)), training_frame=benign_h2o)
        assert False
    except EnvironmentError:
        pass
    start = [[random.gauss(0, 1) for r in range(3)] for c in range(numcol)]
    for x in ['NA', 'NaN', 'Inf', '-Inf']:
        start_err = start[:]
        start_err[random.randint(0, (numcol - 1))][1] = x
        H2OKMeansEstimator(k=3, user_points=h2o.H2OFrame(list(zip(*start_err)))).train(x=list(range(numcol)), training_frame=benign_h2o)
    start = [[random.gauss(0, 1) for r in range(3)] for c in range(numcol)]
    for s in start:
        s[2] = s[0]
    H2OKMeansEstimator(k=3, user_points=h2o.H2OFrame(list(zip(*start)))).train(x=list(range(numcol)), training_frame=benign_h2o)
