{
  Model.Output modelOutput=null;
  ModelMetrics trainingMetrics;
  ModelMetrics testMetrics;
  DRF drfJob=null;
  DRFModel drfModel=null;
  Key modelKey=Key.make("model");
  GLM glmJob=null;
  GLMModel glmModel=null;
  HashMap<String,Double> coef=null;
  GBM gbmJob=null;
  GBMModel gbmModel=null;
  DeepLearning dlJob=null;
  DeepLearningModel dlModel=null;
  try {
    Scope.enter();
    double modelStartTime=0;
    double modelStopTime=0;
switch (algo) {
case "drf":
      drfJob=new DRF((DRFModel.DRFParameters)params);
    Log.info("Train DRF model:");
  modelStartTime=System.currentTimeMillis();
drfModel=drfJob.trainModel().get();
modelStopTime=System.currentTimeMillis();
modelOutput=drfModel._output;
break;
case "glm":
glmJob=new GLM(modelKey,"GLM Model",(GLMModel.GLMParameters)params);
Log.info("Train GLM model");
modelStartTime=System.currentTimeMillis();
glmModel=glmJob.trainModel().get();
modelStopTime=System.currentTimeMillis();
modelOutput=glmModel._output;
break;
case "gbm":
gbmJob=new GBM((GBMModel.GBMParameters)params);
Log.info("Train GBM model");
modelStartTime=System.currentTimeMillis();
gbmModel=gbmJob.trainModel().get();
modelStopTime=System.currentTimeMillis();
modelOutput=gbmModel._output;
break;
case FunctionUtils.dl:
dlJob=new DeepLearning((DeepLearningParameters)params);
Log.info("Train model");
modelStartTime=System.currentTimeMillis();
dlModel=dlJob.trainModel().get();
modelStopTime=System.currentTimeMillis();
modelOutput=dlModel._output;
break;
}
Log.info("Testcase passed!!!");
trainingMetrics=modelOutput._training_metrics;
testMetrics=modelOutput._validation_metrics;
HashMap<String,Double> train=new HashMap<String,Double>();
HashMap<String,Double> test=new HashMap<String,Double>();
train.put("ModelBuildTime",modelStopTime - modelStartTime);
train.put("MSE",trainingMetrics.mse());
test.put("MSE",testMetrics.mse());
train.put("R2",((ModelMetricsSupervised)trainingMetrics).r2());
test.put("R2",((ModelMetricsSupervised)testMetrics).r2());
if (trainingMetrics instanceof ModelMetricsRegression) {
train.put("MeanResidualDeviance",((ModelMetricsRegression)trainingMetrics)._mean_residual_deviance);
test.put("MeanResidualDeviance",((ModelMetricsRegression)testMetrics)._mean_residual_deviance);
}
if (trainingMetrics instanceof ModelMetricsBinomial) {
train.put("AUC",((ModelMetricsBinomial)trainingMetrics).auc());
test.put("AUC",((ModelMetricsBinomial)testMetrics).auc());
train.put("Gini",((ModelMetricsBinomial)trainingMetrics)._auc._gini);
test.put("Gini",((ModelMetricsBinomial)testMetrics)._auc._gini);
train.put("Logloss",((ModelMetricsBinomial)trainingMetrics).logloss());
test.put("Logloss",((ModelMetricsBinomial)testMetrics).logloss());
train.put("F1",((ModelMetricsBinomial)trainingMetrics).cm().F1());
test.put("F1",((ModelMetricsBinomial)testMetrics).cm().F1());
train.put("F2",((ModelMetricsBinomial)trainingMetrics).cm().F2());
test.put("F2",((ModelMetricsBinomial)testMetrics).cm().F2());
train.put("F0point5",((ModelMetricsBinomial)trainingMetrics).cm().F0point5());
test.put("F0point5",((ModelMetricsBinomial)testMetrics).cm().F0point5());
train.put("Accuracy",((ModelMetricsBinomial)trainingMetrics).cm().accuracy());
test.put("Accuracy",((ModelMetricsBinomial)testMetrics).cm().accuracy());
train.put("Error",((ModelMetricsBinomial)trainingMetrics).cm().err());
test.put("Error",((ModelMetricsBinomial)testMetrics).cm().err());
train.put("Precision",((ModelMetricsBinomial)trainingMetrics).cm().precision());
test.put("Precision",((ModelMetricsBinomial)testMetrics).cm().precision());
train.put("Recall",((ModelMetricsBinomial)trainingMetrics).cm().recall());
test.put("Recall",((ModelMetricsBinomial)testMetrics).cm().recall());
train.put("MCC",((ModelMetricsBinomial)trainingMetrics).cm().mcc());
test.put("MCC",((ModelMetricsBinomial)testMetrics).cm().mcc());
train.put("MaxPerClassError",((ModelMetricsBinomial)trainingMetrics).cm().max_per_class_error());
test.put("MaxPerClassError",((ModelMetricsBinomial)testMetrics).cm().max_per_class_error());
}
if (trainingMetrics instanceof ModelMetricsRegressionGLM) {
train.put("ResidualDeviance",((ModelMetricsRegressionGLM)trainingMetrics)._resDev);
test.put("ResidualDeviance",((ModelMetricsRegressionGLM)testMetrics)._resDev);
train.put("ResidualDegreesOfFreedom",(double)((ModelMetricsRegressionGLM)trainingMetrics)._residualDegressOfFreedom);
test.put("ResidualDegreesOfFreedom",(double)((ModelMetricsRegressionGLM)testMetrics)._residualDegressOfFreedom);
train.put("NullDeviance",((ModelMetricsRegressionGLM)trainingMetrics)._nullDev);
test.put("NullDeviance",((ModelMetricsRegressionGLM)testMetrics)._nullDev);
train.put("NullDegreesOfFreedom",(double)((ModelMetricsRegressionGLM)trainingMetrics)._nullDegressOfFreedom);
test.put("NullDegreesOfFreedom",(double)((ModelMetricsRegressionGLM)testMetrics)._nullDegressOfFreedom);
train.put("AIC",((ModelMetricsRegressionGLM)trainingMetrics)._AIC);
test.put("AIC",((ModelMetricsRegressionGLM)testMetrics)._AIC);
}
if (trainingMetrics instanceof ModelMetricsBinomialGLM) {
train.put("ResidualDeviance",((ModelMetricsBinomialGLM)trainingMetrics)._resDev);
test.put("ResidualDeviance",((ModelMetricsBinomialGLM)testMetrics)._resDev);
train.put("ResidualDegreesOfFreedom",(double)((ModelMetricsBinomialGLM)trainingMetrics)._residualDegressOfFreedom);
test.put("ResidualDegreesOfFreedom",(double)((ModelMetricsBinomialGLM)testMetrics)._residualDegressOfFreedom);
train.put("NullDeviance",((ModelMetricsBinomialGLM)trainingMetrics)._nullDev);
test.put("NullDeviance",((ModelMetricsBinomialGLM)testMetrics)._nullDev);
train.put("NullDegreesOfFreedom",(double)((ModelMetricsBinomialGLM)trainingMetrics)._nullDegressOfFreedom);
test.put("NullDegreesOfFreedom",(double)((ModelMetricsBinomialGLM)testMetrics)._nullDegressOfFreedom);
train.put("AIC",((ModelMetricsBinomialGLM)trainingMetrics)._AIC);
test.put("AIC",((ModelMetricsBinomialGLM)testMetrics)._AIC);
}
MySQL.save(train,test);
}
 catch (Exception e) {
System.exit(-1);
e.printStackTrace();
}
 finally {
if (drfJob != null) {
drfJob.remove();
}
if (drfModel != null) {
drfModel.delete();
}
if (glmJob != null) {
glmJob.remove();
}
if (glmModel != null) {
glmModel.delete();
}
if (gbmJob != null) {
gbmJob.remove();
}
if (gbmModel != null) {
gbmModel.delete();
}
if (dlJob != null) {
dlJob.remove();
}
if (dlModel != null) {
dlModel.delete();
}
Scope.exit();
}
}
