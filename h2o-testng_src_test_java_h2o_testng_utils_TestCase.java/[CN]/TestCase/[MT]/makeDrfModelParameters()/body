{
  DRFModel.DRFParameters drfParams=new DRFModel.DRFParameters();
  String[] drfParamStrings=new String[]{"_distribution","_nfolds","_fold_column","_ignore_const_cols","_offset_column","_weights_column","_ntrees","_max_depth","_min_rows","_nbins","_nbins_cats","_score_each_iteration","_balance_classes","_max_confusion_matrix_size","_max_hit_ratio_k","_r2_stopping","_build_tree_one_node","_class_sampling_factors","_binomial_double_trees","_checkpoint","_nbins_top_level","_train","_valid","_response_column"};
  String[] tokens=algoParameters.trim().split(";",-1);
  for (  String p : drfParamStrings) {
switch (p) {
case "_distribution":
      if (tokens[0].equals("x")) {
        drfParams._distribution=Distribution.Family.AUTO;
      }
 else       if (tokens[1].equals("x")) {
        drfParams._distribution=Distribution.Family.gaussian;
      }
 else       if (tokens[2].equals("x")) {
        drfParams._distribution=Distribution.Family.bernoulli;
      }
 else       if (tokens[3].equals("x")) {
        drfParams._distribution=Distribution.Family.multinomial;
      }
 else       if (tokens[4].equals("x")) {
        drfParams._distribution=Distribution.Family.poisson;
      }
 else       if (tokens[5].equals("x")) {
        drfParams._distribution=Distribution.Family.gamma;
      }
 else       if (tokens[6].equals("x")) {
        drfParams._distribution=Distribution.Family.tweedie;
      }
    break;
case "_nfolds":
  if (!tokens[7].isEmpty()) {
    drfParams._nfolds=Integer.parseInt(tokens[7]);
  }
break;
case "_fold_column":
if (!tokens[8].isEmpty()) {
drfParams._fold_column=tokens[8];
}
break;
case "_ignore_const_cols":
if (!tokens[9].isEmpty()) {
drfParams._ignore_const_cols=true;
}
break;
case "_offset_column":
if (!tokens[10].isEmpty()) {
drfParams._offset_column=tokens[10];
}
break;
case "_weights_column":
if (!tokens[11].isEmpty()) {
drfParams._weights_column=tokens[11];
}
break;
case "_ntrees":
if (!tokens[12].isEmpty()) {
drfParams._ntrees=Integer.parseInt(tokens[12]);
}
break;
case "_max_depth":
if (!tokens[13].isEmpty()) {
drfParams._max_depth=Integer.parseInt(tokens[13]);
}
break;
case "_min_rows":
if (!tokens[14].isEmpty()) {
drfParams._min_rows=Double.parseDouble(tokens[14]);
}
break;
case "_nbins":
if (!tokens[15].isEmpty()) {
drfParams._nbins=Integer.parseInt(tokens[15]);
}
break;
case "_nbins_cats":
if (!tokens[16].isEmpty()) {
drfParams._nbins_cats=Integer.parseInt(tokens[16]);
}
break;
case "_score_each_iteration":
if (!tokens[17].isEmpty()) {
drfParams._score_each_iteration=true;
}
break;
case "_balance_classes":
if (!tokens[18].isEmpty()) {
drfParams._balance_classes=true;
}
break;
case "_max_confusion_matrix_size":
if (!tokens[19].isEmpty()) {
drfParams._max_confusion_matrix_size=Integer.parseInt(tokens[19]);
}
break;
case "_max_hit_ratio_k":
if (!tokens[20].isEmpty()) {
drfParams._max_hit_ratio_k=Integer.parseInt(tokens[20]);
}
break;
case "_r2_stopping":
if (!tokens[21].isEmpty()) {
drfParams._r2_stopping=Double.parseDouble(tokens[21]);
}
break;
case "_build_tree_one_node":
if (!tokens[22].isEmpty()) {
drfParams._build_tree_one_node=true;
}
break;
case "_class_sampling_factors":
if (!tokens[23].isEmpty()) {
Log.info("_class_sampling_factors not supported for drf test cases");
System.exit(-1);
}
break;
case "_binomial_double_trees":
if (!tokens[24].isEmpty()) {
drfParams._binomial_double_trees=true;
}
break;
case "_checkpoint":
if (!tokens[25].isEmpty()) {
Log.info("_checkpoint not supported for drf test cases");
System.exit(-1);
}
break;
case "_nbins_top_level":
if (!tokens[26].isEmpty()) {
drfParams._nbins_top_level=Integer.parseInt(tokens[26]);
}
break;
case "_train":
drfParams._train=trainingDataSet.getFrame()._key;
break;
case "_valid":
drfParams._valid=testingDataSet.getFrame()._key;
break;
case "_response_column":
drfParams._response_column=trainingDataSet.getFrame()._names[trainingDataSet.getResponseColumn()];
}
}
return drfParams;
}
