{
  Frame frame=parse_test_file("smalldata/covtype/covtype.20k.data");
  AggregatorModel.AggregatorParameters parms=new AggregatorModel.AggregatorParameters();
  parms._train=frame._key;
  parms._radius_scale=3.0;
  AggregatorModel agg=new Aggregator(parms).trainModel().get();
  Frame output=agg._output._output_frame.get();
  Log.info("Number of exemplars: " + agg._exemplars.length);
  Assert.assertTrue(agg._exemplars.length == 1993);
  output.remove();
  agg.remove();
  for (  int i : new int[]{1,2,5,10,50,100}) {
    Key key=Key.make();
    RebalanceDataSet rb=new RebalanceDataSet(frame,key,i);
    H2O.submitTask(rb);
    rb.join();
    Frame rebalanced=DKV.get(key).get();
    parms=new AggregatorModel.AggregatorParameters();
    parms._train=frame._key;
    parms._radius_scale=3.0;
    AggregatorModel agg2=new Aggregator(parms).trainModel().get();
    Log.info("Number of exemplars for " + i + " chunks: "+ agg2._exemplars.length);
    rebalanced.delete();
    Assert.assertTrue(Math.abs(agg._exemplars.length - agg2._exemplars.length) == 0);
    output=agg2._output._output_frame.get();
    output.remove();
    agg2.remove();
  }
  frame.delete();
}
