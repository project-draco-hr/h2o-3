{
  int[] idxs=new int[50000];
  int[] idxs2=new int[50000];
  final double[] values=new double[idxs.length];
  Random rng=new Random();
  for (int i=0; i < idxs.length; ++i) {
    idxs[i]=i;
    idxs2[i]=i;
    values[i]=rng.nextDouble();
  }
  long before=System.currentTimeMillis();
  ArrayUtils.sort(idxs,new ArrayUtils.IntComparator(){
    @Override public int compare(    int x,    int y){
      return values[x] < values[y] ? -1 : (values[x] > values[y] ? 1 : 0);
    }
  }
,false);
  System.out.println("Merge sort: " + (System.currentTimeMillis() - before) / 1000.);
  before=System.currentTimeMillis();
  ArrayUtils.sort(idxs2,new ArrayUtils.IntComparator(){
    @Override public int compare(    int x,    int y){
      return values[x] < values[y] ? -1 : (values[x] > values[y] ? 1 : 0);
    }
  }
,true);
  System.out.println("Insertion sort: " + (System.currentTimeMillis() - before) / 1000.);
  Assert.assertTrue(Arrays.equals(idxs,idxs2));
}
