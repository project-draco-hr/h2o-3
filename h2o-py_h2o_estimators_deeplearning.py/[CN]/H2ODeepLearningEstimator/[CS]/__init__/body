def __init__(self, **kwargs):
    super(H2ODeepLearningEstimator, self).__init__()
    self._parms = {}
    names_list = {u'model_id', u'training_frame', u'validation_frame', u'nfolds', u'keep_cross_validation_predictions', u'keep_cross_validation_fold_assignment', u'fold_assignment', u'fold_column', u'response_column', u'ignored_columns', u'ignore_const_cols', u'score_each_iteration', u'weights_column', u'offset_column', u'balance_classes', u'class_sampling_factors', u'max_after_balance_size', u'max_confusion_matrix_size', u'max_hit_ratio_k', u'checkpoint', u'pretrained_autoencoder', u'overwrite_with_best_model', u'use_all_factor_levels', u'standardize', u'activation', u'hidden', u'epochs', u'train_samples_per_iteration', u'target_ratio_comm_to_comp', u'seed', u'adaptive_rate', u'rho', u'epsilon', u'rate', u'rate_annealing', u'rate_decay', u'momentum_start', u'momentum_ramp', u'momentum_stable', u'nesterov_accelerated_gradient', u'input_dropout_ratio', u'hidden_dropout_ratios', u'l1', u'l2', u'max_w2', u'initial_weight_distribution', u'initial_weight_scale', u'initial_weights', u'initial_biases', u'loss', u'distribution', u'quantile_alpha', u'tweedie_power', u'huber_alpha', u'score_interval', u'score_training_samples', u'score_validation_samples', u'score_duty_cycle', u'classification_stop', u'regression_stop', u'stopping_rounds', u'stopping_metric', u'stopping_tolerance', u'max_runtime_secs', u'score_validation_sampling', u'diagnostics', u'fast_mode', u'force_load_balance', u'variable_importances', u'replicate_training_data', u'single_node_mode', u'shuffle_training_data', u'missing_values_handling', u'quiet_mode', u'autoencoder', u'sparse', u'col_major', u'average_activation', u'sparsity_beta', u'max_categorical_features', u'reproducible', u'export_weights_and_biases', u'mini_batch_size', u'categorical_encoding', u'elastic_averaging', u'elastic_averaging_moving_rate', u'elastic_averaging_regularization'}
    if (u'Lambda' in kwargs):
        kwargs[u'lambda_'] = kwargs.pop(u'Lambda')
    for (pname, pvalue) in kwargs.items():
        if (pname == u'model_id'):
            self._id = pvalue
            self._parms[u'model_id'] = pvalue
        elif (pname in names_list):
            setattr(self, pname, pvalue)
        else:
            raise H2OValueError((u'Unknown parameter %s = %r' % (pname, pvalue)))
    if isinstance(self, H2OAutoEncoderEstimator):
        self._parms[u'autoencoder'] = True
