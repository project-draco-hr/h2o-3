{
  if (H2O.GA != null) {
    if (H2O.SELF == H2O.CLOUD._memary[0]) {
      int cloudSize=H2O.CLOUD.size();
      H2O.GA.postAsync(new EventHit("System startup info","Cloud","Cloud size",cloudSize));
      if (cloudSize > 1)       H2O.GA.postAsync(new EventHit("System startup info","Cloud","Multi-node cloud size",cloudSize));
      postRange("System startup info","Cloud","Cloud size",new int[]{2,3,4,5,10,20,30,40,50,60},cloudSize);
      if (H2O.ARGS.ga_hadoop_ver != null) {
        H2O.GA.postAsync(new EventHit("System startup info","Hadoop version",H2O.ARGS.ga_hadoop_ver));
      }
 else       if (H2O.CLOUD.size() > 1) {
        H2O.GA.postAsync(new EventHit("System startup info","Hadoop version","Non-hadoop cloud"));
      }
      int totMem=0;
      H2ONode[] members=H2O.CLOUD.members();
      if (null != members) {
        for (int i=0; i < members.length; i++) {
          totMem+=(members[i].get_max_mem() >> 20);
        }
      }
      totMem=totMem >> 10;
      H2O.GA.postAsync(new EventHit("System startup info","Memory","Total Cloud Memory (GB)",totMem));
      postRange("System startup info","Memory","Total Cloud Memory (GB)",new int[]{8,16,32,64,128,256,512,1024,2048,4096},totMem);
    }
  }
}
