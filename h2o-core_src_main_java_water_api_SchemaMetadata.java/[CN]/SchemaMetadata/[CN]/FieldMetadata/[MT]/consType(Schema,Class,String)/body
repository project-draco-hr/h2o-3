{
  boolean is_enum=Enum.class.isAssignableFrom(clz);
  boolean is_array=clz.isArray();
  if (is_enum)   return "enum";
  if (String.class.isAssignableFrom(clz))   return "string";
  if (clz.equals(Boolean.TYPE) || clz.equals(Byte.TYPE) || clz.equals(Short.TYPE)|| clz.equals(Integer.TYPE)|| clz.equals(Long.TYPE)|| clz.equals(Float.TYPE)|| clz.equals(Double.TYPE))   return clz.toString();
  if (is_array)   return consType(schema,clz.getComponentType(),field_name) + "[]";
  if (Map.class.isAssignableFrom(clz)) {
    if (IcedHashMapBase.class.isAssignableFrom(clz)) {
      String type0=ReflectionUtils.findActualClassParameter(clz,0).getSimpleName();
      String type1=ReflectionUtils.findActualClassParameter(clz,1).getSimpleName();
      if ("String".equals(type0))       type0="string";
      if ("String".equals(type1))       type1="string";
      return "Map<" + type0 + ","+ type1+ ">";
    }
 else {
      Log.warn("Schema Map field isn't a subclass of IcedHashMap, so its metadata won't have type parameters: " + schema.getClass().getSimpleName() + "."+ field_name);
      return "Map";
    }
  }
  if (List.class.isAssignableFrom(clz))   return "List";
  if (water.Key.class.isAssignableFrom(clz)) {
    Log.warn("Raw Key (not KeySchema) in Schema: " + schema.getClass() + " field: "+ field_name);
    return "Key";
  }
  if (KeyV3.class.isAssignableFrom(clz)) {
    return "Key<" + KeyV3.getKeyedClassType((Class<? extends KeyV3>)clz) + ">";
  }
  if (Schema.class.isAssignableFrom(clz)) {
    return Schema.getImplClass((Class<Schema>)clz).getSimpleName();
  }
  if (Iced.class.isAssignableFrom(clz)) {
    if (clz == Schema.Meta.class) {
      return "Schema.Meta";
    }
 else {
      if (schema instanceof ModelParameterSchemaV3 && ("default_value".equals(field_name) || "actual_value".equals(field_name)))       return "Polymorphic";
      if ((schema instanceof FieldMetadataV3 || schema instanceof FieldMetadataBase) && "value".equals(field_name))       return "Polymorphic";
      if (((schema instanceof TwoDimTableBase || schema instanceof TwoDimTableV3) && "data".equals(field_name)))       return "Polymorphic";
      Log.warn("WARNING: found non-Schema Iced field: " + clz.toString() + " in Schema: "+ schema.getClass()+ " field: "+ field_name);
      return clz.getSimpleName();
    }
  }
  String msg="Don't know how to generate a client-friendly type name for class: " + clz.toString() + " in Schema: "+ schema.getClass()+ " field: "+ field_name;
  Log.warn(msg);
  throw H2O.fail(msg);
}
