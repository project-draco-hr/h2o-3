{
  super();
  try {
    f.setAccessible(true);
    API annotation=f.getAnnotation(API.class);
    this.name=f.getName();
    Object o=f.get(schema);
    this.value=consValue(o);
    boolean is_enum=isEnum(f.getType(),annotation) || (f.getType().isArray() && isEnum(f.getType().getComponentType(),annotation));
    boolean is_fake_enum=isFakeEnum(f.getType(),annotation) || (f.getType().isArray() && isFakeEnum(f.getType().getComponentType(),annotation));
    this.is_schema=Schema.class.isAssignableFrom(f.getType()) || (f.getType().isArray() && Schema.class.isAssignableFrom(f.getType().getComponentType()));
    this.type=consType(schema,ReflectionUtils.findActualFieldClass(schema.getClass(),f),f.getName(),annotation);
    if (this.is_schema) {
      Class<? extends Schema> schema_class=f.getType().isArray() ? (Class<? extends Schema>)f.getType().getComponentType() : ReflectionUtils.findActualFieldClass(schema.getClass(),f);
      Class<? extends Schema> versioned_schema_class=SchemaServer.schemaClass(-1,Schema.getImplClass(schema_class));
      if (null != versioned_schema_class) {
        this.schema_name=versioned_schema_class.getSimpleName();
      }
 else {
        this.schema_name=schema_class.getSimpleName();
      }
    }
 else     if ((is_enum || is_fake_enum) && !f.getType().isArray()) {
      this.schema_name=getEnumSchemaName(is_enum ? f.getType() : annotation.valuesProvider());
    }
 else     if ((is_enum || is_fake_enum) && f.getType().isArray()) {
      this.schema_name=getEnumSchemaName(is_enum ? f.getType().getComponentType() : annotation.valuesProvider());
    }
    this.is_inherited=(superclassFields.contains(f));
    if (this.is_inherited)     this.inherited_from=f.getDeclaringClass().getSimpleName();
    if (null != annotation) {
      this.help=annotation.help();
      this.required=annotation.required();
      this.level=annotation.level();
      this.direction=annotation.direction();
      this.is_gridable=annotation.gridable();
      this.values=annotation.valuesProvider() == ValuesProvider.NULL ? annotation.values() : getValues(annotation.valuesProvider());
      this.json=annotation.json();
      this.is_member_of_frames=annotation.is_member_of_frames();
      this.is_mutually_exclusive_with=annotation.is_mutually_exclusive_with();
      if (is_enum && (null == this.values || 0 == this.values.length)) {
        throw H2O.fail("Didn't find values annotation for enum field: " + this.name);
      }
    }
  }
 catch (  Exception e) {
    throw H2O.fail("Caught exception accessing field: " + f + " for schema object: "+ schema+ ": "+ e.toString());
  }
}
