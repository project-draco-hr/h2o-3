def test_rapids_overloaded_opr(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 5, 'cA', 200)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        (numRows, numCols, parse_key) = h2o_cmd.infoFromParse(parseResult)
        inspect = h2o_cmd.runInspect(key=hex_key)
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
        self.assertEqual(numRows, rowCount, ('parse created result with the wrong number of rows %s %s' % (numRows, rowCount)))
        REPEAT = 1
        data_key = hex_key
        for i in range(REPEAT):
            result_key = ((data_key + '_') + str(i))
            result = Assign('s1', Seq(range(5))).do
            a = Assign('s2', Fcn('c', Seq(range(5))))
            result = a.do()
            print dump_json(a.execResult)
            print dump_json(a.result)
            result = Assign('s3', Col(Seq(range(5)))).do()
            inspect = h2o_cmd.runInspect(key='s3')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 5)
            assert (numCols == 1)
            result = Assign('s2', Col(Seq(range(5)))).do()
            inspect = h2o_cmd.runInspect(key='s2')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 5)
            assert (numCols == 1)
            f = Fcn('c', Seq(Colon(99, 400), '#2', 1, range(1, 5), range(7, 10), range(50, 52)))
            result = Assign('s1', f).do()
            f = Col(Seq(Colon(99, 400), '#2', 1, range(1, 5), range(7, 10), range(50, 52)))
            result = Assign('s2', f).do()
            inspect = h2o_cmd.runInspect(key='s2')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            assert (numRows == 313)
            assert (numCols == 1)
            print 'Now trying to do the functions with the alternate overloaded operators'
            data_key = Key(parse_key)
            result_key = Key()
            result_key.frame = 'a1'
            result_key <<= data_key[Seq(range(1, 2)), :]
            result_key.frame = 'a2'
            result_key <<= data_key[Seq(range(1, 2)), :]
            result_key.frame = 'a3'
            result_key <<= data_key[Seq(range(1, 2)), :]
            result_key.frame = 'a4'
            result_key <<= data_key[(Seq(range(1, 2)), 0)]
            result_key.frame = 'a5'
            result_key <<= data_key[(Seq(range(1, 2)), 0)]
            result_key.frame = 'a6'
            result_key <<= data_key[[1, 2, 3], 3:4]
            print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
