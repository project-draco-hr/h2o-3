{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  final int col=(int)asts[2].exec(env).getNum();
  if (col >= fr.numCols())   throw new IllegalArgumentException("Column not -1 or in range 0 to " + fr.numCols());
  final boolean doAllVecs=col == -1;
  final Vec vec=doAllVecs ? null : fr.vec(col);
  AstRoot method=null;
  boolean ffill0=false, bfill0=false;
switch (asts[3].exec(env).getStr().toUpperCase()) {
case "MEAN":
    method=new AstMean();
  break;
case "MEDIAN":
method=new AstMedian();
break;
case "MODE":
method=new AstMode();
break;
case "FFILL":
ffill0=true;
break;
case "BFILL":
bfill0=true;
break;
default :
throw new IllegalArgumentException("Method must be one of mean, median or mode");
}
QuantileModel.CombineMethod combine=QuantileModel.CombineMethod.valueOf(asts[4].exec(env).getStr().toUpperCase());
AstRoot ast=asts[5];
AstNumList by2;
if (ast instanceof AstNumList) by2=(AstNumList)ast;
 else if (ast instanceof AstNum) by2=new AstNumList(((AstNum)ast)._v.getNum());
 else if (ast instanceof AstStrList) {
String[] names=((AstStrList)ast)._strs;
double[] list=new double[names.length];
int i=0;
for (String name : ((AstStrList)ast)._strs) list[i++]=fr.find(name);
Arrays.sort(list);
by2=new AstNumList(list);
}
 else throw new IllegalArgumentException("Requires a number-list, but found a " + ast.getClass());
Frame groupByFrame=asts[6].str().equals("_") ? null : stk.track(asts[6].exec(env)).getFrame();
AstRoot vals=asts[7];
AstNumList values;
if (vals instanceof AstNumList) values=(AstNumList)vals;
 else if (vals instanceof AstNum) values=new AstNumList(((AstNum)vals)._v.getNum());
 else values=null;
boolean doGrpBy=!by2.isEmpty() || groupByFrame != null;
IcedHashMap<AstGroup.G,Freezable[]> group_impute_map;
if (!doGrpBy) {
if (ffill0 || bfill0) {
final boolean ffill=ffill0;
final boolean bfill=bfill0;
throw H2O.unimpl("No ffill or bfill imputation supported");
}
 else {
final double[] res=values == null ? new double[fr.numCols()] : values.expand();
if (values == null) {
if (doAllVecs) {
for (int i=0; i < res.length; ++i) if (fr.vec(i).isNumeric() || fr.vec(i).isCategorical()) res[i]=fr.vec(i).isNumeric() ? fr.vec(i).mean() : ArrayUtils.maxIndex(fr.vec(i).bins());
}
 else {
Arrays.fill(res,Double.NaN);
if (method instanceof AstMean) res[col]=vec.mean();
if (method instanceof AstMedian) res[col]=AstMedian.median(new Frame(vec),combine);
if (method instanceof AstMode) res[col]=AstMode.mode(vec);
}
}
new MRTask(){
@Override public void map(Chunk[] cs){
int len=cs[0]._len;
for (int c=0; c < cs.length; ++c) if (!Double.isNaN(res[c])) for (int row=0; row < len; ++row) if (cs[c].isNA(row)) cs[c].set(row,res[c]);
}
}
.doAll(fr);
return new ValNums(res);
}
}
 else {
if (col >= fr.numCols()) throw new IllegalArgumentException("Column not -1 or in range 0 to " + fr.numCols());
Frame imputes=groupByFrame;
if (imputes == null) {
AstRoot ast_grp=new AstGroup();
if (doAllVecs) {
AstRoot[] aggs=new AstRoot[(int)(3 + 3 * (fr.numCols() - by2.cnt()))];
aggs[0]=ast_grp;
aggs[1]=new AstFrame(fr);
aggs[2]=by2;
int c=3;
for (int i=0; i < fr.numCols(); ++i) {
if (!by2.has(i) && (fr.vec(i).isCategorical() || fr.vec(i).isNumeric())) {
aggs[c]=fr.vec(i).isNumeric() ? new AstMean() : new AstMode();
aggs[c + 1]=new AstNumList(i,i + 1);
aggs[c + 2]=new AstStr("rm");
c+=3;
}
}
imputes=ast_grp.apply(env,stk,aggs).getFrame();
}
 else imputes=ast_grp.apply(env,stk,new AstRoot[]{ast_grp,new AstFrame(fr),by2,method,new AstNumList(col,col + 1),new AstStr("rm")}).getFrame();
}
if (by2.isEmpty() && imputes.numCols() > 2) throw new IllegalArgumentException("Ambiguous group-by frame. Supply the `by` columns to proceed.");
final int[] bycols0=ArrayUtils.seq(0,Math.max((int)by2.cnt(),1));
group_impute_map=new Gather(by2.expand4(),bycols0,fr.numCols(),col).doAll(imputes)._group_impute_map;
final IcedHashMap<AstGroup.G,Freezable[]> final_group_impute_map=group_impute_map;
if (by2.isEmpty()) {
int[] byCols=new int[imputes.numCols() - 1];
for (int i=0; i < byCols.length; ++i) byCols[i]=fr.find(imputes.name(i));
by2=new AstNumList(byCols);
}
final int[] bycols=by2.expand4();
new MRTask(){
@Override public void map(Chunk cs[]){
Set<Integer> _bycolz=new HashSet<>();
for (int b : bycols) _bycolz.add(b);
AstGroup.G g=new AstGroup.G(bycols.length,null);
for (int row=0; row < cs[0]._len; row++) for (int c=0; c < cs.length; ++c) if (!_bycolz.contains(c)) if (cs[c].isNA(row)) cs[c].set(row,((IcedDouble)final_group_impute_map.get(g.fill(row,cs,bycols))[c])._val);
}
}
.doAll(fr);
return new ValFrame(imputes);
}
}
