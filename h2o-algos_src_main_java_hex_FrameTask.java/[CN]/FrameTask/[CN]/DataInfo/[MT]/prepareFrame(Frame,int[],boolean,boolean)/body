{
  Frame fr=new Frame(null,source._names.clone(),source.vecs().clone());
  if (ignored_cols != null)   fr.remove(ignored_cols);
  final Vec[] vecs=fr.vecs();
  ArrayList<Integer> constantOrNAs=new ArrayList<Integer>();
{
    ArrayList<Integer> constantCols=new ArrayList<Integer>();
    ArrayList<Integer> NACols=new ArrayList<Integer>();
    for (int i=0; i < vecs.length; ++i) {
      final boolean dropconstant=dropConstantCols && vecs[i].min() == vecs[i].max();
      final boolean droptoomanyNAs=dropNACols && vecs[i].naCnt() > vecs[i].length() * 0.2;
      if (dropconstant) {
        constantCols.add(i);
      }
 else       if (droptoomanyNAs) {
        NACols.add(i);
      }
    }
    constantOrNAs.addAll(constantCols);
    constantOrNAs.addAll(NACols);
    String msg="";
    if (constantCols.size() > 0)     msg+="Dropping constant column(s): ";
    for (    int i : constantCols)     msg+=fr._names[i] + " ";
    if (NACols.size() > 0)     msg+="Dropping column(s) with too many missing values: ";
    for (    int i : NACols)     msg+=fr._names[i] + " (" + String.format("%.2f",vecs[i].naCnt() * 100. / vecs[i].length())+ "%) ";
    for (    String s : msg.split("\n"))     Log.info(s);
  }
  if (!constantOrNAs.isEmpty()) {
    int[] cols=new int[constantOrNAs.size()];
    for (int i=0; i < cols.length; ++i)     cols[i]=constantOrNAs.get(i);
    fr.remove(cols);
  }
  return fr;
}
