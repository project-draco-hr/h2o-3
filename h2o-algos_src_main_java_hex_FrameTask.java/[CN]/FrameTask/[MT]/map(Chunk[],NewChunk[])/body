{
  if (_jobKey != null && !Job.isRunning(_jobKey))   throw new JobCancelledException();
  final int nrows=chunks[0]._len;
  final long offset=chunks[0].start();
  chunkInit();
  int start=0;
  int end=nrows;
  Random skip_rng=null;
  final int repeats=(int)Math.ceil(_useFraction);
  final float fraction=_useFraction / repeats;
  if (fraction < 1.0) {
    skip_rng=RandomUtils.getRNG(new Random().nextLong());
  }
  long[] shuf_map=null;
  if (_shuffle) {
    shuf_map=new long[end - start];
    for (int i=0; i < shuf_map.length; ++i)     shuf_map[i]=start + i;
    ArrayUtils.shuffleArray(shuf_map,new Random().nextLong());
  }
  long num_processed_rows=0;
  DataInfo.Row row=_dinfo.newDenseRow();
  for (int rrr=0; rrr < repeats; ++rrr) {
    OUTER:     for (int rr=start; rr < end; ++rr) {
      final int r=shuf_map != null ? (int)shuf_map[rr - start] : rr;
      final long lr=r + chunks[0].start();
      if (skip_rng != null && skip_rng.nextFloat() > fraction)       continue;
      ++num_processed_rows;
      if (!_dinfo.extractDenseRow(chunks,r,row).bad) {
        long seed=offset + rrr * (end - start) + r;
        if (outputs != null && outputs.length > 0)         processRow(seed,row,outputs);
 else         processRow(seed,row);
      }
    }
  }
  chunkDone(num_processed_rows);
}
