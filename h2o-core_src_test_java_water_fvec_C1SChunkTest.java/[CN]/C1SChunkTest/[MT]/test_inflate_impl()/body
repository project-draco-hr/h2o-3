{
  for (int l=0; l < 2; ++l) {
    NewChunk nc=new NewChunk(null,0);
    long[] man=new long[]{0,2,3,254};
    int[] exp=new int[]{1,-1,-1,-2};
    if (l == 1)     nc.addNA();
    for (int i=0; i < man.length; ++i)     nc.addNum(man[i],exp[i]);
    nc.addNA();
    Chunk cc=nc.compress();
    AssertJUnit.assertEquals(man.length + 1 + l,cc.len());
    AssertJUnit.assertTrue(cc instanceof C1SChunk);
    if (l == 1)     AssertJUnit.assertTrue(cc.isNA0(0));
    for (int i=0; i < man.length; ++i)     AssertJUnit.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc.at0(l + i));
    AssertJUnit.assertTrue(cc.isNA0(man.length + l));
    Chunk cc2=cc.inflate_impl(new NewChunk(null,0)).compress();
    AssertJUnit.assertEquals(man.length + 1 + l,cc.len());
    AssertJUnit.assertTrue(cc2 instanceof C1SChunk);
    if (l == 1)     AssertJUnit.assertTrue(cc2.isNA0(0));
    for (int i=0; i < man.length; ++i)     AssertJUnit.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc2.at0(l + i));
    AssertJUnit.assertTrue(cc2.isNA0(man.length + l));
    AssertJUnit.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
