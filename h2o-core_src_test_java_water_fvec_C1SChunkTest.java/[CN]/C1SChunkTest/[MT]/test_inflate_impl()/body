{
  for (int l=0; l < 2; ++l) {
    NewChunk nc=new NewChunk(null,0);
    long[] man=new long[]{0,2,3,254};
    int[] exp=new int[]{1,-1,-1,-2};
    if (l == 1)     nc.addNA();
    for (int i=0; i < man.length; ++i)     nc.addNum(man[i],exp[i]);
    nc.addNA();
    Chunk cc=nc.compress();
    Assert.assertEquals(man.length + 1 + l,cc._len);
    Assert.assertTrue(cc instanceof C1SChunk);
    if (l == 1) {
      Assert.assertTrue(cc.isNA(0));
      Assert.assertTrue(cc.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc.atd(l + i),0);
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc.at_abs(l + i),0);
    }
    Assert.assertTrue(cc.isNA(man.length + l));
    Assert.assertTrue(cc.isNA_abs(man.length + l));
    double[] densevals=new double[cc.len()];
    cc.getDoubles(densevals,0,cc.len());
    for (int i=0; i < densevals.length; ++i) {
      if (cc.isNA(i))       Assert.assertTrue(Double.isNaN(densevals[i]));
 else       Assert.assertTrue(cc.atd(i) == densevals[i]);
    }
    nc=cc.inflate_impl(new NewChunk(null,0));
    nc.values(0,nc._len);
    Assert.assertEquals(man.length + 1 + l,nc._len);
    Assert.assertEquals(man.length + 1 + l,nc._sparseLen);
    if (l == 1) {
      Assert.assertTrue(nc.isNA(0));
      Assert.assertTrue(nc.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)nc.atd(l + i),0);
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)nc.at_abs(l + i),0);
    }
    Assert.assertTrue(nc.isNA(man.length + l));
    Assert.assertTrue(nc.isNA_abs(man.length + l));
    Chunk cc2=nc.compress();
    Assert.assertEquals(man.length + 1 + l,cc._len);
    Assert.assertTrue(cc2 instanceof C1SChunk);
    if (l == 1) {
      Assert.assertTrue(cc2.isNA(0));
      Assert.assertTrue(cc2.isNA_abs(0));
    }
    for (int i=0; i < man.length; ++i) {
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc2.atd(l + i),0);
      Assert.assertEquals((float)(man[i] * Math.pow(10,exp[i])),(float)cc2.at_abs(l + i),0);
    }
    Assert.assertTrue(cc2.isNA(man.length + l));
    Assert.assertTrue(cc2.isNA_abs(man.length + l));
    Assert.assertTrue(Arrays.equals(cc._mem,cc2._mem));
  }
}
