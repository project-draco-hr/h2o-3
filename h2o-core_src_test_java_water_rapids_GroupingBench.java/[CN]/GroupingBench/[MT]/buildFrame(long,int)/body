{
  final int scale0=10;
  final long len=card / scale0;
  if (nChunks == -1) {
    int rowsPerChunk=100000;
    nChunks=(int)((len + rowsPerChunk - 1) / rowsPerChunk);
  }
  Vec.VectorGroup g=new Vec.VectorGroup();
  AppendableVec col0=new AppendableVec(g.addVec(),Vec.T_NUM);
  AppendableVec col1=new AppendableVec(g.addVec(),Vec.T_NUM);
  NewChunk ncs0[]=new NewChunk[nChunks];
  NewChunk ncs1[]=new NewChunk[nChunks];
  for (int i=0; i < nChunks; i++) {
    ncs0[i]=new NewChunk(col0,i);
    ncs1[i]=new NewChunk(col1,i);
  }
  RandomUtils.PCGRNG R=new RandomUtils.PCGRNG(card,0);
  for (long i=0; i < len; i++)   ncs0[R.nextInt(nChunks)].addNum(R.nextInt((int)card),0);
  int espc[]=new int[nChunks + 1];
  for (int i=0; i < nChunks; i++)   espc[i + 1]=espc[i] + ncs0[i].len();
  for (int i=0; i < nChunks; i++)   for (int j=0; j < ncs0[i].len(); j++)   ncs1[i].addNum(espc[i] + j,0);
  Futures fs=new Futures();
  for (int i=0; i < nChunks; i++) {
    ncs0[i].close(i,fs);
    ncs1[i].close(i,fs);
  }
  Vec vec0=col0.layout_and_close(fs);
  Vec vec1=col1.layout_and_close(fs);
  fs.blockForPending();
  Frame fr=new Frame(Key.make("hex"),null,new Vec[]{vec0,vec1});
  DKV.put(fr);
  return fr;
}
