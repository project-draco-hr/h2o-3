def class_extra_for(algo):
    if (algo == u'glm'):
        return u'\n            @property\n            def Lambda(self):\n                """[DEPRECATED] Use self.lambda_ instead"""\n                return self._parms["lambda"] if "lambda" in self._parms else None\n\n            @Lambda.setter\n            def lambda_(self, value):\n                """[DEPRECATED] Use self.lambda_ instead"""\n                self._parms["lambda"] = value\n\n            @staticmethod\n            def getGLMRegularizationPath(model):\n                """\n                Extract full regularization path explored during lambda search from glm model.\n                @param model - source lambda search model\n                """\n                x = h2o.api("GET /3/GetGLMRegPath", data={"model": model._model_json["model_id"]["name"]})\n                ns = x.pop("coefficient_names")\n                res = {\n                    "lambdas": x["lambdas"],\n                    "explained_deviance_train": x["explained_deviance_train"],\n                    "explained_deviance_valid": x["explained_deviance_valid"],\n                    "coefficients": [dict(zip(ns,y)) for y in x["coefficients"]],\n                }\n                if "coefficients_std" in x:\n                    res["coefficients_std"] = [dict(zip(ns,y)) for y in x["coefficients_std"]]\n                return res\n\n            @staticmethod\n            def makeGLMModel(model, coefs, threshold=.5):\n                """\n                Create a custom GLM model using the given coefficients.\n                Needs to be passed source model trained on the dataset to extract the dataset information from.\n                  @param model - source model, used for extracting dataset information\n                  @param coefs - dictionary containing model coefficients\n                  @param threshold - (optional, only for binomial) decision threshold used for classification\n                """\n                model_json = h2o.api("POST /3/MakeGLMModel", data={"model": model._model_json["model_id"]["name"],\n                    "names": list(coefs.keys()), "beta": list(coefs.values()), "threshold": threshold})\n                m = H2OGeneralizedLinearEstimator()\n                m._resolve_model(model_json["model_id"]["name"], model_json)\n                return m'
