def help_epilogue_for(algo):
    if (algo == u'deeplearning'):
        return u'Examples\n                       --------\n                         >>> import h2o as ml\n                         >>> from h2o.estimators.deeplearning import H2ODeepLearningEstimator\n                         >>> ml.init()\n                         >>> rows = [[1,2,3,4,0], [2,1,2,4,1], [2,1,4,2,1], [0,1,2,34,1], [2,3,4,1,0]] * 50\n                         >>> fr = ml.H2OFrame(rows)\n                         >>> fr[4] = fr[4].asfactor()\n                         >>> model = H2ODeepLearningEstimator()\n                         >>> model.train(x=range(4), y=4, training_frame=fr)'
    if (algo == u'glm'):
        return u"\n            Returns\n            -------\n            A subclass of ModelBase is returned. The specific subclass depends on the machine learning task at hand\n            (if it's binomial classification, then an H2OBinomialModel is returned, if it's regression then a\n            H2ORegressionModel is returned). The default print-out of the models is shown, but further GLM-specific\n            information can be queried out of the object. Upon completion of the GLM, the resulting object has\n            coefficients, normalized coefficients, residual/null deviance, aic, and a host of model metrics including\n            MSE, AUC (for logistic regression), degrees of freedom, and confusion matrices."
