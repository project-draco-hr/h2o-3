def gen_module(schema, algo):
    classname = algo_to_classname(algo)
    extra_imports = extra_imports_for(algo)
    help_preamble = help_preamble_for(algo)
    help_epilogue = help_epilogue_for(algo)
    init_extra = init_extra_for(algo)
    class_extra = class_extra_for(algo)
    module_extra = module_extra_for(algo)
    pattern = re.compile(u'[^a-z]+')
    param_names = []
    for param in schema[u'parameters']:
        assert ((param[u'type'][:4] == u'enum') == bool(param[u'values'])), u'Values are expected for enum types only'
        if param[u'values']:
            enum_values = [normalize_enum_constant(p) for p in param[u'values']]
            if param[u'default_value']:
                param[u'default_value'] = normalize_enum_constant(param[u'default_value'])
        else:
            enum_values = None
        pname = param[u'name']
        if (pname in reserved_words):
            pname += u'_'
        param_names.append(pname)
        param[u'pname'] = pname
        param[u'ptype'] = translate_type_for_check(param[u'type'], enum_values)
        param[u'dtype'] = translate_type_for_doc(param[u'type'], enum_values)
    yield u'#!/usr/bin/env python'
    yield u'# -*- encoding: utf-8 -*-'
    yield u'#'
    yield u'# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py'
    yield u'# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u'#'
    yield u'from __future__ import absolute_import, division, print_function, unicode_literals'
    yield u''
    yield u'from h2o.estimators.estimator_base import H2OEstimator'
    yield u'from h2o.exceptions import H2OValueError'
    yield u'from h2o.frame import H2OFrame'
    yield u'from h2o.utils.typechecks import assert_is_type, Enum, numeric'
    if extra_imports:
        yield (reindent_block(extra_imports, 0) + u'')
    yield u''
    yield u''
    yield (u'class %s(H2OEstimator):' % classname)
    yield u'    """'
    yield (u'    ' + schema[u'algo_full_name'])
    yield u''
    if help_preamble:
        yield (u'    %s' % reindent_block(help_preamble, 4))
    if help_epilogue:
        yield u''
        yield (u'    %s' % reindent_block(help_epilogue, 4))
    yield u'    """'
    yield u''
    yield (u'    algo = "%s"' % algo)
    yield u''
    yield u'    def __init__(self, **kwargs):'
    yield (u'        super(%s, self).__init__()' % classname)
    yield u'        self._parms = {}'
    yield (u'        names_list = {%s}' % bi.wrap(u', '.join(((u'"%s"' % p) for p in param_names)), indent=(u' ' * 22), indent_first=False))
    yield u'        if "Lambda" in kwargs: kwargs["lambda_"] = kwargs.pop("Lambda")'
    yield u'        for pname, pvalue in kwargs.items():'
    yield u"            if pname == 'model_id':"
    yield u'                self._id = pvalue'
    yield u'                self._parms["model_id"] = pvalue'
    yield u'            elif pname in names_list:'
    yield u'                # Using setattr(...) will invoke type-checking of the arguments'
    yield u'                setattr(self, pname, pvalue)'
    yield u'            else:'
    yield u'                raise H2OValueError("Unknown parameter %s = %r" % (pname, pvalue))'
    if init_extra:
        yield (u'        ' + reindent_block(init_extra, 8))
    yield u''
    for param in schema[u'parameters']:
        pname = param[u'pname']
        ptype = param[u'ptype']
        if (pname == u'model_id'):
            continue
        sname = (pname[:(-1)] if (pname[(-1)] == u'_') else pname)
        phelp = ((param[u'dtype'] + u': ') + param[u'help'])
        if (param[u'default_value'] is not None):
            phelp += (u' (Default: %s)' % stringify(param[u'default_value']))
        yield u'    @property'
        yield (u'    def %s(self):' % pname)
        if (len(phelp) > 100):
            yield u'        """'
            yield (u'        %s' % bi.wrap(phelp, indent=(u' ' * 8), indent_first=False))
            yield u'        """'
        else:
            yield (u'        """%s"""' % phelp)
        yield (u'        return self._parms.get("%s")' % sname)
        yield u''
        yield (u'    @%s.setter' % pname)
        yield (u'    def %s(self, %s):' % (pname, pname))
        if (pname in {u'training_frame', u'validation_frame', u'user_x', u'user_y', u'user_points', u'beta_constraints'}):
            assert (param[u'ptype'] == u'str')
            yield (u'        assert_is_type(%s, None, H2OFrame)' % pname)
        elif (pname in {u'initial_weights', u'initial_biases'}):
            yield (u'        assert_is_type(%s, None, [H2OFrame, None])' % pname)
        elif ((pname in {u'alpha', u'lambda_'}) and (ptype == u'[numeric]')):
            yield (u'        assert_is_type(%s, None, numeric, [numeric])' % pname)
        elif (pname in {u'checkpoint', u'pretrained_autoencoder'}):
            yield (u'        assert_is_type(%s, None, str, H2OEstimator)' % pname)
        else:
            yield (u'        assert_is_type(%s, None, %s)' % (pname, ptype))
        yield (u'        self._parms["%s"] = %s' % (sname, pname))
        yield u''
        yield u''
    if class_extra:
        yield u''
        yield (u'    ' + reindent_block(class_extra, 4))
    if module_extra:
        yield u''
        yield reindent_block(module_extra, 0)
