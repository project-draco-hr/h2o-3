def gen_module(schema, name):
    classname = algo_to_classname(name)
    extra_imports = extra_imports_for(name)
    help_preamble = help_preamble_for(name)
    help_epilogue = help_epilogue_for(name)
    init_extra = init_extra_for(name)
    class_extra = class_extra_for(name)
    module_extra = module_extra_for(name)
    yield u'#!/usr/bin/env python'
    yield u'# -*- encoding: utf-8 -*-'
    yield u'#'
    yield u'# This file is auto-generated by h2o-3/h2o-bindings/bin/gen_python.py'
    yield u'# Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u'#'
    yield u'from .estimator_base import H2OEstimator'
    if extra_imports:
        yield (reindent_block(extra_imports, 0) + u'')
    yield u''
    yield u''
    yield (u'class %s(H2OEstimator):' % classname)
    yield u'    """'
    yield (u'    ' + schema[u'algo_full_name'])
    yield u''
    if help_preamble:
        yield (u'    %s' % reindent_block(help_preamble, 4))
    yield u''
    yield u'    Parameters'
    yield u'    ----------'
    param_names = []
    for param in schema[u'parameters']:
        assert ((param[u'type'][:4] == u'enum') == bool(param[u'values'])), u'Values are expected for enum types only'
        ptype = translate_type(param[u'type'], param[u'values'])
        name = param[u'name']
        if (name in reserved_words):
            name += u'_'
        param_names.append(name)
        if param[u'required']:
            ptype += u', required'
        yield (u'      %s : %s' % (name, bi.wrap(ptype, (u' ' * (9 + len(name))), indent_first=False)))
        yield bi.wrap(param[u'help'], (u' ' * 8))
        if (param[u'default_value'] is not None):
            yield (u'        Default: %s' % stringify(param[u'default_value']))
        yield u''
    if help_epilogue:
        yield (u'    %s' % reindent_block(help_epilogue, 4))
    yield u'    """'
    yield u'    def __init__(self, **kwargs):'
    yield (u'        super(%s, self).__init__()' % classname)
    yield u'        self._parms = {}'
    yield ((u'        for name in [' + bi.wrap(u', '.join(((u'"%s"' % p) for p in param_names)), indent=(u' ' * 21), indent_first=False)) + u']:')
    yield u"            pname = name[:-1] if name[-1] == '_' else name"
    yield u'            self._parms[pname] = kwargs[name] if name in kwargs else None'
    if init_extra:
        yield (u'        ' + reindent_block(init_extra, 8))
    yield u''
    for param in schema[u'parameters']:
        name = param[u'name']
        if (name == u'model_id'):
            continue
        prop = name
        if (name in reserved_words):
            prop += u'_'
        yield u'    @property'
        yield (u'    def %s(self):' % prop)
        yield (u'        return self._parms["%s"]' % name)
        yield u''
        yield (u'    @%s.setter' % prop)
        yield (u'    def %s(self, value):' % prop)
        yield (u'        self._parms["%s"] = value' % name)
        yield u''
    if class_extra:
        yield (u'    ' + reindent_block(class_extra, 4))
        yield u''
    if module_extra:
        yield reindent_block(module_extra, 0)
        yield u''
