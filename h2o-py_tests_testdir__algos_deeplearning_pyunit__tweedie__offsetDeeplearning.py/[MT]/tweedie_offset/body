def tweedie_offset(ip, port):
    insurance = h2o.import_file(h2o.locate('smalldata/glm_test/insurance.csv'))
    insurance['offset'] = insurance['Holders'].log()
    insurance['Group'] = insurance['Group'].asfactor()
    insurance['Age'] = insurance['Age'].asfactor()
    insurance['District'] = insurance['District'].asfactor()
    dl = h2o.deeplearning(x=insurance[0:3], y=insurance['Claims'], distribution='tweedie', hidden=[1], epochs=1000, train_samples_per_iteration=(-1), reproducible=True, activation='Tanh', single_node_mode=False, balance_classes=False, force_load_balance=False, seed=23123, tweedie_power=1.5, score_training_samples=0, score_validation_samples=0)
    mean_residual_deviance = dl.mean_residual_deviance()
    assert (abs((0.556 - mean_residual_deviance)) < 0.001), 'Expected mean residual deviance to be 0.556, but got {0}'.format(mean_residual_deviance)
    predictions = dl.predict(insurance)
    assert (abs((47.61 - predictions[0].mean())) < 0.01), 'Expected mean of predictions to be 47.61, but got {0}'.format(predictions[0].mean())
    assert (abs((1.94 - predictions[0].min())) < 0.1), 'Expected min of predictions to be 1.94, but got {0}'.format(predictions[0].min())
    assert (abs((284.6 - predictions[0].max())) < 28), 'Expected max of predictions to be 284.6, but got {0}'.format(predictions[0].max())
    dl = h2o.deeplearning(x=insurance[0:3], y=insurance['Claims'], distribution='tweedie', hidden=[1], epochs=1000, train_samples_per_iteration=(-1), reproducible=True, activation='Tanh', single_node_mode=False, balance_classes=False, force_load_balance=False, seed=23123, tweedie_power=1.5, score_training_samples=0, score_validation_samples=0, offset_column='offset', training_frame=insurance)
    mean_residual_deviance = dl.mean_residual_deviance()
    assert (abs((0.261 - mean_residual_deviance)) < 0.01), 'Expected mean residual deviance to be 0.261, but got {0}'.format(mean_residual_deviance)
    predictions = dl.predict(insurance)
    assert (abs((49.53 - predictions[0].mean())) < 0.1), 'Expected mean of predictions to be 49.53, but got {0}'.format(predictions[0].mean())
    assert (abs((1.074 - predictions[0].min())) < 0.1), 'Expected min of predictions to be 1.074, but got {0}'.format(predictions[0].min())
    assert (abs((397.3 - predictions[0].max())) < 40), 'Expected max of predictions to be 397.3, but got {0}'.format(predictions[0].max())
