{
  final String mname=JCodeGen.toJavaId(_key.toString());
  bodySb.i().p("java.util.Arrays.fill(preds,0);").nl();
  final int cats=_output._ncats;
  final int nums=_output._nnums;
  bodySb.i().p("final int nstart = ").pj(mname + "_CATOFFS","VALUES").p("[").pj(mname + "_CATOFFS","VALUES").p(".length-1];").nl();
  bodySb.i().p("for(int i = 0; i < ").p(_parms._k).p("; i++) {").nl();
  bodySb.i(1).p("for(int j = 0; j < ").p(cats).p("; j++) {").nl();
  bodySb.i(2).p("double d = data[").pj(mname + "_PERMUTE","VALUES").p("[j]];").nl();
  bodySb.i(2).p("if(Double.isNaN(d)) continue;").nl();
  bodySb.i(2).p("int last = ").pj(mname + "_CATOFFS","VALUES").p("[j+1]-").pj(mname + "_CATOFFS","VALUES").p("[j]-1;").nl();
  bodySb.i(2).p("int c = (int)d").p(_parms._use_all_factor_levels ? ";" : "-1;").nl();
  bodySb.i(2).p("if(c < 0 || c > last) continue;").nl();
  bodySb.i(2).p("preds[i] += ").pj(mname + "_EIGVECS","VALUES").p("[").pj(mname + "_CATOFFS","VALUES").p("[j]+c][i];").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i(1).p("for(int j = 0; j < ").p(nums).p("; j++) {").nl();
  bodySb.i(2).p("preds[i] += (data[").pj(mname + "_PERMUTE","VALUES").p("[j" + (cats > 0 ? "+" + cats : "") + "]]-").pj(mname + "_NORMSUB","VALUES").p("[j])*").pj(mname + "_NORMMUL","VALUES").p("[j]*").pj(mname + "_EIGVECS","VALUES").p("[j" + (cats > 0 ? "+ nstart" : "") + "][i];").nl();
  bodySb.i(1).p("}").nl();
  bodySb.i().p("}").nl();
}
