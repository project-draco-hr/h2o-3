{
  parseArgs(args);
  if (driverCallbackIp == null) {
    driverCallbackIp=calcMyIp();
  }
  driverCallbackSocket=new ServerSocket();
  driverCallbackSocket.setReuseAddress(true);
  InetSocketAddress sa=new InetSocketAddress(driverCallbackIp,driverCallbackPort);
  driverCallbackSocket.bind(sa,driverCallbackPort);
  int actualDriverCallbackPort=driverCallbackSocket.getLocalPort();
  CallbackManager cm=new CallbackManager();
  cm.setServerSocket(driverCallbackSocket);
  cm.start();
  System.out.println("Using mapper->driver callback IP address and port: " + driverCallbackIp + ":"+ actualDriverCallbackPort);
  System.out.println("(You can override these with -driverif and -driverport.)");
  Configuration conf=getConf();
  long processTotalPhysicalMemoryMegabytes;
{
    Pattern p=Pattern.compile("([1-9][0-9]*)([mgMG])");
    Matcher m=p.matcher(mapperXmx);
    boolean b=m.matches();
    if (!b) {
      System.out.println("(Could not parse mapperXmx.");
      System.out.println("INTERNAL FAILURE.  PLEASE CONTACT TECHNICAL SUPPORT.");
      System.exit(1);
    }
    assert(m.groupCount() == 2);
    String number=m.group(1);
    String units=m.group(2);
    long megabytes=Long.parseLong(number);
    if (units.equals("g") || units.equals("G")) {
      megabytes=megabytes * 1024;
    }
    long jvmInternalMemoryMegabytes=(long)((double)megabytes * ((double)extraMemPercent) / 100.0);
    processTotalPhysicalMemoryMegabytes=megabytes + jvmInternalMemoryMegabytes;
    conf.set("mapreduce.job.ubertask.enable","false");
    String mapreduceMapMemoryMb=Long.toString(processTotalPhysicalMemoryMegabytes);
    conf.set("mapreduce.map.memory.mb",mapreduceMapMemoryMb);
    String mapChildJavaOpts="-Xms" + mapperXmx + " -Xmx"+ mapperXmx+ (enableExceptions ? " -ea" : "")+ (enableVerboseGC ? " -verbose:gc" : "")+ (enablePrintGCDetails ? " -XX:+PrintGCDetails" : "")+ (enablePrintGCTimeStamps ? " -XX:+PrintGCTimeStamps" : "")+ (enableVerboseClass ? " -verbose:class" : "")+ (enablePrintCompilation ? " -XX:+PrintCompilation" : "")+ (enableExcludeMethods ? " -XX:CompileCommand=exclude,water/fvec/NewChunk.append2slowd" : "")+ (enableLog4jDefaultInitOverride ? " -Dlog4j.defaultInitOverride=true" : "")+ (enableDebug ? " -agentlib:jdwp=transport=dt_socket,server=y,suspend=" + (enableSuspend ? "y" : "n") + ",address="+ debugPort : "");
    conf.set("mapreduce.map.java.opts",mapChildJavaOpts);
    System.out.println("Memory Settings:");
    System.out.println("    mapreduce.map.java.opts:     " + mapChildJavaOpts);
    System.out.println("    Extra memory percent:        " + extraMemPercent);
    System.out.println("    mapreduce.map.memory.mb:     " + mapreduceMapMemoryMb);
  }
  conf.set("mapreduce.client.genericoptionsparser.used","true");
  conf.set("mapreduce.map.speculative","false");
  conf.set("mapreduce.map.maxattempts","1");
  conf.set("mapreduce.job.jvm.numtasks","1");
  conf.set(h2omapper.H2O_JOBTRACKERNAME_KEY,jobtrackerName);
  conf.set(h2omapper.H2O_DRIVER_IP_KEY,driverCallbackIp);
  conf.set(h2omapper.H2O_DRIVER_PORT_KEY,Integer.toString(actualDriverCallbackPort));
  conf.set(h2omapper.H2O_NETWORK_KEY,network);
  if (nthreads >= 0) {
    conf.set(h2omapper.H2O_NTHREADS_KEY,Integer.toString(nthreads));
  }
  if (basePort >= 0) {
    conf.set(h2omapper.H2O_BASE_PORT_KEY,Integer.toString(basePort));
  }
  if (beta) {
    conf.set(h2omapper.H2O_BETA_KEY,"-beta");
  }
  if (enableRandomUdpDrop) {
    conf.set(h2omapper.H2O_RANDOM_UDP_DROP_KEY,"-random_udp_drop");
  }
  if (licenseData != null) {
    conf.set(h2omapper.H2O_LICENSE_DATA_KEY,licenseData);
  }
  if (flowDir != null) {
    conf.set(h2omapper.H2O_FLOW_DIR_KEY,flowDir);
  }
  String hadoopVersion=calcHadoopVersion();
  conf.set(h2omapper.H2O_HADOOP_VERSION,hadoopVersion);
  if ((new File(".h2o_no_collect")).exists() || (new File(System.getProperty("user.home") + "/.h2o_no_collect")).exists()) {
    conf.set(h2omapper.H2O_GA_OPTOUT,"-ga_opt_out");
  }
  job=new Job(conf,jobtrackerName);
  job.setJarByClass(getClass());
  job.setInputFormatClass(H2OInputFormat.class);
  job.setMapperClass(h2omapper.class);
  job.setNumReduceTasks(0);
  job.setOutputKeyClass(Text.class);
  job.setOutputValueClass(Text.class);
  FileInputFormat.addInputPath(job,new Path("ignored"));
  if (outputPath != null) {
    FileOutputFormat.setOutputPath(job,new Path(outputPath));
  }
  job.submit();
  System.out.println("Job name '" + jobtrackerName + "' submitted");
  System.out.println("JobTracker job ID is '" + job.getJobID() + "'");
  hadoopJobID=job.getJobID().toString();
  String applicationID=hadoopJobID.replace("job_","application_");
  System.out.println("For YARN users, logs command is 'yarn logs -applicationId " + applicationID + "'");
  ctrlc=new CtrlCHandler();
  Runtime.getRuntime().addShutdownHook(ctrlc);
  System.out.printf("Waiting for H2O cluster to come up...\n");
  int rv=waitForClusterToComeUp();
  if (rv == CLUSTER_ERROR_TIMEOUT) {
    try {
      Thread.sleep(3000);
      Class clazz=Class.forName("water.hadoop.H2OYarnDiagnostic");
      if (clazz != null) {
        Method method=clazz.getMethod("diagnose",String.class,int.class,int.class);
        String queueName;
        queueName=conf.get("mapreduce.job.queuename");
        if (queueName == null) {
          queueName=conf.get("mapred.job.queue.name");
        }
        if (queueName == null) {
          queueName="default";
        }
        method.invoke(null,queueName,numNodes,(int)processTotalPhysicalMemoryMegabytes);
      }
      return rv;
    }
 catch (    Exception ignore) {
    }
    System.out.println("ERROR: H2O cluster failed to come up");
    return rv;
  }
 else   if (rv != 0) {
    System.out.println("ERROR: H2O cluster failed to come up");
    return rv;
  }
  if (job.isComplete()) {
    System.out.println("ERROR: H2O cluster failed to come up");
    ctrlc.setComplete();
    return 2;
  }
  System.out.printf("H2O cluster (%d nodes) is up\n",numNodes);
  if (disown) {
    Thread.sleep(CLOUD_FORMATION_SETTLE_DOWN_SECONDS);
    System.out.println("Disowning cluster and exiting.");
    Runtime.getRuntime().removeShutdownHook(ctrlc);
    return 0;
  }
  System.out.println("(Note: Use the -disown option to exit the driver after cluster formation)");
  System.out.println("(Press Ctrl-C to kill the cluster)");
  System.out.println("Blocking until the H2O cluster shuts down...");
  waitForClusterToShutdown();
  cleanUpDriverResources();
  boolean success=job.isSuccessful();
  int exitStatus;
  exitStatus=success ? 0 : 1;
  System.out.println((success ? "" : "ERROR: ") + "Job was" + (success ? " " : " not ")+ "successful");
  if (success) {
    System.out.println("Exiting with status 0");
  }
 else {
    System.out.println("Exiting with nonzero exit status");
  }
  return exitStatus;
}
