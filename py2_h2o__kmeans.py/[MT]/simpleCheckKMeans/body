def simpleCheckKMeans(self, modelResult, parameters, numRows, numCols, labels):
    output = modelResult['models'][0]['output']
    ko = KMeansOutput(output)
    if (1 == 0):
        for (attr, value) in ko.__dict__.iteritems():
            print ('%s = ko.%s # %s' % (attr, attr, value))
    rows = ko.rows
    model_category = ko.model_category
    iters = ko.iters
    schema_version = ko.schema_version
    domains = ko.domains
    names = ko.names
    schema_name = ko.schema_name
    schema_type = ko.schema_type
    ncats = ko.ncats
    clusters = ko.clusters
    mse = ko.mse
    mses = ko.mses
    if numRows:
        assert (numRows == sum(rows))
    if ('K' in parameters):
        K = parameters['K']
        assert (len(mses) == K)
        assert (len(clusters) == K)
        assert (len(rows) == K)
    if numCols:
        assert (len(names) == numCols), ('Need to pass correct numCols after ignored columns decrement %s %s' % (len(names), numCols))
        for c in clusters:
            assert (len(c) == numCols), ('%s %s' % (len(c), numCols))
    if labels:
        assert (len(labels) == numCols), ('Need to pass correct labels and numCols after ignored columns removal %s %s' % (len(labels), numCols))
        assert (len(labels) == len(names)), ('Need to pass correct labels after ignored columns removal %s %s' % (len(labels), len(names)))
        assert (labels == names)
    if ('max_iters' in parameters):
        max_iters = parameters['max_iters']
        assert (max_iters >= iters)
    for (i, c) in enumerate(clusters):
        for n in c:
            if math.isnan(float(n)):
                raise Exception('cluster', i, 'has NaN:', n, 'center:', c)
    check_sandbox_for_errors()
    tuples = zip(range(len(clusters)), mses, rows, clusters)
    tuplesSorted = sorted(tuples, key=itemgetter(3))
    (ids, mses, rows, clusters) = zip(*tuplesSorted)
    print '\nmse:', mse
    print 'iters:', iters
    print 'ids:', ids
    print 'mses:', mses
    print 'rows:', rows
    for (i, c) in enumerate(clusters):
        print ('cluster id %s (2 places):' % ids[i]), h2o_util.twoDecimals(c)
    return (tuplesSorted, iters, mse, names)
