{
  row.bad=false;
  row.rid=0;
  row.cid=0;
  if (row.weight == 0)   return row;
  if (_skipMissing)   for (  double d : vals)   if (Double.isNaN(d)) {
    row.bad=true;
    return row;
  }
  int nbins=0;
  for (int i=0; i < _cats; ++i) {
    if (Double.isNaN(vals[i])) {
      if (_imputeMissing) {
        int c=getCategoricalId(i,_catModes[i]);
        if (c >= 0)         row.binIds[nbins++]=c;
      }
 else       if (_catMissing[i])       row.binIds[nbins++]=_catOffsets[i + 1] - 1;
    }
 else {
      int c=getCategoricalId(i,(int)vals[i]);
      if (c >= 0)       row.binIds[nbins++]=c;
    }
  }
  row.nBins=nbins;
  final int n=_nums;
  for (int i=0; i < n; ++i) {
    double d=vals[_cats + i];
    if (Double.isNaN(d))     d=_numMeans[i];
    if (_normMul != null && _normSub != null)     d=(d - _normSub[i]) * _normMul[i];
    row.numVals[i]=d;
  }
  int off=responseChunkId(0);
  for (int i=off; i < Math.min(vals.length,off + _responses); ++i) {
    try {
      row.response[i]=vals[responseChunkId(i)];
    }
 catch (    Throwable t) {
      throw new RuntimeException(t);
    }
    if (_normRespMul != null)     row.response[i]=(row.response[i] - _normRespSub[i]) * _normRespMul[i];
    if (Double.isNaN(row.response[i])) {
      row.bad=true;
      return row;
    }
  }
  return row;
}
