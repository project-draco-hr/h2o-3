{
  if (_nums == 0)   return;
  assert(in.length == out.length);
  assert(in.length == fullN());
  for (int k=numStart(); k < fullN(); ++k) {
    float m=_normMul == null ? 1f : (float)_normMul[k - numStart()];
    float s=_normSub == null ? 0f : (float)_normSub[k - numStart()];
    out[k]=in[k] / m + s;
  }
}
