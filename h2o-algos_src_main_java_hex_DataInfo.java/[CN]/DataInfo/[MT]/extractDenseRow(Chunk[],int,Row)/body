{
  row.bad=false;
  row.rid=rid + chunks[0].start();
  row.cid=rid;
  if (_weights)   row.weight=chunks[weightChunkId()].atd(rid);
  if (row.weight == 0)   return row;
  if (_skipMissing) {
    int N=_cats + _nums;
    for (int i=0; i < N; ++i)     if (chunks[i].isNA(rid)) {
      row.bad=true;
      return row;
    }
  }
  int nbins=0;
  for (int i=0; i < _cats; ++i) {
    int cid=getCategoricalId(i,chunks[i].isNA(rid) ? _catModes[i] : (int)chunks[i].at8(rid));
    if (cid >= 0)     row.binIds[nbins++]=cid;
  }
  row.nBins=nbins;
  final int n=_nums;
  int numValsIdx=0;
  for (int i=0; i < n; i++) {
    if (isInteractionVec(_cats + i)) {
      row.numVals[i]=0;
      int offset=getInteractionOffset(chunks,_cats + i,rid);
      if (offset >= 0)       row.numVals[numValsIdx + offset]=chunks[_cats + i].atd(rid);
      numValsIdx+=nextNumericIdx(i);
    }
 else {
      double d=chunks[_cats + i].atd(rid);
      if (Double.isNaN(d))       d=_numMeans[i];
      if (_normMul != null && _normSub != null)       d=(d - _normSub[numValsIdx]) * _normMul[numValsIdx];
      row.numVals[numValsIdx++]=d;
    }
  }
  for (int i=0; i < _responses; ++i) {
    try {
      row.response[i]=chunks[responseChunkId(i)].atd(rid);
    }
 catch (    Throwable t) {
      throw new RuntimeException(t);
    }
    if (_normRespMul != null)     row.response[i]=(row.response[i] - _normRespSub[i]) * _normRespMul[i];
    if (Double.isNaN(row.response[i])) {
      row.bad=true;
      return row;
    }
  }
  if (_offset)   row.offset=chunks[offsetChunkId()].atd(rid);
  return row;
}
