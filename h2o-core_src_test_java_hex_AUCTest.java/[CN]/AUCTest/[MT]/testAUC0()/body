{
  double probs[]=new double[]{1e-8,1e-7,1e-6,1e-5,1e-4,1e-3,1e-3,1e-3,1e-3,1e-3,1e-3,1e-3,1e-3,1e-3,1e-3,1e-2,1e-1};
  double actls[]=new double[]{0,0,1,1,1,1,0,1,0,1,0,1,0,1,1,1,1};
  int P=0;
  for (int i=0; i < actls.length; i++)   P+=(int)actls[i];
  int N=actls.length - P;
  System.out.println("P=" + P + ", N="+ N);
  double thresh[]=new double[]{1e-1,1e-2,1e-3 + 1e-9,1e-3,1e-3 - 1e-9,1e-4,1e-5,1e-6,1e-7,1e-8,0};
  int tp[]=new int[thresh.length], fp[]=new int[thresh.length];
  for (int i=0; i < probs.length; i++) {
    for (int t=0; t < thresh.length; t++) {
      if (probs[i] >= thresh[t])       if (actls[i] == 0.0)       fp[t]++;
 else       tp[t]++;
    }
  }
  System.out.println(Arrays.toString(tp));
  System.out.println(Arrays.toString(fp));
  for (int i=0; i < tp.length; i++)   System.out.print("{" + ((double)tp[i] / P) + ","+ ((double)fp[i] / N)+ "} ");
  System.out.println();
  Assert.assertEquals(doAUC(probs,actls),0.636363636363,1e-5);
  swap(0,5,probs,actls);
  swap(1,6,probs,actls);
  swap(7,15,probs,actls);
  Assert.assertEquals(doAUC(probs,actls),0.636363636363,1e-5);
  double ROCR_auc=0.7244389;
  Frame fr=parse_test_file("smalldata/junit/auc4.csv");
  for (int i=10; i < 1000; i+=10)   System.out.println("bins=" + i + ", aucERR="+ Math.abs(new AUC2(i,fr.vec("V1"),fr.vec("V2"))._auc - ROCR_auc) / ROCR_auc);
  Assert.assertEquals(ROCR_auc,new AUC2(fr.vec("V1"),fr.vec("V2"))._auc,1e-4);
  fr.remove();
}
