{
  StringBuilder sb=new StringBuilder();
  sb.append("Internal FluidVec compression/distribution summary:\n");
  sb.append("Chunk type        count     fraction       size     rel. size\n");
  for (int j=0; j < chunkTypes.length; ++j) {
    sb.append(String.format("%10s %10d %10.3f %% %10s %10.3f %%\n",chunkTypes[j],chunk_counts[j],(float)chunk_counts[j] / total_chunk_count * 100.,display(chunk_byte_sizes[j]),(float)chunk_byte_sizes[j] / total_chunk_byte_size * 100.));
  }
  if (byte_size_per_node_stddev > 0.2 * byte_size_per_node_mean) {
    sb.append("** Note: Dataset is not well distributed, consider rebalancing **\n");
    for (int i=0; i < byte_size_per_node.length; ++i) {
      sb.append("     size on node " + i + " : "+ display(byte_size_per_node[i])+ "\n");
    }
  }
  if (byte_size_per_node.length > 1) {
    sb.append(" mean size per node : " + display((long)byte_size_per_node_mean) + "\n");
    sb.append("  min size per node : " + display((long)byte_size_per_node_min) + "\n");
    sb.append("  max size per node : " + display((long)byte_size_per_node_max) + "\n");
    sb.append("stddev of node size : " + display((long)byte_size_per_node_stddev) + "\n");
  }
  sb.append(" Total memory usage : " + display(total_chunk_byte_size) + "\n");
  return sb.toString();
}
