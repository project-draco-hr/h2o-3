{
  if (chunk_counts == null || chunk_byte_sizes == null || byte_size_per_node == null)   return;
  assert(total_row_count == _fr.numRows());
  total_chunk_byte_size=0;
  total_chunk_count=0;
  for (int j=0; j < chunkTypes.length; ++j) {
    total_chunk_byte_size+=chunk_byte_sizes[j];
    total_chunk_count+=chunk_counts[j];
  }
  long check=0;
  for (  Vec v : _fr.vecs())   check+=v.nChunks();
  assert(total_chunk_count == check);
  byte_size_per_node_min=Float.MAX_VALUE;
  byte_size_per_node_max=Float.MIN_VALUE;
  byte_size_per_node_mean=0;
  for (  long aByte_size_per_node : byte_size_per_node) {
    byte_size_per_node_min=Math.min(aByte_size_per_node,byte_size_per_node_min);
    byte_size_per_node_max=Math.max(aByte_size_per_node,byte_size_per_node_max);
    byte_size_per_node_mean+=aByte_size_per_node;
  }
  byte_size_per_node_mean/=byte_size_per_node.length;
  row_count_per_node_min=Float.MAX_VALUE;
  row_count_per_node_max=Float.MIN_VALUE;
  row_count_per_node_mean=0;
  for (  long tmp : row_count_per_node) {
    row_count_per_node_min=Math.min(tmp,row_count_per_node_min);
    row_count_per_node_max=Math.max(tmp,row_count_per_node_max);
    row_count_per_node_mean+=tmp;
  }
  row_count_per_node_mean/=row_count_per_node.length;
  byte_size_per_node_stddev=0;
  for (  long aByte_size_per_node : byte_size_per_node) {
    byte_size_per_node_stddev+=Math.pow(aByte_size_per_node - byte_size_per_node_mean,2);
  }
  byte_size_per_node_stddev/=byte_size_per_node.length;
  byte_size_per_node_stddev=(float)Math.sqrt(byte_size_per_node_stddev);
}
