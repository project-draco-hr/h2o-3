{
  Grid grid=null;
  GBMModel gbmRebuilt=null;
  Frame fr=null;
  Vec old=null;
  try {
    fr=parse_test_file("smalldata/junit/cars.csv");
    fr.remove("name").remove();
    old=fr.remove("economy (mpg)");
    fr.add("economy (mpg)",old);
    DKV.put(fr);
    HashMap<String,Object[]> hyperParms=new HashMap<>();
    hyperParms.put("_distribution",new Distribution.Family[]{Distribution.Family.gaussian});
    Random rng=new Random();
    Integer ntreesDim=rng.nextInt(4) + 1;
    Integer maxDepthDim=rng.nextInt(4) + 1;
    Integer learnRateDim=rng.nextInt(4) + 1;
    Integer[] ntreesArr=interval(1,25);
    ArrayList<Integer> ntreesList=new ArrayList<>(Arrays.asList(ntreesArr));
    Collections.shuffle(ntreesList);
    Integer[] ntreesSpace=new Integer[ntreesDim];
    for (int i=0; i < ntreesDim; i++) {
      ntreesSpace[i]=ntreesList.get(i);
    }
    Integer[] maxDepthArr=interval(1,10);
    ArrayList<Integer> maxDepthList=new ArrayList<>(Arrays.asList(maxDepthArr));
    Collections.shuffle(maxDepthList);
    Integer[] maxDepthSpace=new Integer[maxDepthDim];
    for (int i=0; i < maxDepthDim; i++) {
      maxDepthSpace[i]=maxDepthList.get(i);
    }
    Float[] learnRateArr=interval(0.01f,1.0f,0.01f);
    ArrayList<Float> learnRateList=new ArrayList<>(Arrays.asList(learnRateArr));
    Collections.shuffle(learnRateList);
    Float[] learnRateSpace=new Float[learnRateDim];
    for (int i=0; i < learnRateDim; i++) {
      learnRateSpace[i]=learnRateList.get(i);
    }
    hyperParms.put("_ntrees",ntreesSpace);
    hyperParms.put("_max_depth",maxDepthSpace);
    hyperParms.put("_learn_rate",learnRateSpace);
    GBMModel.GBMParameters params=new GBMModel.GBMParameters();
    params._train=fr._key;
    params._response_column="economy (mpg)";
    Job<Grid> gs=GridSearch.startGridSearch(params,hyperParms,GBM_MODEL_FACTORY);
    grid=gs.get();
    System.out.println("ntrees search space: " + Arrays.toString(ntreesSpace));
    System.out.println("max_depth search space: " + Arrays.toString(maxDepthSpace));
    System.out.println("learn_rate search space: " + Arrays.toString(learnRateSpace));
    Model[] ms=grid.getModels();
    Integer numModels=ms.length;
    System.out.println("Grid consists of " + numModels + " models");
    assertTrue(numModels == ntreesDim * maxDepthDim * learnRateDim);
    HashMap<String,Object[]> randomHyperParms=new HashMap<>();
    randomHyperParms.put("_distribution",new Distribution.Family[]{Distribution.Family.gaussian});
    Integer ntreeVal=ntreesSpace[rng.nextInt(ntreesSpace.length)];
    randomHyperParms.put("_ntrees",new Integer[]{ntreeVal});
    Integer maxDepthVal=maxDepthSpace[rng.nextInt(maxDepthSpace.length)];
    randomHyperParms.put("_max_depth",maxDepthSpace);
    Float learnRateVal=learnRateSpace[rng.nextInt(learnRateSpace.length)];
    randomHyperParms.put("_learn_rate",learnRateSpace);
    params._distribution=Distribution.Family.gaussian;
    params._ntrees=ntreeVal;
    params._max_depth=maxDepthVal;
    params._learn_rate=learnRateVal;
    GBM gbm=new GBM(params);
    gbmRebuilt=gbm.trainModel().get();
    assertTrue(gbm.isStopped());
    double rebuiltMSE=gbmRebuilt._output._scored_train[gbmRebuilt._output._ntrees]._mse;
    System.out.println("The rebuilt model's MSE: " + rebuiltMSE);
  }
  finally {
    if (old != null)     old.remove();
    if (fr != null)     fr.remove();
    if (grid != null)     grid.remove();
    if (gbmRebuilt != null)     gbmRebuilt.remove();
  }
}
