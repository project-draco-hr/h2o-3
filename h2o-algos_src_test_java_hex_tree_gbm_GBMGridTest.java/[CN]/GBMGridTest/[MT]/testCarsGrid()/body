{
  Grid grid=null;
  Frame fr=null;
  Vec old=null;
  try {
    fr=parse_test_file("smalldata/junit/cars.csv");
    fr.remove("name").remove();
    old=fr.remove("cylinders");
    fr.add("cylinders",old.toEnum());
    DKV.put(fr);
    HashMap<String,Object[]> hyperParms=new HashMap<>();
    hyperParms.put("_ntrees",new Integer[]{1,2});
    hyperParms.put("_distribution",new Distribution.Family[]{Distribution.Family.multinomial});
    hyperParms.put("_max_depth",new Integer[]{1,2,5});
    hyperParms.put("_learn_rate",new Float[]{0.01f,0.1f,0.3f});
    String[] hyperParamNames=hyperParms.keySet().toArray(new String[hyperParms.size()]);
    Arrays.sort(hyperParamNames);
    int hyperSpaceSize=ArrayUtils.crossProductSize(hyperParms);
    GBMModel.GBMParameters params=new GBMModel.GBMParameters();
    params._train=fr._key;
    params._response_column="cylinders";
    GridSearch gs=GridSearch.startGridSearch(params,hyperParms,GBM_MODEL_FACTORY);
    grid=(Grid)gs.get();
    Assert.assertEquals("Size of grid should match to size of hyper space",hyperSpaceSize,grid.getModelKeys().length);
    String[] gridHyperNames=grid.getHyperNames();
    Arrays.sort(gridHyperNames);
    Assert.assertArrayEquals("Hyper parameters names should match!",hyperParamNames,gridHyperNames);
    Key<Model>[] mKeys=grid.getModelKeys();
    Map<String,Set<Object>> usedModelParams=GridTestUtils.initMap(hyperParamNames);
    for (    Key<Model> mKey : mKeys) {
      GBMModel gbm=(GBMModel)mKey.get();
      System.out.println(gbm._output._scored_train[gbm._output._ntrees]._mse + " " + Arrays.deepToString(ArrayUtils.zip(grid.getHyperNames(),grid.getHyperValues(gbm._parms))));
      GridTestUtils.extractParams(usedModelParams,gbm._parms,hyperParamNames);
    }
    GridTestUtils.assertParamsEqual("Grid models parameters have to cover specified hyper space",hyperParms,usedModelParams);
  }
  finally {
    if (old != null) {
      old.remove();
    }
    if (fr != null) {
      fr.remove();
    }
    if (grid != null) {
      grid.remove();
    }
  }
}
