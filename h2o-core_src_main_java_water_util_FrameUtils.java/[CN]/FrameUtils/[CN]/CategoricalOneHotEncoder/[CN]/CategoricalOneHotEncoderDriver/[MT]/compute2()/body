{
  Vec[] frameVecs=_frame.vecs();
  int numCategoricals=0;
  for (int i=0; i < frameVecs.length; ++i)   if (frameVecs[i].isCategorical() && ArrayUtils.find(_skipCols,_frame._names[i]) == -1)   numCategoricals++;
  Vec[] extraVecs=new Vec[_skipCols.length];
  for (int i=0; i < extraVecs.length; ++i) {
    Vec v=_frame.vec(_skipCols[i]);
    if (v != null)     extraVecs[i]=v;
  }
  Frame categoricalFrame=new Frame();
  Frame outputFrame=new Frame(_destKey);
  int[] categorySizes=new int[numCategoricals];
  int numOutputColumns=0;
  List<String> catnames=new ArrayList<>();
  for (int i=0, j=0; i < frameVecs.length; ++i) {
    if (ArrayUtils.find(_skipCols,_frame._names[i]) >= 0)     continue;
    int numCategories=frameVecs[i].cardinality();
    if (numCategories > 0) {
      categoricalFrame.add(_frame.name(i),frameVecs[i]);
      categorySizes[j]=numCategories + 1;
      numOutputColumns+=categorySizes[j];
      catnames.add(_frame.name(i) + ".missing(NA)");
      for (int k=0; k < categorySizes[j] - 1; ++k)       catnames.add(_frame.name(i) + "." + _frame.vec(i).domain()[k]);
      ++j;
    }
 else {
      catnames.add(_frame.name(i));
      outputFrame.add(_frame.name(i),frameVecs[i].makeCopy());
    }
  }
  OneHotConverter mrtask=new OneHotConverter(categorySizes);
  Frame binaryCols=mrtask.doAll(numOutputColumns,Vec.T_NUM,categoricalFrame).outputFrame();
  binaryCols._names=catnames.toArray(new String[0]);
  outputFrame.add(binaryCols);
  for (int i=0; i < extraVecs.length; ++i) {
    if (extraVecs[i] != null)     outputFrame.add(_skipCols[i],extraVecs[i].makeCopy());
  }
  DKV.put(outputFrame);
  tryComplete();
}
