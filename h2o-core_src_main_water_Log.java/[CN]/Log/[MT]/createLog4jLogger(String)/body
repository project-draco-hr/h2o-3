{
synchronized (water.Log.class) {
    if (_logger != null) {
      return _logger;
    }
    String log4jProperties=System.getProperty("log4j.properties");
    if (log4jProperties != null) {
      PropertyConfigurator.configure(log4jProperties);
    }
 else {
      LOG_DIR=logDirParent + File.separator + "h2ologs";
      String logPathFileName=getLogPathFileName();
      java.util.Properties p=new java.util.Properties();
      p.setProperty("log4j.rootLogger","INFO, R");
      p.setProperty("log4j.appender.R","org.apache.log4j.RollingFileAppender");
      p.setProperty("log4j.appender.R.File",logPathFileName);
      p.setProperty("log4j.appender.R.MaxFileSize","256KB");
      p.setProperty("log4j.appender.R.MaxBackupIndex","5");
      p.setProperty("log4j.appender.R.layout","org.apache.log4j.PatternLayout");
      p.setProperty("log4j.logger.org.apache.http","WARN");
      p.setProperty("log4j.logger.com.amazonaws","WARN");
      p.setProperty("log4j.logger.org.apache.hadoop","WARN");
      p.setProperty("log4j.logger.org.jets3t.service","WARN");
      p.setProperty("log4j.appender.R.layout.ConversionPattern","%m%n");
      PropertyConfigurator.configure(p);
    }
    _logger=LogManager.getLogger(Log.class.getName());
  }
  return _logger;
}
