{
  System.out.println("Read testcase: " + fileName);
  Object[][] result=null;
  CSVReader csvReader=null;
  List<String[]> contents=null;
  String[] hearderRow=null;
  if (StringUtils.isEmpty(fileName)) {
    System.out.println("Not found file: " + fileName);
    return null;
  }
  try {
    csvReader=new CSVReader(new FileReader(TestNGUtil.find_test_file_static(fileName)));
  }
 catch (  Exception ignore) {
    System.out.println("Cannot open file: " + fileName);
    ignore.printStackTrace();
    return null;
  }
  try {
    contents=csvReader.readAll();
  }
 catch (  IOException e) {
    System.out.println("Cannot read content from CSV file");
    e.printStackTrace();
    return null;
  }
 finally {
    try {
      csvReader.close();
    }
 catch (    IOException e) {
      System.out.println("Cannot close CSV file");
      e.printStackTrace();
    }
  }
  contents.removeAll(contents.subList(0,indexRowHeader - 1));
  hearderRow=contents.remove(0);
  if (!validateTestcaseFile(listHeaders,fileName,hearderRow)) {
    System.out.println("Testcase file is wrong format");
    return null;
  }
  result=new Object[contents.size()][9];
  int r=0;
  for (  String[] line : contents) {
    HashMap<String,String> rawInput=parseToHashMap(listHeaders,hearderRow,line);
    result[r][0]=rawInput.get(CommonHeaders.testcase_id);
    result[r][1]=rawInput.get(CommonHeaders.test_description);
    result[r][2]=rawInput.get(CommonHeaders.train_dataset_id);
    result[r][3]=rawInput.get(CommonHeaders.validate_dataset_id);
    result[r][4]=dataSetCharacteristic.get(Integer.parseInt((String)result[r][2]));
    result[r][5]=dataSetCharacteristic.get(Integer.parseInt((String)result[r][3]));
    result[r][6]=algorithm;
    result[r][7]=isNegativeTestcase;
    result[r][8]=rawInput;
    r++;
  }
  return result;
}
