{
  Object[][] result=null;
  List<String> lines=null;
  String[] hearderRow=null;
  if (StringUtils.isEmpty(fileName)) {
    System.out.println("Not found file: " + fileName);
    return null;
  }
  try {
    lines=Files.readAllLines(TestNGUtil.find_test_file_static(fileName).toPath(),Charset.defaultCharset());
  }
 catch (  Exception ignore) {
    System.out.println("Cannot open file: " + fileName);
    ignore.printStackTrace();
    return null;
  }
  lines.removeAll(lines.subList(0,indexRowHeader - 1));
  hearderRow=lines.remove(0).split(regexToSplitTestcase,-1);
  if (!validateTestcaseFile(listHeaders,fileName,hearderRow)) {
    System.out.println("Testcase file is wrong format");
    return null;
  }
  result=new Object[lines.size()][9];
  int r=0;
  for (  String line : lines) {
    String[] variables=line.trim().split(regexToSplitTestcase,-1);
    HashMap<String,String> rawInput=parseToHashMap(listHeaders,hearderRow,variables);
    result[r][0]=rawInput.get(CommonHeaders.testcase_id);
    result[r][1]=rawInput.get(CommonHeaders.test_description);
    result[r][2]=rawInput.get(CommonHeaders.train_dataset_id);
    result[r][3]=rawInput.get(CommonHeaders.validate_dataset_id);
    result[r][4]=dataSetCharacteristic.get(result[r][2]);
    result[r][5]=dataSetCharacteristic.get(result[r][3]);
    result[r][6]=algorithm;
    result[r][7]=isNegativeTestcase;
    result[r][8]=rawInput;
    r++;
  }
  return result;
}
