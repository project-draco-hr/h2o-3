{
  if (u == null || alpha == 0 || gamma == 0)   return u;
  double[] v=new double[u.length];
  int idx;
switch (regularization) {
case L2:
    for (int i=0; i < u.length; i++)     v[i]=u[i] / (1 + 2 * alpha * gamma);
  return v;
case L1:
for (int i=0; i < u.length; i++) v[i]=Math.max(u[i] - alpha * gamma,0) + Math.min(u[i] + alpha * gamma,0);
return v;
case NonNegative:
for (int i=0; i < u.length; i++) v[i]=Math.max(u[i],0);
return v;
case OneSparse:
idx=ArrayUtils.maxIndex(u,rand);
v[idx]=u[idx] > 0 ? u[idx] : 1e-6;
return v;
case UnitOneSparse:
idx=ArrayUtils.maxIndex(u,rand);
v[idx]=1;
return v;
default :
throw new RuntimeException("Unknown regularization function " + regularization);
}
}
