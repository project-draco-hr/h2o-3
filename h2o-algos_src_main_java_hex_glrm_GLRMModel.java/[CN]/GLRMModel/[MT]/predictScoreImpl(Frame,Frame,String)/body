{
  Frame loadingFrm=DKV.get(_output._loading_key).get();
  final int ncols=_output._names.length;
  for (int i=0; i < ncols; i++)   loadingFrm.add(_output._names[i],loadingFrm.anyVec().makeZero());
  new MRTask(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[_parms._k];
      double preds[]=new double[ncols];
      for (int row=0; row < chks[0]._len; row++) {
        double p[]=impute_data(chks,row,tmp,preds);
        for (int c=0; c < preds.length; c++)         chks[_parms._k + c].set(row,p[c]);
      }
    }
  }
.doAll(loadingFrm);
  int x=_parms._k, y=loadingFrm.numCols();
  Frame f=loadingFrm.extractFrame(x,y);
  f=new Frame((null == destination_key ? Key.make() : Key.make(destination_key)),f.names(),f.vecs());
  DKV.put(f);
  makeMetricBuilder(null).makeModelMetrics(this,orig);
  return f;
}
