{
  if (u == null)   return 0;
  int end=u.length - (_offset ? 1 : 0);
  double ureg=0;
switch (regularization) {
case None:
    return 0;
case Quadratic:
  for (int i=0; i < end; i++)   ureg+=u[i] * u[i];
return ureg;
case L2:
for (int i=0; i < end; i++) ureg+=u[i] * u[i];
return Math.sqrt(ureg);
case L1:
for (int i=0; i < end; i++) ureg+=Math.abs(u[i]);
return ureg;
case NonNegative:
for (int i=0; i < end; i++) {
if (u[i] < 0) return Double.POSITIVE_INFINITY;
}
return 0;
case OneSparse:
int card=0;
for (int i=0; i < end; i++) {
if (u[i] < 0) return Double.POSITIVE_INFINITY;
 else if (u[i] > 0) card++;
}
return card == 1 ? 0 : Double.POSITIVE_INFINITY;
case UnitOneSparse:
int ones=0, zeros=0;
for (int i=0; i < end; i++) {
if (u[i] == 1) ones++;
 else if (u[i] == 0) zeros++;
 else return Double.POSITIVE_INFINITY;
}
return ones == 1 && zeros == u.length - 1 ? 0 : Double.POSITIVE_INFINITY;
case Simplex:
double sum=0;
for (int i=0; i < end; i++) {
if (u[i] < 0) return Double.POSITIVE_INFINITY;
 else sum+=u[i];
}
return MathUtils.equalsWithinOneSmallUlp(sum,1) ? 0 : Double.POSITIVE_INFINITY;
default :
throw new RuntimeException("Unknown regularization function " + regularization);
}
}
