{
  final int nclass=_output.nclasses();
  body.ip("java.util.Arrays.fill(preds,0);").nl();
  final String mname=JCodeGen.toJavaId(_key.toString());
  for (int t=0; t < _output._treeKeys.length; t++) {
    toJavaForestName(body.i(),mname,t).p(".score0(data,preds);").nl();
    final int treeIdx=t;
    fileCtx.add(new CodeGenerator(){
      @Override public void generate(      JCodeSB out){
        out.nl();
        toJavaForestName(out.ip("class "),mname,treeIdx).p(" {").nl().ii(1);
        out.ip("public static void score0(double[] fdata, double[] preds) {").nl().ii(1);
        for (int c=0; c < nclass; c++)         if (!binomialOpt() || !(c == 1 && nclass == 2))         toJavaTreeName(out.ip("preds[").p(nclass == 1 ? 0 : c + 1).p("] += "),mname,treeIdx,c).p(".score0(fdata);").nl();
        out.di(1).ip("}").nl();
        out.di(1).ip("}").nl();
        for (int c=0; c < nclass; c++) {
          if (!binomialOpt() || !(c == 1 && nclass == 2)) {
            String javaClassName=toJavaTreeName(new SB(),mname,treeIdx,c).toString();
            CompressedTree ct=_output.ctree(treeIdx,c);
            SB sb=new SB();
            new TreeJCodeGen(SharedTreeModel.this,ct,sb,javaClassName,verboseCode).generate();
            out.p(sb);
          }
        }
      }
    }
);
  }
  toJavaUnifyPreds(body);
}
