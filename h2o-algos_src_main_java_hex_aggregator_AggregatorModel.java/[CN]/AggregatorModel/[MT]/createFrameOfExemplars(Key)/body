{
  final long[] keep=new long[_exemplars.length];
  for (int i=0; i < keep.length; ++i)   keep[i]=_exemplars[i].gid;
  Vec exAssignment=(Vec)_exemplar_assignment_vec_key.get();
  Vec booleanCol=new MRTask(){
    @Override public void map(    Chunk c,    Chunk c2){
      for (int i=0; i < keep.length; ++i) {
        if (keep[i] < c.start())         continue;
        if (keep[i] >= c.start() + c._len)         continue;
        c2.set((int)(keep[i] - c.start()),1);
      }
    }
  }
.doAll(new Frame(new Vec[]{exAssignment,exAssignment.makeZero()}))._fr.vec(1);
  Frame orig=_parms.train();
  Vec[] vecs=Arrays.copyOf(orig.vecs(),orig.vecs().length + 1);
  vecs[vecs.length - 1]=booleanCol;
  Frame ff=new Frame(orig.names(),orig.vecs());
  ff.add("predicate",booleanCol);
  Frame res=new Frame.DeepSelect().doAll(orig.types(),ff).outputFrame(destination_key,orig.names(),orig.domains());
  booleanCol.remove();
  assert(res.numRows() == _exemplars.length);
  Vec cnts=res.anyVec().makeZero();
  Vec.Writer vw=cnts.open();
  for (int i=0; i < _counts.length; ++i)   vw.set(i,_counts[i]);
  vw.close();
  res.add("counts",cnts);
  return res;
}
