{
  final int newColCnt=(new CountSplits(splitRegEx)).doAll(vec)._maxSplits;
  return new MRTask(){
    @Override public void map(    Chunk[] cs,    NewChunk[] ncs){
      Chunk chk=cs[0];
      if (chk instanceof C0DChunk)       for (int row=0; row < chk.len(); row++)       for (int col=0; col < ncs.length; col++)       ncs[col].addNA();
 else {
        BufferedString tmpStr=new BufferedString();
        for (int row=0; row < chk._len; ++row) {
          int col=0;
          if (!chk.isNA(row)) {
            String[] ss=chk.atStr(tmpStr,row).toString().split(splitRegEx);
            for (            String s : ss)             ncs[col++].addStr(s);
          }
          if (col < ncs.length)           for (; col < ncs.length; col++)           ncs[col].addNA();
        }
      }
    }
  }
.doAll(newColCnt,Vec.T_STR,new Frame(vec)).outputFrame().vecs();
}
