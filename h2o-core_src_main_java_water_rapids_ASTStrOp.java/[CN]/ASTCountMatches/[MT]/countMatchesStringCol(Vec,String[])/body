{
  final String[] pattern=pat;
  return new MRTask(){
    @Override public void map(    Chunk chk,    NewChunk newChk){
      if (chk instanceof C0DChunk)       for (int i=0; i < chk.len(); i++)       newChk.addNA();
 else {
        BufferedString tmpStr=new BufferedString();
        for (int i=0; i < chk._len; ++i) {
          if (chk.isNA(i))           newChk.addNA();
 else {
            int cnt=0;
            for (            String aPattern : pattern)             cnt+=StringUtils.countMatches(chk.atStr(tmpStr,i).toString(),aPattern);
            newChk.addNum(cnt,0);
          }
        }
      }
    }
  }
.doAll(Vec.T_NUM,new Frame(vec)).outputFrame().anyVec();
}
