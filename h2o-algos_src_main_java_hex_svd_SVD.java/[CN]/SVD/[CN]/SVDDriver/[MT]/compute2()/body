{
  SVDModel model=null;
  DataInfo dinfo=null;
  try {
    _parms.read_lock_frames(SVD.this);
    init(true);
    if (error_count() > 0)     throw new IllegalArgumentException("Found validation errors: " + validationErrors());
    model=new SVDModel(dest(),_parms,new SVDModel.SVDOutput(SVD.this));
    model.delete_and_lock(_key);
    _train.read_lock(_key);
    dinfo=new DataInfo(Key.make(),_train,null,0,false,_parms._transform,DataInfo.TransformType.NONE,true);
    DKV.put(dinfo._key,dinfo);
    model._output._normSub=dinfo._normSub == null ? new double[_train.numCols()] : Arrays.copyOf(dinfo._normSub,_train.numCols());
    if (dinfo._normMul == null) {
      model._output._normMul=new double[_train.numCols()];
      Arrays.fill(model._output._normMul,1.0);
    }
 else     model._output._normMul=Arrays.copyOf(dinfo._normMul,_train.numCols());
    GramTask tsk=new GramTask(self(),dinfo).doAll(dinfo._adaptedFrame);
    double[][] gram=tsk._gram.getXX();
    double[][] rsvec=new double[_parms._k][gram.length];
    double[] sigma=new double[_parms._k];
    double[][] ivv_sum=new double[gram.length][gram.length];
    for (int i=0; i < gram.length; i++)     ivv_sum[i][i]=1;
    double[][] gram_update=gram.clone();
    for (int k=0; k < _parms._k; k++) {
      rsvec[k]=powerLoop(gram_update,_parms._seed);
      double[] ivv_vk=ArrayUtils.multArrVec(ivv_sum,rsvec[k]);
      sigma[k]=new MultBArrSVec(self(),dinfo,ivv_vk).doAll(dinfo._adaptedFrame)._sval;
      double[][] vv=ArrayUtils.outerProduct(rsvec[k],rsvec[k]);
      for (int i=0; i < vv.length; i++) {
        for (int j=0; j < i; j++) {
          double diff=ivv_sum[i][j] - vv[i][j];
          ivv_sum[i][j]=ivv_sum[j][i]=diff;
        }
        ivv_sum[i][i]-=vv[i][i];
      }
      double[][] lmat=ArrayUtils.multArrArr(ivv_sum,gram);
      gram_update=ArrayUtils.multArrArr(lmat,ivv_sum);
    }
    model._output._v=ArrayUtils.transpose(rsvec);
    model._output._singular_vals=sigma;
    done();
  }
 catch (  Throwable t) {
    Job thisJob=DKV.getGet(_key);
    if (thisJob._state == JobState.CANCELLED) {
      Log.info("Job cancelled by user.");
    }
 else {
      t.printStackTrace();
      failed(t);
      throw t;
    }
  }
 finally {
    if (model != null)     model.unlock(_key);
    if (dinfo != null)     dinfo.remove();
    _parms.read_unlock_frames(SVD.this);
  }
  tryComplete();
}
