{
  DataInfo yinfo=null;
  Frame yqfrm=null;
  try {
    update(1,"Initializing random subspace of training data Y");
    double[][] gt=ArrayUtils.gaussianArray(_parms._nv,_ncolExp,seed);
    RandSubInit rtsk=new RandSubInit(self(),dinfo,gt);
    rtsk.doAll(_parms._nv,dinfo._adaptedFrame);
    yqfrm=rtsk.outputFrame(Key.make(),null,null);
    Frame aqfrm=new Frame(dinfo._adaptedFrame);
    aqfrm.add(yqfrm);
    update(1,"Computing QR factorization of Y");
    yinfo=new DataInfo(Key.make(),yqfrm,null,true,DataInfo.TransformType.NONE,true,false,false);
    DKV.put(yinfo._key,yinfo);
    LinearAlgebraUtils.computeQInPlace(self(),yinfo);
    int iters=0;
    while (iters < max_iterations) {
      update(1,"Iteration " + String.valueOf(iters + 1) + " of randomized subspace iteration");
      SMulTask stsk=new SMulTask(dinfo,_parms._nv);
      stsk.doAll(aqfrm);
      Matrix ysmall=new Matrix(stsk._atq);
      QRDecomposition ysmall_qr=new QRDecomposition(ysmall);
      double[][] qtilde=ysmall_qr.getQ().getArray();
      BMulInPlaceTask tsk=new BMulInPlaceTask(dinfo,ArrayUtils.transpose(qtilde));
      tsk.doAll(aqfrm);
      LinearAlgebraUtils.computeQInPlace(self(),yinfo);
      iters++;
    }
  }
 catch (  Throwable t) {
    Job thisJob=DKV.getGet(_key);
    if (thisJob._state == JobState.CANCELLED) {
      Log.info("Job cancelled by user.");
    }
 else {
      t.printStackTrace();
      failed(t);
      throw t;
    }
  }
 finally {
    if (yinfo != null)     yinfo.remove();
  }
  return yqfrm;
}
