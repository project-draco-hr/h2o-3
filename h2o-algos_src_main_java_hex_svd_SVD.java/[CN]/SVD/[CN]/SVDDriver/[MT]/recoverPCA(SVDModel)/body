{
  String[] colTypes=new String[_parms._nv];
  String[] colFormats=new String[_parms._nv];
  String[] colHeaders=new String[_parms._nv];
  Arrays.fill(colTypes,"double");
  Arrays.fill(colFormats,"%5f");
  for (int i=0; i < colHeaders.length; i++)   colHeaders[i]="PC" + String.valueOf(i + 1);
  model._output._eigenvectors=new TwoDimTable("Rotation",null,_train.names(),colHeaders,colTypes,colFormats,"",new String[_train.numCols()][],model._output._v);
  if (!_parms._only_v) {
    double[] sdev=new double[model._output._d.length];
    double[] vars=new double[model._output._d.length];
    double totVar=0;
    double dfcorr=1.0 / Math.sqrt(_train.numRows() - 1.0);
    for (int i=0; i < sdev.length; i++) {
      sdev[i]=dfcorr * model._output._d[i];
      vars[i]=sdev[i] * sdev[i];
      totVar+=vars[i];
    }
    model._output._std_deviation=sdev;
    double[] prop_var=new double[vars.length];
    double[] cum_var=new double[vars.length];
    for (int i=0; i < vars.length; i++) {
      prop_var[i]=vars[i] / totVar;
      cum_var[i]=i == 0 ? prop_var[0] : cum_var[i - 1] + prop_var[i];
    }
    model._output._pc_importance=new TwoDimTable("Importance of components",null,new String[]{"Standard deviation","Proportion of Variance","Cumulative Proportion"},colHeaders,colTypes,colFormats,"",new String[3][],new double[][]{sdev,prop_var,cum_var});
  }
}
