def glm_doit(self, csvFilename, bucket, csvPathname, timeoutSecs=30):
    print '\nStarting GLM of', csvFilename
    columnTypeDict = {10: 'Enum', }
    parseResult = h2i.import_parse(bucket=bucket, path=csvPathname, columnTypeDict=columnTypeDict, hex_key=(csvFilename + '.hex'), schema='put', timeoutSecs=30)
    pA = h2o_cmd.ParseObj(parseResult)
    iA = h2o_cmd.InspectObj(pA.parse_key)
    parse_key = pA.parse_key
    numRows = iA.numRows
    numCols = iA.numCols
    labelList = iA.labelList
    for i in range(10):
        print 'Summary on column', i
        co = h2o_cmd.runSummary(key=parse_key, column=i)
        for (k, v) in co:
            print k, v
    expected = []
    allowedDelta = 0
    labelListUsed = list(labelList)
    labelListUsed.remove('C11')
    numColsUsed = (numCols - 1)
    parameters = {'validation_frame': parse_key, 'ignored_columns': None, 'response_column': 'C11', 'do_classification': True, 'balance_classes': False, 'max_after_balance_size': None, 'standardize': False, 'family': 'binomial', 'link': None, 'tweedie_variance_power': None, 'tweedie_link_power': None, 'alpha': '[1e-4]', 'lambda': '[0.5,0.25, 0.1]', 'prior1': None, 'lambda_search': None, 'nlambdas': None, 'lambda_min_ratio': None, 'use_all_factor_levels': False, 'n_folds': 1, }
    start = time.time()
    model_key = 'hastie_glm.hex'
    bmResult = h2o.n0.build_model(algo='glm', destination_key=model_key, training_frame=parse_key, parameters=parameters, timeoutSecs=60)
    bm = OutputObj(bmResult, 'bm')
    modelResult = h2o.n0.models(key=model_key)
    model = OutputObj(modelResult['models'][0]['output'], 'model')
    h2o_glm.simpleCheckGLM(self, model, parameters, labelList, labelListUsed)
    cmmResult = h2o.n0.compute_model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
    cmm = OutputObj(cmmResult, 'cmm')
    mmResult = h2o.n0.model_metrics(model=model_key, frame=parse_key, timeoutSecs=60)
    mm = OutputObj(mmResult, 'mm')
    prResult = h2o.n0.predict(model=model_key, frame=parse_key, timeoutSecs=60)
    pr = OutputObj(prResult['model_metrics'][0]['predictions'], 'pr')
    if self.validation1:
        h2o_glm.compareToFirstGlm(self, 'auc', validation, self.validation1)
    else:
        self.validation1 = copy.deepcopy(validation)
