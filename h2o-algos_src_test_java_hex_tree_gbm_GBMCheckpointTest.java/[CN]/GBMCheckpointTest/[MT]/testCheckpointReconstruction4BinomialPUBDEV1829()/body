{
  Frame tr=parse_test_file("smalldata/jira/gbm_checkpoint_train.csv");
  Frame val=parse_test_file("smalldata/jira/gbm_checkpoint_valid.csv");
  Vec old=null;
  tr.remove("name").remove();
  tr.remove("economy").remove();
  val.remove("name").remove();
  val.remove("economy").remove();
  old=tr.remove("economy_20mpg");
  tr.add("economy_20mpg",old);
  DKV.put(tr);
  old=val.remove("economy_20mpg");
  val.add("economy_20mpg",old);
  DKV.put(val);
  GBMModel model=null;
  GBMModel modelFromCheckpoint=null;
  GBMModel modelFinal=null;
  try {
    GBMModel.GBMParameters gbmParams=new GBMModel.GBMParameters();
    gbmParams._model_id=Key.make("Initial model");
    gbmParams._train=tr._key;
    gbmParams._valid=val._key;
    gbmParams._response_column="economy_20mpg";
    gbmParams._ntrees=5;
    gbmParams._max_depth=5;
    gbmParams._min_rows=10;
    gbmParams._score_each_iteration=true;
    gbmParams._seed=42;
    model=new GBM(gbmParams).trainModel().get();
    GBMModel.GBMParameters gbmFromCheckpointParams=new GBMModel.GBMParameters();
    gbmFromCheckpointParams._model_id=Key.make("Model from checkpoint");
    gbmFromCheckpointParams._train=tr._key;
    gbmFromCheckpointParams._valid=val._key;
    gbmFromCheckpointParams._response_column="economy_20mpg";
    gbmFromCheckpointParams._ntrees=10;
    gbmFromCheckpointParams._checkpoint=model._key;
    gbmFromCheckpointParams._score_each_iteration=true;
    gbmFromCheckpointParams._max_depth=5;
    gbmFromCheckpointParams._min_rows=10;
    gbmFromCheckpointParams._seed=42;
    modelFromCheckpoint=new GBM(gbmFromCheckpointParams).trainModel().get();
    GBMModel.GBMParameters gbmFinalParams=new GBMModel.GBMParameters();
    gbmFinalParams._model_id=Key.make("Validation model");
    gbmFinalParams._train=tr._key;
    gbmFinalParams._valid=val._key;
    gbmFinalParams._response_column="economy_20mpg";
    gbmFinalParams._ntrees=10;
    gbmFinalParams._score_each_iteration=true;
    gbmFinalParams._max_depth=5;
    gbmFinalParams._min_rows=10;
    gbmFinalParams._seed=42;
    modelFinal=new GBM(gbmFinalParams).trainModel().get();
    CompressedTree[][] treesFromCheckpoint=getTrees(modelFromCheckpoint);
    CompressedTree[][] treesFromFinalModel=getTrees(modelFinal);
    assertTreeEquals("The model created from checkpoint and corresponding model created from scratch should have the same trees!",treesFromCheckpoint,treesFromFinalModel,true);
  }
  finally {
    if (tr != null)     tr.delete();
    if (val != null)     val.delete();
    if (old != null)     old.remove();
    if (model != null)     model.delete();
    if (modelFromCheckpoint != null)     modelFromCheckpoint.delete();
    if (modelFinal != null)     modelFinal.delete();
  }
}
