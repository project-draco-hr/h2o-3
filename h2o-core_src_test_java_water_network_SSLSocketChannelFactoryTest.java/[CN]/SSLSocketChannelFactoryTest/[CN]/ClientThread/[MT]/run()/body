{
  try {
    barrier.await();
    SocketChannel sock=SocketChannel.open();
    sock.socket().setReuseAddress(true);
    sock.socket().setSendBufferSize(64 * 1024);
    InetSocketAddress isa=new InetSocketAddress("127.0.0.1",port);
    sock.connect(isa);
    sock.configureBlocking(true);
    sock.socket().setTcpNoDelay(true);
    SSLSocketChannel wrappedChannel=(SSLSocketChannel)factory.wrapClientChannel(sock,"127.0.0.1",port);
    ByteBuffer write=ByteBuffer.allocate(1024);
    write.put("hello, world".getBytes(StandardCharsets.UTF_8));
    write.flip();
    wrappedChannel.write(write);
    testOne.await();
    ByteBuffer toWriteBig=ByteBuffer.allocate(64 * 1024);
    for (int i=0; i < 5; i++) {
      toWriteBig.clear();
      while (toWriteBig.hasRemaining()) {
        toWriteBig.put(("hello, world" + ((i * 64 * 1024 + toWriteBig.position()) % 9) + "!!!").getBytes(StandardCharsets.UTF_8));
      }
      toWriteBig.flip();
      wrappedChannel.write(toWriteBig);
    }
    testTwo.await();
    write.clear();
    write.put("hello, world".getBytes(StandardCharsets.UTF_8));
    write.flip();
    sock.write(write);
    testThree.await();
    write.clear();
    write.put("hello, world".getBytes(StandardCharsets.UTF_8));
    write.flip();
    wrappedChannel.write(write);
  }
 catch (  IOException|InterruptedException|BrokenBarrierException e) {
    e.printStackTrace();
  }
 finally {
    try {
      barrier.await();
    }
 catch (    InterruptedException|BrokenBarrierException e) {
      e.printStackTrace();
    }
  }
}
