def test_build_for_clone(self):
    elapsed = (time.time() - beginning)
    print ('\n%0.2f seconds to get here from start' % elapsed)
    maxTime = (4 * 3600)
    totalTime = 0
    incrTime = 60
    h2p.purple_print('\nSleeping for total of', ((maxTime + 0.0) / 3600), 'hours.')
    print 'Will check h2o logs every', incrTime, 'seconds'
    print 'Should be able to run another test using h2o-nodes.json to clone cloud'
    print 'i.e. h2o.build_cloud_with_json()'
    print "Bad test if a running test shuts down the cloud. I'm supposed to!\n"
    h2p.green_print('To watch cloud in browser follow address:')
    h2p.green_print('   http://{0}:{1}/Cloud.html'.format(h2o.nodes[0].http_addr, h2o.nodes[0].port))
    h2p.blue_print('You can start a test (or tests) now!')
    h2p.blue_print(('Will Check cloud status every %s secs and kill cloud if wrong or no answer' % incrTime))
    if CHECK_WHILE_SLEEPING:
        h2p.blue_print(('Will also look at redirected stdout/stderr logs in sandbox every %s secs' % incrTime))
    h2p.red_print('No checking of logs while sleeping, or check of cloud status')
    h2p.yellow_print("So if H2O stack traces, it's up to you to kill me if 4 hours is too long")
    h2p.yellow_print('ctrl-c will cause all jvms to die(thru psutil terminate, paramiko channel death or h2o shutdown...')
    while (totalTime < maxTime):
        time.sleep(incrTime)
        totalTime += incrTime
        if CHECK_WHILE_SLEEPING:
            print 'Checking sandbox log files'
            h2o.check_sandbox_for_errors(cloudShutdownIsError=True)
        else:
            print str(datetime.datetime.now()), h2o.python_cmd_line, 'still here', totalTime, maxTime, incrTime
    if (1 == 0):
        print 'Shutting down cloud, but first delete all keys'
        start = time.time()
        h2i.delete_keys_at_all_nodes()
        elapsed = (time.time() - start)
        print 'delete_keys_at_all_nodes(): took', elapsed, 'secs'
