{
  Model model1=DKV.getGet(key1);
  Model model2=DKV.getGet(key2);
  if (null == model1 || null == model2)   throw new H2OIllegalArgumentException("Tried to compare a Model against null: " + model1 + " and "+ model2);
  ModelMetrics m1=model1._output._validation_metrics;
  ModelMetrics m2=model2._output._validation_metrics;
  if (null == m1 ^ null == m2)   throw new H2OIllegalArgumentException("Tried to compare two ModelMetrics objects, only one of which had a validation set: " + m1 + " and "+ m2);
  if (null == m1 && null == m2) {
    m1=model1._output._training_metrics;
    m2=model2._output._training_metrics;
  }
  if (m1.getClass() != m2.getClass())   throw new H2OIllegalArgumentException("Tried to compare two ModelMetrics objects of different types: " + m1 + " and "+ m2);
  if (null == criterion) {
    ConfusionMatrix cm=m1.cm();
    try {
      criterion=m1.getClass().getMethod(_sort_by);
    }
 catch (    Exception e) {
    }
    if (null == criterion && null != cm) {
      try {
        criterion=cm.getClass().getMethod(_sort_by);
      }
 catch (      Exception e) {
      }
    }
  }
  if (null == criterion)   throw new H2OIllegalArgumentException("Failed to find ModelMetrics criterion: " + _sort_by);
  double c1, c2;
  try {
    c1=(double)criterion.invoke(m1);
  }
 catch (  Exception e) {
    throw new H2OIllegalArgumentException("Failed to get metric: " + _sort_by + " from ModelMetrics object: "+ m1,"Failed to get metric: " + _sort_by + " from ModelMetrics object: "+ m1+ ", criterion: "+ criterion+ ", exception: "+ e);
  }
  try {
    c2=(double)criterion.invoke(m2);
  }
 catch (  Exception e) {
    throw new H2OIllegalArgumentException("Failed to get metric: " + _sort_by + " from ModelMetrics object: "+ m2,"Failed to get metric: " + _sort_by + " from ModelMetrics object: "+ m2+ ", criterion: "+ criterion+ ", exception: "+ e);
  }
  if (descending) {
    return (c2 - c1 > 0 ? 1 : -1);
  }
 else {
    return (c1 - c2 > 0 ? 1 : -1);
  }
}
