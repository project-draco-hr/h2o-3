{
  String[] lines=getFirstLines(bits);
  if (lines.length == 0)   throw new H2OParseException("No data!");
  String[] labels;
  final String[][] data=new String[lines.length][];
  if (lines.length == 1) {
    if (sep == GUESS_SEP) {
      if (lines[0].split(",").length > 1)       sep=(byte)',';
 else       if (lines[0].split(" ").length > 1)       sep=' ';
 else {
        data[0]=new String[]{lines[0]};
        byte[] ctypes=new byte[1];
        String[][] domains=new String[1][];
        if (NumberUtils.isNumber(data[0][0])) {
          ctypes[0]=Vec.T_NUM;
        }
 else {
          BufferedString str=new BufferedString(data[0][0]);
          if (ParseTime.isTime(str))           ctypes[0]=Vec.T_TIME;
 else           if (ParseUUID.isUUID(str))           ctypes[0]=Vec.T_UUID;
 else {
            ctypes[0]=Vec.T_CAT;
            domains[0]=new String[]{data[0][0]};
          }
        }
        return new ParseSetup(ParserType.CSV,GUESS_SEP,singleQuotes,checkHeader,1,null,ctypes,domains,naStrings,data,FileVec.DFLT_CHUNK_SIZE);
      }
    }
    data[0]=determineTokens(lines[0],sep,singleQuotes);
    ncols=(ncols > 0) ? ncols : data[0].length;
    if (checkHeader == GUESS_HEADER) {
      if (ParseSetup.allStrings(data[0]) && !data[0][0].isEmpty()) {
        labels=data[0];
        checkHeader=HAS_HEADER;
      }
 else {
        labels=null;
        checkHeader=NO_HEADER;
      }
    }
 else     if (checkHeader == HAS_HEADER)     labels=data[0];
 else     labels=null;
  }
 else {
    if (sep == GUESS_SEP) {
      sep=guessSeparator(lines[0],lines[1],singleQuotes);
      if (sep == GUESS_SEP && lines.length > 2) {
        sep=guessSeparator(lines[1],lines[2],singleQuotes);
        if (sep == GUESS_SEP)         sep=guessSeparator(lines[0],lines[2],singleQuotes);
      }
      if (sep == GUESS_SEP)       sep=(byte)' ';
    }
    for (int i=0; i < lines.length; ++i)     data[i]=determineTokens(lines[i],sep,singleQuotes);
    ncols=guessNcols(columnNames,data);
    if (checkHeader == HAS_HEADER || (checkHeader == GUESS_HEADER && ParseSetup.hasHeader(data[0],data[1]))) {
      checkHeader=HAS_HEADER;
      labels=data[0];
    }
 else {
      checkHeader=NO_HEADER;
      labels=columnNames;
    }
    if (columnNames != null && labels != null) {
      if (labels.length != columnNames.length)       throw new H2OParseException("Already have " + columnNames.length + " column labels, but found "+ labels.length+ " in this file");
 else {
        for (int i=0; i < labels.length; ++i)         if (!labels[i].equalsIgnoreCase(columnNames[i])) {
          throw new H2OParseException("Column " + (i + 1) + " label '"+ labels[i]+ "' does not match '"+ columnNames[i]+ "'");
        }
        labels=columnNames;
      }
    }
  }
  ParseSetup resSetup=new ParseSetup(ParserType.CSV,sep,singleQuotes,checkHeader,ncols,labels,null,null,naStrings,data);
  if (columnTypes == null || ncols != columnTypes.length) {
    InputStream is=new ByteArrayInputStream(bits);
    CsvParser p=new CsvParser(resSetup,null);
    PreviewParseWriter dout=new PreviewParseWriter(resSetup._number_columns);
    try {
      p.streamParse(is,dout);
      resSetup._column_previews=dout;
    }
 catch (    Throwable e) {
      throw new RuntimeException(e);
    }
  }
 else {
    for (int i=0; i < columnTypes.length; i++)     if (columnTypes[i] == Vec.T_BAD)     columnTypes[i]=Vec.T_NUM;
    resSetup._column_types=columnTypes;
    resSetup._na_strings=null;
  }
  return resSetup;
}
