{
  _createFrame=createFrame;
  int[] idx=_createFrame.has_response ? ArrayUtils.seq(1,_createFrame.cols + 1) : ArrayUtils.seq(0,_createFrame.cols);
  int[] shuffled_idx=new int[idx.length];
  ArrayUtils.shuffleArray(idx,idx.length,shuffled_idx,_createFrame.seed_for_column_types,0);
  int catcols=(int)(_createFrame.categorical_fraction * _createFrame.cols);
  int intcols=(int)(_createFrame.integer_fraction * _createFrame.cols);
  int bincols=(int)(_createFrame.binary_fraction * _createFrame.cols);
  int timecols=(int)(_createFrame.time_fraction * _createFrame.cols);
  int stringcols=(int)(_createFrame.string_fraction * _createFrame.cols);
  int realcols=_createFrame.cols - catcols - intcols- bincols- timecols- stringcols;
  assert(catcols >= 0);
  assert(intcols >= 0);
  assert(bincols >= 0);
  assert(realcols >= 0);
  assert(timecols >= 0);
  assert(stringcols >= 0);
  _cat_cols=Arrays.copyOfRange(shuffled_idx,0,catcols);
  _int_cols=Arrays.copyOfRange(shuffled_idx,catcols,catcols + intcols);
  _real_cols=Arrays.copyOfRange(shuffled_idx,catcols + intcols,catcols + intcols + realcols);
  _bin_cols=Arrays.copyOfRange(shuffled_idx,catcols + intcols + realcols,catcols + intcols + realcols+ bincols);
  _time_cols=Arrays.copyOfRange(shuffled_idx,catcols + intcols + realcols+ bincols,catcols + intcols + realcols+ bincols+ timecols);
  _string_cols=Arrays.copyOfRange(shuffled_idx,catcols + intcols + realcols+ bincols+ timecols,catcols + intcols + realcols+ bincols+ timecols+ stringcols);
  _domain=new String[_createFrame.cols + (_createFrame.has_response ? 1 : 0)][];
  if (createFrame.randomize) {
    if (_createFrame.has_response) {
      assert(_createFrame.response_factors >= 1);
      _domain[0]=_createFrame.response_factors == 1 ? null : new String[_createFrame.response_factors];
      if (_domain[0] != null) {
        for (int i=0; i < _domain[0].length; ++i) {
          _domain[0][i]=Integer.toString(i);
        }
      }
    }
    for (    int c : _cat_cols) {
      _domain[c]=new String[_createFrame.factors];
      for (int i=0; i < _createFrame.factors; ++i) {
        _domain[c][i]=UUID.randomUUID().toString().subSequence(0,5).toString();
        while (_domain[c][i].matches("^\\d+$") || _domain[c][i].matches("^\\d+e\\d+$")) {
          _domain[c][i]=UUID.randomUUID().toString().subSequence(0,5).toString();
        }
      }
    }
  }
  final int rows_per_chunk=FileVec.calcOptimalChunkSize((int)((float)(catcols + intcols) * _createFrame.rows * 4 + (float)bincols * _createFrame.rows * 1* _createFrame.binary_ones_fraction + (float)(realcols + timecols + stringcols) * _createFrame.rows * 8),_createFrame.cols,_createFrame.cols * 4,Runtime.getRuntime().availableProcessors(),H2O.getCloudSize(),false);
  _v=makeCon(_createFrame.value,_createFrame.rows,(int)Math.ceil(Math.log1p(rows_per_chunk)),false);
}
