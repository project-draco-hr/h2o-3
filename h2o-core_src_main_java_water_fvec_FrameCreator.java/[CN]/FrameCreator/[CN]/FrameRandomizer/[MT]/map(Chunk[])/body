{
  if (!_createFrame.randomize)   return;
  final Random rng=new Random();
  for (int r=0; r < cs[0]._len; r++) {
    setSeed(rng,0,cs[0]._start + r);
    if (_createFrame.response_factors > 1)     cs[0].set(r,(int)(rng.nextDouble() * _createFrame.response_factors));
 else     if (_createFrame.positive_response)     cs[0].set(r,_createFrame.real_range * rng.nextDouble());
 else     cs[0].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()));
  }
  for (  int c : _cat_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,(int)(rng.nextDouble() * _createFrame.factors));
    }
  }
  for (  int c : _int_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,(long)((_createFrame.integer_range + 1) * (1 - 2 * rng.nextDouble())));
    }
  }
  for (  int c : _real_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()));
    }
  }
  for (  int c : _bin_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,rng.nextFloat() > _createFrame.binary_ones_fraction ? 0 : 1);
    }
  }
  _createFrame.update(1);
}
