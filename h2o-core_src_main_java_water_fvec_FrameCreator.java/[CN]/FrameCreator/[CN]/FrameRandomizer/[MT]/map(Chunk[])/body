{
  Job<Frame> job=_createFrame._job;
  if (job.stop_requested())   return;
  if (!_createFrame.randomize)   return;
  final Random rng=RandomUtils.getRNG(new Random().nextLong());
  if (_createFrame.has_response) {
    for (int r=0; r < cs[0]._len; r++) {
      setSeed(rng,0,cs[0]._start + r);
      if (_createFrame.response_factors > 1)       cs[0].set(r,(int)(rng.nextDouble() * _createFrame.response_factors));
 else       if (_createFrame.positive_response)       cs[0].set(r,_createFrame.real_range * rng.nextDouble());
 else       cs[0].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()));
    }
  }
  job.update(1);
  for (  int c : _cat_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,(int)(rng.nextDouble() * _createFrame.factors));
    }
  }
  job.update(1);
  for (  int c : _int_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,-_createFrame.integer_range + (long)(rng.nextDouble() * (2 * _createFrame.integer_range + 1)));
    }
  }
  job.update(1);
  for (  int c : _real_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,_createFrame.real_range * (1 - 2 * rng.nextDouble()));
    }
  }
  job.update(1);
  for (  int c : _bin_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,rng.nextFloat() > _createFrame.binary_ones_fraction ? 0 : 1);
    }
  }
  job.update(1);
  for (  int c : _time_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,Math.abs(rng.nextLong() % (50L * 365 * 24* 3600* 1000)));
    }
  }
  job.update(1);
  for (  int c : _string_cols) {
    for (int r=0; r < cs[c]._len; r++) {
      setSeed(rng,c,cs[c]._start + r);
      cs[c].set(r,UUID.randomUUID().toString().substring(0,8));
    }
  }
  job.update(1);
}
