def test_parse_multi_header_single(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    csvFilename = 'syn_ints.csv'
    csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
    headerData = 'ID,CAPSULE,AGE,RACE,DPROS,DCAPS,PSA,VOL,GLEASON,output'
    tryList = [(57, 300, 9, 'cA', 60, 0), (57, 300, 9, 'cB', 60, 1), (57, 300, 9, 'cC', 60, 2), (57, 300, 9, 'cD', 60, 3)]
    trial = 0
    for (fileNum, rowCount, colCount, hex_key, timeoutSecs, dataRowsWithHeader) in tryList:
        trial += 1
        print 'Wait while', fileNum, 'synthetic files are created in', SYNDATASETS_DIR
        rowxcol = ((str(rowCount) + 'x') + str(colCount))
        totalCols = (colCount + 1)
        totalDataRows = 0
        for fileN in range(fileNum):
            csvFilename = (((((('syn_' + str(fileN)) + '_') + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            rList = rand_rowData(colCount)
            dataRowsDone = write_syn_dataset(csvPathname, rowCount, headerData=None, rList=rList)
            totalDataRows += dataRowsDone
        if HEADER:
            csvFilename = (((('syn_header_' + str(SEED)) + '_') + rowxcol) + '.csv')
            csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
            dataRowsDone = write_syn_dataset(csvPathname, dataRowsWithHeader, headerData, rList)
            totalDataRows += dataRowsDone
        src_key = ('syn_' + str(trial))
        hex_key = (('syn_' + str(trial)) + '.hex')
        fileList = os.listdir(SYNDATASETS_DIR)
        for f in fileList:
            h2i.import_only(path=((SYNDATASETS_DIR + '/') + f), schema='put', noPrint=True)
            print f
        frames = h2o.n0.frames()['frames']
        frames_dict = h2o_util.list_to_dict(frames, 'key/name')
        if HEADER:
            header = h2i.find_key('syn_header')
            if (not header):
                raise Exception("Didn't find syn_header* key in the import")
        print ('Header Key = ' + header)
        start = time.time()
        parseResult = h2i.parse_only(pattern=(('*' + rowxcol) + '*'), hex_key=hex_key, timeoutSecs=timeoutSecs, checkHeader='1')
        pA = h2o_cmd.ParseObj(parseResult, expectedNumRows=totalDataRows, expectedNumCols=totalCols)
        print pA.numRows
        print pA.numCols
        print pA.parse_key
        expectedLabelList = headerData.split(',')
        iA = h2o_cmd.InspectObj(pA.parse_key, expectedNumRows=totalDataRows, expectedNumCols=totalCols, expectedMissinglist=[], expectedLabelList=expectedLabelList)
        if DO_RF:
            if HEADER:
                kwargs = {'sample_rate': 0.75, 'max_depth': 25, 'ntrees': 1, 'ignored_cols_by_name': 'ID,CAPSULE', }
            else:
                kwargs = {'sample_rate': 0.75, 'max_depth': 25, 'ntrees': 1, }
            rfv = h2o_cmd.runRF(parseResult=parseResult, timeoutSecs=timeoutSecs, **kwargs)
        h2o.check_sandbox_for_errors()
