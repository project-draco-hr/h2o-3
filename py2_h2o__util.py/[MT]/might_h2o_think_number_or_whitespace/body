def might_h2o_think_number_or_whitespace(token):
    specialRegex = re.compile('\n        \\s*\n        [\\$+-]? # single chars that might be considered numbers. alow spaces in between\n        \\s*$ \n        ', re.VERBOSE)
    number1Regex = re.compile("\n        [\\s\\$\\%]*     # begin, white space or empty space. any number of leading % or $ too\n        [+-]?    # plus or minus. maybe h2o matches multiple?\n        ([0-9]*\\.[0-9]*)?  # decimal point focused. optional whole and fractional digits. h2o thinks whole thing optional?\n        ([eE][-+]*[0-9]+)? # optional exponent. A single e matches (incorrectly) apparently repeated +- after the e doesn't matter\n        (\\s*\\[\\% ]*)? # can have zero or more percent. Percent can have a space?\n        [\\s\\$\\%]*$     # white space or empty space, any number of trailing % or $ too. end\n        ", re.VERBOSE)
    number2Regex = re.compile("\n        [\\s\\$\\%]*     # begin, white space or empty space. any number of leading % or $ too\n        [+-]?    # plus or minus. maybe h2o matches multiple?\n        ([0-9]+)? # one or more digits. h2o thinks whole thing optional\n        (\\.[0-9]*)? # optional decimal point and fractional digits\n        ([eE][-+]*[0-9]+)? # optional exponent. a single e matches (incorrectly) apparently repeated +- after the e doesn't matter\n        (\\s*\\[\\% ]*)? # can have zero or more percent. Percent can have a space?\n        [\\s\\$\\%]*$     # white space or empty space, any number of trailing % or $ too. end\n        ", re.VERBOSE)
    nanRegex = re.compile('\n        [\\s\\$\\%]*     # begin, white space or empty space. any number of leading % or $ too\n        [+-]?    # plus or minus\n        [Nn][Aa][Nn]? # nan or na\n        (\\s*\\[\\% ]*)? # can have zero or more percent. Percent can have a space?\n        [\\s\\$\\%]*$     # white space or empty space, any number of trailing % or $ too. end\n        ', re.VERBOSE)
    if (specialRegex.match(token) or number1Regex.match(token) or number2Regex.match(token) or nanRegex.match(token)):
        return True
    else:
        return False
