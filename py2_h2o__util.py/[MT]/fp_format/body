def fp_format(val=None, sel=None, only=None):

    def e0(val):
        return ('%e' % val)

    def e1(val):
        return ('%20e' % val)

    def e2(val):
        return ('%-20e' % val)

    def e3(val):
        return ('%020e' % val)

    def e4(val):
        return ('%+e' % val)

    def e5(val):
        return ('%+20e' % val)

    def e6(val):
        return ('%+-20e' % val)

    def e7(val):
        return ('%+020e' % val)

    def e8(val):
        return ('%.4e' % val)

    def e9(val):
        return ('%20.4e' % val)

    def e10(val):
        return ('%-20.4e' % val)

    def e11(val):
        return ('%020.4e' % val)

    def e12(val):
        return ('%+.4e' % val)

    def e13(val):
        return ('%+20.4e' % val)

    def e14(val):
        return ('%+-20.4e' % val)

    def e15(val):
        return ('%+020.4e' % val)

    def f0(val):
        return ('%f' % val)

    def f1(val):
        return ('%20f' % val)

    def f2(val):
        return ('%-20f' % val)

    def f3(val):
        return ('%020f' % val)

    def f4(val):
        return ('%+f' % val)

    def f5(val):
        return ('%+20f' % val)

    def f6(val):
        return ('%+-20f' % val)

    def f7(val):
        return ('%+020f' % val)

    def f8(val):
        return ('%.4f' % val)

    def f9(val):
        return ('%20.4f' % val)

    def f10(val):
        return ('%-20.4f' % val)

    def f11(val):
        return ('%020.4f' % val)

    def f12(val):
        return ('%+.4f' % val)

    def f13(val):
        return ('%+20.4f' % val)

    def f14(val):
        return ('%+-20.4f' % val)

    def f15(val):
        return ('%+020.4f' % val)

    def g0(val):
        return ('%g' % val)

    def g1(val):
        return ('%20g' % val)

    def g2(val):
        return ('%-20g' % val)

    def g3(val):
        return ('%020g' % val)

    def g4(val):
        return ('%+g' % val)

    def g5(val):
        return ('%+20g' % val)

    def g6(val):
        return ('%+-20g' % val)

    def g7(val):
        return ('%+020g' % val)

    def g8(val):
        return ('%.4g' % val)

    def g9(val):
        return ('%20.4g' % val)

    def g10(val):
        return ('%-20.4g' % val)

    def g11(val):
        return ('%020.4g' % val)

    def g12(val):
        return ('%+.4g' % val)

    def g13(val):
        return ('%+20.4g' % val)

    def g14(val):
        return ('%+-20.4g' % val)

    def g15(val):
        return ('%+020.4g' % val)
    caseList = [e0, e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12, e13, e14, e15, f0, f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, g0, g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12, g13, g14, g15]
    if (not val):
        return len(caseList)
    if sel:
        if ((sel < 0) or (sel >= len(caseList))):
            raise Exception('sel out of range in write_syn_dataset:', sel)
        choice = sel
    else:
        choice = random.randint(0, (len(caseList) - 1))
    SUBGRPS = 3
    SUBGRP_SIZE = (len(caseList) / SUBGRPS)
    assert (math.floor(SUBGRP_SIZE) == SUBGRP_SIZE), 'You got a code problem in h2o_util.fp_format'
    if only:
        choice = (choice % SUBGRPS)
        assert ((choice >= 0) and (choice < SUBGRP_SIZE))
        if (only == 'e'):
            choice += 0
        elif (only == 'f'):
            choice += 16
        elif (only == 'g'):
            choice += 32
        else:
            raise Exception(('Bad param combo of only: %s and sel: % in h2o_util.fp_format()' % (only, sel)))
    f = caseList[choice]
    return f(val)
