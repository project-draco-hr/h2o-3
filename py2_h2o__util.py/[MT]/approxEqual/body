def approxEqual(x, y, *args, **kwargs):
    "approxEqual(float1, float2[, tol=1e-18, rel=1e-7]) -> True|False\n    approxEqual(obj1, obj2[, *args, **kwargs]) -> True|False\n\n    Return True if x and y are approximately equal, otherwise False.\n\n    If x and y are floats, return True if y is within either absolute error\n    tol or relative error rel of x. You can disable either the absolute or\n    relative check by passing None as tol or rel (but not both).\n\n    For any other objects, x and y are checked in that order for a method\n    __approxEqual__, and the result of that is returned as a bool. Any\n    optional arguments are passed to the __approxEqual__ method.\n\n    __approxEqual__ can return NotImplemented to signal that it doesn't know\n    how to perform that specific comparison, in which case the other object is\n    checked instead. If neither object have the method, or both defer by\n    returning NotImplemented, approxEqual falls back on the same numeric\n    comparison used for floats.\n\n    >>> almost_equal(1.2345678, 1.2345677)\n    True\n    >>> almost_equal(1.234, 1.235)\n    False\n\n    "
    if (not (type(x) is type(y) is float)):
        methodname = '__approxEqual__'
        for (a, b) in ((x, y), (y, x)):
            try:
                method = getattr(a, methodname)
            except AttributeError:
                continue
            else:
                result = method(b, *args, **kwargs)
                if (result is NotImplemented):
                    continue
                return bool(result)
    return _float_approxEqual(x, y, *args, **kwargs)
