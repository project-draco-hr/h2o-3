def test7_missing_enum_values_lambda_search(self):
    '\n       Test parameter\n        missing_values_handling="MeanImputation" with mixed predictors (categorical/real value columns).\n        Test parameter missing_values_handling="MeanImputation" with\n        mixed predictors (categorical/real value columns) and setting lambda search to be True.\n        We use the same predictors with missing values from test6.  Next, we encode the categorical columns using\n        true one hot encoding since Lambda-search will be enabled with alpha set to 0.5.  Since the encoding\n        is different in this case from test6, we will build a brand new Sklearn logistic regression model and\n        compare the best H2O model logloss/prediction accuracy with it.\n        '
    print('*******************************************************************************************')
    print('Test7: test the GLM with imputation of missing enum/real values under lambda search.')
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_binomial_result(self.training_data_file_enum_nans, self.test_data_file_enum_nans_true_one_hot, True, True)
    training_data = h2o.import_file(pyunit_utils.locate(self.training_data_file_enum_nans_true_one_hot))
    validation_data = h2o.import_file(pyunit_utils.locate(self.validation_data_file_enum_nans_true_one_hot))
    test_data = h2o.import_file(pyunit_utils.locate(self.test_data_file_enum_nans_true_one_hot))
    for ind in range(self.enum_col):
        training_data[ind] = training_data[ind].asfactor()
        validation_data[ind] = validation_data[ind].asfactor()
        test_data[ind] = test_data[ind].asfactor()
    num_col = training_data.ncol
    y_index = (num_col - 1)
    x_indices = list(range(y_index))
    training_data[y_index] = training_data[y_index].asfactor()
    validation_data[y_index] = validation_data[y_index].asfactor()
    test_data[y_index] = test_data[y_index].asfactor()
    model_h2o_0p5 = H2OGeneralizedLinearEstimator(family=self.family, lambda_search=True, alpha=0.5, lambda_min_ratio=1e-20, missing_values_handling='MeanImputation')
    model_h2o_0p5.train(x=x_indices, y=y_index, training_frame=training_data, validation_frame=validation_data)
    h2o_model_0p5_test_metrics = model_h2o_0p5.model_performance(test_data=test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(model_h2o_0p5, h2o_model_0p5_test_metrics, self.family, '\nTest7 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training dataset ....', '\nComparing logloss from test dataset ....', '\nComparing confusion matrices from training dataset ....', '\nComparing confusion matrices from test dataset ...', '\nComparing accuracy from training dataset ....', '\nComparing accuracy from test dataset ....'], h2o_att_str=['H2O with enum/real values, lamba search and missing values intercept and weights: \n', 'H2O with enum/real values, lamba search and missing values logloss from training dataset: ', 'H2O with enum/real values, lamba search and missing values logloss from test dataset', 'H2O with enum/real values, lamba search and missing values confusion matrix from training dataset: \n', 'H2O with enum/real values, lamba search and missing values confusion matrix from test dataset: \n', 'H2O with enum/real values, lamba search and missing values accuracy from training dataset: ', 'H2O with enum/real values, lamba search and missing values accuracy from test dataset: '], template_att_str=['Sklearn with enum/real values, lamba search and missing values intercept and weights: \n', 'Sklearn with enum/real values, lamba search and missing values logloss from training dataset: ', 'Sklearn with enum/real values, lamba search and missing values logloss from test dataset: ', 'Sklearn with enum/real values, lamba search and missing values confusion matrix from training dataset: \n', 'Sklearn with enum/real values, lamba search and missing values confusion matrix from test dataset: \n', 'Sklearn with enum/real values, lamba search and missing values accuracy from training dataset: ', 'Sklearn with enum/real values, lamba search and missing values accuracy from test dataset: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training dataset differ too much!', 'Logloss from test dataset differ too much!', '', '', 'Accuracies from training dataset differ too much!', 'Accuracies from test dataset differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training dataset are close enough!', 'Logloss from test dataset are close enough!', '', '', 'Accuracies from training dataset are close enough!', 'Accuracies from test dataset are close enough!'], can_be_better_than_template=[False, True, True, False, False, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test7_missing_enum_values_lambda_search', num_test_failed, self.test_failed)
    self.test_num += 1
