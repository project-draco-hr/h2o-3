def test1_glm_no_regularization(self):
    '\n        In this test, a sklearn logistic regression model and a H2O GLM are built for Binomial family with the same\n        random data sets.  We observe the weights, confusion matrices from the two models.  We compare the logloss,\n        prediction accuracy from the two models to determine if H2O GLM model shall pass the test.\n        '
    print('*******************************************************************************************')
    print('Test1: build H2O GLM with Binomial with no regularization.')
    (p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test) = self.sklearn_binomial_result(self.training_data_file, self.test_data_file, False, False)
    self.test1_model = H2OGeneralizedLinearEstimator(family=self.family, Lambda=0)
    self.test1_model.train(x=self.x_indices, y=self.y_index, training_frame=self.training_data)
    self.test1_model_metrics = self.test1_model.model_performance(test_data=self.test_data)
    num_test_failed = self.test_failed
    self.test_failed = pyunit_utils.extract_comparison_attributes_and_print_multinomial(self.test1_model, self.test1_model_metrics, self.family, '\nTest1 Done!', compare_att_str=['\nComparing intercept and weights ....', '\nComparing logloss from training dataset ....', '\nComparing logloss from test dataset ....', '\nComparing confusion matrices from training dataset ....', '\nComparing confusion matrices from test dataset ...', '\nComparing accuracy from training dataset ....', '\nComparing accuracy from test dataset ....'], h2o_att_str=['H2O intercept and weights: \n', 'H2O logloss from training dataset: ', 'H2O logloss from test dataset', 'H2O confusion matrix from training dataset: \n', 'H2O confusion matrix from test dataset: \n', 'H2O accuracy from training dataset: ', 'H2O accuracy from test dataset: '], template_att_str=['Sklearn intercept and weights: \n', 'Sklearn logloss from training dataset: ', 'Sklearn logloss from test dataset: ', 'Sklearn confusion matrix from training dataset: \n', 'Sklearn confusion matrix from test dataset: \n', 'Sklearn accuracy from training dataset: ', 'Sklearn accuracy from test dataset: '], att_str_fail=['Intercept and weights are not equal!', 'Logloss from training dataset differ too much!', 'Logloss from test dataset differ too much!', '', '', 'Accuracies from training dataset differ too much!', 'Accuracies from test dataset differ too much!'], att_str_success=['Intercept and weights are close enough!', 'Logloss from training dataset are close enough!', 'Logloss from test dataset are close enough!', '', '', 'Accuracies from training dataset are close enough!', 'Accuracies from test dataset are close enough!'], can_be_better_than_template=[False, True, True, False, False, True, True], just_print=[True, True, True, True, True, True, False], failed_test_number=self.test_failed, template_params=[p_weights, p_logloss_train, p_cm_train, p_accuracy_training, p_logloss_test, p_cm_test, p_accuracy_test], ignored_eps=self.ignored_eps, allowed_diff=self.allowed_diff)
    self.test_failed_array[self.test_num] += pyunit_utils.show_test_results('test1_glm_no_regularization', num_test_failed, self.test_failed)
    self.test_num += 1
