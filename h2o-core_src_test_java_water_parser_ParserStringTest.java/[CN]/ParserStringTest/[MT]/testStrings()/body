{
  Frame fr=null;
  try {
    fr=parse_test_file("smalldata/junit/string_test.csv");
    int nlines=(int)fr.numRows();
    Assert.assertEquals(65005,nlines);
    Assert.assertEquals(7,fr.numCols());
    Vec[] vecs=fr.vecs();
    Assert.assertTrue(vecs[0].isString());
    Assert.assertTrue(vecs[1].isString());
    Assert.assertTrue(vecs[2].isString());
    Assert.assertTrue(vecs[3].isString());
    Assert.assertTrue(vecs[4].isString());
    Assert.assertTrue(vecs[5].isEnum());
    Assert.assertTrue(vecs[6].isString());
    Assert.assertTrue(65003 <= vecs[0].nzCnt());
    Assert.assertTrue(65002 <= vecs[1].nzCnt());
    Assert.assertTrue(65005 <= vecs[2].nzCnt());
    Assert.assertTrue(65002 <= vecs[3].nzCnt());
    Assert.assertTrue(65003 <= vecs[4].nzCnt());
    Assert.assertTrue(65003 <= vecs[6].nzCnt());
    ValueString vs=new ValueString();
    Assert.assertEquals("A2",vecs[0].atStr(vs,2).toString());
    Assert.assertEquals("B7",vecs[1].atStr(vs,7).toString());
    Assert.assertEquals("'C65001'",vecs[2].atStr(vs,65001).toString());
    Assert.assertEquals("E65004",vecs[4].atStr(vs,65004).toString());
    Assert.assertNull(vecs[6].atStr(vs,65004));
    fr.delete();
  }
  finally {
    if (fr != null)     fr.delete();
  }
}
