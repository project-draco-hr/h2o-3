def _binop(lhs, op, rhs):
    assert_is_type(lhs, str, numeric, H2OFrame)
    assert_is_type(rhs, str, numeric, H2OFrame)
    if (isinstance(lhs, H2OFrame) and isinstance(rhs, H2OFrame)):
        (lrows, lcols) = lhs.shape
        (rrows, rcols) = rhs.shape
        if (lrows == rrows):
            if ((lcols != rcols) and (lcols > 1) and (rcols > 1)):
                raise H2OValueError((u'Attempting to operate on incompatible frames: number of columns must match; got %d columns on the left and %d columns on the right' % (lcols, rcols)))
        elif ((lcols != rcols) or ((lrows > 1) and (rrows > 1))):
            raise H2OValueError((u'Attempting to operate on incompatible frames: number of rows does not match: got %d rows on the left and %d rows on the right' % (lrows, rrows)))
    cache = (lhs._ex._cache if isinstance(lhs, H2OFrame) else rhs._ex._cache)
    return H2OFrame._expr(expr=ExprNode(op, lhs, rhs), cache=cache)
