def __init__(self, python_obj=None, file_path=None, raw_id=None, expr=None):
    '\n    Create a new H2OFrame object by passing a file path or a list of H2OVecs.\n\n    If `remote_fname` is not None, then a REST call will be made to import the\n    data specified at the location `remote_fname`.  This path is relative to the\n    H2O cluster, NOT the local Python process\n\n    If `python_obj` is not None, then an attempt to upload the python object to H2O\n    will be made. A valid python object has type `list`, or `dict`.\n\n    For more information on the structure of the input for the various native python\n    data types ("native" meaning non-H2O), please see the general documentation for\n    this object.\n\n    :param python_obj: A "native" python object - list, dict, tuple.\n    :param remote_fname: A remote path to a data source. Data is cluster-local.\n    :param vecs: A list of H2OVec objects.\n    :param text_key: A raw key resulting from an upload_file.\n    :return: An instance of an H2OFrame object.\n    '
    self._id = H2OFrame.py_tmp_key()
    self._nrows = None
    self._ncols = None
    self._col_names = None
    self._computed = False
    self._ast = None
    if (expr is not None):
        self._ast = expr
    elif (python_obj is not None):
        self._upload_python_object(python_obj)
    elif (file_path is not None):
        self._import_parse(file_path)
    elif raw_id:
        self._handle_text_key(raw_id, None)
    else:
        raise ValueError('H2OFrame instances require a python object, a file path, or a raw import file identifier.')
