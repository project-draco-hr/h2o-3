@staticmethod
def from_python(python_obj, destination_frame=u'', header=((-1), 0, 1), separator=u'', column_names=None, column_types=None, na_strings=None):
    u'Properly handle native python data types. For a discussion of the rules and\n    permissible data types please refer to the main documentation for H2OFrame.\n\n    Parameters\n    ----------\n      python_obj : tuple, list, dict, collections.OrderedDict\n        If a nested list/tuple, then each nested collection is a row.\n\n      destination_frame : str, optional\n        The unique hex key assigned to the imported file. If none is given, a key will\n        automatically be generated.\n\n      header : int, optional\n        -1 means the first line is data, 0 means guess, 1 means first line is header.\n\n      sep : str, optional\n        The field separator character. Values on each line of the file are separated by\n        this character. If sep = "", the parser will automatically detect the separator.\n\n      col_names : list, optional\n        A list of column names for the file.\n\n      col_types : list or dict, optional\n        A list of types or a dictionary of column names to types to specify whether\n        columns should be forced to a certain type upon import parsing. If a list, the\n        types for elements that are None will be guessed. The possible types a column may\n        have are.\n\n      na_strings : list or dict, optional\n        A list of strings, or a list of lists of strings (one list per column), or a\n        dictionary of column names to strings which are to be interpreted as missing values.\n\n    Returns\n    -------\n      A new H2OFrame instance.\n\n    Examples\n    --------\n      >>> l = [[1,2,3,4,5], [99,123,51233,321]]\n      >>> l = H2OFrame(l)\n      >>> l\n    '
    fr = H2OFrame()
    fr._upload_python_object(python_obj, destination_frame, header, separator, column_names, column_types, na_strings)
    return fr
