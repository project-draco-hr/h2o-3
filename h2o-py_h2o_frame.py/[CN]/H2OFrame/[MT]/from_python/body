@staticmethod
def from_python(python_obj, destination_frame='', header=((-1), 0, 1), separator='', column_names=None, column_types=None, na_strings=None):
    '\n    Properly handle native python data types. For a discussion of the rules and\n    permissible data types please refer to the main documentation for H2OFrame.\n\n    Parameters\n    ----------\n      python_obj : tuple, list, dict, collections.OrderedDict\n        If a nested list/tuple, then each nested collection is a column.\n      destination_frame : str, optional\n        The unique hex key assigned to the imported file. If none is given, a key will\n        automatically be generated.\n      header : int, optional\n       -1 means the first line is data, 0 means guess, 1 means first line is header.\n      sep : str, optional\n        The field separator character. Values on each line of the file are separated by\n        this character. If sep = "", the parser will automatically detect the separator.\n      col_names : list, optional\n        A list of column names for the file.\n      col_types : list or dict, optional\n        A list of types or a dictionary of column names to types to specify whether columns\n        should be forced to a certain type upon import parsing. If a list, the types for\n        elements that are None will be guessed. The possible types a column may have are:\n            "unknown" - this will force the column to be parsed as all NA\n            "uuid"    - the values in the column must be true UUID or will be parsed as NA\n            "string"  - force the column to be parsed as a string\n            "numeric" - force the column to be parsed as numeric. H2O will handle the\n                        compression of the numeric data in the optimal manner.\n            "enum"    - force the column to be parsed as a categorical column.\n            "time"    - force the column to be parsed as a time column. H2O will attempt to\n                        parse the following list of date time formats.\n                          date:\n                            "yyyy-MM-dd"\n                            "yyyy MM dd"\n                            "dd-MMM-yy"\n                            "dd MMM yy"\n                          time:\n                            "HH:mm:ss"\n                            "HH:mm:ss:SSS"\n                            "HH:mm:ss:SSSnnnnnn"\n                            "HH.mm.ss"\n                            "HH.mm.ss.SSS"\n                            "HH.mm.ss.SSSnnnnnn"\n                        Times can also contain "AM" or "PM".\n      na_strings : list or dict, optional\n        A list of strings, or a list of lists of strings (one list per column), or a\n        dictionary of column names to strings which are to be interpreted as missing values.\n\n    Returns\n    -------\n    A new H2OFrame instance.\n\n    Examples\n    --------\n      >>> l = [[1,2,3,4,5], [99,123,51233,321]]\n      >>> l = H2OFrame(l)\n      >>> l\n    '
    return H2OFrame()._upload_python_object(python_obj, destination_frame, header, separator, column_names, column_types, na_strings)
