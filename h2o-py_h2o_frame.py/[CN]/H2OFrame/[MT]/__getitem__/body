def __getitem__(self, item):
    '\n    Frame slicing.\n    Supports R-like row and column slicing.\n\n    Examples:\n      fr[0:5,:]          # first 5 rows, all columns\n      fr[fr[0] > 1, :]   # all rows greater than 1 in the first column, all columns\n      fr[[1,5,6]]        # columns 1, 5, and 6\n      fr[0:50, [1,2,3]]  # first 50 rows, columns 1,2, and 3\n\n    :param item: A tuple, a list, a string, or an int.\n                 If a tuple, then this indicates both row and column selection. The tuple\n                 must be exactly length 2.\n                 If a list, then this indicates column selection.\n                 If a int, the this indicates a single column to be retrieved at the index.\n                 If a string, then slice on the column with this name.\n    :return: An H2OFrame.\n    '
    if isinstance(item, (int, str, list, slice)):
        return H2OFrame(expr=ExprNode('cols', self, item))
    elif isinstance(item, H2OFrame):
        return H2OFrame(expr=ExprNode('rows', self, item))
    elif isinstance(item, tuple):
        rows = item[0]
        cols = item[1]
        allrows = False
        allcols = False
        if isinstance(cols, slice):
            allcols = all([(a is None) for a in [cols.start, cols.step, cols.stop]])
        if isinstance(rows, slice):
            allrows = all([(a is None) for a in [rows.start, rows.step, rows.stop]])
        if (allrows and allcols):
            return self
        if allrows:
            return H2OFrame(expr=ExprNode('cols', self, item[1]))
        if allcols:
            return H2OFrame(expr=ExprNode('rows', self, item[0]))
        res = H2OFrame(expr=ExprNode('rows', ExprNode('cols', self, item[1]), item[0]))
        return (res._scalar() if (isinstance(item[0], (str, unicode, int)) and isinstance(item[1], (str, unicode, int))) else res)
