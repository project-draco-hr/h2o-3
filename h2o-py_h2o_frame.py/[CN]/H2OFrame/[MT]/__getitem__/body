def __getitem__(self, i):
    if isinstance(i, int):
        return self._vecs[i]
    if isinstance(i, str):
        return self._find(i)
    if isinstance(i, slice):
        return H2OFrame(vecs=self._vecs[i])
    if isinstance(i, H2OVec):
        self._len_check(i)
        return H2OFrame(vecs=[x.row_select(i) for x in self._vecs])
    if (isinstance(i, list) or (isinstance(i, tuple) and (len(i) != 2))):
        vecs = []
        for it in i:
            if isinstance(it, int):
                vecs.append(self._vecs[it])
            elif isinstance(it, str):
                vecs.append(self._find(it))
            else:
                raise NotImplementedError
        return H2OFrame(vecs=vecs)
    if isinstance(i, tuple):
        j = h2o.frame(self.send_frame())
        fr = j['frames'][0]
        veckeys = [str(v['name']) for v in fr['vec_keys']]
        left = Expr(veckeys)
        rite = Expr((i[0], i[1]))
        return Expr('[', left, rite, length=2)
    raise NotImplementedError(('Slicing by unknown type: ' + str(type(i))))
