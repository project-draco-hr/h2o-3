def _simple_frames_bin_op(self, data, op):
    if (len(self) == 0):
        return self
    if isinstance(data, (H2OVec, H2OFrame)):
        self._len_check(data)
    tmp_key = H2OFrame.py_tmp_key()
    key1 = self.send_frame()
    key2 = None
    if isinstance(data, H2OFrame):
        key2 = data.send_frame()
        arg2 = ('%' + str(key2))
    elif isinstance(data, H2OVec):
        tmp_frame = H2OFrame(vecs=[data])
        key2 = tmp_frame.send_frame()
        arg2 = ('%' + str(key2))
    elif isinstance(data, Expr):
        raise NotImplementedError
    elif isinstance(data, (int, float)):
        arg2 = ('#' + str(data))
    elif isinstance(data, str):
        arg2 = (('"' + data) + '"')
    else:
        raise NotImplementedError
    expr = (('(= !{} ('.format(tmp_key) + op) + ' %{} {}))'.format(key1, arg2))
    h2o.rapids(expr)
    h2o.remove(key1)
    if key2:
        h2o.remove(key2)
    j = h2o.frame(tmp_key)
    fr = j['frames'][0]
    rows = fr['rows']
    veckeys = fr['vec_keys']
    cols = fr['columns']
    colnames = [col['label'] for col in cols]
    return H2OFrame(vecs=H2OVec.new_vecs(zip(colnames, veckeys), rows))
