def set_name(self, col=None, name=None):
    u'\n        Set the name of a column.\n\n        :param col: index or name of the column whose name is to be set; may be skipped for 1-column frames\n        :param name: the new name of the column\n        '
    assert_is_type(col, None, int, str)
    assert_is_type(name, str)
    ncols = self.ncols
    col_index = None
    if is_type(col, int):
        if (not ((- ncols) <= col < ncols)):
            raise H2OValueError((u'Index %d is out of bounds for a frame with %d columns' % (col, ncols)))
        col_index = ((col + ncols) % ncols)
    elif is_type(col, str):
        if (col not in self.names):
            raise H2OValueError((u"Column %s doesn't exist in the frame." % col))
        col_index = self.names.index(col)
    else:
        assert (col is None)
        if (ncols != 1):
            raise H2OValueError((u'The frame has %d columns; please specify which one to rename' % ncols))
        col_index = 0
    if ((name != self.names[col_index]) and (name in self.types)):
        raise H2OValueError((u"Column '%s' already exists in the frame" % name))
    oldname = self.names[col_index]
    old_cache = self._ex._cache
    self._ex = ExprNode(u'colnames=', self, col_index, name)
    self._ex._cache.fill_from(old_cache)
    if (self.names is None):
        self._frame()._ex._cache.fill()
    else:
        self._ex._cache._names = ((self.names[:col] + [name]) + self.names[(col + 1):])
        self._ex._cache._types[name] = self._ex._cache._types.pop(oldname)
    return
