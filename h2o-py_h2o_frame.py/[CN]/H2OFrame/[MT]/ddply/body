def ddply(self, cols, fun):
    "\n    :param cols: Column names used to control grouping\n    :param fun: Function to execute on each group.  Right now limited to textual Rapids expression\n    :return: New frame with 1 row per-group, of results from 'fun'\n    "
    if ((self._vecs is None) or (self._vecs == [])):
        raise ValueError('Frame Removed')
    rapids_series = (('(llist #' + ' #'.join([str(self._find_idx(name)) for name in cols])) + ')')
    key = self.send_frame()
    tmp_key = H2OFrame.py_tmp_key()
    expr = '(= !{} (h2o.ddply %{} {} {}))'.format(tmp_key, key, rapids_series, fun)
    h2o.rapids(expr)
    h2o.delete(key)
    j = h2o.frame(tmp_key)
    fr = j['frames'][0]
    rows = fr['rows']
    veckeys = fr['vec_ids']
    cols = fr['columns']
    colnames = [col['label'] for col in cols]
    vecs = H2OVec.new_vecs(zip(colnames, veckeys), rows)
    h2o.rapids('(removeframe !{})'.format(tmp_key))
    return H2OFrame(vecs=vecs)
