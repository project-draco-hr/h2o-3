def drop(self, index, axis=1):
    u'\n        Drop a single column or row or a set of columns or rows from a H2OFrame.\n        Dropping a column or row is not in-place.\n        Dropping a column or row by index or a set of indexes is zero-based.\n\n        Parameters\n        ----------\n          index : list,str,int\n            A list of column indexes, column names, or row indexes to drop\n            A string to drop a single column by column name\n            An int to drop a single column by index\n\n          axis : int, default = 1\n            Type of drop to conduct.\n            If axis = 1, then column-wise (Default).\n            If axis = 0, then row-wise.\n\n        Returns\n        -------\n          H2OFrame with the respective dropped columns or rows. Returns a new H2OFrame.\n        '
    if (axis == 1):
        if (not isinstance(index, list)):
            if is_type(index, str):
                if (index not in self.names):
                    raise H2OValueError((u'Column(s) selected to drop are not in original frame: %r' % index))
                index = self.names.index(index)
            elif is_type(index, int):
                if (index > self.ncol):
                    raise H2OValueError((u'Column index selected to drop is not part of the frame: %r' % index))
                if (index < 0):
                    raise H2OValueError((u'Column index selected to drop is not positive: %r' % index))
            fr = H2OFrame._expr(expr=ExprNode(u'cols', self, (- (index + 1))), cache=self._ex._cache)
            fr._ex._cache.ncols -= 1
            fr._ex._cache.names = (self.names[:index] + self.names[(index + 1):])
            fr._ex._cache.types = {name: self.types[name] for name in fr._ex._cache.names}
            return fr
        elif isinstance(index, list):
            if is_type(index, [int]):
                if (max(index) > self.ncol):
                    raise H2OValueError((u'Column index selected to drop is not part of the frame: %r' % index))
                if (min(index) < 0):
                    raise H2OValueError((u'Column index selected to drop is not positive: %r' % index))
                for i in range(len(index)):
                    index[i] = (- (index[i] + 1))
            elif is_type(index, [str]):
                if (not set(index).issubset(self.names)):
                    raise H2OValueError((u'Column(s) selected to drop are not in original frame: %r' % index))
                for i in range(len(index)):
                    index[i] = (- (self.names.index(index[i]) + 1))
            fr = H2OFrame._expr(expr=ExprNode(u'cols', self, index), cache=self._ex._cache)
            fr._ex._cache.ncols -= len(index)
            fr._ex._cache.names = [i for i in self.names if (self.names.index(i) not in list(map((lambda x: (abs(x) - 1)), index)))]
            fr._ex._cache.types = {name: fr.types[name] for name in fr._ex._cache.names}
        else:
            raise ValueError(u'Invalid column index types. Must either be a list of all int indexes, a string list of all column names, a single int index, ora single string for dropping columns.')
        return fr
    elif (axis == 0):
        if is_type(index, [int]):
            if (max(index) > self.nrow):
                raise H2OValueError((u'Row index selected to drop is not part of the frame: %r' % index))
            if (min(index) < 0):
                raise H2OValueError((u'Row index selected to drop is not positive: %r' % index))
            index = [(- (x + 1)) for x in index]
            fr = H2OFrame._expr(expr=ExprNode(u'rows', self, index), cache=self._ex._cache)
            fr._ex._cache.nrows -= len(index)
        else:
            raise ValueError(u'Invalid row indexes. Must be a list of int row indexes to drop from the H2OFrame.')
    return fr
