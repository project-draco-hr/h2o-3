def hist(self, breaks=u'Sturges', plot=True, **kwargs):
    u'Compute a histogram over a numeric column.\n\n        Parameters\n        ----------\n          breaks: str, int, list\n            Can be one of "Sturges", "Rice", "sqrt", "Doane", "FD", "Scott."\n            Can be a single number for the number of breaks.\n            Can be a list containing sthe split points, e.g., [-50,213.2123,9324834]\n            If breaks is "FD", the MAD is used over the IQR in computing bin width.\n          plot : bool, default=True\n            If True, then a plot is generated\n\n        Returns\n        -------\n          If plot is False, return H2OFrame with these columns: breaks, counts, mids_true,\n          mids, and density; otherwise produce the plot.\n        '
    frame = H2OFrame._expr(expr=ExprNode(u'hist', self, breaks))._frame()
    total = frame[u'counts'].sum(True)
    densities = [[((frame[(i, u'counts')] / total) * (1 / (frame[(i, u'breaks')] - frame[((i - 1), u'breaks')])))] for i in range(1, frame[u'counts'].nrow)]
    densities.insert(0, [0])
    densities_frame = H2OFrame(densities)
    densities_frame.set_names([u'density'])
    frame = frame.cbind(densities_frame)
    if plot:
        try:
            imp.find_module(u'matplotlib')
            import matplotlib
            if ((u'server' in kwargs.keys()) and kwargs[u'server']):
                matplotlib.use(u'Agg', warn=False)
            import matplotlib.pyplot as plt
        except ImportError:
            print(u'matplotlib is required to make the histogram plot. Set `plot` to False, if a plot is not desired.')
            return
        lower = float(frame[(0, u'breaks')])
        clist = h2o.as_list(frame[u'counts'], use_pandas=False)
        clist.pop(0)
        clist.pop(0)
        mlist = h2o.as_list(frame[u'mids'], use_pandas=False)
        mlist.pop(0)
        mlist.pop(0)
        counts = [float(c[0]) for c in clist]
        counts.insert(0, 0)
        mids = [float(m[0]) for m in mlist]
        mids.insert(0, lower)
        plt.xlabel(self.names[0])
        plt.ylabel(u'Frequency')
        plt.title(u'Histogram of {0}'.format(self.names[0]))
        plt.bar(mids, counts)
        if (not ((u'server' in kwargs.keys()) and kwargs[u'server'])):
            plt.show()
    else:
        return frame
