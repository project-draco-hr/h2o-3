def cor(self, y=None, na_rm=False, use=None):
    'Compute the correlation matrix of one or two H2OFrames.\n\n    Parameters\n    ----------\n    y : H2OFrame, default=None\n      If y is None and self is a single column, then the correlation is computed for self.\n      If self has multiple columns, then its correlation matrix is returned. Single rows are treated as single columns.\n      If y is not None, then a correlation matrix between the columns of self and the columns of y is computed.\n    na_rm : bool, default=False\n      Remove NAs from the computation.\n    use : str, default=None, which acts as "everything" if na_rm is False, and "complete.obs" if na_rm is True\n      A string indicating how to handle missing values. This must be one of the following:\n        "everything"            - outputs NaNs whenever one of its contributing observations is missing\n        "all.obs"               - presence of missing observations will throw an error\n        "complete.obs"          - discards missing values along with all observations in their rows so that only complete observations are used\n    Returns\n    -------\n      An H2OFrame of the correlation matrix of the columns of this H2OFrame with itself (if y is not given), or with the columns of y\n      (if y is given). If self and y are single rows or single columns, the correlation is given as a scalar.\n    '
    if (y is None):
        y = self
    if (use is None):
        use = ('complete.obs' if na_rm else 'everything')
    if ((self.nrow == 1) or ((self.ncol == 1) and (y.ncol == 1))):
        return ExprNode('cor', self, y, use)._eager_scalar()
    return H2OFrame._expr(expr=ExprNode('cor', self, y, use))._frame()
