def merge(self, other, allLeft=False, allRite=False):
    '\n    Merge two datasets based on common column names\n    :param other: Other dataset to merge.  Must have at least one column in\n    common with self, and all columns in common are used as the merge key.  If\n    you want to use only a subset of the columns in common, rename the other\n    columns so the columns are unique in the merged result.\n    :param allLeft: If true, include all rows from the left/self frame\n    :param allRite: If true, include all rows from the right/other frame\n    :return: Original self frame enhanced with merged columns and rows\n    '
    for v0 in self._vecs:
        for v1 in other._vecs:
            if (v0._name == v1._name):
                break
        if (v0._name == v1._name):
            break
    else:
        raise ValueError('frames must have some columns in common to merge on')
    lkey = self.send_frame()
    rkey = other.send_frame()
    tmp_key = H2OFrame.py_tmp_key()
    expr = '(= !{} (merge %{} %{} %{} %{}))'.format(tmp_key, lkey, rkey, ('TRUE' if allLeft else 'FALSE'), ('TRUE' if allRite else 'FALSE'))
    h2o.rapids(expr)
    h2o.remove(lkey)
    h2o.remove(rkey)
    j = h2o.frame(tmp_key)
    fr = j['frames'][0]
    rows = fr['rows']
    veckeys = fr['veckeys']
    cols = fr['columns']
    colnames = [col['label'] for col in cols]
    return H2OFrame(vecs=H2OVec.new_vecs(zip(colnames, veckeys), rows))
