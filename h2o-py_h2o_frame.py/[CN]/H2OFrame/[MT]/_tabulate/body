def _tabulate(self, tablefmt, rollups):
    '\n    Pretty tabulated string of all the cached data, and column names\n    '
    if (not isinstance(self._data, dict)):
        return str(self._data)
    d = collections.OrderedDict()
    if rollups:
        col = self._data.itervalues().next()
        lrows = len(col['data'])
        d[''] = (['type', 'mins', 'mean', 'maxs', 'sigma', 'zeros', 'missing'] + map(str, range(lrows)))
    for (k, v) in self._data.iteritems():
        x = v['data']
        domain = v['domain']
        if domain:
            x = [domain[int(idx)] for idx in x]
        if rollups:
            print x
            print v
            mins = (v['mins'][0] if v['mins'] else None)
            maxs = (v['maxs'][0] if v['maxs'] else None)
            x = ([v['type'], mins, v['mean'], maxs, v['sigma'], v['zero_count'], v['missing_count']] + x)
            print x
        d[k] = x
    return tabulate.tabulate(d, headers='keys', tablefmt=tablefmt)
