def apply(self, fun=None, axis=0):
    u'Apply a lambda expression to an H2OFrame.\n\n        Parameters\n        ----------\n          fun: lambda\n            A lambda expression to be applied per row or per column\n\n          axis: int\n            0: apply to each column; 1: apply to each row\n\n        Returns\n        -------\n          H2OFrame\n        '
    from .astfun import _bytecode_decompile_lambda
    if (axis not in [0, 1]):
        raise ValueError(u'margin must be either 0 (cols) or 1 (rows).')
    if (fun is None):
        raise ValueError(u'No function to apply.')
    if (isinstance(fun, type((lambda : 0))) and (fun.__name__ == (lambda : 0).__name__)):
        res = _bytecode_decompile_lambda(fun.__code__)
        return H2OFrame._expr(expr=ExprNode(u'apply', self, (1 + (axis == 0)), *res))
    else:
        raise ValueError(u'unimpl: not a lambda')
