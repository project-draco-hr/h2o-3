def apply(self, fun=None, axis=2):
    '\n    Apply a lambda expression to an H2OFrame.\n\n    :param fun: A lambda expression to be applied per row or per column.\n    :param axis: If axis==2, then apply the lambda to columns, if 1 apply to rows.\n    :return: An H2OFrame\n    '
    if (axis not in [1, 2]):
        raise ValueError('margin must be either 1 (rows) or 2 (cols).')
    if (fun is None):
        raise ValueError('No function to apply.')
    if (isinstance(fun, type((lambda : 0))) and (fun.__name__ == (lambda : 0).__name__)):
        syntax_tree = ast.parse(inspect.getsource(fun))
        Lambda = syntax_tree.body[0].value.args[0]
        res = astfun._ast_deparse(Lambda)
        return H2OFrame(expr=ExprNode('apply', self, axis, *res))
    else:
        raise ValueError('unimpl: not a lambda')
