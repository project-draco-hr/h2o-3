def cbind(self, data):
    u"\n        Append data to this frame column-wise.\n\n        :param data: an H2OFrame or a list of H2OFrame's to be column bound to the this frame on the right. You can\n            also cbind a number, in which case it will get converted into a constant column.\n        :returns: new H2OFrame with all frames in data appended column-wise.\n        "
    assert_is_type(data, H2OFrame, numeric, [H2OFrame, numeric])
    frames = ([data] if (not isinstance(data, list)) else data)
    new_cols = list(self.columns)
    new_types = dict(self.types)
    for frame in frames:
        if isinstance(frame, H2OFrame):
            if (frame.nrow != self.nrow):
                raise H2OValueError((u'Cannot bind a dataframe with %d rows to a data frame with %d rows: the number of rows should match' % (frame.nrow, self.nrow)))
            new_cols += frame.columns
            new_types.update(frame.types)
        else:
            new_cols += [None]
    unique_cols = set(new_cols)
    fr = H2OFrame._expr(expr=ExprNode(u'cbind', self, *frames), cache=self._ex._cache)
    fr._ex._cache.ncols = len(new_cols)
    if ((len(new_cols) == len(unique_cols)) and (None not in unique_cols)):
        fr._ex._cache.names = new_cols
        fr._ex._cache.types = new_types
    else:
        fr._ex._cache.names = None
        fr._ex._cache.types = None
    return fr
