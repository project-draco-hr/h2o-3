def _upload_python_object(self, python_obj, destination_frame, header, separator, column_names, column_types, na_strings):
    '\n    Properly handle native python data types. For a discussion of the rules and\n    permissible data types please refer to the main documentation for H2OFrame.\n\n    :param python_obj: A tuple, list, dict, collections.OrderedDict\n    :param kwargs: Optional arguments for input into parse_setup(), such as column_names and column_types\n    :return: None\n    '
    if isinstance(python_obj, (list, tuple)):
        (col_header, data_to_write) = _handle_python_lists(python_obj)
    elif isinstance(python_obj, (dict, collections.OrderedDict)):
        (col_header, data_to_write) = _handle_python_dicts(python_obj)
    else:
        raise ValueError(('`python_obj` must be a tuple, list, dict, collections.OrderedDict. Got: ' + str(type(python_obj))))
    if ((col_header is None) or (data_to_write is None)):
        raise ValueError('No data to write')
    (tmp_handle, tmp_path) = tempfile.mkstemp(suffix='.csv')
    tmp_file = os.fdopen(tmp_handle, 'wb')
    csv_writer = csv.DictWriter(tmp_file, fieldnames=col_header, restval=None, dialect='excel', extrasaction='ignore', delimiter=',')
    if (column_names is None):
        column_names = col_header
    csv_writer.writerows(data_to_write)
    tmp_file.close()
    self._upload_parse(tmp_path, destination_frame, header, separator, column_names, column_types, na_strings)
    os.remove(tmp_path)
