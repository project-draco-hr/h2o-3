def as_data_frame(self, use_pandas=False):
    "Obtain the dataset as a python-local object.\n\n    Parameters\n    ----------\n      use_pandas : bool, default=False\n        A flag specifying whether or not to return a pandas DataFrame.\n\n    Returns\n    -------\n      A local python object (a list of lists of strings, each list is a row, if\n      use_pandas=False, otherwise a pandas DataFrame) containing this H2OFrame instance's\n      data.\n    "
    url = (H2OConnection.make_url('DownloadDataset', 3) + '?frame_id={}&hex_string=false'.format(self.frame_id))
    if H2OConnection.https():
        try:
            import ssl
        except ImportError:
            raise ValueError('ssl module is required when using HTTPS')
        ctx = ssl.create_default_context()
        ctx.check_hostname = False
        ctx.verify_mode = ssl.CERT_NONE
    if PY3:
        from urllib import request
        try:
            response = (StringIO(request.urlopen(url, context=ctx).read().decode()) if H2OConnection.https() else StringIO(request.urlopen(url).read().decode()))
        except TypeError:
            raise ValueError('Python version 2.7.9 (or higher) or 3.4.3 (or higher) is required when using HTTPS.')
    else:
        import urllib2
        response = (urllib2.urlopen(url, context=ctx) if H2OConnection.https() else urllib2.urlopen(url))
    if (can_use_pandas() and use_pandas):
        import pandas
        df = pandas.read_csv(response, low_memory=False)
        time_cols = [col_name for col_name in self.names if ((self.types is not None) and (self.type(col_name).lower() == 'time'))]
        if time_cols:
            sample_timestamp = 1380610868
            utc_offset = (1000 * (datetime.utcfromtimestamp(sample_timestamp) - datetime.fromtimestamp(sample_timestamp)).total_seconds())
            try:
                df[time_cols] = (df[time_cols] - utc_offset).astype('datetime64[ms]')
            except pandas.tslib.OutOfBoundsDatetime:
                pass
        return df
    else:
        cr = csv.reader(response)
        return [([''] if (row == []) else row) for row in cr]
