def scale(self, center=True, scale=True):
    '\n    Centers and/or scales the column (H2OVec)\n    :return: H2OVec\n    :param center: either a \xe2\x80\x98logical\xe2\x80\x99 value or numeric value.\n    :param scale: either a \xe2\x80\x98logical\xe2\x80\x99 value or numeric value.\n    '
    tmp_key = H2OFrame.py_tmp_key()
    if (isinstance(center, bool) and isinstance(scale, bool)):
        c = ('%TRUE' if center else '%FALSE')
        s = ('%TRUE' if scale else '%FALSE')
    elif (isinstance(center, bool) and isinstance(scale, (int, float))):
        c = ('%TRUE' if center else '%FALSE')
        s = ('#' + str(scale))
    elif (isinstance(center, (int, float)) and isinstance(scale, bool)):
        c = ('#' + str(center))
        s = ('%TRUE' if scale else '%FALSE')
    elif (isinstance(center, (int, float)) and isinstance(scale, (int, float))):
        c = ('#' + str(center))
        s = ('#' + str(scale))
    else:
        raise (ValueError, '`center` and `scale` arguments (for a H2OVec) must be a bool or a number, but got center: {0}, scale: {1}'.format(center, scale))
    expr = '(= !{} (scale %{} {} {}))'.format(tmp_key, self.key(), c, s)
    return H2OVec._get_vec_from_rapids_string(self, expr, tmp_key)
