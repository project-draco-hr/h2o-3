{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  final int permCol=(int)asts[2].exec(env).getNum();
  ASTNumList groupby=ASTGroup.check(fr.numCols(),asts[3]);
  final int[] gbCols=groupby.expand4();
  final int permuteBy=(int)asts[4].exec(env).getNum();
  final int keepCol=(int)asts[5].exec(env).getNum();
  String[] names=new String[gbCols.length + 4];
  int i=0;
  for (; i < gbCols.length; ++i)   names[i]=fr.name(gbCols[i]);
  names[i++]="In";
  names[i++]="Out";
  names[i++]="InAmnt";
  names[i]="OutAmnt";
  String[][] domains=new String[names.length][];
  int d=0;
  for (; d < gbCols.length; d++)   domains[d]=fr.domains()[gbCols[d]];
  domains[d++]=fr.domains()[permCol];
  domains[d++]=fr.domains()[permCol];
  domains[d++]=fr.domains()[keepCol];
  domains[d]=fr.domains()[keepCol];
  long s=System.currentTimeMillis();
  BuildGroups t=new BuildGroups(gbCols,permuteBy,permCol,keepCol).doAll(fr);
  Log.info("Elapsed time: " + (System.currentTimeMillis() - s) / 1000. + "s");
  s=System.currentTimeMillis();
  SmashGroups sg;
  H2O.submitTask(sg=new SmashGroups(t._grps)).join();
  Log.info("Elapsed time: " + (System.currentTimeMillis() - s) / 1000. + "s");
  return new ValFrame(buildOutput(sg._res.values().toArray(new double[0][][]),names,domains));
}
