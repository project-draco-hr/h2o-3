{
  super.fillFromImpl(impl);
  if (impl._multinomial)   return fillMultinomial(impl);
  String[] names=impl.coefficientNames().clone();
  String[] ns=ArrayUtils.append(new String[]{"Intercept"},Arrays.copyOf(names,names.length - 1));
  coefficients_table=new TwoDimTableBase();
  final double[] magnitudes;
  double[] beta=impl.beta();
  String[] colTypes=new String[]{"double"};
  String[] colFormats=new String[]{"%5f"};
  String[] colnames=new String[]{"Coefficients"};
  if (impl.hasPValues()) {
    colTypes=new String[]{"double","double","double","double"};
    colFormats=new String[]{"%5f","%5f","%5f","%5f"};
    colnames=new String[]{"Coefficients","Std. Error","z value","p value"};
  }
  int stdOff=colnames.length;
  if (impl.isStandardized()) {
    colTypes=ArrayUtils.append(colTypes,"double");
    colFormats=ArrayUtils.append(colFormats,"%5f");
    colnames=ArrayUtils.append(colnames,"Standardized Coefficients");
  }
  TwoDimTable tdt=new TwoDimTable("Coefficients","glm coefficients",ns,colnames,colTypes,colFormats,"names");
  tdt.set(0,0,beta[beta.length - 1]);
  for (int i=0; i < beta.length - 1; ++i) {
    tdt.set(i + 1,0,beta[i]);
  }
  double[] norm_beta=null;
  if (impl.isStandardized()) {
    norm_beta=impl.getNormBeta();
    tdt.set(0,stdOff,norm_beta[norm_beta.length - 1]);
    for (int i=0; i < norm_beta.length - 1; ++i)     tdt.set(i + 1,stdOff,norm_beta[i]);
  }
  if (impl.hasPValues()) {
    double[] stdErr=impl.stdErr();
    double[] zVals=impl.zValues();
    double[] pVals=impl.pValues();
    tdt.set(0,1,stdErr[stdErr.length - 1]);
    tdt.set(0,2,zVals[zVals.length - 1]);
    tdt.set(0,3,pVals[pVals.length - 1]);
    for (int i=0; i < stdErr.length - 1; ++i) {
      tdt.set(i + 1,1,stdErr[i]);
      tdt.set(i + 1,2,zVals[i]);
      tdt.set(i + 1,3,pVals[i]);
    }
  }
  coefficients_table.fillFromImpl(tdt);
  if (impl.isStandardized()) {
    magnitudes=norm_beta.clone();
    for (int i=0; i < magnitudes.length; ++i)     if (magnitudes[i] < 0)     magnitudes[i]*=-1;
    Integer[] indices=new Integer[magnitudes.length - 1];
    for (int i=0; i < indices.length; ++i)     indices[i]=i;
    Arrays.sort(indices,new Comparator<Integer>(){
      @Override public int compare(      Integer o1,      Integer o2){
        if (magnitudes[o1] < magnitudes[o2])         return +1;
        if (magnitudes[o1] > magnitudes[o2])         return -1;
        return 0;
      }
    }
);
    String[] names2=new String[names.length];
    for (int i=0; i < names2.length - 1; ++i)     names2[i]=names[indices[i]];
    tdt=new TwoDimTable("Standardized Coefficient Magnitudes","standardized coefficient magnitudes",names2,new String[]{"Coefficients","Sign"},new String[]{"double","string"},new String[]{"%5f","%s"},"names");
    for (int i=0; i < beta.length - 1; ++i) {
      tdt.set(i,0,magnitudes[indices[i]]);
      tdt.set(i,1,beta[indices[i]] < 0 ? "NEG" : "POS");
    }
    standardized_coefficient_magnitudes=new TwoDimTableBase();
    standardized_coefficient_magnitudes.fillFromImpl(tdt);
  }
  return this;
}
