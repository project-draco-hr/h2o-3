{
  Connection conn=null;
  Statement stmt=null;
  ResultSet rs=null;
  String db_sys=connection_url.split(":",3)[1];
  final boolean needFetchClause=db_sys.equals("oracle") || db_sys.equals("sqlserver");
  int catcols=0, intcols=0, bincols=0, realcols=0, timecols=0, stringcols=0;
  final int numCol;
  long numRow=0;
  final String[] columnNames;
  final byte[] columnH2OTypes;
  try {
    conn=DriverManager.getConnection(connection_url,username,password);
    stmt=conn.createStatement();
    stmt.setFetchSize(1);
    if (table.equals("")) {
      if (!select_query.toLowerCase().startsWith("select")) {
        throw new IllegalArgumentException("The select_query must start with `SELECT`, but instead is: " + select_query);
      }
      table=SQLManager.TEMP_TABLE_NAME;
      numRow=stmt.executeUpdate("CREATE TABLE " + table + " AS "+ select_query);
    }
 else     if (table.equals(SQLManager.TEMP_TABLE_NAME)) {
      throw new IllegalArgumentException("The specified table cannot be named: " + SQLManager.TEMP_TABLE_NAME);
    }
    if (numRow <= 0) {
      rs=stmt.executeQuery("SELECT COUNT(1) FROM " + table);
      rs.next();
      numRow=rs.getLong(1);
    }
    if (needFetchClause)     rs=stmt.executeQuery("SELECT " + columns + " FROM "+ table+ " FETCH NEXT 1 ROWS ONLY");
 else     rs=stmt.executeQuery("SELECT " + columns + " FROM "+ table+ " LIMIT 1");
    ResultSetMetaData rsmd=rs.getMetaData();
    numCol=rsmd.getColumnCount();
    columnNames=new String[numCol];
    columnH2OTypes=new byte[numCol];
    rs.next();
    for (int i=0; i < numCol; i++) {
      columnNames[i]=rsmd.getColumnName(i + 1);
switch (rsmd.getColumnType(i + 1)) {
case Types.NUMERIC:
case Types.REAL:
case Types.DOUBLE:
case Types.FLOAT:
case Types.DECIMAL:
        columnH2OTypes[i]=Vec.T_NUM;
      realcols+=1;
    break;
case Types.INTEGER:
case Types.TINYINT:
case Types.SMALLINT:
case Types.BIGINT:
  columnH2OTypes[i]=Vec.T_NUM;
intcols+=1;
break;
case Types.BIT:
case Types.BOOLEAN:
columnH2OTypes[i]=Vec.T_NUM;
bincols+=1;
break;
case Types.VARCHAR:
case Types.NVARCHAR:
case Types.CHAR:
case Types.NCHAR:
case Types.LONGVARCHAR:
case Types.LONGNVARCHAR:
columnH2OTypes[i]=Vec.T_STR;
stringcols+=1;
break;
case Types.DATE:
case Types.TIME:
case Types.TIMESTAMP:
columnH2OTypes[i]=Vec.T_TIME;
timecols+=1;
break;
default :
Log.warn("Unsupported column type: " + rsmd.getColumnTypeName(i + 1));
columnH2OTypes[i]=Vec.T_BAD;
}
}
}
 catch (SQLException ex) {
throw new RuntimeException("SQLException: " + ex.getMessage() + "\nFailed to connect and read from SQL database with connection_url: "+ connection_url);
}
 finally {
if (rs != null) {
try {
rs.close();
}
 catch (SQLException sqlEx) {
}
rs=null;
}
if (stmt != null) {
try {
stmt.close();
}
 catch (SQLException sqlEx) {
}
stmt=null;
}
if (conn != null) {
try {
conn.close();
}
 catch (SQLException sqlEx) {
}
conn=null;
}
}
double binary_ones_fraction=0.5;
long totSize=(long)((float)(catcols + intcols) * numRow * 4 + (float)bincols * numRow * 1* binary_ones_fraction + (float)(realcols + timecols + stringcols) * numRow * 8);
final Vec _v;
if (optimize) {
_v=makeCon(totSize,numRow);
}
 else {
double rows_per_chunk=FileVec.calcOptimalChunkSize(totSize,numCol,numCol * 4,Runtime.getRuntime().availableProcessors(),H2O.getCloudSize(),false,false);
_v=makeCon(0,numRow,(int)Math.ceil(Math.log1p(rows_per_chunk)),false);
}
Log.info("Number of chunks: " + _v.nChunks());
final Key destination_key=Key.make(table + "_sql_to_hex");
final Job<Frame> j=new Job(destination_key,Frame.class.getName(),"Import SQL Table");
final String finalTable=table;
H2O.H2OCountedCompleter work=new H2O.H2OCountedCompleter(){
@Override public void compute2(){
Frame fr=new SqlTableToH2OFrame(connection_url,finalTable,needFetchClause,username,password,columns,numCol,_v.nChunks(),j).doAll(columnH2OTypes,_v).outputFrame(destination_key,columnNames,null);
DKV.put(fr);
_v.remove();
ParseDataset.logParseResults(fr);
if (finalTable.equals(SQLManager.TEMP_TABLE_NAME)) dropTempTable(connection_url,username,password);
tryComplete();
}
}
;
j.start(work,_v.nChunks());
return j;
}
