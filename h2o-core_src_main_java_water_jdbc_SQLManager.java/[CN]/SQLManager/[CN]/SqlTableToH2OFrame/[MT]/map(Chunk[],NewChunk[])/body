{
  if (isCancelled() || _job != null && _job.stop_requested())   return;
  Connection conn=null;
  Statement stmt=null;
  ResultSet rs=null;
  Chunk c0=cs[0];
  String sqlText="SELECT " + _columns + " FROM "+ _table;
  if (_needFetchClause)   sqlText+=" OFFSET " + c0.start() + " ROWS FETCH NEXT "+ c0._len+ " ROWS ONLY";
 else   sqlText+=" LIMIT " + c0._len + " OFFSET "+ c0.start();
  try {
    conn=sqlConn.take();
    stmt=conn.createStatement();
    stmt.setFetchSize(c0._len);
    rs=stmt.executeQuery(sqlText);
    while (rs.next()) {
      for (int i=0; i < _numCol; i++) {
        Object res=rs.getObject(i + 1);
        if (res == null)         ncs[i].addNA();
 else {
switch (res.getClass().getSimpleName()) {
case "Double":
            ncs[i].addNum((double)res);
          break;
case "Integer":
        ncs[i].addNum((long)(int)res,0);
      break;
case "Long":
    ncs[i].addNum((long)res,0);
  break;
case "Float":
ncs[i].addNum((double)(float)res);
break;
case "Short":
ncs[i].addNum((long)(short)res,0);
break;
case "Byte":
ncs[i].addNum((long)(byte)res,0);
break;
case "BigDecimal":
ncs[i].addNum(((BigDecimal)res).doubleValue());
break;
case "Boolean":
ncs[i].addNum(((boolean)res ? 1 : 0),0);
break;
case "String":
ncs[i].addStr(new BufferedString((String)res));
break;
case "Date":
ncs[i].addNum(((Date)res).getTime(),0);
break;
case "Time":
ncs[i].addNum(((Time)res).getTime(),0);
break;
case "Timestamp":
ncs[i].addNum(((Timestamp)res).getTime(),0);
break;
default :
ncs[i].addNA();
}
}
}
}
}
 catch (SQLException ex) {
throw new RuntimeException("SQLException: " + ex.getMessage() + "\nFailed to read SQL data");
}
catch (InterruptedException e) {
e.printStackTrace();
throw new RuntimeException("Interrupted exception when trying to take connection from pool");
}
 finally {
if (rs != null) {
try {
rs.close();
}
 catch (SQLException sqlEx) {
}
rs=null;
}
if (stmt != null) {
try {
stmt.close();
}
 catch (SQLException sqlEx) {
}
stmt=null;
}
sqlConn.add(conn);
}
if (_job != null) _job.update(1);
}
