{
  super.init(expensive);
  if (_parms._loading_key == null)   _parms._loading_key=Key.make("PCALoading_" + Key.rand());
  if (_parms._max_iterations < 1)   error("_max_iterations","max_iterations must be at least 1");
  if (_train == null)   return;
  if (_train.numCols() < 2)   error("_train","_train must have more than one column");
  int k_min=(int)Math.min(_train.numCols(),_train.numRows());
  if (_parms._k < 1 || _parms._k > k_min)   error("_k","_k must be between 1 and " + k_min);
  Vec[] vecs=_train.vecs();
  for (int i=0; i < vecs.length; i++) {
    if (!vecs[i].isNumeric()) {
      error("_train","_train must contain only numeric data");
      break;
    }
  }
  if (expensive && error_count() == 0)   checkMemoryFootPrint();
}
