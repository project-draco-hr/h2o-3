def test_parse_brackets(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(10, 1000, 'cA', 200, 200), (10, 2000, 'cA', 200, 200), (10, 4000, 'cA', 200, 200)]
    for (rowCount, colCount, hex_key, timeoutSecs, timeoutSecs2) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='local', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False, columnNames=None, intermediateResults=DO_INTERMEDIATE_RESULTS)
        print 'Parse:', csvFilename, 'took', (time.time() - start), 'seconds'
        start = time.time()
        inspect = h2o_cmd.runInspect(None, hex_key, timeoutSecs=timeoutSecs2)
        print 'Inspect:', hex_key, 'took', (time.time() - start), 'seconds'
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
        self.assertEqual(numRows, rowCount, ("parse created result with the wrong number of rows (header shouldn't count) %s %s" % (numRows, rowCount)))
        print 'Skipping the delete keys for now'
        if (1 == 0):
            h2i.delete_keys_at_all_nodes()
