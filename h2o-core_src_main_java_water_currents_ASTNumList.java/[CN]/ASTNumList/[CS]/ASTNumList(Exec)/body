{
  ArrayList<Double> bases=new ArrayList<>();
  ArrayList<Double> strides=new ArrayList<>();
  ArrayList<Long> cnts=new ArrayList<>();
  e.xpeek('[');
  double last=-Double.MAX_VALUE;
  while (true) {
    char c=e.skipWS();
    if (c == ']')     break;
    double base=e.number(), cnt=1, stride=1;
    c=e.skipWS();
    if (c == ':') {
      e.xpeek(':');
      e.skipWS();
      cnt=e.number();
      if (cnt < 1 || ((long)cnt) != cnt)       throw new IllegalArgumentException("Count must be a integer larger than zero, " + cnt);
      c=e.skipWS();
      if (c == ':') {
        e.xpeek(':');
        e.skipWS();
        stride=e.number();
        if (stride < 0)         throw new IllegalArgumentException("Stride must be positive, " + stride);
        c=e.skipWS();
      }
    }
    if (base < last)     throw new IllegalArgumentException("Number lists must always increase, but " + last + " is not less than "+ base);
    last=base + cnt * stride;
    bases.add(base);
    cnts.add((long)cnt);
    strides.add(stride);
    if (c == ',')     e.xpeek(',');
  }
  e.xpeek(']');
  _bases=new double[bases.size()];
  _strides=new double[bases.size()];
  _cnts=new long[bases.size()];
  for (int i=0; i < _bases.length; i++) {
    _bases[i]=bases.get(i);
    _cnts[i]=cnts.get(i);
    _strides[i]=strides.get(i);
  }
}
