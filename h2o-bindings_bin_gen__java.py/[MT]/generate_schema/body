def generate_schema(class_name, schema):
    '\n    Generate schema POJO file.\n      :param class_name: name of the class\n      :param schema: information about the class\n    '
    has_map = False
    is_model_builder = False
    has_inherited = False
    for field in schema['fields']:
        if (field['name'] == '__meta'):
            continue
        if field['is_inherited']:
            has_inherited = True
        if field['type'].startswith('Map'):
            has_map = True
        if (field['name'] == 'can_build'):
            is_model_builder = True
    superclass = schema['superclass']
    if (superclass == 'Iced'):
        superclass = 'Object'
    fields = []
    for field in schema['fields']:
        if (field['name'] == '__meta'):
            continue
        java_type = translate_type(field['type'], field['schema_name'])
        java_value = get_java_value(field)
        if (is_model_builder and (field['name'] == 'parameters')):
            fields.append(('parameters', 'null', 'ModelParameterSchemaV3', field['help'], field['is_inherited']))
        else:
            fields.append((field['name'], java_value, java_type, field['help'], field['is_inherited']))
    yield '/**'
    yield ' * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py'
    yield ' * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield ' */'
    yield 'package water.bindings.pojos;'
    yield ''
    yield 'import com.google.gson.Gson;'
    yield ('import java.util.Map;' if has_map else None)
    yield ''
    yield ''
    yield ('public class %s extends %s {' % (class_name, superclass))
    yield ''
    for (name, value, ftype, fhelp, inherited) in fields:
        if inherited:
            continue
        yield '    /**'
        yield bi.wrap(fhelp, indent='     * ')
        yield '     */'
        yield ('    public %s %s;' % (ftype, name))
        yield ''
    if has_inherited:
        yield ''
        yield ('    /*' + ('-' * 114))
        yield (('    //' + (' ' * 50)) + 'INHERITED')
        yield ('    //' + ('-' * 114))
        yield ''
        for (name, value, ftype, fhelp, inherited) in fields:
            if (not inherited):
                continue
            yield bi.wrap(fhelp, '    // ')
            yield ('    public %s %s = %s;' % (ftype, name, value))
            yield ''
        yield '    */'
        yield ''
    yield '    /**'
    yield '     * Public constructor'
    yield '     */'
    yield ('    public %s() {' % class_name)
    for (name, value, _, _, _) in fields:
        if (name == 'parameters'):
            continue
        yield ('        %s = %s;' % (name, value))
    yield '    }'
    yield ''
    yield '    /**'
    yield '     * Return the contents of this object as a JSON String.'
    yield '     */'
    yield '    @Override'
    yield '    public String toString() {'
    yield '        return new Gson().toJson(this);'
    yield '    }'
    yield ''
    yield '}'
