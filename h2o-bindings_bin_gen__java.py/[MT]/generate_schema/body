def generate_schema(class_name, schema):
    u'\n    Generate schema POJO file.\n      :param class_name: name of the class\n      :param schema: information about the class\n    '
    has_map = False
    is_model_builder = False
    has_inherited = False
    for field in schema[u'fields']:
        if (field[u'name'] == u'__meta'):
            continue
        if field[u'is_inherited']:
            has_inherited = True
            continue
        if field[u'type'].startswith(u'Map'):
            has_map = True
        if (field[u'name'] == u'can_build'):
            is_model_builder = True
    superclass = schema[u'superclass']
    if (superclass == u'Schema'):
        superclass = u'Object'
    fields = []
    for field in schema[u'fields']:
        if (field[u'name'] == u'__meta'):
            continue
        java_type = translate_type(field[u'type'], field[u'schema_name'])
        java_value = get_java_value(field)
        if (False and is_model_builder and (field[u'name'] == u'parameters')):
            fields.append((u'parameters', u'null', u'ModelParameterSchemaV3[]', field[u'help'], field[u'is_inherited']))
        else:
            fields.append((field[u'name'], java_value, java_type, field[u'help'], field[u'is_inherited']))
    yield u'/**'
    yield u' * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py'
    yield u' * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u' */'
    yield u'package water.bindings.pojos;'
    yield u''
    yield u'import com.google.gson.Gson;'
    yield u'import com.google.gson.annotations.*;'
    yield (u'import java.util.Map;' if has_map else None)
    yield u''
    yield u''
    yield ((u'public class %s extends %s {' % (class_name, superclass)) if (superclass != u'Object') else None)
    yield ((u'public class %s {' % class_name) if (superclass == u'Object') else None)
    yield u''
    for (name, value, ftype, fhelp, inherited) in fields:
        if inherited:
            continue
        ccname = translate_name(name)
        yield u'    /**'
        yield bi.wrap(fhelp, indent=u'     * ')
        yield u'     */'
        yield ((u'    @SerializedName("%s")' % name) if (name != ccname) else None)
        yield (u'    public %s %s;' % (ftype, ccname))
        yield u''
    if has_inherited:
        yield u''
        yield (u'    /*' + (u'-' * 114))
        yield ((u'    //' + (u' ' * 50)) + u'INHERITED')
        yield (u'    //' + (u'-' * 114))
        yield u''
        for (name, value, ftype, fhelp, inherited) in fields:
            if (not inherited):
                continue
            yield bi.wrap(fhelp, u'    // ')
            yield (u'    public %s %s;' % (ftype, translate_name(name)))
            yield u''
        yield u'    */'
        yield u''
    yield u'    /**'
    yield u'     * Public constructor'
    yield u'     */'
    yield (u'    public %s() {' % class_name)
    for (name, value, _, _, _) in fields:
        if (name == u'parameters'):
            continue
        if (value == u'null'):
            continue
        yield (u'        %s = %s;' % (translate_name(name), value))
    yield u'    }'
    yield u''
    yield u'    /**'
    yield u'     * Return the contents of this object as a JSON String.'
    yield u'     */'
    yield u'    @Override'
    yield u'    public String toString() {'
    yield u'        return new Gson().toJson(this);'
    yield u'    }'
    yield u''
    yield u'}'
