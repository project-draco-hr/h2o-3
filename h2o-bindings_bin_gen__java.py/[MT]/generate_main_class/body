def generate_main_class(endpoints):
    yield u'/**'
    yield u' * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py'
    yield u' * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u' */'
    yield u'package water.bindings;'
    yield u''
    yield u'import water.bindings.pojos.*;'
    yield u'import water.bindings.proxies.retrofit.*;'
    yield u'import retrofit2.*;'
    yield u'import retrofit2.converter.gson.GsonConverterFactory;'
    yield u'import com.google.gson.*;'
    yield u'import okhttp3.OkHttpClient;'
    yield u'import java.lang.reflect.Type;'
    yield u'import java.util.concurrent.TimeUnit;'
    yield u''
    yield u'public class H2oApi {'
    yield u''
    yield u'  public H2oApi() {}'
    yield u''
    yield u'  public H2oApi(String url) {'
    yield u'    this.url = url;'
    yield u'  }'
    yield u''
    yield u'  public void setUrl(String s) {'
    yield u'    url = s;'
    yield u'    retrofit = null;'
    yield u'  }'
    yield u''
    yield u'  public void setTimeout(int t) {'
    yield u'    timeout_s = t;'
    yield u'    retrofit = null;'
    yield u'  }'
    yield u''
    yield u''
    yield u'  //--------- PRIVATE ----------------------------------------------------------'
    yield u''
    yield u'  private Retrofit retrofit;'
    yield u'  private String url = "http://localhost/54321/";'
    yield u'  private int timeout_s = 60;'
    yield u''
    yield u'  private void initializeRetrofit() {'
    yield u'    Gson gson = new GsonBuilder()'
    yield u'      .registerTypeAdapter(KeyV3.class, new KeySerializer())'
    yield u'      .create();'
    yield u''
    yield u'    OkHttpClient client = new OkHttpClient.Builder()'
    yield u'      .connectTimeout(timeout_s, TimeUnit.SECONDS)'
    yield u'      .writeTimeout(timeout_s, TimeUnit.SECONDS)'
    yield u'      .readTimeout(timeout_s, TimeUnit.SECONDS)'
    yield u'      .build();'
    yield u''
    yield u'    this.retrofit = new Retrofit.Builder()'
    yield u'      .client(client)'
    yield u'      .baseUrl(url)'
    yield u'      .addConverterFactory(GsonConverterFactory.create(gson))'
    yield u'      .build();'
    yield u'  }'
    yield u''
    yield u'  private Retrofit getRetrofit() {'
    yield u'    if (retrofit == null) initializeRetrofit();'
    yield u'    return retrofit;'
    yield u'  }'
    yield u''
    yield u''
    yield u'  /**'
    yield u'   * Keys get sent as Strings and returned as objects also containing the type and URL,'
    yield u'   * so they need a custom GSON serializer.'
    yield u'   */'
    yield u'  private static class KeySerializer implements JsonSerializer<KeyV3> {'
    yield u'    public JsonElement serialize(KeyV3 key, Type typeOfKey, JsonSerializationContext context) {'
    yield u'      return new JsonPrimitive(key.name);'
    yield u'    }'
    yield u'  }'
    yield u'}'
