def generate_proxy(classname, endpoints):
    u'\n    Generate a Retrofit Proxy class.\n\n    Retrofit interfaces look like this:\n        public interface GitHubService {\n            @GET("/users/{user}/repos")\n            Call<List<Repo>> listRepos(@Path("user") String user);\n        }\n      :param classname: name of the class\n      :param endpoints: list of endpoints served by this class\n    '
    var_pattern = re.compile(u'\\{(\\w+)\\}')
    helper_class = []
    found_key_array_parameter = False
    yield u'/**'
    yield u' * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py'
    yield u' * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u' */'
    yield u'package water.bindings.proxies.retrofit;'
    yield u''
    yield u'import water.bindings.pojos.*;'
    yield u'import retrofit2.*;'
    yield u'import retrofit2.http.*;'
    yield u''
    yield ((u'public interface ' + classname) + u' {')
    yield u''
    for e in endpoints:
        method = e[u'handler_method']
        param_strs = []
        required_param_strs = []
        for field in e[u'input_params']:
            fname = field[u'name']
            ftype = (u'Path' if field[u'is_path_param'] else u'Field')
            ptype = translate_type(field[u'type'], field[u'schema_name'])
            if (ptype.endswith(u'KeyV3') or (ptype == u'ColSpecifierV3')):
                ptype = u'String'
            if ptype.endswith(u'KeyV3[]'):
                ptype = u'String[]'
            param_str = u'@{ftype}("{fname}") {ptype} {fname}'.format(**locals())
            param_strs.append(param_str)
            if field[u'required']:
                required_param_strs.append(param_str)
        if (len(param_strs) == len(required_param_strs)):
            required_param_strs = None
        yield u'  /** '
        yield bi.wrap(e[u'summary'], indent=u'   * ')
        for field in e[u'input_params']:
            s = (u'   *   @param %s ' % field[u'name'])
            yield (s + bi.wrap(field[u'help'], indent=(u'   *' + (u' ' * (len(s) - 4))), indent_first=False))
        yield u'   */'
        for params in [param_strs, required_param_strs]:
            if (params is None):
                continue
            yield (u'  @FormUrlEncoded' if (e[u'http_method'] == u'POST') else None)
            yield u'  @{method}("{path}")'.format(method=e[u'http_method'], path=e[u'url_pattern'])
            if (len(params) <= 1):
                args = (params[0] if params else u'')
                yield u'  Call<{schema}> {method}({args});'.format(schema=e[u'output_schema'], method=method, args=args)
            else:
                yield u'  Call<{schema}> {method}('.format(schema=e[u'output_schema'], method=method)
                for arg in params:
                    yield ((u'    ' + arg) + (u'' if (arg == params[(-1)]) else u','))
                yield u'  );'
            yield u''
        if (u'algo' in e):
            helper_class.append(u'    /**')
            helper_class.append(bi.wrap(e[u'summary'], indent=u'     * '))
            helper_class.append(u'     */')
            helper_class.append(u'    public static Call<{oschema}> {method}({outer_class} z, {ischema} p) {{'.format(ischema=e[u'input_schema'], oschema=e[u'output_schema'], method=method, outer_class=classname))
            helper_class.append(u'      return z.{method}('.format(method=method))
            for field in e[u'input_params']:
                ptype = translate_type(field[u'type'], field[u'schema_name'])
                pname = translate_name(field[u'name'])
                if ptype.endswith(u'KeyV3'):
                    s = u'(p.{parm} == null? null : p.{parm}.name)'.format(parm=pname)
                elif ptype.endswith(u'KeyV3[]'):
                    found_key_array_parameter = True
                    s = u'(p.{parm} == null? null : keyArrayToStringArray(p.{parm}))'.format(parm=pname)
                elif ptype.startswith(u'ColSpecifier'):
                    s = u'(p.{parm} == null? null : p.{parm}.columnName)'.format(parm=pname)
                else:
                    s = (u'p.' + pname)
                if (field != e[u'input_params'][(-1)]):
                    s += u','
                helper_class.append((u'        ' + s))
            helper_class.append(u'      );')
            helper_class.append(u'    }')
            helper_class.append(u'')
    if helper_class:
        yield u''
        yield u'  class Helper {'
        for line in helper_class:
            yield line
        if found_key_array_parameter:
            yield u'    /**'
            yield u'     * Return an array of Strings for an array of keys.'
            yield u'     */'
            yield u'    public static String[] keyArrayToStringArray(KeyV3[] keys) {'
            yield u'      if (keys == null) return null;'
            yield u'      String[] ids = new String[keys.length];'
            yield u'      int i = 0;'
            yield u'      for (KeyV3 key : keys) ids[i++] = key.name;'
            yield u'      return ids;'
            yield u'    }'
        yield u'  }'
        yield u''
    yield u'}'
