def generate_proxy(classname, endpoints, schemas_map):
    u'\n    Retrofit interfaces look like this:\n        public interface GitHubService {\n            @GET("/users/{user}/repos")\n            Call<List<Repo>> listRepos(@Path("user") String user);\n        }\n      :param classname: name of the class\n      :param endpoints: list of endpoints served by this class\n      :param schemas_map: dictionary schema_name => schema_info\n    '
    var_pattern = re.compile(u'\\(\\?<(\\w+)>.*?\\)')
    methods = set()
    helper_class = []
    found_key_array_parameter = False
    yield u'/**'
    yield u' * This file is auto-generated by h2o-3/h2o-bindings/bin/gen_java.py'
    yield u' * Copyright 2016 H2O.ai;  Apache License Version 2.0 (see LICENSE for details)'
    yield u' */'
    yield u'package water.bindings.proxies.retrofit;'
    yield u''
    yield u'import water.bindings.pojos.*;'
    yield u'import retrofit2.*;'
    yield u'import retrofit2.http.*;'
    yield u'import java.util.Map;'
    yield u''
    yield ((u'public interface ' + classname) + u' {')
    for e in endpoints:
        path = e[u'url_pattern']
        path_params = e[u'path_params']
        summary = e[u'summary']
        http_method = e[u'http_method']
        input_schema_name = e[u'input_schema']
        output_schema_name = e[u'output_schema']
        method = e[u'handler_method']
        input_schema = schemas_map[input_schema_name]
        is_post = (http_method == u'POST')
        if (path == u'/3/ModelMetrics/frames/(?<frame>.*)/models/(?<model>.*)'):
            continue
        if (path == u'/3/ModelMetrics/frames/(?<frame>.*)'):
            continue
        assert (u'\\' not in path), (u'Your path contains backslashes. Seriously? ' + path)

        def translator(m):
            name = path_params[translator.i]
            assert (name.replace(u'_', u'') == m.group(1)), (u'Unexpected name %s for param <%s>' % (name, m.group(1)))
            translator.i += 1
            return (u'{%s}' % name)
        translator.i = 0
        retrofit_path = var_pattern.sub(translator, path)
        algo = None
        if ((classname, method) in [(u'Grid', u'train'), (u'ModelBuilders', u'train'), (u'ModelBuilders', u'validate_parameters')]):
            pieces = path.split(u'/')
            assert (len(pieces) >= 4), (u'Expected to see algo name in the path: ' + path)
            algo = pieces[3]
            method = (method + algo.capitalize())
            for field in input_schema[u'fields']:
                if (field[u'name'] == u'parameters'):
                    input_schema_name = field[u'schema_name']
                    input_schema = schemas_map[input_schema_name]
                    break
        param_strs = []
        param_infos = []
        j = 1
        for parm in path_params:
            fields = [field for field in input_schema[u'fields'] if (field[u'name'] == parm)]
            assert (len(fields) == 1), (u'Failed to find parameter: %s for endpoint: %r' % (parm, e))
            field = fields[0]
            if (field[u'direction'] == u'OUTPUT'):
                continue
            ptype = translate_type(field[u'type'], field[u'schema_name'])
            if ptype.endswith(u'KeyV3'):
                ptype = u'String'
            if ptype.endswith(u'KeyV3[]'):
                ptype = u'String[]'
            if (ptype == u'ColSpecifierV3'):
                ptype = u'String'
            param_strs.append(u'@Path("{parm}") {ptype} v{j}'.format(**locals()))
            j += 1
        for field in input_schema[u'fields']:
            if (not is_post):
                break
            if (field[u'direction'] == u'OUTPUT'):
                continue
            if (field[u'name'] in path_params):
                continue
            parm = field[u'name']
            ptype = translate_type(field[u'type'], field[u'schema_name'])
            param_infos.append((parm, ptype))
            if ptype.endswith(u'KeyV3'):
                ptype = u'String'
            if ptype.endswith(u'KeyV3[]'):
                ptype = u'String[]'
            if (ptype == u'ColSpecifierV3'):
                ptype = u'String'
            param_strs.append(u'@Field("{parm}") {ptype} v{j}'.format(**locals()))
            j += 1
        method_with_args = (method, tuple(param_strs))
        assert (method_with_args not in methods), (((u'ERROR: duplicate method in classname ' + classname) + u': ') + method)
        methods.add(method_with_args)
        yield u'  /** '
        yield bi.wrap(summary, indent=u'   * ')
        yield u'   */'
        yield (u'  @FormUrlEncoded' if is_post else None)
        yield (u'  @%(method)s("%(path)s")' % {u'method': http_method, u'path': retrofit_path, })
        if (len(param_strs) <= 1):
            args = (param_strs[0] if param_strs else u'')
            yield u'  Call<{schema}> {method}({args});'.format(schema=output_schema_name, method=method, args=args)
        else:
            yield u'  Call<{schema}> {method}('.format(schema=output_schema_name, method=method)
            for arg in param_strs:
                yield ((u'    ' + arg) + (u'' if (arg == param_strs[(-1)]) else u','))
            yield u'  );'
        yield u''
        if algo:
            helper_class.append(u'    /**')
            helper_class.append(bi.wrap(summary, indent=u'     * '))
            helper_class.append(u'     */')
            helper_class.append(u'    public static Call<{oschema}> {method}({outer_class} z, {ischema} p) {{'.format(ischema=input_schema_name, oschema=output_schema_name, method=method, outer_class=classname))
            helper_class.append(u'      return z.{method}('.format(method=method))
            for (pname, ptype) in param_infos:
                ccname = translate_name(pname)
                if ptype.endswith(u'KeyV3'):
                    s = u'(p.{parm} == null? null : p.{parm}.name)'.format(parm=ccname)
                elif ptype.endswith(u'KeyV3[]'):
                    found_key_array_parameter = True
                    s = u'(p.{parm} == null? null : keyArrayToStringArray(p.{parm}))'.format(parm=ccname)
                elif ptype.startswith(u'ColSpecifier'):
                    s = u'(p.{parm} == null? null : p.{parm}.columnName)'.format(parm=ccname)
                else:
                    s = (u'p.' + ccname)
                if (pname != param_infos[(-1)][0]):
                    s += u','
                helper_class.append((u'        ' + s))
            helper_class.append(u'      );')
            helper_class.append(u'    }')
            helper_class.append(u'')
    if helper_class:
        yield u''
        yield u'  public static class Helper {'
        for line in helper_class:
            yield line
        if found_key_array_parameter:
            yield u'    /**'
            yield u'     * Return an array of Strings for an array of keys.'
            yield u'     */'
            yield u'    public static String[] keyArrayToStringArray(KeyV3[] keys) {'
            yield u'      if (keys == null) return null;'
            yield u'      String[] ids = new String[keys.length];'
            yield u'      int i = 0;'
            yield u'      for (KeyV3 key : keys) ids[i++] = key.name;'
            yield u'      return ids;'
            yield u'    }'
        yield u'  }'
        yield u''
    yield u'}'
