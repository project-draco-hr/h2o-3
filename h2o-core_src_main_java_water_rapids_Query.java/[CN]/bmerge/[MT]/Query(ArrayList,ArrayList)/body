{
  long lLow=-1, lUpp=lN, rLow=-1, rUpp=rN;
  long lr=lLow + (lUpp - lLow) / 2;
  lKey=leftIndex.x[lr];
  while (rLow < rUpp - 1) {
    mid=rLow + (rUpp - rLow) / 2;
    rKey=rightIndex.x[mid];
    int cmp=less(rKey,lKey);
    if (cmp == -1) {
      rLow=mid;
    }
 else     if (cmp == 1) {
      rUpp=mid;
    }
 else {
      tmpLow=mid;
      tmpUpp=mid;
      while (tmpLow < rUpp - 1) {
        mid=tmpLow + (rUpp - tmpLow) / 2;
        rKey=rightIndex.x[mid];
        if (less(rKey,lKey) == 0)         tmpLow=mid;
 else         rUpp=mid;
      }
      while (rLow < tmpUpp - 1) {
        mid=rLow + (tmpUpp - rLow) / 2;
        rKey=rightIndex.x[mid];
        if (less(rKey,lKey) == 0)         tmpUpp=mid;
 else         rLow=mid;
      }
      break;
    }
  }
  tmplow=lir;
  tmpupp=lir;
  while (tmplow < iupp - 1) {
    mid=tmplow + (iupp - tmplow) / 2;
    xval.i=INTEGER(ic)[o ? o[mid] - 1 : mid];
    if (xval.i == ival.i)     tmplow=mid;
 else     iupp=mid;
  }
  while (ilow < tmpupp - 1) {
    mid=ilow + (tmpupp - ilow) / 2;
    xval.i=INTEGER(ic)[o ? o[mid] - 1 : mid];
    if (xval.i == ival.i)     tmpupp=mid;
 else     ilow=mid;
  }
  break;
}
