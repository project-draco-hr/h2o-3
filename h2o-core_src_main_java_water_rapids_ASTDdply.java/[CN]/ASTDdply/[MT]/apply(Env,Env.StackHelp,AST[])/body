{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  int ncols=fr.numCols();
  ASTNumList groupby=ASTGroup.check(ncols,asts[2]);
  int[] gbCols=groupby.expand4();
  AST fun=asts[3].exec(env).getFun();
  ASTFun scope=env._scope;
  IcedHashMap<ASTGroup.G,String> gss=ASTGroup.doGroups(fr,gbCols,ASTGroup.aggNRows());
  final ASTGroup.G[] grps=gss.keySet().toArray(new ASTGroup.G[gss.size()]);
  final int[] ordCols=new ASTNumList(0,gbCols.length).expand4();
  Arrays.sort(grps,new java.util.Comparator<ASTGroup.G>(){
    @Override public int compare(    ASTGroup.G g1,    ASTGroup.G g2){
      for (      int i : ordCols) {
        if (Double.isNaN(g1._gs[i]) && !Double.isNaN(g2._gs[i]))         return -1;
        if (!Double.isNaN(g1._gs[i]) && Double.isNaN(g2._gs[i]))         return 1;
        if (g1._gs[i] != g2._gs[i])         return g1._gs[i] < g2._gs[i] ? -1 : 1;
      }
      return 0;
    }
    @Override public boolean equals(    Object o){
      throw H2O.unimpl();
    }
  }
);
  for (int gnum=0; gnum < grps.length; gnum++)   grps[gnum]._dss[0][0]=gnum;
  Vec[] vgrps=new BuildGroup(gbCols,gss).doAll(gss.size(),Vec.T_NUM,fr).close();
  final RemoteRapids[] remoteTasks=new RemoteRapids[gss.size()];
  Futures fs=new Futures();
  for (int i=0; i < remoteTasks.length; i++)   fs.add(RPC.call(vgrps[i]._key.home_node(),remoteTasks[i]=new RemoteRapids(fr,vgrps[i]._key,fun,scope)));
  fs.blockForPending();
  final double[] res0=remoteTasks[0]._result;
  String[] fcnames=new String[res0.length];
  for (int i=0; i < res0.length; i++)   fcnames[i]="ddply_C" + (i + 1);
  MRTask mrfill=new MRTask(){
    @Override public void map(    Chunk[] c,    NewChunk[] ncs){
      int start=(int)c[0].start();
      for (int i=0; i < c[0]._len; ++i) {
        ASTGroup.G g=grps[i + start];
        int j;
        for (j=0; j < g._gs.length; j++)         ncs[j].addNum(g._gs[j]);
        double[] res=remoteTasks[i + start]._result;
        for (int a=0; a < res0.length; a++)         ncs[j++].addNum(res[a]);
      }
    }
  }
;
  Frame f=ASTGroup.buildOutput(gbCols,res0.length,fr,fcnames,gss.size(),mrfill);
  return new ValFrame(f);
}
