def __init__(self, **kwargs):
    super(H2OGeneralizedLinearEstimator, self).__init__()
    self._parms = {}
    names_list = {u'model_id', u'training_frame', u'validation_frame', u'nfolds', u'seed', u'keep_cross_validation_predictions', u'keep_cross_validation_fold_assignment', u'fold_assignment', u'fold_column', u'response_column', u'ignored_columns', u'ignore_const_cols', u'score_each_iteration', u'offset_column', u'weights_column', u'family', u'tweedie_variance_power', u'tweedie_link_power', u'solver', u'alpha', u'lambda_', u'lambda_search', u'early_stopping', u'nlambdas', u'standardize', u'missing_values_handling', u'compute_p_values', u'remove_collinear_columns', u'intercept', u'non_negative', u'max_iterations', u'objective_epsilon', u'beta_epsilon', u'gradient_epsilon', u'link', u'prior', u'lambda_min_ratio', u'beta_constraints', u'max_active_predictors', u'interactions', u'balance_classes', u'class_sampling_factors', u'max_after_balance_size', u'max_confusion_matrix_size', u'max_hit_ratio_k', u'max_runtime_secs'}
    if (u'Lambda' in kwargs):
        kwargs[u'lambda_'] = kwargs.pop(u'Lambda')
    for (pname, pvalue) in kwargs.items():
        if (pname == u'model_id'):
            self._id = pvalue
            self._parms[u'model_id'] = pvalue
        elif (pname in names_list):
            setattr(self, pname, pvalue)
        else:
            raise H2OValueError((u'Unknown parameter %s = %r' % (pname, pvalue)))
