{
  try {
    long numRows=fr.anyVec().length();
    Log.info("Parse result for " + job.dest() + " ("+ Long.toString(numRows)+ " rows):");
    Vec[] vecArr=fr.vecs();
    for (int i=0; i < vecArr.length; i++) {
      Vec v=vecArr[i];
      boolean isCategorical=v.isEnum();
      boolean isConstant=v.isConst();
      String CStr=String.format("C%d:",i + 1);
      String typeStr=String.format("%s",(v.isUUID() ? "UUID" : (isCategorical ? "categorical" : "numeric")));
      String minStr=String.format("min(%f)",v.min());
      String maxStr=String.format("max(%f)",v.max());
      long numNAs=v.naCnt();
      String naStr=(numNAs > 0) ? String.format("na(%d)",numNAs) : "";
      String isConstantStr=isConstant ? "constant" : "";
      String numLevelsStr=isCategorical ? String.format("numLevels(%d)",v.domain().length) : "";
      boolean printLogSeparatorToStdout=false;
      boolean printColumnToStdout;
{
        final int MAX_HEAD_TO_PRINT_ON_STDOUT=10;
        final int MAX_TAIL_TO_PRINT_ON_STDOUT=10;
        if (vecArr.length <= (MAX_HEAD_TO_PRINT_ON_STDOUT + MAX_TAIL_TO_PRINT_ON_STDOUT)) {
          printColumnToStdout=true;
        }
 else         if (i < MAX_HEAD_TO_PRINT_ON_STDOUT) {
          printColumnToStdout=true;
        }
 else         if (i == MAX_HEAD_TO_PRINT_ON_STDOUT) {
          printLogSeparatorToStdout=true;
          printColumnToStdout=false;
        }
 else         if ((i + MAX_TAIL_TO_PRINT_ON_STDOUT) < vecArr.length) {
          printColumnToStdout=false;
        }
 else {
          printColumnToStdout=true;
        }
      }
      if (printLogSeparatorToStdout) {
        System.out.println("Additional column information only sent to log file...");
      }
      if (printColumnToStdout) {
        Log.info(String.format("    %-8s %15s %20s %20s %15s %11s %16s",CStr,typeStr,minStr,maxStr,naStr,isConstantStr,numLevelsStr));
      }
 else {
        Log.info_no_stdout(String.format("    %-8s %15s %20s %20s %15s %11s %16s",CStr,typeStr,minStr,maxStr,naStr,isConstantStr,numLevelsStr));
      }
    }
  }
 catch (  Exception ignore) {
  }
}
