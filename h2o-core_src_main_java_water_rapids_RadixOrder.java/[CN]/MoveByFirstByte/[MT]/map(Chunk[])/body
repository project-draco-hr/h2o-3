{
  long myCounts[]=_counts[chk[0].cidx()];
  for (int r=0; r < chk[0]._len; r++) {
    long thisx=chk[0].at8(r);
    int MSBvalue=(int)(thisx >> (_biggestBit - 8) & 0xFFL);
    long target=myCounts[MSBvalue]++;
    int chunk=(int)(target / _batchSize);
    int offset=(int)(target % _batchSize);
    _o[MSBvalue][chunk][offset]=(long)r + chk[0].start();
    byte this_x[]=_x[MSBvalue][chunk];
    offset*=_keySize;
    for (int i=_bytesUsed[0] - 1; i >= 0; i--) {
      this_x[offset + i]=(byte)(thisx & 0xFF);
      thisx>>=8;
    }
    for (int c=1; c < chk.length; c++) {
      offset+=_bytesUsed[c - 1] - 1;
      thisx=chk[c].at8(r);
      for (int i=_bytesUsed[c] - 1; i >= 0; i--) {
        this_x[offset + i]=(byte)(thisx & 0xFF);
        thisx>>=8;
      }
    }
  }
}
