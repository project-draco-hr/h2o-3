{
  long t0=System.nanoTime();
  _biggestBit=new int[_whichCols.length];
  _bytesUsed=new int[_whichCols.length];
  for (int i=0; i < _whichCols.length; i++) {
    Vec col=_DF.vec(_whichCols[i]);
    _biggestBit[i]=1 + (int)Math.floor(Math.log(col.max()) / Math.log(2));
    _bytesUsed[i]=(int)Math.ceil(_biggestBit[i] / 8.0);
  }
  if (_biggestBit[0] < 8)   Log.warn("biggest bit should be >= 8 otherwise need to dip into next column (TODO)");
  int keySize=ArrayUtils.sum(_bytesUsed);
  int batchSize=256 * 1024 * 1024 / Math.max(keySize,8) / 2;
  System.out.println("Time to use rollup stats to determine biggestBit: " + (System.nanoTime() - t0) / 1e9);
  t0=System.nanoTime();
  new RadixCount(_isLeft,_biggestBit[0],_whichCols[0]).doAll(_DF.vec(_whichCols[0]));
  System.out.println("Time of MSB count MRTask left local on each node (no reduce): " + (System.nanoTime() - t0) / 1e9);
  t0=System.nanoTime();
  Key linkTwoMRTask=Key.make();
  SplitByMSBLocal tmp=new SplitByMSBLocal(_isLeft,_biggestBit[0],keySize,batchSize,_bytesUsed,_whichCols,linkTwoMRTask).doAll(_DF.vecs(_whichCols));
  System.out.println("SplitByMSBLocal MRTask (all local per node, no network) took : " + (System.nanoTime() - t0) / 1e9);
  System.out.print(tmp.profString());
  t0=System.nanoTime();
  new SendSplitMSB(linkTwoMRTask).doAllNodes();
  System.out.println("SendSplitMSB across all nodes took : " + (System.nanoTime() - t0) / 1e9);
  RPC[] radixOrders=new RPC[256];
  System.out.print("Sending SingleThreadRadixOrder async RPC calls ... ");
  t0=System.nanoTime();
  for (int i=0; i < 256; i++) {
    radixOrders[i]=new RPC<>(SplitByMSBLocal.ownerOfMSB(i),new SingleThreadRadixOrder(_DF,_isLeft,batchSize,keySize,i)).call();
  }
  System.out.println("took : " + (System.nanoTime() - t0) / 1e9);
  System.out.print("Waiting for RPC SingleThreadRadixOrder to finish ... ");
  t0=System.nanoTime();
  int i=0;
  for (  RPC rpc : radixOrders) {
    rpc.get();
    i++;
  }
  System.out.println("took " + (System.nanoTime() - t0) / 1e9);
  tryComplete();
}
