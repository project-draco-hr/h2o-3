{
  long t0=System.nanoTime(), t1;
  initBaseShift();
  int keySize=ArrayUtils.sum(_bytesUsed);
  int batchSize=256 * 1024 * 1024 / Math.max(keySize,8) / 2;
  System.out.println("Time to use rollup stats to determine biggestBit: " + ((t1=System.nanoTime()) - t0) / 1e9);
  t0=t1;
  if (_whichCols.length > 0)   new RadixCount(_isLeft,_base[0],_shift[0],_whichCols[0],_isLeft ? _id_maps : null).doAll(_DF.vec(_whichCols[0]));
  System.out.println("Time of MSB count MRTask left local on each node (no reduce): " + ((t1=System.nanoTime()) - t0) / 1e9);
  t0=t1;
  Key linkTwoMRTask=Key.make();
  if (_whichCols.length > 0)   new SplitByMSBLocal(_isLeft,_base,_shift[0],keySize,batchSize,_bytesUsed,_whichCols,linkTwoMRTask,_id_maps).doAll(_DF.vecs(_whichCols));
  System.out.println("SplitByMSBLocal MRTask (all local per node, no network) took : " + ((t1=System.nanoTime()) - t0) / 1e9);
  t0=t1;
  if (_whichCols.length > 0)   new SendSplitMSB(linkTwoMRTask).doAllNodes();
  System.out.println("SendSplitMSB across all nodes took : " + ((t1=System.nanoTime()) - t0) / 1e9);
  t0=t1;
  RPC[] radixOrders=new RPC[256];
  System.out.print("Sending SingleThreadRadixOrder async RPC calls ... ");
  for (int i=0; i < 256; i++)   radixOrders[i]=new RPC<>(SplitByMSBLocal.ownerOfMSB(i),new SingleThreadRadixOrder(_DF,_isLeft,batchSize,keySize,i)).call();
  System.out.println("took : " + ((t1=System.nanoTime()) - t0) / 1e9);
  t0=t1;
  System.out.print("Waiting for RPC SingleThreadRadixOrder to finish ... ");
  for (  RPC rpc : radixOrders)   rpc.get();
  System.out.println("took " + (System.nanoTime() - t0) / 1e9);
  tryComplete();
}
