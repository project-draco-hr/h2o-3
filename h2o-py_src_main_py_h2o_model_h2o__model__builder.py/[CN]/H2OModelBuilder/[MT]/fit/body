def fit(self, x=None, y=None, validation_frame=None):
    '\n        Fit the model to the inputs x, y\n        :param x: A list[] of 0-based indices or column names.\n        :param y: A 0-based index or a column name\n        :return: Returns self (a fitted model).\n        '
    saved_parameters = self._update()
    (x, y) = self._set_and_check_x_y(x, y)
    dataset = self._check_training_frame(x)
    (x, y) = H2OModelBuilder._indexed_columns_to_named_columns(x, y, dataset)
    self._set_ignored_columns(x, y, dataset)
    if y:
        self._set_response_column(y)
    self._set_training_frame(dataset)
    self._set_validation_frame(validation_frame)
    model_params = self._fold_default_params_with_user_params()
    url_suffix = ('ModelBuilders/' + self._algo)
    j = H2OJob(h2oConn.do_safe_post_json(url_suffix=url_suffix, params=model_params)).poll()
    self._set_fitted_model_and_model_type(j.destination_key)
    h2o.remove(self._parameters['training_frame'])
    if (self._parameters['validation_frame'] is not None):
        h2o.remove(self._parameters['validation_frame'])
    self._parameters = saved_parameters
    return self
