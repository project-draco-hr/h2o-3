def generate_models(n_models, n_rows, n_cols, n_rows_per_model, n_trees, max_depth, target_dir):
    target_dir = os.path.abspath(target_dir)
    if (not os.path.exists(target_dir)):
        os.makedirs(target_dir)
    assert (n_rows_per_model <= n_rows), u'Not enough rows to train any model'
    assert (n_rows <= (n_rows_per_model * n_models)), u'Too many rows'
    assert os.path.isdir(target_dir), (u'%s is not a directory' % target_dir)
    genmodel_jar = os.path.abspath(u'../../../h2o-genmodel/build/libs/h2o-genmodel-all.jar')
    assert os.path.exists(genmodel_jar), (u'Cannot find ' + genmodel_jar)
    df = h2o.create_frame(rows=n_rows, cols=n_cols, missing_fraction=0, integer_fraction=1, has_response=True, response_factors=1, positive_response=True)
    assert (df.names == ([u'response'] + [(u'C%d' % n) for n in range(1, (n_cols + 1))]))
    assert (df.types[u'response'] == u'real')
    assert all(((v == u'int') for (k, v) in df.types.items() if (k != u'response')))
    print((u'Dataset created (%d x %d).\n' % (df.nrow, df.ncol)))
    for i in range(n_models):
        estimator = random.choice([H2ORandomForestEstimator, H2OGradientBoostingEstimator])
        start_row = random.randint(0, (n_rows - n_rows_per_model))
        end_row = (start_row + n_rows_per_model)
        time0 = time.time()
        print((u'%-4d  %-30s' % ((i + 1), estimator.__name__)), end=u'')
        model = estimator(ntrees=n_trees, max_depth=max_depth)
        model.train(training_frame=df[start_row:end_row, :])
        print((u' %.3fs' % (time.time() - time0)), end=u'')
        model_file = h2o.api((u'GET /3/Models/%s/data' % model.model_id), save_to=target_dir)
        assert os.path.exists(model_file)
        simple_file = (model_file[(len(target_dir) + 1):] if model_file.startswith((target_dir + u'/')) else model_file)
        print((u' => %s  (%d bytes)' % (simple_file, os.stat(model_file).st_size)))
        h2o.remove(model)
