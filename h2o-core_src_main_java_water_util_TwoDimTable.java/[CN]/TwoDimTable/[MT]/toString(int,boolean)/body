{
  if (pad < 0)   throw new IllegalArgumentException("pad must be a non-negative integer");
  final int rowDim=getRowDim();
  final int colDim=getColDim();
  final int actualRowDim=full ? rowDim : Math.min(PRINTOUT_ROW_LIMIT + 1,rowDim);
  final String[][] cellStrings=new String[actualRowDim + 1][colDim + 1];
  for (  String[] row : cellStrings)   Arrays.fill(row,"");
  cellStrings[0][0]=colHeaderForRowHeaders != null ? colHeaderForRowHeaders : "";
  int row=0;
  for (int r=0; r < rowDim; ++r) {
    if (!full && skip(r))     continue;
    cellStrings[row + 1][0]=rowHeaders[r];
    row++;
  }
  for (int c=0; c < colDim; ++c)   cellStrings[0][c + 1]=colHeaders[c];
  for (int c=0; c < colDim; ++c) {
    final String formatString=colFormats[c];
    row=0;
    for (int r=0; r < rowDim; ++r) {
      if (!full && skip(r))       continue;
      Object o=get(r,c);
      if ((o == null) || o instanceof Double && isEmpty((double)o)) {
        cellStrings[row + 1][c + 1]="";
        row++;
        continue;
      }
 else       if (o instanceof Double && Double.isNaN((double)o)) {
        cellStrings[row + 1][c + 1]="NaN";
        row++;
        continue;
      }
      try {
        if (o instanceof Double)         cellStrings[row + 1][c + 1]=String.format(formatString,(Double)o);
 else         if (o instanceof Float)         cellStrings[row + 1][c + 1]=String.format(formatString,(Float)o);
 else         if (o instanceof Integer)         cellStrings[row + 1][c + 1]=String.format(formatString,(Integer)o);
 else         if (o instanceof Long)         cellStrings[row + 1][c + 1]=String.format(formatString,(Long)o);
 else         if (o instanceof String)         cellStrings[row + 1][c + 1]=(String)o;
 else         cellStrings[row + 1][c + 1]=String.format(formatString,cellValues[r][c]);
      }
 catch (      Throwable t) {
        cellStrings[row + 1][c + 1]=o.toString();
      }
      row++;
    }
  }
  final int[] colLen=new int[colDim + 1];
  for (int c=0; c <= colDim; ++c) {
    for (int r=0; r <= actualRowDim; ++r) {
      colLen[c]=Math.max(colLen[c],cellStrings[r][c].length());
    }
  }
  final StringBuilder sb=new StringBuilder();
  if (tableHeader.length() > 0) {
    sb.append(tableHeader);
  }
  if (tableDescription.length() > 0) {
    sb.append(" (").append(tableDescription).append(")");
  }
  sb.append(":\n");
  for (int r=0; r <= actualRowDim; ++r) {
    int len=colLen[0];
    if (actualRowDim != rowDim && r - 1 == PRINTOUT_ROW_LIMIT / 2) {
      assert(!full);
      sb.append("---");
    }
 else {
      if (len > 0)       sb.append(String.format("%" + colLen[0] + "s",cellStrings[r][0]));
      for (int c=1; c <= colDim; ++c) {
        len=colLen[c];
        if (len > 0)         sb.append(String.format("%" + (len + pad) + "s",cellStrings[r][c].equals("null") ? "" : cellStrings[r][c]));
      }
    }
    sb.append("\n");
  }
  return sb.toString();
}
