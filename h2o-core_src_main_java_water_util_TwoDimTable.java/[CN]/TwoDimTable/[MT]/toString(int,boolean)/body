{
  if (pad < 0)   throw new IllegalArgumentException("pad must be a non-negative integer");
  final int rowDim=getRowDim();
  final int colDim=getColDim();
  final int actualRowDim=full ? rowDim : Math.min(PRINTOUT_ROW_LIMIT + 1,rowDim);
  final String[][] cellStrings=new String[actualRowDim + 1][colDim + 1];
  for (  String[] row : cellStrings)   Arrays.fill(row,"");
  cellStrings[0][0]=colHeaderForRowHeaders != null ? colHeaderForRowHeaders : "";
  int row=0;
  for (int r=0; r < rowDim; ++r) {
    if (!full && skip(r))     continue;
    cellStrings[row + 1][0]=rowHeaders[r];
    row++;
  }
  for (int c=0; c < colDim; ++c)   cellStrings[0][c + 1]=colHeaders[c];
  for (int c=0; c < colDim; ++c) {
    final String formatString=colFormats[c];
    row=0;
    for (int r=0; r < rowDim; ++r) {
      if (!full && skip(r))       continue;
switch (colTypes[c]) {
case "double":
        cellStrings[row + 1][c + 1]=get(r,c) == null || isEmpty((Double)get(r,c)) ? "" : String.format(formatString,(Double)cellValues[r][c].get());
      break;
case "float":
    cellStrings[row + 1][c + 1]=get(r,c) == null ? "" : String.format(formatString,(Float)cellValues[r][c].get());
  break;
case "int":
cellStrings[row + 1][c + 1]=get(r,c) == null ? "" : String.format(formatString,(Integer)cellValues[r][c].get());
break;
case "long":
cellStrings[row + 1][c + 1]=get(r,c) == null ? "" : String.format(formatString,(Long)cellValues[r][c].get());
break;
default :
if (get(r,c) != null) cellStrings[row + 1][c + 1]=String.format(formatString,cellValues[r][c]);
break;
}
row++;
}
}
final int[] colLen=new int[colDim + 1];
for (int c=0; c <= colDim; ++c) {
for (int r=0; r <= actualRowDim; ++r) {
colLen[c]=Math.max(colLen[c],cellStrings[r][c].length());
}
}
final StringBuilder sb=new StringBuilder();
if (tableHeader.length() > 0) {
sb.append(tableHeader);
}
if (tableDescription.length() > 0) {
sb.append(" (").append(tableDescription).append(")");
}
sb.append(":\n");
for (int r=0; r <= actualRowDim; ++r) {
int len=colLen[0];
if (actualRowDim != rowDim && r - 1 == PRINTOUT_ROW_LIMIT / 2) {
assert(!full);
sb.append("---");
}
 else {
if (len > 0) sb.append(String.format("%" + colLen[0] + "s",cellStrings[r][0]));
for (int c=1; c <= colDim; ++c) {
len=colLen[c];
if (len > 0) sb.append(String.format("%" + (len + pad) + "s",cellStrings[r][c].equals("null") ? "" : cellStrings[r][c]));
}
}
sb.append("\n");
}
return sb.toString();
}
