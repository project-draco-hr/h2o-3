{
  AST ary=E.parse();
  AST s=E.parse();
  if (s instanceof ASTLongList)   _gbCols=((ASTLongList)s)._l;
 else   if (s instanceof ASTNum)   _gbCols=new long[]{(long)((ASTNum)s)._d};
 else   if (s instanceof ASTAry)   _gbColsDelayed=((ASTAry)s)._a;
 else   if (s instanceof ASTStringList)   _gbColsDelayedByName=((ASTStringList)s)._s;
 else   if (s instanceof ASTDoubleList) {
    double[] d=((ASTDoubleList)s)._d;
    _gbCols=new long[d.length];
    for (int i=0; i < d.length; ++i)     _gbCols[i]=(long)d[i];
  }
 else   throw new IllegalArgumentException("Badly formed AST. Columns argument must be a llist or number. Got: " + s.getClass());
  _agg=((AGG)E.parse())._aggs;
  s=E.parse();
  if (s instanceof ASTLongList)   _orderByCols=((ASTLongList)s)._l;
 else   if (s instanceof ASTNum)   _orderByCols=new long[]{(long)((ASTNum)s)._d};
 else   if (s instanceof ASTNull)   _orderByCols=null;
 else   throw new IllegalArgumentException("Order by column must be an index or list of indexes. Got " + s.getClass());
  E.eatEnd();
  ASTGroupBy res=(ASTGroupBy)clone();
  res._asts=new AST[]{ary};
  return res;
}
