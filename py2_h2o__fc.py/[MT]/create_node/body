def create_node(possMember, h2oNodes, expectedSize, hdfsSetup):
    (hdfs_version, hdfs_config, hdfs_name_node) = hdfsSetup
    (http_addr, sep, port) = possMember.rstrip('\n').partition(':')
    http_addr = http_addr.lstrip('/')
    if (port == ''):
        port = '54321'
    if (http_addr == ''):
        http_addr = '127.0.0.1'
    possMemberList = []
    gc = do_json_request(http_addr, port, 'Cloud.json', timeout=10)
    if (gc is None):
        return possMemberList
    version = gc['version']
    if (not version.startswith('0')):
        raise Exception(("h2o version at node[0] doesn't look like h2o-dev version. (start with 0) %s" % version))
    consensus = gc['consensus']
    locked = gc['locked']
    cloud_size = gc['cloud_size']
    cloud_name = gc['cloud_name']
    nodes = gc['nodes']
    if (expectedSize and (cloud_size != expectedSize)):
        raise Exception(('cloud_size %s at %s disagrees with -expectedSize %s' % (cloud_size, cloud_name, expectedSize)))
    print "here's some info about the java heaps in the cloud you said you already built for me"
    print 'Also some info about ncpus'
    java_heap_GB_list = []
    num_cpus_list = []
    name_list = []
    for (i, n) in enumerate(nodes):
        print 'max_mem (GB):', ('%0.2f' % ((n['max_mem'] + 0.0) / ((1024 * 1024) * 1024)))
        print 'tot_mem (GB):', ('%0.2f' % ((n['tot_mem'] + 0.0) / ((1024 * 1024) * 1024)))
        java_heap_GB = ((n['tot_mem'] + 0.0) / ((1024 * 1024) * 1024))
        java_heap_GB = int(round(java_heap_GB, 0))
        num_cpus = n['num_cpus']
        print 'java_heap_GB:', java_heap_GB
        print 'num_cpus:', num_cpus
        java_heap_GB_list.append(java_heap_GB)
        num_cpus_list.append(num_cpus)
        name = n['h2o']['node'].lstrip('/')
        name_list.append(name)
        possMemberList.append(name)
        (ip, sep, port) = name.partition(':')
        if ((not ip) or (not port)):
            raise Exception(("bad ip or port parsing from h2o get_cloud nodes 'name' %s" % n['name']))
        if (i > 0):
            lasti = (i - 1)
            if (java_heap_GB != java_heap_GB_list[lasti]):
                raise Exception(("You have two nodes %s %s with different java heap sizes %s %s.                     Assuming that's bad/not your intent)" % (name[i], name[lasti], java_heap_GB, java_heap_GB_list[lasti])))
            if (num_cpus != num_cpus_list[lasti]):
                raise Exception(("You have two nodes %s %s with different # of cpus (threads) %s %s.                     Assuming that's bad/not your intent)" % (name[i], name[lasti], num_cpus, num_cpus_list[lasti])))
        node_id = len(h2oNodes)
        use_maprfs = ('mapr' in hdfs_version)
        use_hdfs = (not use_maprfs)
        node = {'http_addr': ip, 'port': int(port), 'java_heap_GB': java_heap_GB, 'node_id': node_id, 'remoteH2O': 'true', 'sandbox_error_was_reported': 'false', 'sandbox_ignore_errors': 'false', 'username': '0xcustomer', 'redirect_import_folder_to_s3_path': 'false', 'redirect_import_folder_to_s3n_path': 'false', 'delete_keys_at_teardown': 'false', 'use_hdfs': use_hdfs, 'use_maprfs': use_maprfs, 'h2o_remote_buckets_root': 'false', 'hdfs_version': hdfs_version, 'hdfs_name_node': hdfs_name_node, 'hdfs_config': hdfs_config, 'aws_credentials': 'false', }
        if (name not in h2oNodes):
            h2oNodes[name] = node
            print ('Added node %s to possMemberList' % name)
    return possMemberList
