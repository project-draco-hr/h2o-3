{
  av=new AppendableVec(Vec.newKey(),Vec.T_NUM);
  nc=new NewChunk(av,0);
  for (  double d : test_seq)   nc.addNum(d);
  Chunk c=nc.compress();
  for (int i=0; i < test_seq.length; ++i) {
    if (Double.isNaN(test_seq[i]))     Assert.assertTrue(c.isNA(i));
 else     Assert.assertEquals("mismatch at line " + i + ": expected "+ test_seq[i]+ ", got "+ c.atd(i),+test_seq[i],c.atd(i),0);
  }
  av=new AppendableVec(Vec.newKey(),Vec.T_NUM);
  nc=new NewChunk(av,0);
  for (  double d : test_seq)   if (Double.isNaN(d))   nc.addNA();
 else   nc.addNum((int)d,0);
  c=nc.compress();
  for (int i=0; i < test_seq.length; ++i) {
    if (Double.isNaN(test_seq[i]))     Assert.assertTrue(c.isNA(i));
 else     Assert.assertEquals("mismatch at line " + i + ": expected "+ test_seq[i]+ ", got "+ c.atd(i),+test_seq[i],c.atd(i),0);
  }
}
