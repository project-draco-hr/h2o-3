{
  NewChunk nc=new NewChunk(null,0,false);
  int N=1000;
  nc.addZeros(N);
  nc.addNum(Math.PI);
  nc.addZeros(N);
  nc.addNum(Math.E);
  Chunk c=nc.compress();
  int i=0;
  for (; i < N; )   assertEquals(0,c.atd(i++),1e-16);
  assertEquals(i,c.nextNZ(-1));
  assertEquals(Math.PI,c.atd(i++),1e-16);
  for (; i < 2 * N + 1; )   assertEquals(0,c.atd(i++),1e-16);
  assertEquals(i,c.nextNZ(c.nextNZ(-1)));
  assertEquals(Math.E,c.atd(i++),1e-16);
  nc=new NewChunk(null,0,false);
  nc.addNum(Math.PI);
  nc.addNum(Double.MAX_VALUE);
  nc.addNum(Double.MIN_VALUE);
  nc.addZeros(5);
  nc.addNum(Math.E);
  nc.addZeros(1000000);
  c=nc.compress();
  assertEquals(0,c.nextNZ(-1));
  assertEquals(1,c.nextNZ(0));
  assertEquals(2,c.nextNZ(1));
  assertEquals(8,c.nextNZ(2));
  assertEquals(c.atd(0),Math.PI,1e-16);
  assertEquals(c.atd(8),Math.E,1e-16);
  nc=new NewChunk(null,0,false);
  double[] rvals=new double[2 * 1024];
  nc.addNum(rvals[0]=Math.PI);
  nc.addNum(rvals[1]=Double.MAX_VALUE);
  nc.addNum(rvals[2]=Double.MIN_VALUE);
  nc.addZeros(5);
  nc.addNum(rvals[2 + 1 + 5]=Math.E);
  nc.addZeros(512);
  int off=nc._len;
  assertTrue(nc.isSparseZero());
  Random rnd=new Random();
  for (int j=0; j < 1024; ++j)   nc.addNum(rvals[off + j]=rnd.nextDouble());
  assertTrue(!nc.isSparseZero());
  nc.addNA();
  c=nc.compress();
  assertEquals(1546,c._len);
  for (int j=0; j < c._len - 1; ++j)   assertEquals(rvals[j],c.atd(j),0);
  nc=new NewChunk(null,0,false);
  rvals=new double[2 * 1024];
  Arrays.fill(rvals,Double.NaN);
  nc.addNum(rvals[0]=Math.PI);
  nc.addNum(rvals[1]=Double.MAX_VALUE);
  nc.addNum(rvals[2]=Double.MIN_VALUE);
  nc.addNAs(5);
  nc.addNum(rvals[2 + 1 + 5]=Math.E);
  nc.addNAs(512);
  off=nc._len;
  assertTrue(nc.isSparseNA());
  for (int j=0; j < 1024; ++j)   nc.addNum(rvals[off + j]=rnd.nextDouble());
  assertTrue(!nc.isSparseNA());
  nc.addNA();
  c=nc.compress();
  assertEquals(1546,c._len);
  for (int j=0; j < c._len - 1; ++j)   if (Double.isNaN(rvals[j]))   assertTrue(c.isNA(j));
 else   assertEquals(rvals[j],c.atd(j),0);
}
