{
  Key rebalanced=Key.make("rebalanced");
  Vec v=null;
  Frame fr=null;
  try {
    for (int i=0; i < 10; ++i) {
      v=Vec.makeVec(new double[]{0,1,2,3,4,5,6,7,8,9},Vec.newKey());
      Futures fs=new Futures();
      assertEquals(0,v.min(),0);
      assertEquals(9,v.max(),0);
      assertEquals(4.5,v.mean(),1e-8);
      H2O.submitTask(new RebalanceDataSet(new Frame(v),rebalanced,10)).join();
      fr=DKV.get(rebalanced).get();
      Vec v2=fr.anyVec();
      assertEquals(0,v2.min(),0);
      assertEquals(9,v2.max(),0);
      assertEquals(4.5,v.mean(),1e-8);
      v2.set(i,-100);
      assertEquals(-100,v2.min(),0);
      v2.set(i,i);
      v2.startRollupStats(fs);
      v2.startRollupStats(fs);
      v2.startRollupStats(fs,true);
      assertEquals(0,v2.min(),0);
      long[] bins=v2.bins();
      assertEquals(10,bins.length);
      for (      long l : bins)       assertEquals(1,l);
      Vec.Writer w=v2.open();
      try {
        v2.min();
        assertTrue("should have thrown IAE since we're requesting rollups while changing the Vec (got Vec.Writer)",false);
      }
 catch (      DistributedException de) {
        assertTrue(de.getMessage().contains("IllegalArgumentException"));
      }
catch (      IllegalArgumentException ie) {
      }
      w.close(fs);
      fs.blockForPending();
      assertEquals(0,v2.min(),0);
      fr.delete();
      v.remove();
      fr=null;
    }
  }
  finally {
    if (v != null)     v.remove();
    if (fr != null)     fr.delete();
  }
}
