{
  super(destKey,(DeepLearningParameters)cp._parms.clone(),(DeepLearningModelOutput)cp._output.clone());
  if (store_best_model) {
    model_info=cp.model_info.deep_clone();
    model_info.data_info=dataInfo.deep_clone();
  }
 else {
    model_info=(DeepLearningModelInfo)cp.model_info.clone();
    model_info.data_info=dataInfo;
    _parms._checkpoint=cp._key;
  }
  actual_best_model_key=cp.actual_best_model_key;
  start_time=cp.start_time;
  run_time=cp.run_time;
  training_rows=cp.training_rows;
  validation_rows=cp.validation_rows;
  _bestError=cp._bestError;
  errors=cp.errors.clone();
  for (int i=0; i < errors.length; ++i)   errors[i]=cp.errors[i].deep_clone();
  _output.scoringHistory=null;
  _timeLastScoreEnter=System.currentTimeMillis();
  _timeLastScoreStart=0;
  _timeLastScoreEnd=0;
  _timeLastPrintStart=0;
  assert(Arrays.equals(_key._kb,destKey._kb));
}
