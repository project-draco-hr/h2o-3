{
  super(destKey,parms == null ? (DeepLearningParameters)cp._parms.clone() : parms,(DeepLearningModelOutput)cp._output.clone());
  assert(_parms != cp._parms);
  model_info=IcedUtils.deepCopy(cp.model_info);
  if (store_best_model) {
    model_info.data_info=IcedUtils.deepCopy(dataInfo);
  }
 else {
    model_info.data_info=dataInfo;
    if (parms != null) {
      assert(_parms == parms);
      assert(_parms._checkpoint == parms._checkpoint);
      assert(_parms._checkpoint == cp._key);
    }
  }
  assert(get_params() != cp.model_info().get_params());
  _dist=new Distribution(get_params());
  assert(_dist.distribution != DistributionFamily.AUTO);
  actual_best_model_key=cp.actual_best_model_key;
  time_of_start_ms=cp.time_of_start_ms;
  total_training_time_ms=cp.total_training_time_ms;
  total_checkpointed_run_time_ms=cp.total_training_time_ms;
  total_scoring_time_ms=cp.total_scoring_time_ms;
  total_setup_time_ms=cp.total_setup_time_ms;
  training_rows=cp.training_rows;
  validation_rows=cp.validation_rows;
  _bestLoss=cp._bestLoss;
  epoch_counter=cp.epoch_counter;
  iterations=cp.iterations;
  scoringInfo=cp.scoringInfo.clone();
  for (int i=0; i < scoringInfo.length; ++i)   scoringInfo[i]=IcedUtils.deepCopy(cp.scoringInfo[i]);
  _output.errors=last_scored();
  makeWeightsBiases(destKey);
  _output._scoring_history=DeepLearningScoringInfo.createScoringHistoryTable(scoringInfo,(null != get_params()._valid),false,_output.getModelCategory(),_output.isAutoencoder());
  _output._variable_importances=calcVarImp(last_scored().variable_importances);
  _output._names=dataInfo._adaptedFrame.names();
  _output._domains=dataInfo._adaptedFrame.domains();
  assert(Arrays.equals(_key._kb,destKey._kb));
}
