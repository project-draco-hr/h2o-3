{
  for (int w=0; w < dense_row_weights.length; ++w) {
    final Random rng=water.util.RandomUtils.getDeterRNG(get_params().seed + 0xBAD5EED + w+ 1);
    final double range=Math.sqrt(6. / (units[w] + units[w + 1]));
    for (int i=0; i < get_weights(w).rows(); i++) {
      for (int j=0; j < get_weights(w).cols(); j++) {
        if (get_params().initial_weight_distribution == DeepLearningParameters.InitialWeightDistribution.UniformAdaptive) {
          if (w == dense_row_weights.length - 1 && get_params().classification)           get_weights(w).set(i,j,(float)(4. * uniformDist(rng,-range,range)));
 else           get_weights(w).set(i,j,(float)uniformDist(rng,-range,range));
        }
 else         if (get_params().initial_weight_distribution == DeepLearningParameters.InitialWeightDistribution.Uniform) {
          get_weights(w).set(i,j,(float)uniformDist(rng,-get_params().initial_weight_scale,get_params().initial_weight_scale));
        }
 else         if (get_params().initial_weight_distribution == DeepLearningParameters.InitialWeightDistribution.Normal) {
          get_weights(w).set(i,j,(float)(rng.nextGaussian() * get_params().initial_weight_scale));
        }
      }
    }
  }
}
