{
  boolean classification=expensive || dl.nclasses() != 0 ? dl.isClassifier() : _loss == CrossEntropy || _loss == ModifiedHuber;
  if (_hidden == null || _hidden.length == 0)   dl.error("_hidden","There must be at least one hidden layer.");
  for (  int h : _hidden)   if (h <= 0)   dl.error("_hidden","Hidden layer size must be positive.");
  if (_mini_batch_size < 1)   dl.error("_mini_batch_size","Mini-batch size must be >= 1");
  if (!_diagnostics)   dl.warn("_diagnostics","Deprecated option: Diagnostics are always enabled.");
  if (!_autoencoder) {
    if (_valid == null)     dl.hide("_score_validation_samples","score_validation_samples requires a validation frame.");
    if (classification) {
      dl.hide("_regression_stop","regression_stop is used only with regression.");
    }
 else {
      dl.hide("_classification_stop","classification_stop is used only with classification.");
    }
    if (!classification && _valid != null || _valid == null)     dl.hide("_score_validation_sampling","score_validation_sampling requires classification and a validation frame.");
  }
 else {
    if (_nfolds > 1) {
      dl.error("_nfolds","N-fold cross-validation is not supported for Autoencoder.");
    }
  }
  if (_categorical_encoding == CategoricalEncodingScheme.Enum) {
    dl.error("_categorical_encoding","Cannot use Enum encoding for categoricals - need numbers!");
  }
  if (_activation != Activation.TanhWithDropout && _activation != Activation.MaxoutWithDropout && _activation != Activation.RectifierWithDropout && _activation != Activation.ExpRectifierWithDropout) {
    dl.hide("_hidden_dropout_ratios","hidden_dropout_ratios requires a dropout activation function.");
  }
  if (_hidden_dropout_ratios != null) {
    if (_hidden_dropout_ratios.length != _hidden.length) {
      dl.error("_hidden_dropout_ratios","Must have " + _hidden.length + " hidden layer dropout ratios.");
    }
 else     if (_activation != Activation.TanhWithDropout && _activation != Activation.MaxoutWithDropout && _activation != Activation.RectifierWithDropout && _activation != Activation.ExpRectifierWithDropout) {
      if (!_quiet_mode)       dl.hide("_hidden_dropout_ratios","Ignoring hidden_dropout_ratios because a non-dropout activation function was specified.");
    }
 else     if (ArrayUtils.maxValue(_hidden_dropout_ratios) >= 1 || ArrayUtils.minValue(_hidden_dropout_ratios) < 0) {
      dl.error("_hidden_dropout_ratios","Hidden dropout ratios must be >= 0 and <1.");
    }
  }
  if (_input_dropout_ratio < 0 || _input_dropout_ratio >= 1)   dl.error("_input_dropout_ratio","Input dropout must be >= 0 and <1.");
  if (_score_duty_cycle < 0 || _score_duty_cycle > 1)   dl.error("_score_duty_cycle","Score duty cycle must be >= 0 and <=1.");
  if (_l1 < 0)   dl.error("_l1","L1 penalty must be >= 0.");
  if (_l2 < 0)   dl.error("_l2","L2 penalty must be >= 0.");
  if (H2O.CLOUD.size() == 1 && _replicate_training_data)   dl.hide("_replicate_training_data","replicate_training_data is only valid with cloud size greater than 1.");
  if (_single_node_mode && (H2O.CLOUD.size() == 1 || !_replicate_training_data))   dl.hide("_single_node_mode","single_node_mode is only used with multi-node operation with replicated training data.");
  if (H2O.ARGS.client && _single_node_mode)   dl.error("_single_node_mode","Cannot run on a single node in client mode");
  if (_autoencoder)   dl.hide("_use_all_factor_levels","use_all_factor_levels is mandatory in combination with autoencoder.");
  if (_nfolds != 0)   dl.hide("_overwrite_with_best_model","overwrite_with_best_model is unsupported in combination with n-fold cross-validation.");
  if (_adaptive_rate) {
    dl.hide("_rate","rate is not used with adaptive_rate.");
    dl.hide("_rate_annealing","rate_annealing is not used with adaptive_rate.");
    dl.hide("_rate_decay","rate_decay is not used with adaptive_rate.");
    dl.hide("_momentum_start","momentum_start is not used with adaptive_rate.");
    dl.hide("_momentum_ramp","momentum_ramp is not used with adaptive_rate.");
    dl.hide("_momentum_stable","momentum_stable is not used with adaptive_rate.");
    if (_rate != 0.005)     dl.warn("_rate","rate cannot be specified if adaptive_rate is enabled.");
    if (_rate_annealing != 1e-6)     dl.warn("_rate_annealing","rate_annealing cannot be specified if adaptive_rate is enabled.");
    if (_rate_decay != 1)     dl.warn("_rate_decay","rate_decay cannot be specified if adaptive_rate is enabled.");
    if (_momentum_start != 0)     dl.warn("_momentum_start","momentum_start cannot be specified if adaptive_rate is enabled.");
    if (_momentum_ramp != 1e6)     dl.warn("_momentum_ramb","momentum_ramp cannot be specified if adaptive_rate is enabled.");
    if (_momentum_stable != 0)     dl.warn("_momentum_stable","momentum_stable cannot be specified if adaptive_rate is enabled.");
  }
 else {
    dl.hide("_rho","rho is only used with adaptive_rate.");
    dl.hide("_epsilon","epsilon is only used with adaptive_rate.");
  }
  if (_initial_weight_distribution == InitialWeightDistribution.UniformAdaptive) {
    dl.hide("_initial_weight_scale","initial_weight_scale is not used if initial_weight_distribution == UniformAdaptive.");
  }
  if ((_initial_weights != null || _initial_biases != null) && _checkpoint != null) {
    dl.error("_checkpoint","Cannot specify initial weights or biases during checkpoint restart. Will use the checkpoint model's weights and biases.");
  }
  if (_initial_weights != null && _initial_weights.length != _hidden.length + 1) {
    dl.error("_initial_weights","The number of initial weights matrices must be " + (_hidden.length + 1) + " (some weight matrices can be NULL/None/null).");
  }
  if (_initial_biases != null && _initial_biases.length != _hidden.length + 1) {
    dl.error("_initial_biases","The number of initial bias vectors must be " + (_hidden.length + 1) + " (some bias vectors can be NULL/None/null).");
  }
  if (_loss == null) {
    if (expensive || dl.nclasses() != 0) {
      dl.error("_loss","Loss function must be specified. Try CrossEntropy for categorical response (classification), ModifiedHuber for binomial response, Quadratic, Absolute or Huber for numerical response (regression).");
    }
  }
 else {
    if (_autoencoder && _loss == CrossEntropy)     dl.error("_loss","Cannot use CrossEntropy loss for auto-encoder.");
    if (!classification && _loss == CrossEntropy)     dl.error("_loss",technote(2,"For CrossEntropy loss, the response must be categorical."));
  }
  if (!classification && _loss == CrossEntropy)   dl.error("_loss","For CrossEntropy loss, the response must be categorical.");
  if (classification && (_loss != Automatic && _loss != CrossEntropy && _loss != Quadratic && _loss != ModifiedHuber))   dl.error("_loss","For classification tasks, the loss must be one of: Automatic, Quadratic, CrossEntropy or ModifiedHuber.");
  if (classification) {
switch (_distribution) {
case gaussian:
case huber:
case laplace:
case quantile:
case tweedie:
case gamma:
case poisson:
      dl.error("_distribution",technote(2,_distribution + " distribution is not allowed for classification."));
    break;
case AUTO:
case bernoulli:
case modified_huber:
case multinomial:
default :
  break;
}
}
 else {
switch (_distribution) {
case multinomial:
case bernoulli:
case modified_huber:
dl.error("_distribution",technote(2,_distribution + " distribution is not allowed for regression."));
break;
case tweedie:
case gamma:
case poisson:
if (_loss != Automatic) dl.error("_distribution","Only Automatic loss (deviance) is allowed for " + _distribution + " distribution.");
break;
case laplace:
if (_loss != Loss.Absolute && _loss != Automatic) dl.error("_distribution","Only Automatic or Absolute loss is allowed for " + _distribution + " distribution.");
break;
case quantile:
if (_loss != Loss.Quantile && _loss != Automatic) dl.error("_distribution","Only Automatic or Quantile loss is allowed for " + _distribution + " distribution.");
break;
case huber:
if (_loss != Loss.Huber && _loss != Automatic) dl.error("_distribution","Only Automatic or Huber loss is allowed for " + _distribution + " distribution.");
break;
case AUTO:
case gaussian:
default :
break;
}
}
if (expensive) dl.checkDistributions();
if (_score_training_samples < 0) dl.error("_score_training_samples","Number of training samples for scoring must be >= 0 (0 for all).");
if (_score_validation_samples < 0) dl.error("_score_validation_samples","Number of training samples for scoring must be >= 0 (0 for all).");
if (_autoencoder && _sparsity_beta > 0) {
if (_activation == Activation.Tanh || _activation == Activation.TanhWithDropout || _activation == Activation.ExpRectifier || _activation == Activation.ExpRectifierWithDropout) {
if (_average_activation >= 1 || _average_activation <= -1) dl.error("_average_activation","Tanh average activation must be in (-1,1).");
}
 else if (_activation == Activation.Rectifier || _activation == Activation.RectifierWithDropout) {
if (_average_activation <= 0) dl.error("_average_activation","Rectifier average activation must be positive.");
}
}
if (!_autoencoder && _sparsity_beta != 0) dl.error("_sparsity_beta","Sparsity beta can only be used for autoencoder.");
if (classification && dl.hasOffsetCol()) dl.error("_offset_column","Offset is only supported for regression.");
if (_autoencoder && _activation == Activation.Maxout) dl.error("_activation","Maxout activation is not supported for auto-encoder.");
if (_max_categorical_features < 1) dl.error("_max_categorical_features","max_categorical_features must be at least 1.");
if (_col_major) dl.error("_col_major","Deprecated: Column major data handling not supported anymore - not faster.");
if (!_sparse && _col_major) {
dl.error("_col_major","Cannot use column major storage for non-sparse data handling.");
}
if (_sparse && _elastic_averaging) {
dl.error("_elastic_averaging","Cannot use elastic averaging for sparse data handling.");
}
if (_max_w2 <= 0) {
dl.error("_max_w2","Cannot use max_w2 <= 0.");
}
if (expensive) {
if (!classification && _balance_classes) {
dl.error("_balance_classes","balance_classes requires classification.");
}
if (_class_sampling_factors != null && !_balance_classes) {
dl.error("_class_sampling_factors","class_sampling_factors requires balance_classes to be enabled.");
}
if (_replicate_training_data && null != train() && train().byteSize() > 0.9 * H2O.CLOUD.free_mem() / H2O.CLOUD.size() && H2O.CLOUD.size() > 1) {
dl.error("_replicate_training_data","Compressed training dataset takes more than 90% of avg. free available memory per node (" + 0.9 * H2O.CLOUD.free_mem() / H2O.CLOUD.size() + "), cannot run with replicate_training_data.");
}
}
if (!_elastic_averaging) {
dl.hide("_elastic_averaging_moving_rate","Elastic averaging is required for this parameter.");
dl.hide("_elastic_averaging_regularization","Elastic averaging is required for this parameter.");
}
 else {
if (_elastic_averaging_moving_rate > 1 || _elastic_averaging_moving_rate < 0) dl.error("_elastic_averaging_moving_rate","Elastic averaging moving rate must be between 0 and 1.");
if (_elastic_averaging_regularization < 0) dl.error("_elastic_averaging_regularization","Elastic averaging regularization strength must be >= 0.");
}
if (_autoencoder && _stopping_metric != ScoreKeeper.StoppingMetric.AUTO && _stopping_metric != ScoreKeeper.StoppingMetric.MSE) {
dl.error("_stopping_metric","Stopping metric must either be AUTO or MSE for autoencoder.");
}
}
