{
  boolean classification=dl.isClassifier();
  if (_hidden == null || _hidden.length == 0)   dl.error("_hidden","There must be at least one hidden layer.");
  for (  int h : _hidden)   if (h == 0)   dl.error("_hidden","Hidden layer size must be >0.");
  if (!_expert_mode) {
    for (    String s : expert_options)     dl.hide(s,"Only in expert mode.");
  }
  if (!_autoencoder) {
    if (_valid == null)     dl.hide("_score_validation_samples","score_validation_samples requires a validation frame.");
    if (classification) {
      dl.hide("_regression_stop","regression_stop is used only with regression.");
    }
 else {
      dl.hide("_classification_stop","classification_stop is used only with classification.");
      dl.hide("_max_confusion_matrix_size","max_confusion_matrix_size is used only with classification.");
      dl.hide("_max_hit_ratio_k","max_hit_ratio_k is used only with classification.");
      dl.hide("_balance_classes","balance_classes is used only with classification.");
    }
    if (!classification || !_balance_classes)     dl.hide("_class_sampling_factors","class_sampling_factors requires both classification and balance_classes.");
    if (!classification && _valid != null || _valid == null)     dl.hide("_score_validation_sampling","score_validation_sampling requires regression and a validation frame OR no validation frame.");
  }
  if (_activation != Activation.TanhWithDropout && _activation != Activation.MaxoutWithDropout && _activation != Activation.RectifierWithDropout)   dl.hide("_hidden_dropout_ratios","hidden_dropout_ratios requires a dropout activation function.");
  if (_hidden_dropout_ratios == null) {
    if (_activation == Activation.TanhWithDropout || _activation == Activation.MaxoutWithDropout || _activation == Activation.RectifierWithDropout) {
      if (expensive) {
        _hidden_dropout_ratios=new double[_hidden.length];
        if (!_quiet_mode)         dl.info("_hidden_dropout_ratios","Automatically setting all hidden dropout ratios to 0.5.");
        Arrays.fill(_hidden_dropout_ratios,0.5);
      }
    }
  }
 else   if (_hidden_dropout_ratios.length != _hidden.length) {
    dl.error("_hidden_dropout_ratios","Must have " + _hidden.length + " hidden layer dropout ratios.");
  }
 else   if (_activation != Activation.TanhWithDropout && _activation != Activation.MaxoutWithDropout && _activation != Activation.RectifierWithDropout) {
    if (!_quiet_mode)     dl.warn("_hidden_dropout_ratios","Ignoring hidden_dropout_ratios because a non-dropout activation function was specified.");
  }
  if (_input_dropout_ratio < 0 || _input_dropout_ratio >= 1)   dl.error("_input_dropout_ratio","Input dropout must be in [0,1).");
  if (H2O.CLOUD.size() == 1 && _replicate_training_data) {
    dl.hide("_replicate_training_data","replicate_training_data is only valid with cloud size greater than 1.");
    if (expensive) {
      dl.info("_replicate_training_data","Disabling replicate_training_data on 1 node.");
      _replicate_training_data=false;
    }
  }
  if (_single_node_mode && (H2O.CLOUD.size() == 1 || !_replicate_training_data)) {
    dl.hide("_single_node_mode","single_node_mode is only used with multi-node operation with replicated training data.");
    if (expensive) {
      dl.info("_single_node_mode","Disabling single_node_mode (only for multi-node operation with replicated training data).");
      _single_node_mode=false;
    }
  }
  if (_autoencoder) {
    dl.hide("_use_all_factor_levels","use_all_factor_levels is unsupported in combination with autoencoder.");
    dl.hide("_convert_to_enum","convert_to_enum is unsupported in combination with autoencoder.");
  }
  if (!_use_all_factor_levels && _autoencoder) {
    if (expensive) {
      dl.warn("_use_all_factor_levels","Enabling all_factor_levels for auto-encoders.");
      _use_all_factor_levels=true;
    }
  }
  if (_n_folds != 0)   dl.hide("_override_with_best_model","override_with_best_model is unsupported in combination with n-fold cross-validation.");
  if (_override_with_best_model && _n_folds != 0) {
    if (expensive) {
      dl.warn("_override_with_best_model","Disabling override_with_best_model in combination with n-fold cross-validation.");
      _override_with_best_model=false;
    }
  }
  if (_adaptive_rate) {
    dl.hide("_rate","rate is not used with adaptive_rate.");
    dl.hide("_rate_annealing","rate_annealing is not used with adaptive_rate.");
    dl.hide("_rate_decay","rate_decay is not used with adaptive_rate.");
    dl.hide("_momentum_start","momentum_start is not used with adaptive_rate.");
    dl.hide("_momentum_ramp","momentum_ramp is not used with adaptive_rate.");
    dl.hide("_momentum_stable","momentum_stable is not used with adaptive_rate.");
    dl.hide("_nesterov_accelerated_gradient","nesterov_accelerated_gradient is not used with adaptive_rate.");
  }
 else {
    dl.hide("_rho","rho is only used with adaptive_rate.");
    dl.hide("_epsilon","epsilon is only used with adaptive_rate.");
  }
  if (!_quiet_mode) {
    if (_adaptive_rate) {
      if (expensive) {
        dl.info("_adaptive_rate","Using automatic learning rate.  Ignoring the following input parameters: " + "rate, rate_decay, rate_annealing, momentum_start, momentum_ramp, momentum_stable, nesterov_accelerated_gradient.");
        _momentum_start=0;
        _momentum_stable=0;
      }
    }
 else {
      if (expensive) {
        dl.info("_adaptive_rate","Using manual learning rate.  Ignoring the following input parameters: " + "rho, epsilon.");
        _rho=0;
        _epsilon=0;
      }
    }
    if (_initial_weight_distribution == InitialWeightDistribution.UniformAdaptive) {
      dl.hide("_initial_weight_scale","initial_weight_scale is not used if initial_weight_distribution == UniformAdaptive.");
      dl.info("_initial_weight_scale","Ignoring initial_weight_scale for UniformAdaptive weight distribution.");
    }
    if (_n_folds != 0) {
      if (expensive) {
        if (_override_with_best_model) {
          dl.warn("_override_with_best_model","Automatically disabling override_with_best_model, since the final model is the only scored model with n-fold cross-validation.");
          _override_with_best_model=false;
        }
      }
    }
  }
  if (_loss == Loss.Automatic) {
    if (expensive) {
      if (!classification) {
        if (!_quiet_mode)         dl.info("_loss","Automatically setting loss to MeanSquare for regression.");
        _loss=Loss.MeanSquare;
      }
 else       if (_autoencoder) {
        if (!_quiet_mode)         dl.info("_loss","Automatically setting loss to MeanSquare for auto-encoder.");
        _loss=Loss.MeanSquare;
      }
 else {
        if (!_quiet_mode)         dl.info("_loss","Automatically setting loss to Cross-Entropy for classification.");
        _loss=Loss.CrossEntropy;
      }
    }
  }
  if (_score_training_samples < 0) {
    dl.error("_score_training_samples","Number of training samples for scoring must be >= 0 (0 for all).");
  }
  if (_score_validation_samples < 0) {
    dl.error("_score_validation_samples","Number of training samples for scoring must be >= 0 (0 for all).");
  }
  if (_autoencoder && _sparsity_beta > 0) {
    if (_activation == Activation.Tanh || _activation == Activation.TanhWithDropout) {
      if (_average_activation >= 1 || _average_activation <= -1)       dl.error("_average_activation","Tanh average activation must be in (-1,1).");
    }
 else     if (_activation == Activation.Rectifier || _activation == Activation.RectifierWithDropout) {
      if (_average_activation <= 0)       dl.error("_average_activation","Rectifier average activation must be positive.");
    }
  }
  if (_autoencoder && _loss != Loss.MeanSquare)   dl.error("_loss","Must use MeanSquare loss function for auto-encoder.");
 else   if (!classification && _loss == Loss.CrossEntropy)   dl.error("_loss","Cannot use CrossEntropy loss function for regression.");
  if (!_autoencoder && _sparsity_beta != 0)   dl.info("_sparsity_beta","Sparsity beta can only be used for autoencoder.");
  if (_autoencoder && _valid != null)   dl.error("_validation_frame","Cannot specify a validation dataset for auto-encoder.");
  if (_autoencoder && _activation == Activation.Maxout)   dl.error("_activation","Maxout activation is not supported for auto-encoder.");
  if (_max_categorical_features < 1)   dl.error("_max_categorical_features","max_categorical_features must be at least 1.");
  if (!_sparse && _col_major) {
    if (!_quiet_mode)     dl.error("_col_major","Cannot use column major storage for non-sparse data handling.");
  }
  if (!classification && _balance_classes) {
    dl.error("_balance_classes","balance_classes requires classification to be enabled.");
  }
  if (_class_sampling_factors != null && !_balance_classes) {
    dl.error("_class_sampling_factors","class_sampling_factors requires balance_classes to be enabled.");
  }
  if (_reproducible) {
    if (expensive) {
      if (!_quiet_mode)       Log.info("Automatically enabling force_load_balancing, disabling single_node_mode and replicate_training_data\nand setting train_samples_per_iteration to -1 to enforce reproducibility.");
      _force_load_balance=true;
      _single_node_mode=false;
      _train_samples_per_iteration=-1;
      _replicate_training_data=false;
    }
  }
}
