{
  if (fromParms._hidden_dropout_ratios == null) {
    if (fromParms._activation == Activation.TanhWithDropout || fromParms._activation == Activation.MaxoutWithDropout || fromParms._activation == Activation.RectifierWithDropout) {
      toParms._hidden_dropout_ratios=new double[fromParms._hidden.length];
      if (!fromParms._quiet_mode)       Log.info("_hidden_dropout_ratios: Automatically setting all hidden dropout ratios to 0.5.");
      Arrays.fill(toParms._hidden_dropout_ratios,0.5);
    }
  }
 else {
    toParms._hidden_dropout_ratios=fromParms._hidden_dropout_ratios.clone();
  }
  if (H2O.CLOUD.size() == 1 && fromParms._replicate_training_data) {
    if (!fromParms._quiet_mode)     Log.info("_replicate_training_data: Disabling replicate_training_data on 1 node.");
    toParms._replicate_training_data=false;
  }
  if (fromParms._single_node_mode && (H2O.CLOUD.size() == 1 || !fromParms._replicate_training_data)) {
    if (!fromParms._quiet_mode)     Log.info("_single_node_mode: Disabling single_node_mode (only for multi-node operation with replicated training data).");
    toParms._single_node_mode=false;
  }
  if (!fromParms._use_all_factor_levels && fromParms._autoencoder) {
    if (!fromParms._quiet_mode)     Log.info("_use_all_factor_levels: Automatically enabling all_factor_levels for auto-encoders.");
    toParms._use_all_factor_levels=true;
  }
  if (fromParms._overwrite_with_best_model && fromParms._nfolds != 0) {
    if (!fromParms._quiet_mode)     Log.info("_overwrite_with_best_model: Disabling overwrite_with_best_model in combination with n-fold cross-validation.");
    toParms._overwrite_with_best_model=false;
  }
  if (fromParms._adaptive_rate) {
    if (!fromParms._quiet_mode)     Log.info("_adaptive_rate: Using automatic learning rate. Ignoring the following input parameters: " + "rate, rate_decay, rate_annealing, momentum_start, momentum_ramp, momentum_stable.");
    toParms._rate=0;
    toParms._rate_decay=0;
    toParms._rate_annealing=0;
    toParms._momentum_start=0;
    toParms._momentum_ramp=0;
    toParms._momentum_stable=0;
  }
 else {
    if (!fromParms._quiet_mode)     Log.info("_adaptive_rate: Using manual learning rate. Ignoring the following input parameters: " + "rho, epsilon.");
    toParms._rho=0;
    toParms._epsilon=0;
  }
  if (fromParms._activation == Activation.Rectifier || fromParms._activation == Activation.RectifierWithDropout) {
    if (fromParms._max_w2 == Float.POSITIVE_INFINITY) {
      if (!fromParms._quiet_mode)       Log.info("_max_w2: Automatically setting max_w2 to 1000 to keep (unbounded) Rectifier activation in check.");
      toParms._max_w2=1e3f;
    }
  }
  if (fromParms._nfolds != 0) {
    if (fromParms._overwrite_with_best_model) {
      if (!fromParms._quiet_mode)       Log.info("_overwrite_with_best_model: Automatically disabling overwrite_with_best_model, since the final model is the only scored model with n-fold cross-validation.");
      toParms._overwrite_with_best_model=false;
    }
  }
  if (fromParms._autoencoder && fromParms._stopping_metric == ScoreKeeper.StoppingMetric.AUTO) {
    if (!fromParms._quiet_mode)     Log.info("_stopping_metric: Automatically setting stopping_metric to MSE for autoencoder.");
    toParms._stopping_metric=ScoreKeeper.StoppingMetric.MSE;
  }
  if (fromParms._distribution == Distribution.Family.AUTO) {
    if (nClasses > 1) {
      toParms._distribution=nClasses == 2 ? Distribution.Family.bernoulli : Distribution.Family.multinomial;
    }
 else {
switch (fromParms._loss) {
case Automatic:
case Quadratic:
        toParms._distribution=Distribution.Family.gaussian;
      break;
case Absolute:
    toParms._distribution=Distribution.Family.laplace;
  break;
case Huber:
toParms._distribution=Distribution.Family.huber;
break;
default :
throw H2O.unimpl();
}
}
}
if (fromParms._loss == Loss.Automatic) {
switch (toParms._distribution) {
case gaussian:
toParms._loss=Loss.Quadratic;
break;
case laplace:
toParms._loss=Loss.Absolute;
break;
case huber:
toParms._loss=Loss.Huber;
break;
case multinomial:
case bernoulli:
toParms._loss=Loss.CrossEntropy;
break;
case tweedie:
case poisson:
case gamma:
toParms._loss=Loss.Automatic;
break;
default :
throw H2O.unimpl();
}
}
if (fromParms._reproducible) {
if (!fromParms._quiet_mode) Log.info("_reproducibility: Automatically enabling force_load_balancing, disabling single_node_mode and replicate_training_data\n" + "and setting train_samples_per_iteration to -1 to enforce reproducibility.");
toParms._force_load_balance=true;
toParms._single_node_mode=false;
toParms._train_samples_per_iteration=-1;
toParms._replicate_training_data=false;
}
}
