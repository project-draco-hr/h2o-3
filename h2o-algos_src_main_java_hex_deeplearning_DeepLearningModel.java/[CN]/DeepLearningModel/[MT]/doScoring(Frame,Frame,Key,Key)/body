{
  final long now=System.currentTimeMillis();
  epoch_counter=(float)model_info().get_processed_total() / training_rows;
  final double time_last_iter_millis=Math.max(5,now - _timeLastScoreEnter);
  run_time+=time_last_iter_millis;
  Job.Progress prog=DKV.getGet(progressKey);
  float progress=prog == null ? 0 : prog.progress();
  String msg="Training at " + model_info().get_processed_total() * 1000 / run_time + " samples/s..." + (progress == 0 ? "" : " Estimated time left: " + PrettyPrint.msecs((long)(run_time * (1. - progress) / progress),true));
  ((Job)DKV.getGet(job_key)).update(actual_train_samples_per_iteration);
  new Job.ProgressUpdate(msg).fork(progressKey);
  boolean keep_running;
  try {
    if (H2O.CLOUD.size() > 1 && get_params()._train_samples_per_iteration == -2 && time_for_communication_us > 1e4) {
      final double comm_to_work_ratio=(time_for_communication_us * 1e-3) / time_last_iter_millis;
      final double correction=get_params()._target_ratio_comm_to_comp / comm_to_work_ratio;
      actual_train_samples_per_iteration/=correction;
      actual_train_samples_per_iteration=Math.max(1,actual_train_samples_per_iteration);
    }
    _timeLastScoreEnter=now;
    keep_running=(epoch_counter < model_info().get_params()._epochs);
    final long sinceLastScore=now - _timeLastScoreStart;
    final long sinceLastPrint=now - _timeLastPrintStart;
    if (!keep_running || sinceLastPrint > get_params()._score_interval * 1000) {
      _timeLastPrintStart=now;
      if (!get_params()._quiet_mode) {
        Log.info("Training time: " + PrettyPrint.msecs(run_time,true) + ". Processed "+ String.format("%f",model_info().get_processed_total())+ " samples"+ " ("+ String.format("%.3f",epoch_counter)+ " epochs)."+ " Speed: "+ String.format("%.3f",1000. * model_info().get_processed_total() / run_time)+ " samples/sec.\n");
      }
    }
    if (!keep_running || (sinceLastScore > get_params()._score_interval * 1000 && (double)(_timeLastScoreEnd - _timeLastScoreStart) / sinceLastScore < get_params()._score_duty_cycle)) {
      if (progressKey != null) {
        new Job.ProgressUpdate("Scoring on " + ftrain.numRows() + " training samples"+ (ftest != null ? (", " + ftest.numRows() + " validation samples") : "")).fork(progressKey);
      }
      final boolean printme=!get_params()._quiet_mode;
      _timeLastScoreStart=now;
      if (get_params()._diagnostics)       model_info().computeStats();
      DeepLearningScoring err=new DeepLearningScoring();
      err.training_time_ms=run_time;
      err.epoch_counter=epoch_counter;
      err.training_samples=model_info().get_processed_total();
      err.validation=ftest != null;
      err.score_training_samples=ftrain.numRows();
      err.classification=_output.isClassifier();
      if (get_params()._autoencoder) {
        if (printme)         Log.info("Scoring the auto-encoder.");
{
          final Frame mse_frame=scoreAutoEncoder(ftrain,Key.make());
          final Vec l2=mse_frame.anyVec();
          Log.info("Mean reconstruction error on training data: " + l2.mean() + "\n");
          mse_frame.delete();
          ModelMetrics mtrain=ModelMetrics.getFromDKV(this,ftrain);
          _output._training_metrics=mtrain;
          err.scored_train=new ScoreKeeper(mtrain);
        }
        if (ftest != null) {
          final Frame mse_frame=scoreAutoEncoder(ftest,Key.make());
          final Vec l2=mse_frame.anyVec();
          Log.info("Mean reconstruction error on validation data: " + l2.mean() + "\n");
          mse_frame.delete();
          ModelMetrics mtest=ModelMetrics.getFromDKV(this,ftest);
          _output._validation_metrics=mtest;
          err.scored_valid=new ScoreKeeper(mtest);
        }
      }
 else {
        if (printme)         Log.info("Scoring the model.");
        final String m=model_info().toString();
        if (m.length() > 0)         Log.info(m);
        final Frame trainPredict=score(ftrain);
        trainPredict.delete();
        hex.ModelMetrics mtrain=ModelMetrics.getFromDKV(this,ftrain);
        _output._training_metrics=mtrain;
        err.scored_train=new ScoreKeeper(mtrain);
        hex.ModelMetrics mtest=null;
        hex.ModelMetricsSupervised mm1=(ModelMetricsSupervised)ModelMetrics.getFromDKV(this,ftrain);
        if (mm1 instanceof ModelMetricsBinomial) {
          ModelMetricsBinomial mm=(ModelMetricsBinomial)(mm1);
          err.training_AUC=mm._auc;
          err.train_confusion_matrix=mm.cm();
        }
 else         if (mm1 instanceof ModelMetricsMultinomial) {
          ModelMetricsMultinomial mm=(ModelMetricsMultinomial)(mm1);
          err.train_confusion_matrix=mm.cm();
        }
        if (ftrain.numRows() != training_rows) {
          _output._training_metrics._description="Metrics reported on temporary training frame with " + ftrain.numRows() + " samples";
        }
 else         if (ftrain._key != null && ftrain._key.toString().contains("chunks")) {
          _output._training_metrics._description="Metrics reported on temporary (load-balanced) training frame";
        }
 else {
          _output._training_metrics._description="Metrics reported on full training frame";
        }
        if (ftest != null) {
          Frame validPred=score(ftest);
          validPred.delete();
          if (ftest != null) {
            mtest=ModelMetrics.getFromDKV(this,ftest);
            _output._validation_metrics=mtest;
            err.scored_valid=new ScoreKeeper(mtest);
          }
          if (mtest != null) {
            if (mtest instanceof ModelMetricsBinomial) {
              ModelMetricsBinomial mm=(ModelMetricsBinomial)mtest;
              err.validation_AUC=mm._auc;
              err.valid_confusion_matrix=mm.cm();
            }
 else             if (mtest instanceof ModelMetricsMultinomial) {
              ModelMetricsMultinomial mm=(ModelMetricsMultinomial)mtest;
              err.valid_confusion_matrix=mm.cm();
            }
            if (ftest.numRows() != validation_rows) {
              _output._validation_metrics._description="Metrics reported on temporary validation frame with " + ftest.numRows() + " samples";
              if (get_params()._score_validation_sampling == DeepLearningParameters.ClassSamplingMethod.Stratified) {
                _output._validation_metrics._description+=" (stratified sampling)";
              }
            }
 else             if (ftest._key != null && ftest._key.toString().contains("chunks")) {
              _output._validation_metrics._description="Metrics reported on temporary (load-balanced) validation frame";
            }
 else {
              _output._validation_metrics._description="Metrics reported on full validation frame";
            }
          }
        }
      }
      if (get_params()._variable_importances) {
        if (!get_params()._quiet_mode)         Log.info("Computing variable importances.");
        final float[] vi=model_info().computeVariableImportances();
        err.variable_importances=new VarImp(vi,Arrays.copyOfRange(model_info().data_info().coefNames(),0,vi.length));
      }
      _timeLastScoreEnd=System.currentTimeMillis();
      err.scoring_time=System.currentTimeMillis() - now;
      if (errors == null) {
        errors=new DeepLearningScoring[]{err};
      }
 else {
        DeepLearningScoring[] err2=new DeepLearningScoring[errors.length + 1];
        System.arraycopy(errors,0,err2,0,errors.length);
        err2[err2.length - 1]=err;
        errors=err2;
      }
      _output.errors=last_scored();
      water.util.Timer t=new Timer();
      if (_output.weights != null && _output.biases != null) {
        for (int i=0; i < _output.weights.length; ++i) {
          model_info.get_weights(i).toFrame(_output.weights[i]);
        }
        for (int i=0; i < _output.biases.length; ++i) {
          model_info.get_biases(i).toFrame(_output.biases[i]);
        }
        if (!_parms._quiet_mode)         Log.info("Writing weights and biases to Frames took " + t.time() / 1000. + " seconds.");
      }
      _output._scoring_history=createScoringHistoryTable(errors);
      _output._variable_importances=calcVarImp(last_scored().variable_importances);
      _output._model_summary=model_info.createSummaryTable();
      if (!get_params()._autoencoder) {
        if (actual_best_model_key != null && get_params()._overwrite_with_best_model && ((DKV.get(actual_best_model_key) != null && (error() < DKV.get(actual_best_model_key).<DeepLearningModel>get().error() || !Arrays.equals(model_info().units,DKV.get(actual_best_model_key).<DeepLearningModel>get().model_info().units))) || (DKV.get(actual_best_model_key) == null && error() < _bestError))) {
          if (!get_params()._quiet_mode)           Log.info("Error reduced from " + _bestError + " to "+ error()+ ".");
          _bestError=error();
          putMeAsBestModel(actual_best_model_key);
        }
        if (keep_running)         for (        String s : toString().split("\n"))         Log.info(s);
        if (printme)         Log.info("Time taken for scoring and diagnostics: " + PrettyPrint.msecs(err.scoring_time,true));
      }
    }
    if (model_info().unstable()) {
      Log.warn(unstable_msg);
      keep_running=false;
    }
 else     if ((_output.isClassifier() && last_scored().scored_train._classError <= get_params()._classification_stop) || (!_output.isClassifier() && last_scored().scored_train._mse <= get_params()._regression_stop)) {
      Log.info("Achieved requested predictive accuracy on the training data. Model building completed.");
      keep_running=false;
    }
    update(job_key);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  return keep_running;
}
