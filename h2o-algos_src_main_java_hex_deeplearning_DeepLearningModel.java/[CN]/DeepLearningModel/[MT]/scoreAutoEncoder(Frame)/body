{
  final int len=_output._names.length;
  Frame adaptFrm=new Frame(frame);
  Vec v0=adaptFrm.anyVec().makeZero();
  Scope.enter();
  adaptTestForTrain(adaptFrm,true);
  adaptFrm.add("Reconstruction.MSE",v0);
  new MRTask(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[len];
      final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
      for (int row=0; row < chks[0]._len; row++) {
        for (int i=0; i < len; i++)         tmp[i]=chks[i].atd(row);
        chks[len].set(row,score_autoencoder(tmp,null,neurons));
      }
    }
  }
.doAll(adaptFrm);
  Scope.exit();
  return adaptFrm.extractFrame(len,adaptFrm.numCols());
}
