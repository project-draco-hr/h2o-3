{
  final int len=_output._names.length;
  Frame[] adaptFrms=adapt(frame,false,false);
  Frame adaptFrm=adaptFrms[0];
  Frame onlyAdaptFrm=adaptFrms[1];
  adaptFrm.add("Reconstruction.MSE",adaptFrm.anyVec().makeZero());
  new MRTask(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[len];
      final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
      for (int row=0; row < chks[0].len(); row++) {
        for (int i=0; i < _output._names.length; i++)         tmp[i]=chks[i].at0(row);
        chks[len].set0(row,score_autoencoder(tmp,null,neurons));
      }
    }
  }
.doAll(adaptFrm);
  int x=_output._names.length, y=adaptFrm.numCols();
  final Frame l2=adaptFrm.extractFrame(x,y);
  onlyAdaptFrm.delete();
  return l2;
}
