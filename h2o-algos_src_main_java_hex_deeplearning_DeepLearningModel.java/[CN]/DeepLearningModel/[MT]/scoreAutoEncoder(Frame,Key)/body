{
  if (!get_params()._autoencoder)   throw new H2OIllegalArgumentException("Only for AutoEncoder Deep Learning model.","");
  final int len=_output._names.length;
  Frame adaptFrm=new Frame(frame);
  Vec v0=adaptFrm.anyVec().makeZero();
  Scope.enter();
  adaptTestForTrain(adaptFrm,true,false);
  adaptFrm.add("Reconstruction.MSE",v0);
  new MRTask(){
    @Override public void map(    Chunk chks[]){
      double tmp[]=new double[len];
      final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
      for (int row=0; row < chks[0]._len; row++) {
        for (int i=0; i < len; i++)         tmp[i]=chks[i].atd(row);
        chks[len].set(row,score_autoencoder(tmp,null,neurons));
      }
    }
  }
.doAll(adaptFrm);
  Scope.exit();
  Frame res=adaptFrm.extractFrame(len,adaptFrm.numCols());
  res=new Frame(destination_key,res.names(),res.vecs());
  DKV.put(res);
  _output.addModelMetrics(new ModelMetricsAutoEncoder(this,frame,res.vecs()[0].mean()));
  return res;
}
