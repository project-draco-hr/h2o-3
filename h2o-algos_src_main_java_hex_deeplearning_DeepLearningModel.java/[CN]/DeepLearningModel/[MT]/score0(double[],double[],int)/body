{
  if (model_info().unstable()) {
    Log.warn(unstable_msg);
    throw new UnsupportedOperationException("Trying to predict with an unstable model.");
  }
  Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
  ((Neurons.Input)neurons[0]).setInput(-1,data,skipAtEnd);
  DeepLearningTask.step(-1,neurons,model_info,null,false,null);
  float[] out=neurons[neurons.length - 1]._a.raw();
  if (_output.isClassifier()) {
    assert(preds.length == out.length + 1);
    for (int i=0; i < preds.length - 1; ++i) {
      preds[i + 1]=out[i];
      if (Double.isNaN(preds[i + 1]))       throw new RuntimeException("Predicted class probability NaN!");
    }
    preds[0]=-1;
  }
 else {
    if (model_info().data_info()._normRespMul != null)     preds[0]=((double)out[0] / model_info().data_info()._normRespMul[0] + model_info().data_info()._normRespSub[0]);
 else     preds[0]=(double)out[0];
    if (Double.isNaN(preds[0]))     throw new RuntimeException("Predicted regression target NaN!");
  }
  return preds;
}
