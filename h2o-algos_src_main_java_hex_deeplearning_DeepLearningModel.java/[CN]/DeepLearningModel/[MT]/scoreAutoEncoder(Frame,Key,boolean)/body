{
  if (!get_params()._autoencoder)   throw new H2OIllegalArgumentException("Only for AutoEncoder Deep Learning model.","");
  final int len=_output._names.length;
  Frame adaptFrm=new Frame(frame);
  adaptTestForTrain(adaptFrm,true,false);
  final int outputcols=reconstruction_error_per_feature ? model_info.data_info.fullN() : 1;
  Frame mse=new MRTask(){
    @Override public void map(    Chunk chks[],    NewChunk[] mse){
      double tmp[]=new double[len];
      double out[]=new double[outputcols];
      final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
      for (int row=0; row < chks[0]._len; row++) {
        for (int i=0; i < len; i++)         tmp[i]=chks[i].atd(row);
        score_autoencoder(tmp,out,neurons,false,reconstruction_error_per_feature);
        for (int i=0; i < outputcols; ++i)         mse[i].addNum(out[i]);
      }
    }
  }
.doAll(outputcols,adaptFrm).outputFrame();
  String[] names;
  if (reconstruction_error_per_feature) {
    String[] coefnames=model_info().data_info().coefNames();
    assert(outputcols == coefnames.length);
    names=new String[outputcols];
    for (int i=0; i < names.length; ++i) {
      names[i]="reconstr_" + coefnames[i] + ".SE";
    }
  }
 else {
    names=new String[]{"Reconstruction.MSE"};
  }
  Frame res=new Frame(destination_key,names,mse.vecs());
  DKV.put(res);
  _output.addModelMetrics(new ModelMetricsAutoEncoder(this,frame,res.vecs()[0].mean()));
  return res;
}
