{
  bodySb.i(1).p("int cols = ACTIVATION[i-1].length;").nl();
  bodySb.i(1).p("int rows = ACTIVATION[i].length;").nl();
  bodySb.i(1).p("int extra=cols-cols%8;").nl();
  bodySb.i(1).p("int multiple = (cols/8)*8-1;").nl();
  bodySb.i(1).p("int idx = 0;").nl();
  bodySb.i(1).p("float[] a = WEIGHT[i];").nl();
  bodySb.i(1).p("double[] x = ACTIVATION[i-1];").nl();
  bodySb.i(1).p("double[] y = BIAS[i];").nl();
  bodySb.i(1).p("double[] res = ACTIVATION[i];").nl();
  bodySb.i(1).p("for (int row=0; row<rows; ++row) {").nl();
  bodySb.i(2).p("double psum0 = 0, psum1 = 0, psum2 = 0, psum3 = 0, psum4 = 0, psum5 = 0, psum6 = 0, psum7 = 0;").nl();
  bodySb.i(2).p("for (int col = 0; col < multiple; col += 8) {").nl();
  bodySb.i(3).p("int off = idx + col;").nl();
  bodySb.i(3).p("psum0 += a[off    ] * x[col    ];").nl();
  bodySb.i(3).p("psum1 += a[off + 1] * x[col + 1];").nl();
  bodySb.i(3).p("psum2 += a[off + 2] * x[col + 2];").nl();
  bodySb.i(3).p("psum3 += a[off + 3] * x[col + 3];").nl();
  bodySb.i(3).p("psum4 += a[off + 4] * x[col + 4];").nl();
  bodySb.i(3).p("psum5 += a[off + 5] * x[col + 5];").nl();
  bodySb.i(3).p("psum6 += a[off + 6] * x[col + 6];").nl();
  bodySb.i(3).p("psum7 += a[off + 7] * x[col + 7];").nl();
  bodySb.i(2).p("}").nl();
  bodySb.i(2).p("res[row] += psum0 + psum1 + psum2 + psum3;").nl();
  bodySb.i(2).p("res[row] += psum4 + psum5 + psum6 + psum7;").nl();
  bodySb.i(2).p("for (int col = extra; col < cols; col++)").nl();
  bodySb.i(3).p("res[row] += a[idx + col] * x[col];").nl();
  bodySb.i(2).p("res[row] += y[row];").nl();
  bodySb.i(2).p("idx += cols;").nl();
  bodySb.i(1).p("}").nl();
  return bodySb;
}
