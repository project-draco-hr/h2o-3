{
  if (!get_params()._autoencoder) {
    return super.predictScoreImpl(orig,adaptedFr,destination_key);
  }
 else {
    final int len=model_info().data_info().fullN();
    assert(model_info().data_info()._responses == 0);
    String[] coefnames=model_info().data_info().coefNames();
    assert(len == coefnames.length);
    String[] names=new String[len];
    for (int i=0; i < names.length; ++i) {
      names[i]="reconstr_" + coefnames[i];
    }
    Frame f=new MRTask(){
      @Override public void map(      Chunk chks[],      NewChunk recon[]){
        double tmp[]=new double[_output._names.length];
        double preds[]=new double[len];
        final Neurons[] neurons=DeepLearningTask.makeNeuronsForTesting(model_info);
        for (int row=0; row < chks[0]._len; row++) {
          double p[]=score_autoencoder(chks,row,tmp,preds,neurons);
          for (int c=0; c < len; c++)           recon[c].addNum(p[c]);
        }
      }
    }
.doAll(len,adaptedFr).outputFrame();
    Frame of=new Frame((null == destination_key ? Key.make() : Key.make(destination_key)),names,f.vecs());
    DKV.put(of);
    makeMetricBuilder(null).makeModelMetrics(this,orig);
    return of;
  }
}
