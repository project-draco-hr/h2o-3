{
  List<String> colHeaders=new ArrayList<>();
  List<String> colTypes=new ArrayList<>();
  List<String> colFormat=new ArrayList<>();
  colHeaders.add("Timestamp");
  colTypes.add("string");
  colFormat.add("%s");
  colHeaders.add("Duration");
  colTypes.add("string");
  colFormat.add("%s");
  colHeaders.add("Training Speed");
  colTypes.add("string");
  colFormat.add("%s");
  colHeaders.add("Epochs");
  colTypes.add("double");
  colFormat.add("%.5f");
  colHeaders.add("Iterations");
  colTypes.add("int");
  colFormat.add("%d");
  colHeaders.add("Samples");
  colTypes.add("double");
  colFormat.add("%f");
  colHeaders.add("Training MSE");
  colTypes.add("double");
  colFormat.add("%.5f");
  if (_output.getModelCategory() == ModelCategory.Regression) {
    colHeaders.add("Training Deviance");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (!_output.autoencoder) {
    colHeaders.add("Training R^2");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (_output.isClassifier()) {
    colHeaders.add("Training LogLoss");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (_output.getModelCategory() == ModelCategory.Binomial) {
    colHeaders.add("Training AUC");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (_output.getModelCategory() == ModelCategory.Binomial) {
    colHeaders.add("Training Lift Top Decile");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (_output.getModelCategory() == ModelCategory.Binomial || _output.getModelCategory() == ModelCategory.Multinomial) {
    colHeaders.add("Training Classification Error");
    colTypes.add("double");
    colFormat.add("%.5f");
  }
  if (get_params()._valid != null) {
    colHeaders.add("Validation MSE");
    colTypes.add("double");
    colFormat.add("%.5f");
    if (_output.getModelCategory() == ModelCategory.Regression) {
      colHeaders.add("Validation Deviance");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
    if (!_output.autoencoder) {
      colHeaders.add("Validation R^2");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
    if (_output.isClassifier()) {
      colHeaders.add("Validation LogLoss");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
    if (_output.getModelCategory() == ModelCategory.Binomial) {
      colHeaders.add("Validation AUC");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
    if (_output.getModelCategory() == ModelCategory.Binomial) {
      colHeaders.add("Validation Lift Top Decile");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
    if (_output.isClassifier()) {
      colHeaders.add("Validation Classification Error");
      colTypes.add("double");
      colFormat.add("%.5f");
    }
  }
  final int rows=errors.length;
  String[] s=new String[0];
  TwoDimTable table=new TwoDimTable("Scoring History",null,new String[rows],colHeaders.toArray(s),colTypes.toArray(s),colFormat.toArray(s),"");
  int row=0;
  long scoring_time=0;
  for (  final DeepLearningScoring e : errors) {
    scoring_time+=e.scoring_time;
    int col=0;
    assert(row < table.getRowDim());
    assert(col < table.getColDim());
    DateTimeFormatter fmt=DateTimeFormat.forPattern("yyyy-MM-dd HH:mm:ss");
    table.set(row,col++,fmt.print(e.time_stamp));
    table.set(row,col++,PrettyPrint.msecs(e.training_time_ms,true));
    int speed=(int)(e.training_samples / ((e.training_time_ms - scoring_time) / 1e3));
    table.set(row,col++,e.training_time_ms == 0 ? null : (String.format("%d",speed) + " rows/sec"));
    table.set(row,col++,e.epoch_counter);
    table.set(row,col++,e.iterations);
    table.set(row,col++,e.training_samples);
    table.set(row,col++,e.scored_train != null ? e.scored_train._mse : Double.NaN);
    if (_output.getModelCategory() == ModelCategory.Regression) {
      table.set(row,col++,e.scored_train != null ? e.scored_train._mean_residual_deviance : Double.NaN);
    }
    if (!_output.autoencoder) {
      table.set(row,col++,e.scored_train != null ? e.scored_train._r2 : Double.NaN);
    }
    if (_output.isClassifier()) {
      table.set(row,col++,e.scored_train != null ? e.scored_train._logloss : Double.NaN);
    }
    if (_output.getModelCategory() == ModelCategory.Binomial) {
      table.set(row,col++,e.training_AUC != null ? e.training_AUC._auc : Double.NaN);
      table.set(row,col++,e.scored_train != null ? e.scored_train._lift : Double.NaN);
    }
    if (_output.isClassifier()) {
      table.set(row,col++,e.scored_train != null ? e.scored_train._classError : Double.NaN);
    }
    if (get_params()._valid != null) {
      table.set(row,col++,e.scored_valid != null ? e.scored_valid._mse : Double.NaN);
      if (_output.getModelCategory() == ModelCategory.Regression) {
        table.set(row,col++,e.scored_valid != null ? e.scored_valid._mean_residual_deviance : Double.NaN);
      }
      if (!_output.autoencoder) {
        table.set(row,col++,e.scored_valid != null ? e.scored_valid._r2 : Double.NaN);
      }
      if (_output.isClassifier()) {
        table.set(row,col++,e.scored_valid != null ? e.scored_valid._logloss : Double.NaN);
      }
      if (_output.getModelCategory() == ModelCategory.Binomial) {
        table.set(row,col++,e.validation_AUC != null ? e.validation_AUC._auc : Double.NaN);
        table.set(row,col++,e.scored_valid != null ? e.scored_valid._lift : Double.NaN);
      }
      if (_output.isClassifier()) {
        table.set(row,col,e.scored_valid != null ? e.scored_valid._classError : Double.NaN);
      }
    }
    row++;
  }
  return table;
}
