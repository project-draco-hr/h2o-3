{
  final int mb=0;
  final int n=1;
  assert(model_info().get_params()._autoencoder);
  if (model_info().isUnstable()) {
    Log.err(unstable_msg);
    throw new UnsupportedOperationException(unstable_msg);
  }
  ((Neurons.Input)neurons[0]).setInput(-1,data,mb);
  DeepLearningTask.fpropMiniBatch(-1,neurons,model_info,null,false,null,null,n);
  double[] in=neurons[0]._a[mb].raw();
  double[] out=neurons[neurons.length - 1]._a[mb].raw();
  assert(in.length == out.length);
  if (reconstruction) {
    model_info().data_info().unScaleNumericals(out,out);
    System.arraycopy(out,0,preds,0,out.length);
  }
 else   if (reconstruction_error_per_feature) {
    for (int i=0; i < in.length; ++i)     preds[i]=Math.pow((out[i] - in[i]),2);
  }
 else {
    assert(preds.length == 1);
    double l2=0;
    for (int i=0; i < in.length; ++i)     l2+=Math.pow((out[i] - in[i]),2);
    l2/=in.length;
    preds[0]=l2;
  }
}
