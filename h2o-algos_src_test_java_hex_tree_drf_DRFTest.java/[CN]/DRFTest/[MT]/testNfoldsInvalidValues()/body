{
  Frame tfr=null;
  DRFModel drf1=null;
  DRFModel drf2=null;
  DRFModel drf3=null;
  Scope.enter();
  try {
    tfr=parse_test_file("./smalldata/airlines/allyears2k_headers.zip");
    for (    String s : new String[]{"DepTime","ArrTime","ActualElapsedTime","AirTime","ArrDelay","DepDelay","Cancelled","CancellationCode","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay","IsArrDelayed"}) {
      tfr.remove(s).remove();
    }
    DKV.put(tfr);
    DRFModel.DRFParameters parms=new DRFModel.DRFParameters();
    parms._train=tfr._key;
    parms._response_column="IsDepDelayed";
    parms._seed=234;
    parms._min_rows=2;
    parms._max_depth=5;
    parms._ntrees=5;
    parms._nfolds=0;
    DRF job1=new DRF(parms);
    drf1=job1.trainModel().get();
    parms._nfolds=1;
    DRF job2=new DRF(parms);
    try {
      Log.info("Trying nfolds==1.");
      drf2=job2.trainModel().get();
      Assert.fail("Should toss H2OModelBuilderIllegalArgumentException instead of reaching here");
    }
 catch (    H2OModelBuilderIllegalArgumentException e) {
    }
    parms._nfolds=-99;
    DRF job3=new DRF(parms);
    try {
      Log.info("Trying nfolds==-99.");
      drf3=job3.trainModel().get();
      Assert.fail("Should toss H2OModelBuilderIllegalArgumentException instead of reaching here");
    }
 catch (    H2OModelBuilderIllegalArgumentException e) {
    }
    job1.remove();
    job2.remove();
    job3.remove();
  }
  finally {
    if (tfr != null)     tfr.remove();
    if (drf1 != null)     drf1.delete();
    if (drf2 != null)     drf2.delete();
    if (drf3 != null)     drf3.delete();
    Scope.exit();
  }
}
