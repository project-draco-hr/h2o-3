{
  Scope.enter();
  DRFModel.DRFParameters drf=new DRFModel.DRFParameters();
  Frame frTest=null, pred=null;
  Frame frTrain=null;
  Frame test=null, res=null;
  DRFModel model=null;
  try {
    frTrain=parse_test_file(fnametrain);
    unifyFrame(drf,frTrain,prep);
    drf._train=frTrain._key;
    drf._response_column=((Frame)DKV.getGet(drf._train)).lastVecName();
    drf._convert_to_enum=true;
    drf._ntrees=ntree;
    drf._max_depth=max_depth;
    drf._min_rows=1;
    drf._nbins=nbins;
    drf._mtries=-1;
    drf._sample_rate=0.66667f;
    drf._seed=(1L << 32) | 2;
    drf._destination_key=Key.make("DRF_model_4_" + hexnametrain);
    DRF job=null;
    try {
      job=new DRF(drf);
      model=job.trainModel().get();
      Log.info(model._output);
    }
  finally {
      if (job != null)       job.remove();
    }
    Assert.assertTrue(job._state == water.Job.JobState.DONE);
    hex.ModelMetrics mm;
    if (fnametest != null) {
      frTest=parse_test_file(fnametest);
      pred=model.score(frTest);
      mm=hex.ModelMetrics.getFromDKV(model,frTest);
    }
 else {
      mm=hex.ModelMetrics.getFromDKV(model,frTrain);
    }
    Assert.assertTrue("Expected: " + Arrays.deepToString(expCM) + ", Got: "+ Arrays.deepToString(mm.cm().confusion_matrix),Arrays.deepEquals(mm.cm().confusion_matrix,expCM));
    Assert.assertEquals("Number of trees differs!",ntree,model._output._ntrees);
    String[] cmDom=model._output._domains[model._output._domains.length - 1];
    Assert.assertArrayEquals("CM domain differs!",expRespDom,cmDom);
    test=parse_test_file(fnametrain);
    res=model.score(test);
    Assert.assertTrue(model.testJavaScoring(test,res));
  }
  finally {
    if (frTrain != null)     frTrain.remove();
    if (frTest != null)     frTest.remove();
    if (model != null)     model.delete();
    if (pred != null)     pred.delete();
    if (test != null)     test.delete();
    if (res != null)     res.delete();
    Scope.exit();
  }
}
