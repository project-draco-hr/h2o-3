{
  Frame tfr;
  final int N=4;
  double[] mses=new double[N];
  int[] chunks=new int[]{1,13,19,39,500};
  for (int i=0; i < N; ++i) {
    Scope.enter();
    tfr=parse_test_file("smalldata/covtype/covtype.20k.data");
    Key dest=Key.make("df.rebalanced.hex");
    RebalanceDataSet rb=new RebalanceDataSet(tfr,dest,chunks[i]);
    H2O.submitTask(rb);
    rb.join();
    tfr.delete();
    tfr=DKV.get(dest).get();
    Scope.track(tfr.replace(54,tfr.vecs()[54].toCategoricalVec())._key);
    DKV.put(tfr);
    DRFModel.DRFParameters parms=new DRFModel.DRFParameters();
    parms._train=tfr._key;
    parms._response_column="C55";
    parms._ntrees=10;
    parms._seed=1234;
    DRF job=new DRF(parms);
    DRFModel drf=job.trainModel().get();
    assertEquals(drf._output._ntrees,parms._ntrees);
    mses[i]=drf._output._scored_train[drf._output._scored_train.length - 1]._mse;
    job.remove();
    drf.delete();
    if (tfr != null)     tfr.remove();
    Scope.exit();
  }
  for (int i=0; i < mses.length; ++i) {
    Log.info("trial: " + i + " -> MSE: "+ mses[i]);
  }
  for (  double mse : mses)   assertEquals(mse,mses[0],1e-10);
}
