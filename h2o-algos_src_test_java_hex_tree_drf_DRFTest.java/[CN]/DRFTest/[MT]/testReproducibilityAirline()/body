{
  Frame tfr=null;
  final int N=1;
  double[] mses=new double[N];
  Scope.enter();
  try {
    tfr=parse_test_file("./smalldata/airlines/allyears2k_headers.zip");
    Key dest=Key.make("df.rebalanced.hex");
    RebalanceDataSet rb=new RebalanceDataSet(tfr,dest,256);
    H2O.submitTask(rb);
    rb.join();
    tfr.delete();
    tfr=DKV.get(dest).get();
    for (    String s : new String[]{"DepTime","ArrTime","ActualElapsedTime","AirTime","ArrDelay","DepDelay","Cancelled","CancellationCode","CarrierDelay","WeatherDelay","NASDelay","SecurityDelay","LateAircraftDelay","IsArrDelayed"}) {
      tfr.remove(s).remove();
    }
    DKV.put(tfr);
    for (int i=0; i < N; ++i) {
      DRFModel.DRFParameters parms=new DRFModel.DRFParameters();
      parms._train=tfr._key;
      parms._response_column="IsDepDelayed";
      parms._nbins=10;
      parms._nbins_cats=1024;
      parms._ntrees=7;
      parms._max_depth=10;
      parms._binomial_double_trees=false;
      parms._mtries=-1;
      parms._min_rows=1;
      parms._sample_rate=0.632f;
      parms._balance_classes=true;
      parms._seed=(1L << 32) | 2;
      DRF job=new DRF(parms);
      DRFModel drf=job.trainModel().get();
      assertEquals(drf._output._ntrees,parms._ntrees);
      mses[i]=drf._output._training_metrics.mse();
      job.remove();
      drf.delete();
    }
  }
  finally {
    if (tfr != null)     tfr.remove();
  }
  Scope.exit();
  for (int i=0; i < mses.length; ++i) {
    Log.info("trial: " + i + " -> MSE: "+ mses[i]);
  }
  for (int i=0; i < mses.length; ++i) {
    assertEquals(0.2148575516521361,mses[i],1e-4);
  }
}
