{
  Frame tfr=null;
  final int N=5;
  double[] mses=new double[N];
  Scope.enter();
  try {
    tfr=parse_test_file("smalldata/covtype/covtype.20k.data");
    Key dest=Key.make("df.rebalanced.hex");
    RebalanceDataSet rb=new RebalanceDataSet(tfr,dest,256);
    H2O.submitTask(rb);
    rb.join();
    tfr.delete();
    tfr=DKV.get(dest).get();
    for (int i=0; i < N; ++i) {
      DRFModel.DRFParameters parms=new DRFModel.DRFParameters();
      parms._train=tfr._key;
      parms._response_column="C55";
      parms._nbins=1000;
      parms._ntrees=1;
      parms._max_depth=8;
      parms._mtries=-1;
      parms._min_rows=10;
      parms._seed=1234;
      DRF job=new DRF(parms);
      DRFModel drf=job.trainModel().get();
      assertEquals(drf._output._ntrees,parms._ntrees);
      mses[i]=drf._output._mse_train[drf._output._mse_train.length - 1];
      job.remove();
      drf.delete();
    }
  }
  finally {
    if (tfr != null)     tfr.remove();
  }
  Scope.exit();
  for (int i=0; i < mses.length; ++i) {
    Log.info("trial: " + i + " -> MSE: "+ mses[i]);
  }
  for (  double mse : mses)   assertEquals(mse,mses[0],1e-15);
}
