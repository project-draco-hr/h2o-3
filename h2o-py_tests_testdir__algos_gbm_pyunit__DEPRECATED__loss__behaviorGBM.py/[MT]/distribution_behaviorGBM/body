def distribution_behaviorGBM():
    eco = h2o.import_file(path=pyunit_utils.locate('smalldata/gbm_test/ecology_model.csv'))
    eco_model = h2o.gbm(x=eco[2:13], y=eco['Angaus'])
    cars = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/cars.csv'))
    cars_model = h2o.gbm(x=cars[3:7], y=cars['cylinders'])
    eco_model = h2o.gbm(x=eco[2:13], y=eco['Angaus'], distribution='gaussian')
    try:
        eco_model = h2o.gbm(x=eco[1:8], y=eco['Method'], distribution='gaussian')
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    eco_model = h2o.gbm(x=eco[2:13], y=eco['Angaus'].asfactor(), distribution='bernoulli')
    tree = h2o.import_file(path=pyunit_utils.locate('smalldata/junit/test_tree_minmax.csv'))
    tree_model = h2o.gbm(x=tree[0:3], y=tree['response'], distribution='bernoulli', min_rows=1)
    try:
        cars_mod = h2o.gbm(x=cars[3:7], y=cars['cylinders'], distribution='bernoulli')
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    try:
        eco_model = h2o.gbm(x=eco[0:8], y=eco['Method'], distribution='bernoulli')
        assert False, 'expected an error'
    except EnvironmentError:
        assert True
    cars_model = h2o.gbm(x=cars[3:7], y=cars['cylinders'].asfactor(), distribution='multinomial')
    eco_model = h2o.gbm(x=eco[0:8], y=eco['Method'], distribution='multinomial')
