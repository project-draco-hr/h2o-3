def __init__(self, cm, domains=None, table_header=None):
    assert_is_type(cm, list)
    if (len(cm) == 2):
        cm = list(zip(*cm))
    nclass = len(cm)
    class_errs = ([0] * nclass)
    class_sums = ([0] * nclass)
    class_err_strings = ([0] * nclass)
    cell_values = ([([0] * (1 + nclass))] * (1 + nclass))
    totals = [sum(c) for c in cm]
    total_errs = 0
    for i in range(nclass):
        class_errs[i] = sum([v[i] for v in (cm[:i] + cm[(i + 1):])])
        total_errs += class_errs[i]
        class_sums[i] = sum([v[i] for v in cm])
        class_err_strings[i] = ((((u' (' + str(class_errs[i])) + u'/') + str(class_sums[i])) + u')')
        class_errs[i] = (float(u'nan') if (class_sums[i] == 0) else round((class_errs[i] / class_sums[i]), self.ROUND))
        cell_values[i] = (([v[i] for v in cm] + [str(class_errs[i])]) + [class_err_strings[i]])
    class_errs += [sum(class_errs)]
    totals += [sum(class_sums)]
    class_err_strings += [((((u' (' + str(total_errs)) + u'/') + str(totals[(-1)])) + u')')]
    class_errs[(-1)] = (float(u'nan') if (totals[(-1)] == 0) else round((total_errs / totals[(-1)]), self.ROUND))
    cell_values[(-1)] = ((totals[0:(-1)] + [str(class_errs[(-1)])]) + [class_err_strings[(-1)]])
    if (table_header is None):
        table_header = u'Confusion Matrix (Act/Pred)'
    col_header = [u'']
    if (domains is not None):
        import copy
        row_header = copy.deepcopy(domains)
        col_header += copy.deepcopy(domains)
    else:
        row_header = [str(i) for i in range(nclass)]
        col_header += [str(i) for i in range(nclass)]
    row_header += [u'Total']
    col_header += [u'Error', u'Rate']
    for i in range(len(row_header)):
        cell_values[i].insert(0, row_header[i])
    self.table = H2OTwoDimTable(row_header=row_header, col_header=col_header, table_header=table_header, cell_values=cell_values)
