def test_rapids_cut(self):
    SYNDATASETS_DIR = h2o.make_syn_dir()
    tryList = [(1000, 5, 'cA', 200)]
    for (rowCount, colCount, hex_key, timeoutSecs) in tryList:
        SEEDPERFILE = random.randint(0, sys.maxint)
        csvFilename = (((((('syn_' + str(SEEDPERFILE)) + '_') + str(rowCount)) + 'x') + str(colCount)) + '.csv')
        csvPathname = ((SYNDATASETS_DIR + '/') + csvFilename)
        print '\nCreating random', csvPathname
        write_syn_dataset(csvPathname, rowCount, colCount, SEEDPERFILE)
        parseResult = h2i.import_parse(path=csvPathname, schema='put', hex_key=hex_key, timeoutSecs=timeoutSecs, doSummary=False)
        inspect = h2o_cmd.runInspect(key=hex_key)
        (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
        print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
        self.assertEqual(numCols, colCount, ('parse created result with the wrong number of cols %s %s' % (numCols, colCount)))
        self.assertEqual(numRows, rowCount, ('parse created result with the wrong number of rows %s %s' % (numRows, rowCount)))
        REPEAT = 1
        data_key = hex_key
        for i in range(REPEAT):
            result_key = ((data_key + '_') + str(i))
            Assign('seq1', Seq(range(5)))
            Assign('seq2', Fcn('c', Seq(range(5))))
            inspect = h2o_cmd.runInspect(key='seq1')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            Assign('seq3', Col(Seq(range(5))))
            inspect = h2o_cmd.runInspect(key='seq2')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            Assign('seq4', Fcn('c', Seq(Colon(99, 400), '#2', 1, range(1, 5), range(7, 10), range(50, 52))))
            inspect = h2o_cmd.runInspect(key='seq1')
            (missingList, labelList, numRows, numCols) = h2o_cmd.infoFromInspect(inspect)
            Assign(result_key, KeyIndexed(data_key, row=Seq(range(1, 5))))
            Assign('seq5', KeyIndexed(data_key, row=Seq(Colon(99, 400), '#2', 1, range(1, 5))))
            Assign(result_key, Fcn('min', KeyIndexed(data_key, col=1), True))
            Assign(result_key, Fcn('max', KeyIndexed(data_key, col=1), True))
            Assign(result_key, Fcn('mean', KeyIndexed(data_key, col=1), 0, False))
            Assign(result_key, KeyIndexed(data_key, row='#1'))
            Assign(result_key, KeyIndexed(data_key, row=Colon('#1', '#100')))
            Assign(result_key, KeyIndexed(data_key, row=Colon(1, 100)))
            Assign(result_key, KeyIndexed(data_key, row=Colon('#-2', '#-1')))
            Assign(result_key, KeyIndexed(data_key, row=Colon((-2), (-1))))
            Assign(result_key, KeyIndexed(data_key, row=Colon('#1', (rowCount - 10))))
            Assign(result_key, KeyIndexed(data_key, col=Colon('#1', (colCount - 1))))
            Assign(result_key, KeyIndexed(data_key, row=Colon('#1', (rowCount - 10))))
            Assign(result_key, KeyIndexed(data_key, col=Colon('#1', (colCount - 1))))
            Assign(result_key, Fcn('==', 1, KeyIndexed(data_key, col=Colon('#1', (colCount - 1)))))
            print ('\n' + csvPathname), '    numRows:', '{:,}'.format(numRows), '    numCols:', '{:,}'.format(numCols)
