{
  double mse=Double.NaN;
  double logloss=Double.NaN;
  double sigma=Double.NaN;
  if (_wcount > 0) {
    sigma=weightedSigma();
    mse=_sumsqe / _wcount;
    logloss=_logloss / _wcount;
    AUC2 auc=new AUC2(_auc);
    GainsLift gl=null;
    if (preds != null) {
      Vec resp=f.vec(m._parms._response_column);
      Vec weight=f.vec(m._parms._weights_column);
      if (resp != null) {
        gl=new GainsLift(preds.lastVec(),resp,weight);
        gl.exec();
      }
    }
    return m._output.addModelMetrics(new ModelMetricsBinomial(m,f,mse,_domain,sigma,auc,logloss,gl));
  }
 else {
    return m._output.addModelMetrics(new ModelMetricsBinomial(m,f,mse,null,sigma,null,logloss,null));
  }
}
