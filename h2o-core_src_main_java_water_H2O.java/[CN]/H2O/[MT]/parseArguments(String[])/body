{
  for (  AbstractH2OExtension e : H2O.getExtensions()) {
    args=e.parseArguments(args);
  }
  for (int i=0; i < args.length; i++) {
    OptString s=new OptString(args[i]);
    if (s.matches("h") || s.matches("help")) {
      ARGS.help=true;
    }
 else     if (s.matches("version")) {
      ARGS.version=true;
    }
 else     if (s.matches("name")) {
      i=s.incrementAndCheck(i,args);
      ARGS.name=args[i];
    }
 else     if (s.matches("flatfile")) {
      i=s.incrementAndCheck(i,args);
      ARGS.flatfile=args[i];
    }
 else     if (s.matches("port")) {
      i=s.incrementAndCheck(i,args);
      ARGS.port=s.parseInt(args[i]);
    }
 else     if (s.matches("switch_tcp")) {
      i=s.incrementAndCheck(i,args);
      ARGS.switch_tcp=s.parseInt(args[i]);
    }
 else     if (s.matches("baseport")) {
      i=s.incrementAndCheck(i,args);
      ARGS.baseport=s.parseInt(args[i]);
    }
 else     if (s.matches("ip")) {
      i=s.incrementAndCheck(i,args);
      ARGS.ip=args[i];
    }
 else     if (s.matches("network")) {
      i=s.incrementAndCheck(i,args);
      ARGS.network=args[i];
    }
 else     if (s.matches("client")) {
      ARGS.client=true;
    }
 else     if (s.matches("user_name")) {
      i=s.incrementAndCheck(i,args);
      ARGS.user_name=args[i];
    }
 else     if (s.matches("ice_root")) {
      i=s.incrementAndCheck(i,args);
      ARGS.ice_root=args[i];
    }
 else     if (s.matches("flow_dir")) {
      i=s.incrementAndCheck(i,args);
      ARGS.flow_dir=args[i];
    }
 else     if (s.matches("nthreads")) {
      i=s.incrementAndCheck(i,args);
      ARGS.nthreads=s.parseInt(args[i]);
    }
 else     if (s.matches("hdfs_config")) {
      i=s.incrementAndCheck(i,args);
      ARGS.hdfs_config=args[i];
    }
 else     if (s.matches("hdfs_skip")) {
      ARGS.hdfs_skip=true;
    }
 else     if (s.matches("aws_credentials")) {
      i=s.incrementAndCheck(i,args);
      ARGS.aws_credentials=args[i];
    }
 else     if (s.matches("ga_hadoop_ver")) {
      i=s.incrementAndCheck(i,args);
      ARGS.ga_hadoop_ver=args[i];
    }
 else     if (s.matches("ga_opt_out")) {
      if (i + 1 < args.length && args[i + 1].equals("yes"))       i++;
      ARGS.ga_opt_out=true;
    }
 else     if (s.matches("log_level")) {
      i=s.incrementAndCheck(i,args);
      ARGS.log_level=args[i];
    }
 else     if (s.matches("random_udp_drop")) {
      ARGS.random_udp_drop=true;
    }
 else     if (s.matches("md5skip")) {
      ARGS.md5skip=true;
    }
 else     if (s.matches("quiet")) {
      ARGS.quiet=true;
    }
 else     if (s.matches("beta")) {
      ARGS.model_builders_visibility=ModelBuilder.BuilderVisibility.Beta;
    }
 else     if (s.matches("experimental")) {
      ARGS.model_builders_visibility=ModelBuilder.BuilderVisibility.Experimental;
    }
 else     if (s.matches("switch_tcp")) {
      i=s.incrementAndCheck(i,args);
      ARGS.switch_tcp=Integer.parseInt(args[i]);
    }
 else {
      parseFailed("Unknown argument (" + s + ")");
    }
  }
}
