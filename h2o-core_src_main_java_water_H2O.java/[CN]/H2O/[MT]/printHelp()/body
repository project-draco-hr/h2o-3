{
  String defaultFlowDirMessage;
  if (DEFAULT_FLOW_DIR() == null) {
    defaultFlowDirMessage="          (The default is none; saving flows not available.)\n";
  }
 else {
    defaultFlowDirMessage="          (The default is '" + DEFAULT_FLOW_DIR() + "'.)\n";
  }
  String s="\n" + "Usage:  java [-Xmx<size>] -jar h2o.jar [options]\n" + "        (Note that every option has a default and is optional.)\n"+ "\n"+ "    -h | -help\n"+ "          Print this help.\n"+ "\n"+ "    -version\n"+ "          Print version info and exit.\n"+ "\n"+ "    -name <h2oCloudName>\n"+ "          Cloud name used for discovery of other nodes.\n"+ "          Nodes with the same cloud name will form an H2O cloud\n"+ "          (also known as an H2O cluster).\n"+ "\n"+ "    -flatfile <flatFileName>\n"+ "          Configuration file explicitly listing H2O cloud node members.\n"+ "\n"+ "    -ip <ipAddressOfNode>\n"+ "          IP address of this node.\n"+ "\n"+ "    -port <port>\n"+ "          Port number for this node (note: port+1 is also used).\n"+ "          (The default port is " + ARGS.port + ".)\n"+ "\n"+ "    -network <IPv4network1Specification>[,<IPv4network2Specification> ...]\n"+ "          The IP address discovery code will bind to the first interface\n"+ "          that matches one of the networks in the comma-separated list.\n"+ "          Use instead of -ip when a broad range of addresses is legal.\n"+ "          (Example network specification: '10.1.2.0/24' allows 256 legal\n"+ "          possibilities.)\n"+ "\n"+ "    -ice_root <fileSystemPath>\n"+ "          The directory where H2O spills temporary data to disk.\n"+ "\n"+ "    -log_dir <fileSystemPath>\n"+ "          The directory where H2O writes logs to disk.\n"+ "          (This usually has a good default that you need not change.)\n"+ "\n"+ "    -log_level <TRACE,DEBUG,INFO,WARN,ERRR,FATAL>\n"+ "          Write messages at this logging level, or above.  Default is INFO."+ "\n"+ "\n"+ "    -flow_dir <server side directory or HDFS directory>\n"+ "          The directory where H2O stores saved flows.\n"+ defaultFlowDirMessage+ "\n"+ "    -nthreads <#threads>\n"+ "          Maximum number of threads in the low priority batch-work queue.\n"+ "          (The default is 99.)\n"+ "\n"+ "    -client\n"+ "          Launch H2O node in client mode.\n"+ "\n"+ "Authentication options:\n"+ "\n"+ "    -jks <filename>\n"+ "          Java keystore file\n"+ "\n"+ "    -jks_pass <password>\n"+ "          (Default is '"+ DEFAULT_JKS_PASS+ "')\n"+ "\n"+ "    -hash_login\n"+ "          Use Jetty HashLoginService\n"+ "\n"+ "    -ldap_login\n"+ "          Use Jetty LdapLoginService\n"+ "\n"+ "    -login_conf <filename>\n"+ "          LoginService configuration file\n"+ "\n"+ "Cloud formation behavior:\n"+ "\n"+ "    New H2O nodes join together to form a cloud at startup time.\n"+ "    Once a cloud is given work to perform, it locks out new members\n"+ "    from joining.\n"+ "\n"+ "Examples:\n"+ "\n"+ "    Start an H2O node with 4GB of memory and a default cloud name:\n"+ "        $ java -Xmx4g -jar h2o.jar\n"+ "\n"+ "    Start an H2O node with 6GB of memory and a specify the cloud name:\n"+ "        $ java -Xmx6g -jar h2o.jar -name MyCloud\n"+ "\n"+ "    Start an H2O cloud with three 2GB nodes and a default cloud name:\n"+ "        $ java -Xmx2g -jar h2o.jar &\n"+ "        $ java -Xmx2g -jar h2o.jar &\n"+ "        $ java -Xmx2g -jar h2o.jar &\n"+ "\n";
  System.out.print(s);
  for (  AbstractH2OExtension e : H2O.getExtensions()) {
    e.printHelp();
  }
}
