def simpleCheckGLM(self, model, parameters, labelList, labelListUsed, allowFailWarning=False, allowZeroCoeff=False, prettyPrint=False, noPrint=False, maxExpectedIterations=None, doNormalized=False):
    warnings = ''
    rank = model.rank
    binomial = model.binomial
    residual_deviance = model.residual_deviance
    threshold = model.threshold
    auc = model.auc
    best_lambda_idx = model.best_lambda_idx
    model_category = model.model_category
    name = model.name
    residual_degrees_of_freedom = model.residual_degrees_of_freedom
    coefficients_magnitude = model.coefficients_magnitude
    null_deviance = model.null_deviance
    null_degrees_of_freedom = model.null_degrees_of_freedom
    domains = model.domains
    aic = model.aic
    names = model.names
    coeffs_names = model.coefficients_table.data[0]
    coeffs = map(float, model.coefficients_table.data[1])
    intercept = coeffs[(-1)]
    interceptName = coeffs_names[(-1)]
    assert (len(coeffs) == len(coeffs_names)), ('%s %s' % (len(coeffs), len(coeffs_names)))
    print 'len(coeffs)', len(coeffs)
    print 'coeffs:', coeffs
    if ((interceptName != 'Intercept') or (abs(intercept) < 1e-26)):
        raise Exception(("'Intercept' should be last in coeffs_names %s %s" % (interceptName, intercept)))
    y = parameters['response_column']
    cString = '\n'
    for (i, c) in enumerate(coeffs_names):
        cString += ('%s: %.5e   ' % (coeffs_names[i], coeffs[i]))
    print cString
    print ('\nH2O intercept:\t\t%.5e' % intercept)
    print '\nTotal # of coeffs:', len(coeffs_names)
    absIntercept = abs(float(intercept))
    self.assertGreater(absIntercept, 1e-26, ((((("abs. value of GLM coeffs['Intercept'] is " + str(absIntercept)) + ', not >= 1e-26 for Intercept') + '\n') + 'parameters:') + dump_json(parameters)))
    if ((not allowZeroCoeff) and (len(coeffs) > 1)):
        s = 0.0
        for c in coeffs:
            s += abs(float(c))
        self.assertGreater(s, 1e-26, (((('sum of abs. value of GLM coeffs/intercept is ' + str(s)) + ', not >= 1e-26\n') + 'parameters:') + dump_json(parameters)))
    check_sandbox_for_errors()
    return (warnings, coeffs, intercept)
