{
  Frame res=new MRTask(){
    @Override public void map(    Chunk[] chks,    NewChunk[] cress){
      BufferedString vstr=new BufferedString();
      for (int c=0; c < chks.length; c++) {
        Chunk chk=chks[c];
        NewChunk cres=cress[c];
        Vec vec=chk.vec();
        if (vec.isString()) {
          final BufferedString conStr=new BufferedString(str);
          for (int i=0; i < chk._len; i++)           cres.addNum(str_op(chk.atStr(vstr,i),conStr));
        }
 else         if (vec.isCategorical()) {
          final double d=(double)ArrayUtils.find(vec.domain(),str);
          for (int i=0; i < chk._len; i++)           cres.addNum(op(chk.atd(i),d));
        }
 else {
          final double d=op(1,2);
          for (int i=0; i < chk._len; i++)           cres.addNum(d);
        }
      }
    }
  }
.doAll_numericResult(fr.numCols(),fr).outputFrame(fr._names,null);
  return new ValFrame(res);
}
