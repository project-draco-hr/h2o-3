{
  String[] data=new String[]{"'C1Chunk',C1SChunk, 'C2Chunk', 'C2SChunk',  'C4Chunk',  'C4FChunk',  'C8Chunk',  'C8DChunk',   'Categorical'\n" + "0,       0.0,          0,           0,           0,          0 ,          0,   8.878979,           A \n","1,       0.1,          1,         0.1,           1,          1 ,          1,   1.985934,           B \n","2,       0.2,          2,         0.2,           2,          2 ,          2,   3.398018,           C \n","3,       0.3,          3,         0.3,           3,          3 ,          3,   9.329589,           D \n","4,       0.4,          4,           4,           4,          4 , 2147483649,   0.290184,           A \n","0,       0.5,          0,           0,     -100000,    1.234e2 ,-2147483650,   1e-30,              B \n","254,    0.25,       2550,      6553.4,      100000,    2.345e-2,          0,    1e30,              C \n"," ,          ,           ,            ,            ,            ,           ,        ,                \n","?,        NA,          ?,           ?,           ?,           ?,          ?,       ?,                \n"};
  Key rkey=ParserTest.makeByteVec(data);
  Frame fr=ParseDataset.parse(Key.make("na_test.hex"),rkey);
  int nlines=(int)fr.numRows();
  Assert.assertEquals(9,nlines);
  Assert.assertEquals(9,fr.numCols());
  for (int i=0; i < nlines - 2; ++i)   for (  Vec v : fr.vecs())   Assert.assertTrue("error at line " + i + ", vec "+ v.chunkForChunkIdx(0).getClass().getSimpleName(),!Double.isNaN(v.at(i)) && !v.isNA(i));
  for (int j=0; j < fr.vecs().length; j++) {
    Vec v=fr.vecs()[j];
    for (int i=nlines - 2; i < nlines; ++i)     Assert.assertTrue(i + ", " + j+ ":"+ v.at(i)+ ", "+ v.isNA(i),Double.isNaN(v.at(i)) && v.isNA(i));
  }
  fr.delete();
}
