{
  Vec[] vecxs=frx.vecs();
  int ncolx=vecxs.length;
  Vec[] vecys=fry.vecs();
  int ncoly=vecys.length;
  if (mode.equals(Mode.AllObs)) {
    for (    Vec v : vecxs)     if (v.naCnt() != 0)     throw new IllegalArgumentException("Mode is 'all.obs' but NAs are present");
  }
  CorTaskMean taskMean=new CorTaskMean(ncoly,ncolx,mode.equals(Mode.CompleteObs) ? true : false).doAll(new Frame(fry).add(frx));
  long NACount=taskMean._NACount;
  double[] ymeans=ArrayUtils.div(taskMean._ysum,fry.numRows() - NACount);
  double[] xmeans=ArrayUtils.div(taskMean._xsum,fry.numRows() - NACount);
  CorTask[] cvs=new CorTask[ncoly];
  for (int y=0; y < ymeans.length; y++)   cvs[y]=new CorTask(ymeans[y],xmeans,true).dfork(new Frame(vecys[y]).add(frx));
  if (ncolx == 1 && ncoly == 1) {
    return new ValNum(cvs[0].getResult()._cors[0] / cvs[0].getResult()._denom[0]);
  }
  Vec[] res=new Vec[ncoly];
  Key<Vec>[] keys=Vec.VectorGroup.VG_LEN1.addVecs(ncoly);
  for (int y=0; y < ncoly; y++)   res[y]=Vec.makeVec(ArrayUtils.div(cvs[y].getResult()._cors,cvs[y].getResult()._denom),keys[y]);
  return new ValFrame(new Frame(fry._names,res));
}
