{
  if (fclz.isPrimitive() || String.class.equals(fclz)) {
    try {
      return parsePrimitve(s,fclz);
    }
 catch (    NumberFormatException ne) {
      String msg="Illegal argument for field: " + field_name + " of schema: "+ schemaClass.getSimpleName()+ ": cannot convert \""+ s+ "\" to type "+ fclz.getSimpleName();
      throw new H2OIllegalArgumentException(msg);
    }
  }
  if (fclz.isArray()) {
    Class<E> afclz=(Class<E>)fclz.getComponentType();
    E[] a=null;
    if (s.equals("null") || s.length() == 0)     return null;
    String[] splits;
    if (s.startsWith("[") && s.endsWith("]")) {
      read(s,0,'[',fclz);
      read(s,s.length() - 1,']',fclz);
      String inside=s.substring(1,s.length() - 1).trim();
      if (inside.length() == 0)       splits=new String[]{};
 else       splits=splitArgs(inside);
    }
 else {
      splits=new String[]{s.trim()};
    }
    if (afclz == int.class) {
      a=(E[])Array.newInstance(Integer.class,splits.length);
    }
 else     if (afclz == double.class) {
      a=(E[])Array.newInstance(Double.class,splits.length);
    }
 else     if (afclz == float.class) {
      a=(E[])Array.newInstance(Float.class,splits.length);
    }
 else {
      a=(E[])Array.newInstance(afclz,splits.length);
    }
    for (int i=0; i < splits.length; i++) {
      if (String.class == afclz || KeyV3.class.isAssignableFrom(afclz)) {
        String stripped=splits[i].trim();
        if ("null".equals(stripped.toLowerCase()) || "na".equals(stripped.toLowerCase())) {
          a[i]=null;
          continue;
        }
        if (stripped.startsWith("\"") && stripped.endsWith("\"")) {
          stripped=stripped.substring(1,stripped.length() - 1);
        }
        a[i]=(E)parse(field_name,stripped,afclz,required,schemaClass);
      }
 else {
        a[i]=(E)parse(field_name,splits[i].trim(),afclz,required,schemaClass);
      }
    }
    return a;
  }
  if (fclz.equals(Key.class))   if ((s == null || s.length() == 0) && required)   throw new H2OKeyNotFoundArgumentException(field_name,s);
 else   if (!required && (s == null || s.length() == 0))   return null;
 else   return Key.make(s.startsWith("\"") ? s.substring(1,s.length() - 1) : s);
  if (KeyV3.class.isAssignableFrom(fclz)) {
    if ((s == null || s.length() == 0) && required)     throw new H2OKeyNotFoundArgumentException(field_name,s);
    if (!required && (s == null || s.length() == 0))     return null;
    return KeyV3.make(fclz,Key.make(s.startsWith("\"") ? s.substring(1,s.length() - 1) : s));
  }
  if (Enum.class.isAssignableFrom(fclz)) {
    return EnumUtils.valueOf(fclz,s);
  }
  if (FrameV3.class.isAssignableFrom(fclz)) {
    if ((s == null || s.length() == 0) && required)     throw new H2OKeyNotFoundArgumentException(field_name,s);
 else     if (!required && (s == null || s.length() == 0))     return null;
 else {
      Value v=DKV.get(s);
      if (null == v)       return null;
      if (!v.isFrame())       throw H2OIllegalArgumentException.wrongKeyType(field_name,s,"Frame",v.get().getClass());
      return new FrameV3((Frame)v.get());
    }
  }
  if (JobV3.class.isAssignableFrom(fclz)) {
    if ((s == null || s.length() == 0) && required)     throw new H2OKeyNotFoundArgumentException(s);
 else     if (!required && (s == null || s.length() == 0))     return null;
 else {
      Value v=DKV.get(s);
      if (null == v)       return null;
      if (!v.isJob())       throw H2OIllegalArgumentException.wrongKeyType(field_name,s,"Job",v.get().getClass());
      return new JobV3().fillFromImpl((Job)v.get());
    }
  }
  if (FrameV3.ColSpecifierV3.class.isAssignableFrom(fclz)) {
    return new FrameV3.ColSpecifierV3(s);
  }
  if (ModelSchemaV3.class.isAssignableFrom(fclz))   throw H2O.fail("Can't yet take ModelSchemaV3 as input.");
  throw H2O.fail("Unimplemented schema fill from " + fclz.getSimpleName());
}
