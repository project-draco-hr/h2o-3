{
  if (schemas_registered)   return;
  Reflections reflections=null;
  new Schema();
  for (  Class<? extends Schema> schema_class : (new Reflections("water")).getSubTypesOf(Schema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends Schema> schema_class : (new Reflections("hex")).getSubTypesOf(Schema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelSchema> schema_class : (new Reflections("water")).getSubTypesOf(ModelSchema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelSchema> schema_class : (new Reflections("hex")).getSubTypesOf(ModelSchema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelOutputSchema> schema_class : (new Reflections("water")).getSubTypesOf(ModelOutputSchema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelOutputSchema> schema_class : (new Reflections("hex")).getSubTypesOf(ModelOutputSchema.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelParameterSchemaV2> schema_class : (new Reflections("water")).getSubTypesOf(ModelParameterSchemaV2.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  for (  Class<? extends ModelParameterSchemaV2> schema_class : (new Reflections("hex")).getSubTypesOf(ModelParameterSchemaV2.class))   if (!Modifier.isAbstract(schema_class.getModifiers()))   Schema.register(schema_class);
  schemas_registered=true;
  Log.info("Registered: " + Schema.schemas().size() + " schemas.");
}
