{
  if (fclz.equals(String.class))   return s;
  if (fclz.equals(int.class))   return Integer.valueOf(s);
  if (fclz.equals(long.class))   return Long.valueOf(s);
  if (fclz.equals(boolean.class))   return Boolean.valueOf(s);
  if (fclz.equals(byte.class))   return Byte.valueOf(s);
  if (fclz.equals(double.class))   return Double.valueOf(s);
  if (fclz.equals(float.class))   return Float.valueOf(s);
  if (fclz.isArray()) {
    if (s.equals("null") || s.length() == 0)     return null;
    read(s,0,'[',fclz);
    read(s,s.length() - 1,']',fclz);
    String[] splits=s.substring(1,s.length() - 1).split(",");
    Class<E> afclz=(Class<E>)fclz.getComponentType();
    E[] a=(E[])Array.newInstance(afclz,splits.length);
    for (int i=0; i < splits.length; i++)     a[i]=(E)parse(splits[i].trim(),afclz,required);
    return a;
  }
  if (fclz.equals(Key.class))   if ((s == null || s.length() == 0) && required)   throw new IllegalArgumentException("Missing key");
 else   if (!required && (s == null || s.length() == 0))   return null;
 else   if (!required)   return Key.make(s);
 else   return Key.make(s);
  if (Enum.class.isAssignableFrom(fclz))   return Enum.valueOf(fclz,s);
  if (Frame.class.isAssignableFrom(fclz))   if ((s == null || s.length() == 0) && required)   throw new IllegalArgumentException("Missing key");
 else   if (!required && (s == null || s.length() == 0))   return null;
 else {
    Value v=DKV.get(s);
    if (null == v)     return null;
    if (!v.isFrame())     throw new IllegalArgumentException("Frame argument points to a non-frame object.");
    return v.get();
  }
  if (Model.class.isAssignableFrom(fclz))   if ((s == null || s.length() == 0) && required)   throw new IllegalArgumentException("Missing key");
 else   if (!required && (s == null || s.length() == 0))   return null;
 else {
    Value v=DKV.get(s);
    if (null == v)     return null;
    if (!v.isModel())     throw new IllegalArgumentException("Model argument points to a non-model object.");
    return v.get();
  }
  throw new RuntimeException("Unimplemented schema fill from " + fclz.getSimpleName());
}
