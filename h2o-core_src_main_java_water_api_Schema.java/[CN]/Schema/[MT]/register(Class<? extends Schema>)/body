{
synchronized (clz) {
    Class<? extends Schema> existing=schemas.get(clz.getSimpleName());
    if (null != existing) {
      if (clz != existing)       throw H2O.fail("Two schema classes have the same simpleName; this is not supported: " + clz + " and "+ existing+ ".");
      return;
    }
    if (clz.getGenericSuperclass() instanceof ParameterizedType) {
      Type[] schema_type_parms=((ParameterizedType)(clz.getGenericSuperclass())).getActualTypeArguments();
      if (schema_type_parms.length < 2)       throw H2O.fail("Found a Schema that does not pass at least two type parameters.  Each Schema needs to be parameterized on the backing class (if any, or Iced if not) and itself: " + clz);
      Class parm0=ReflectionUtils.findActualClassParameter(clz,0);
      if (!Iced.class.isAssignableFrom(parm0))       throw H2O.fail("Found a Schema with bad type parameters.  First parameter is a subclass of Iced.  Each Schema needs to be parameterized on the backing class (if any, or Iced if not) and itself: " + clz + ".  Second parameter is of class: "+ parm0);
      if (Schema.class.isAssignableFrom(parm0))       throw H2O.fail("Found a Schema with bad type parameters.  First parameter is a subclass of Schema.  Each Schema needs to be parameterized on the backing class (if any, or Iced if not) and itself: " + clz + ".  Second parameter is of class: "+ parm0);
      Class parm1=ReflectionUtils.findActualClassParameter(clz,1);
      if (!Schema.class.isAssignableFrom(parm1))       throw H2O.fail("Found a Schema with bad type parameters.  Second parameter is not a subclass of Schema.  Each Schema needs to be parameterized on the backing class (if any, or Iced if not) and itself: " + clz + ".  Second parameter is of class: "+ parm1);
    }
 else {
      throw H2O.fail("Found a Schema that does not have a parameterized superclass.  Each Schema needs to be parameterized on the backing class (if any, or Iced if not) and itself: " + clz);
    }
    if (extractVersion(clz.getSimpleName()) > -1) {
      Schema s=null;
      try {
        s=clz.newInstance();
      }
 catch (      Exception e) {
        Log.err("Failed to instantiate schema class: " + clz);
      }
      if (null != s) {
        Log.debug("Instantiated: " + clz.getSimpleName());
        SchemaMetadata ignoreme=new SchemaMetadata(s);
      }
    }
  }
}
