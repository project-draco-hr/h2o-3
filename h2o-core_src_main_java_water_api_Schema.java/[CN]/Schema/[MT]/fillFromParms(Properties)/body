{
  Map<String,Field> fields=new HashMap<>();
  try {
    Class clz=getClass();
    do {
      Field[] some_fields=clz.getDeclaredFields();
      for (      Field f : some_fields)       if (null == fields.get(f.getName()))       fields.put(f.getName(),f);
      clz=clz.getSuperclass();
    }
 while (Iced.class.isAssignableFrom(clz.getSuperclass()));
  }
 catch (  SecurityException e) {
    throw new RuntimeException("Exception accessing fields: " + e);
  }
  for (  String key : parms.stringPropertyNames()) {
    try {
      Field f=fields.get(key);
      if (null == f)       throw new IllegalArgumentException("Unknown argument: " + key);
      int mods=f.getModifiers();
      if (Modifier.isTransient(mods) || Modifier.isStatic(mods))       throw new IllegalArgumentException("Unknown argument: " + key);
      API api=(API)f.getAnnotations()[0];
      if (api.direction() == API.Direction.OUTPUT)       throw new IllegalArgumentException("Attempting to set output field: " + key);
      Object parse_result=parse(parms.getProperty(key),f.getType(),api.required());
      if (parse_result != null && f.getType().isArray() && parse_result.getClass().isArray() && (f.getType().getComponentType() != parse_result.getClass().getComponentType())) {
        if (parse_result.getClass().getComponentType() == int.class && f.getType().getComponentType() == Integer.class) {
          int[] from=(int[])parse_result;
          Integer[] copy=new Integer[from.length];
          for (int i=0; i < from.length; i++)           copy[i]=from[i];
          f.set(this,copy);
        }
 else         if (parse_result.getClass().getComponentType() == Integer.class && f.getType().getComponentType() == int.class) {
          Integer[] from=(Integer[])parse_result;
          int[] copy=new int[from.length];
          for (int i=0; i < from.length; i++)           copy[i]=from[i];
          f.set(this,copy);
        }
 else {
          throw H2O.fail("Don't know how to cast an array of: " + parse_result.getClass().getComponentType() + " to an array of: "+ f.getType().getComponentType());
        }
      }
 else {
        f.set(this,parse_result);
      }
    }
 catch (    ArrayIndexOutOfBoundsException aioobe) {
      throw new RuntimeException("Broken internal schema; missing API annotation for field: " + key);
    }
catch (    IllegalAccessException iae) {
      throw new RuntimeException("Broken internal schema; field cannot be private nor final: " + key);
    }
  }
  for (  Field f : fields.values()) {
    int mods=f.getModifiers();
    if (Modifier.isTransient(mods) || Modifier.isStatic(mods))     continue;
    try {
      API api=(API)f.getAnnotations()[0];
      if (api.required()) {
        if (parms.getProperty(f.getName()) == null)         throw new IllegalArgumentException("Required field " + f.getName() + " not specified");
      }
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      throw new IllegalArgumentException("Missing annotation for API field: " + f.getName());
    }
  }
  return (S)this;
}
