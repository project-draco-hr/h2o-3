{
  Map<String,Field> fields=new HashMap<>();
  Field current=null;
  try {
    Class clz=getClass();
    do {
      Field[] some_fields=clz.getDeclaredFields();
      for (      Field f : some_fields) {
        current=f;
        if (null == fields.get(f.getName()))         fields.put(f.getName(),f);
      }
      clz=clz.getSuperclass();
    }
 while (Iced.class.isAssignableFrom(clz.getSuperclass()));
  }
 catch (  SecurityException e) {
    throw H2O.fail("Exception accessing field: " + current + " in class: "+ this.getClass()+ ": "+ e);
  }
  for (  String key : parms.stringPropertyNames()) {
    try {
      Field f=fields.get(key);
      if (null == f) {
        throw new H2OIllegalArgumentException("Unknown parameter: " + key,"Unknown parameter in fillFromParms: " + key + " for class: "+ this.getClass().toString());
      }
      int mods=f.getModifiers();
      if (Modifier.isTransient(mods) || Modifier.isStatic(mods)) {
        throw new H2OIllegalArgumentException("Bad parameter for field: " + key + " for class: "+ this.getClass().toString(),"Bad parameter definition for field: " + key + " in fillFromParms for class: "+ this.getClass().toString()+ " (field was declared static or transient)");
      }
      API api=(API)f.getAnnotations()[0];
      if (api.direction() == API.Direction.OUTPUT) {
        throw new H2OIllegalArgumentException("Attempting to set output field: " + key + " for class: "+ this.getClass().toString(),"Attempting to set output field: " + key + " in fillFromParms for class: "+ this.getClass().toString()+ " (field was annotated as API.Direction.OUTPUT)");
      }
      Object parse_result=parse(key,parms.getProperty(key),f.getType(),api.required());
      if (parse_result != null && f.getType().isArray() && parse_result.getClass().isArray() && (f.getType().getComponentType() != parse_result.getClass().getComponentType())) {
        if (parse_result.getClass().getComponentType() == int.class && f.getType().getComponentType() == Integer.class) {
          int[] from=(int[])parse_result;
          Integer[] copy=new Integer[from.length];
          for (int i=0; i < from.length; i++)           copy[i]=from[i];
          f.set(this,copy);
        }
 else         if (parse_result.getClass().getComponentType() == Integer.class && f.getType().getComponentType() == int.class) {
          Integer[] from=(Integer[])parse_result;
          int[] copy=new int[from.length];
          for (int i=0; i < from.length; i++)           copy[i]=from[i];
          f.set(this,copy);
        }
 else         if (parse_result.getClass().getComponentType() == Double.class && f.getType().getComponentType() == double.class) {
          Double[] from=(Double[])parse_result;
          double[] copy=new double[from.length];
          for (int i=0; i < from.length; i++)           copy[i]=from[i];
          f.set(this,copy);
        }
 else {
          throw H2O.fail("Don't know how to cast an array of: " + parse_result.getClass().getComponentType() + " to an array of: "+ f.getType().getComponentType());
        }
      }
 else {
        f.set(this,parse_result);
      }
    }
 catch (    ArrayIndexOutOfBoundsException aioobe) {
      throw H2O.fail("Broken internal schema; missing API annotation for field: " + key);
    }
catch (    IllegalAccessException iae) {
      throw H2O.fail("Broken internal schema; field cannot be private nor final: " + key);
    }
  }
  for (  Field f : fields.values()) {
    int mods=f.getModifiers();
    if (Modifier.isTransient(mods) || Modifier.isStatic(mods))     continue;
    try {
      API api=(API)f.getAnnotations()[0];
      if (api.required()) {
        if (parms.getProperty(f.getName()) == null) {
          IcedHashMap.IcedHashMapStringObject values=new IcedHashMap.IcedHashMapStringObject();
          values.put("schema",this.getClass().getSimpleName());
          values.put("argument",f.getName());
          throw new H2OIllegalArgumentException("Required field " + f.getName() + " not specified","Required field " + f.getName() + " not specified for schema class: "+ this.getClass(),values);
        }
      }
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      throw H2O.fail("Missing annotation for API field: " + f.getName());
    }
  }
  return (S)this;
}
