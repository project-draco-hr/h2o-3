{
  Map<String,Field> fields=new HashMap<>();
  try {
    Class clz=getClass();
    do {
      Field[] some_fields=clz.getDeclaredFields();
      for (      Field f : some_fields)       if (null == fields.get(f.getName()))       fields.put(f.getName(),f);
      clz=clz.getSuperclass();
    }
 while (Iced.class.isAssignableFrom(clz.getSuperclass()));
  }
 catch (  SecurityException e) {
    throw new RuntimeException("Exception accessing fields: " + e);
  }
  for (  String key : parms.stringPropertyNames()) {
    try {
      Field f=fields.get(key);
      if (null == f)       throw new IllegalArgumentException("Unknown argument: " + key);
      int mods=f.getModifiers();
      if (Modifier.isTransient(mods) || Modifier.isStatic(mods))       throw new IllegalArgumentException("Unknown argument: " + key);
      API api=(API)f.getAnnotations()[0];
      if (api.direction() == API.Direction.OUTPUT)       throw new IllegalArgumentException("Attempting to set output field: " + key);
      f.set(this,parse(parms.getProperty(key),f.getType()));
    }
 catch (    ArrayIndexOutOfBoundsException aioobe) {
      throw new RuntimeException("Broken internal schema; missing API annotation for field: " + key);
    }
catch (    IllegalAccessException iae) {
      throw new RuntimeException("Broken internal schema; field cannot be private nor final: " + key);
    }
  }
  for (  Field f : fields.values()) {
    int mods=f.getModifiers();
    if (Modifier.isTransient(mods) || Modifier.isStatic(mods))     continue;
    API api=(API)f.getAnnotations()[0];
    if (api.required()) {
      if (parms.getProperty(f.getName()) == null)       throw new IllegalArgumentException("Required field " + f.getName() + " not specified");
    }
  }
  return (S)this;
}
