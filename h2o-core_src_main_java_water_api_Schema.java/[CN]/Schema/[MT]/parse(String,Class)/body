{
  if (fclz.equals(String.class))   return s;
  if (fclz.equals(int.class))   return Integer.valueOf(s);
  if (fclz.equals(long.class))   return Long.valueOf(s);
  if (fclz.equals(boolean.class))   return Boolean.valueOf(s);
  if (fclz.equals(byte.class))   return Byte.valueOf(s);
  if (fclz.isArray()) {
    if (s.equals("null"))     return null;
    read(s,0,'[',fclz);
    read(s,s.length() - 1,']',fclz);
    String[] splits=s.substring(1,s.length() - 1).split(",");
    Class<E> afclz=(Class<E>)fclz.getComponentType();
    E[] a=(E[])Array.newInstance(afclz,splits.length);
    for (int i=0; i < splits.length; i++)     a[i]=(E)parse(splits[i].trim(),afclz);
    return a;
  }
  if (fclz.equals(Key.class))   if (s == null || s.length() == 0)   throw new IllegalArgumentException("Missing key");
 else   return Key.make(s);
  if (Enum.class.isAssignableFrom(fclz))   return Enum.valueOf(fclz,s);
  throw new RuntimeException("Unimplemented schema fill from " + fclz.getSimpleName());
}
