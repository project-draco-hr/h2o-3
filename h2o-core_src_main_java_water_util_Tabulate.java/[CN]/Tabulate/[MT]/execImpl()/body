{
  if (_dataset == null)   error("_dataset","Dataset not found");
  if (_binsPredictor < 1)   error("_binsPredictor","Number of bins for predictor must be >= 1");
  if (_binsResponse < 1)   error("_binsResponse","Number of bins for response must be >= 1");
  Vec x=_dataset.vec(_predictor);
  if (x == null)   error("_predictor","Predictor column " + _predictor + " not found");
 else   if (x.cardinality() > _binsPredictor) {
    Interaction in=new Interaction();
    in._source_frame=_dataset._key;
    in._factor_columns=new String[]{_predictor};
    in._max_factors=_binsPredictor - 1;
    in._dest=Key.make();
    in.execImpl();
    x=((Frame)DKV.getGet(in._dest)).anyVec();
    in.remove();
  }
 else   if (x.isInt() && (x.max() - x.min() + 1) <= _binsPredictor) {
    x=x.toEnum();
  }
  Vec y=_dataset.vec(_response);
  if (y == null)   error("_response","Response column " + _response + " not found");
 else   if (y.cardinality() > _binsResponse) {
    Interaction in=new Interaction();
    in._source_frame=_dataset._key;
    in._factor_columns=new String[]{_response};
    in._max_factors=_binsResponse - 1;
    in._dest=Key.make();
    in.execImpl();
    y=((Frame)DKV.getGet(in._dest)).anyVec();
    in.remove();
  }
 else   if (y.isInt() && (y.max() - y.min() + 1) <= _binsResponse) {
    y=y.toEnum();
  }
  if (y != null && y.cardinality() > 2)   warn("_response","Response column has more than two factor levels - mean response depends on lexicographic order of factors!");
  Vec w=_dataset.vec(_weight);
  if (error_count() > 0) {
    Tabulate.this.updateValidationMessages();
    throw new H2OIllegalArgumentException(validationErrors());
  }
  if (x != null)   _predVec=x._key;
  if (y != null)   _respVec=y._key;
  Tabulate sp=w != null ? new CoOccurrence(this).doAll(x,y,w)._sp : new CoOccurrence(this).doAll(x,y)._sp;
  _countTable=sp.tabulationTwoDimTable();
  _responseTable=sp.responseCharTwoDimTable();
  Log.info(_countTable);
  Log.info(_responseTable);
  return sp;
}
