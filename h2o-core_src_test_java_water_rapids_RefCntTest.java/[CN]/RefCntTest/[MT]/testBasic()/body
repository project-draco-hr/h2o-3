{
  Session session=new Session();
  Frame crimes=parse_test_file(Key.make("chicagoCrimes10k.hex"),"smalldata/chicago/chicagoCrimes10k.csv.zip");
  Vec.VectorGroup vg=crimes.anyVec().group();
  int key1=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertTrue(crimes.vec("Date").isTime());
  Rapids.exec("(tmp= py_1 (:= chicagoCrimes10k.hex (+ (cols_py chicagoCrimes10k.hex \"Date\") 1) 2 []))",session);
  Assert.assertTrue(crimes.vec("Date").isTime());
  Frame py_1=DKV.getGet(Key.make("py_1"));
  Assert.assertTrue(py_1.vec("Date").isNumeric());
  Assert.assertTrue(py_1.vec("Date").mean() > 1300000000L);
  int key2=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key1 + 1,key2);
  Rapids.exec("(rm chicagoCrimes10k.hex)",session);
  crimes=null;
  for (  Vec vec : py_1.vecs())   vec.mean();
  int key_tmp=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key2,key_tmp);
  Rapids.exec("(, (tmp= py_2 (append py_1 (day (cols_py py_1 \"Date\")) \"Day\")) (rm py_1))",session);
  py_1=null;
  Frame py_2=DKV.getGet(Key.make("py_2"));
  for (  Vec vec : py_2.vecs())   vec.mean();
  int key3=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key2 + 1,key3);
  Rapids.exec("(tmp= py_3 (append py_2 (month (cols_py py_2 \"Date\")) \"Month\"))",session);
  Frame py_3=DKV.getGet(Key.make("py_3"));
  for (  Vec vec : py_3.vecs())   vec.mean();
  int key4=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key3 + 1,key4);
  Rapids.exec("(, (rm py_2) (tmp= py_4 (:= py_3 (+ (year (cols_py py_3 \"Date\")) 1900) 17 [])))",session);
  Frame py_4=DKV.getGet(Key.make("py_4"));
  py_2=null;
  for (  Vec vec : py_4.vecs())   vec.mean();
  int key5=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key4 + 2,key5);
  Rapids.exec("(, (rm py_3) (tmp= py_5 (append py_4 (week (cols_py py_4 \"Date\")) \"WeekNum\")))",session);
  Frame py_5=DKV.getGet(Key.make("py_5"));
  py_3=null;
  for (  Vec vec : py_5.vecs())   vec.mean();
  int key6=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key5 + 1,key6);
  Rapids.exec("(,  (rm py_4) (tmp= py_6 (append py_5 (dayOfWeek (cols_py py_5 \"Date\")) \"WeekDay\")))",session);
  Frame py_6=DKV.getGet(Key.make("py_6"));
  py_4=null;
  for (  Vec vec : py_6.vecs())   vec.mean();
  int key7=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key6 + 1,key7);
  Rapids.exec("(, (rm py_5) (tmp= py_7 (append py_6 (hour (cols_py py_6 \"Date\")) \"HourOfDay\")))",session);
  Frame py_7=DKV.getGet(Key.make("py_7"));
  py_5=null;
  for (  Vec vec : py_7.vecs())   vec.mean();
  int key8=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key7 + 1,key8);
  Rapids.exec("(, (rm py_6) (tmp= py_8 (append py_7 (| (== (cols_py py_7 \"WeekDay\") \"Sun\") (== (cols_py py_7 \"WeekDay\") \"Sat\")) \"Weekend\")))",session);
  Frame py_8=DKV.getGet(Key.make("py_8"));
  py_6=null;
  for (  Vec vec : py_8.vecs())   vec.mean();
  int key9=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key8 + 3,key9);
  Rapids.exec("(, (rm py_7) (tmp= py_9 (append py_8 (cut (cols_py py_8 \"Month\") [0 2 5 7 10 12] [\"Winter\" \"Spring\" \"Summer\" \"Autumn\" \"Winter\"] FALSE TRUE 3) \"Season\")))",session);
  Frame py_9=DKV.getGet(Key.make("py_9"));
  py_7=null;
  for (  Vec vec : py_9.vecs())   vec.mean();
  int key10=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key9 + 1,key10);
  Rapids.exec("(, (rm py_8) (tmp= py_10 (cols py_9 -3)))",session);
  Frame py_10=DKV.getGet(Key.make("py_10"));
  py_8=null;
  for (  Vec vec : py_10.vecs())   vec.mean();
  key_tmp=DKV.<Vec.VectorGroup>getGet(vg._key).len();
  Assert.assertEquals(key10,key_tmp);
  session.end(null);
}
