def model_performance(self, test_data=None, train=False, valid=False, xval=False):
    '\n    Generate model metrics for this model on test_data.\n\n    Parameters\n    ----------\n    test_data: H2OFrame, optional\n      Data set for which model metrics shall be computed against. All three of train, valid and xval arguments are ignored if test_data is not None.\n    train: boolean, optional\n      Report the training metrics for the model.\n    valid: boolean, optional\n      Report the validation metrics for the model.\n    xval: boolean, optional\n      Report the cross-validation metrics for the model. If train and valid are True, then it defaults to True.\n\n    Returns\n    -------\n      An object of class H2OModelMetrics.\n    '
    if (test_data is None):
        if ((not train) and (not valid) and (not xval)):
            train = True
        if train:
            return self._model_json['output']['training_metrics']
        if valid:
            return self._model_json['output']['validation_metrics']
        if xval:
            return self._model_json['output']['cross_validation_metrics']
    else:
        if (not isinstance(test_data, h2o.H2OFrame)):
            raise ValueError(('`test_data` must be of type H2OFrame.  Got: ' + type(test_data)))
        res = h2o.api(('POST /3/ModelMetrics/models/%s/frames/%s' % (self.model_id, test_data.frame_id)))
        raw_metrics = None
        for mm in res['model_metrics']:
            if ((not (mm['frame'] == None)) and (mm['frame']['name'] == test_data.frame_id)):
                raw_metrics = mm
                break
        return self._metrics_class(raw_metrics, algo=self._model_json['algo'])
