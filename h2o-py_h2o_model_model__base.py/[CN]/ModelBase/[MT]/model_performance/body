def model_performance(self, test_data=None, train=False, valid=False, xval=False):
    u'\n        Generate model metrics for this model on test_data.\n\n        Parameters\n        ----------\n        test_data: H2OFrame, optional\n          Data set for which model metrics shall be computed against. All three of train, valid and xval arguments are\n          ignored if test_data is not None.\n        train: boolean, optional\n          Report the training metrics for the model.\n        valid: boolean, optional\n          Report the validation metrics for the model.\n        xval: boolean, optional\n          Report the cross-validation metrics for the model. If train and valid are True, then it defaults to True.\n\n        :returns: An object of class H2OModelMetrics.\n        '
    if (test_data is None):
        if ((not train) and (not valid) and (not xval)):
            train = True
        if train:
            return self._model_json[u'output'][u'training_metrics']
        if valid:
            return self._model_json[u'output'][u'validation_metrics']
        if xval:
            return self._model_json[u'output'][u'cross_validation_metrics']
    else:
        if (not isinstance(test_data, h2o.H2OFrame)):
            raise ValueError((u'`test_data` must be of type H2OFrame.  Got: ' + type(test_data)))
        res = h2o.api((u'POST /3/ModelMetrics/models/%s/frames/%s' % (self.model_id, test_data.frame_id)))
        raw_metrics = None
        for mm in res[u'model_metrics']:
            if ((mm[u'frame'] is not None) and (mm[u'frame'][u'name'] == test_data.frame_id)):
                raw_metrics = mm
                break
        return self._metrics_class(raw_metrics, algo=self._model_json[u'algo'])
