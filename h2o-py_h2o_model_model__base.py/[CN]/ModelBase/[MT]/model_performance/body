def model_performance(self, test_data=None, train=False, valid=False):
    '\n    Generate model metrics for this model on test_data.\n\n    :param test_data: Data set for which model metrics shall be computed against. Both train and valid arguments are ignored if test_data is not None.\n    :param train: Report the training metrics for the model. If the test_data is the training data, the training metrics are returned.\n    :param valid: Report the validation metrics for the model. If train and valid are True, then it defaults to True.\n    :return: An object of class H2OModelMetrics.\n    '
    if (test_data is None):
        if ((not train) and (not valid)):
            train = True
        if train:
            return self._model_json['output']['training_metrics']
        if valid:
            return self._model_json['output']['validation_metrics']
    else:
        if (not isinstance(test_data, H2OFrame)):
            raise ValueError(('`test_data` must be of type H2OFrame.  Got: ' + type(test_data)))
        test_data._eager()
        res = H2OConnection.post_json(((('ModelMetrics/models/' + self._id) + '/frames/') + test_data.frame_id))
        raw_metrics = None
        for mm in res['model_metrics']:
            if ((not (mm['frame'] == None)) and (mm['frame']['name'] == test_data.frame_id)):
                raw_metrics = mm
                break
        return self._metrics_class(raw_metrics, algo=self._model_json['algo'])
