def _plot(self, timestep, metric, **kwargs):
    try:
        imp.find_module(u'matplotlib')
        import matplotlib
        if ((u'server' in kwargs) and kwargs[u'server']):
            matplotlib.use(u'Agg', warn=False)
        import matplotlib.pyplot as plt
    except ImportError:
        print(u'matplotlib is required for this function!')
        return
    scoring_history = self.scoring_history()
    if (self._model_json[u'algo'] == u'glm'):
        timestep = u'iteration'
        if (metric == u'AUTO'):
            metric = u'log_likelihood'
        elif (metric not in (u'log_likelihood', u'objective')):
            raise ValueError(u'for GLM, metric must be one of: log_likelihood, objective')
        plt.xlabel(timestep)
        plt.ylabel(metric)
        plt.title(u'Validation Scoring History')
        plt.plot(scoring_history[timestep], scoring_history[metric])
    elif (self._model_json[u'algo'] in (u'deeplearning', u'drf', u'gbm')):
        if (self._model_json[u'algo'] in (u'gbm', u'drf')):
            if (timestep == u'AUTO'):
                timestep = u'number_of_trees'
            elif (timestep not in (u'duration', u'number_of_trees')):
                raise ValueError(u'timestep for gbm or drf must be one of: duration, number_of_trees')
        else:
            if (scoring_history[u'samples'][0] == 0):
                scoring_history = scoring_history[1:]
            if (timestep == u'AUTO'):
                timestep = u'epochs'
            elif (timestep not in (u'epochs', u'samples', u'duration')):
                raise ValueError(u'timestep for deeplearning must be one of: epochs, samples, duration')
        training_metric = u'training_{}'.format(metric)
        validation_metric = u'validation_{}'.format(metric)
        if (timestep == u'duration'):
            dur_colname = u'duration_{}'.format(scoring_history[u'duration'][1].split()[1])
            scoring_history[dur_colname] = [str(x).split()[0] for x in scoring_history[u'duration']]
            timestep = dur_colname
        if can_use_pandas():
            valid = (validation_metric in list(scoring_history))
            ylim = ((scoring_history[[training_metric, validation_metric]].min().min(), scoring_history[[training_metric, validation_metric]].max().max()) if valid else (scoring_history[training_metric].min(), scoring_history[training_metric].max()))
        else:
            valid = (validation_metric in scoring_history.col_header)
            ylim = ((min(min(scoring_history[[training_metric, validation_metric]])), max(max(scoring_history[[training_metric, validation_metric]]))) if valid else (min(scoring_history[training_metric]), max(scoring_history[training_metric])))
        if (ylim[0] == ylim[1]):
            ylim = (0, 1)
        if valid:
            plt.xlabel(timestep)
            plt.ylabel(metric)
            plt.title(u'Scoring History')
            plt.ylim(ylim)
            plt.plot(scoring_history[timestep], scoring_history[training_metric], label=u'Training')
            plt.plot(scoring_history[timestep], scoring_history[validation_metric], color=u'orange', label=u'Validation')
            plt.legend()
        else:
            plt.xlabel(timestep)
            plt.ylabel(training_metric)
            plt.title(u'Training Scoring History')
            plt.ylim(ylim)
            plt.plot(scoring_history[timestep], scoring_history[training_metric])
    else:
        raise ValueError(u'Plotting not implemented for this type of model')
    if ((u'server' not in list(kwargs.keys())) or (not kwargs[u'server'])):
        plt.show()
