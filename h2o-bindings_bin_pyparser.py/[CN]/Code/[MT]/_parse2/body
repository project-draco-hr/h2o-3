def _parse2(self, fragments):
    u'\n        Second stage of parsing: convert ``fragments`` into the list of code objects.\n\n        This method in fact does more than simple conversion of fragments into objects. It also attempts to group\n        certain fragments into one, if they in fact seem like a single piece. For example, decorators are grouped\n        together with the objects they decorate, comments that explain certain objects or statements are attached to\n        those as well.\n        '
    out = []
    tokens = self._tokens
    i = 0
    saved_start = None
    while (i < len(fragments)):
        (ftype, start, end) = fragments[i]
        assert (start == (0 if (i == 0) else fragments[(i - 1)][2])), (u'Discontinuity in `fragments` at i = %d' % i)
        if ((ftype == u'whitespace') or (ftype == u'end')):
            assert (saved_start is None)
            obj = Whitespace(tokens[start:end])
        elif (ftype == u'docstring'):
            assert (saved_start is None)
            obj = Docstring(tokens[start:end])
        elif (ftype == u'comment'):
            assert (saved_start is None)
            next_frag = (fragments[(i + 1)][0] if ((i + 1) < len(fragments)) else u'end')
            if (next_frag in {u'docstring', u'end', u'whitespace', u'comment', u'banner-comment'}):
                obj = Comment(tokens[start:end])
            elif (next_frag in {u'decorator', u'import', u'def', u'class', u'code'}):
                saved_start = start
                i += 1
                continue
            else:
                raise RuntimeError((u'Unknown token type %s' % next_frag))
        elif (ftype == u'banner-comment'):
            assert (saved_start is None)
            obj = Comment(tokens[start:end])
            obj.type = u'banner'
        elif (ftype == u'decorator'):
            if (saved_start is None):
                saved_start = start
            i += 1
            continue
        elif (ftype == u'import'):
            real_start = (start if (saved_start is None) else saved_start)
            saved_start = None
            obj = ImportBlock(tokens[real_start:end])
        elif (ftype in {u'class', u'def'}):
            real_start = (start if (saved_start is None) else saved_start)
            saved_start = None
            obj = Callable(tokens[real_start:end])
            obj.type = ftype
        elif (ftype == u'code'):
            real_start = (start if (saved_start is None) else saved_start)
            saved_start = None
            obj = Expression(tokens[real_start:end])
        else:
            assert False, (u'Unknown fragment type %s' % ftype)
        out.append(obj)
        i += 1
    return out
