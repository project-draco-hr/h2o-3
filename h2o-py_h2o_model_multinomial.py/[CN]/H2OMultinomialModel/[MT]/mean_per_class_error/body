def mean_per_class_error(self, train=False, valid=False, xval=False):
    u'\n    Retrieve the mean per class error across all classes\n\n    If all are False (default), then return the training metric value.\n    If more than one options is set to True, then return a dictionary of metrics where the keys are "train", "valid",\n    and "xval"\n\n    Parameters\n    ----------\n      train : bool, optional\n        If True, return the mean_per_class_error value for the training data.\n\n      valid : bool, optional\n        If True, return the mean_per_class_error value for the validation data.\n\n      xval : bool, optional\n        If True, return the mean_per_class_error value for each of the cross-validated splits.\n\n    Returns\n    -------\n      The mean_per_class_error values for the specified key(s).\n    '
    tm = ModelBase._get_metrics(self, train, valid, xval)
    m = {}
    for (k, v) in zip(list(tm.keys()), list(tm.values())):
        m[k] = (None if (v is None) else v.mean_per_class_error())
    return (list(m.values())[0] if (len(m) == 1) else m)
