{
  while (true) {
    if ((!MEM_LOW_CRITICAL && !force) && !CAN_ALLOC && bytes > 256 && !(Thread.currentThread() instanceof Cleaner)) {
synchronized (_lock) {
        try {
          _lock.wait(300 * 1000);
        }
 catch (        InterruptedException ex) {
        }
      }
    }
    MEM_ALLOC.addAndGet(bytes);
    try {
switch (type) {
case 1:
        return new byte[elems];
case 2:
      return new short[elems];
case 4:
    return new int[elems];
case 8:
  return new long[elems];
case 5:
return new float[elems];
case 9:
return new double[elems];
case 0:
return new boolean[elems];
case 10:
return new Object[elems];
case -1:
return Arrays.copyOfRange((byte[])orig,from,elems);
case -4:
return Arrays.copyOfRange((int[])orig,from,elems);
case -8:
return Arrays.copyOfRange((long[])orig,from,elems);
case -9:
return Arrays.copyOfRange((double[])orig,from,elems);
default :
throw H2O.fail();
}
}
 catch (OutOfMemoryError e) {
if (Cleaner.isDiskFull()) UDPRebooted.suicide(UDPRebooted.T.oom,H2O.SELF);
}
set_goals("OOM",true,bytes);
}
}
