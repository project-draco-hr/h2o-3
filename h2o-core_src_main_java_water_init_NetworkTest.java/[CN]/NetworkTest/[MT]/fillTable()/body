{
  String tableHeader="Network Test";
  String tableDescription="Launched from " + H2O.SELF._key;
  String[] rowHeaders=new String[H2O.CLOUD.size() + 1];
  rowHeaders[0]="all - collective bcast/reduce";
  for (int i=0; i < H2O.CLOUD.size(); ++i) {
    rowHeaders[1 + i]=((H2O.SELF.equals(H2O.CLOUD._memary[i]) ? "self" : "remote") + " " + H2O.CLOUD._memary[i].toString());
  }
  String[] colHeaders=new String[msg_sizes.length];
  for (int i=0; i < colHeaders.length; ++i) {
    colHeaders[i]=msg_sizes[i] + " bytes";
  }
  String[] colTypes=new String[msg_sizes.length];
  for (int i=0; i < colTypes.length; ++i) {
    colTypes[i]="string";
  }
  String[] colFormats=new String[msg_sizes.length];
  for (int i=0; i < colTypes.length; ++i) {
    colFormats[i]="%s";
  }
  String colHeaderForRowHeaders="Destination";
  table=new TwoDimTable(tableHeader,tableDescription,rowHeaders,colHeaders,colTypes,colFormats,colHeaderForRowHeaders);
  for (int m=0; m < msg_sizes.length; ++m) {
    table.set(0,m,PrettyPrint.usecs((long)microseconds_collective[m]) + ", " + PrettyPrint.bytesPerSecond((long)bandwidths_collective[m]));
  }
  for (int n=0; n < H2O.CLOUD._memary.length; ++n) {
    for (int m=0; m < msg_sizes.length; ++m) {
      table.set(1 + n,m,PrettyPrint.usecs((long)microseconds[m][n]) + ", " + PrettyPrint.bytesPerSecond((long)bandwidths[m][n]));
    }
  }
}
