{
  Model model=null;
  String protoModelKey=grid._key + "_model_";
  NumberFormat mSformatter=new DecimalFormat("#0.000");
  try {
    HyperSpaceWalker.HyperSpaceIterator<MP> it=_hyperSpaceWalker.iterator();
    int counter=grid.getModelCount();
    while (it.hasNext(model)) {
      if (_job.stop_requested())       return;
      double time_remaining_secs=it.time_remaining_secs();
      double max_runtime_secs=it.max_runtime_secs();
      if (time_remaining_secs < 0) {
        Log.info("Grid max_runtime_secs of " + mSformatter.format(max_runtime_secs) + "S has expired; stopping early.");
        return;
      }
      MP params;
      try {
        params=it.nextModelParameters(model);
        if (max_runtime_secs < Double.MAX_VALUE) {
          Log.info("Grid time is limited to: " + max_runtime_secs + " for grid: "+ grid._key+ ". Remaining time is: "+ time_remaining_secs);
          if (params._max_runtime_secs == 0) {
            params._max_runtime_secs=time_remaining_secs;
            Log.info("Due to the grid time limit, changing model max runtime to: " + mSformatter.format(params._max_runtime_secs) + "S.");
          }
 else {
            double was=params._max_runtime_secs;
            params._max_runtime_secs=Math.min(params._max_runtime_secs,time_remaining_secs);
            Log.info("Due to the grid time limit, changing model max runtime from: " + mSformatter.format(was) + " to: "+ mSformatter.format(params._max_runtime_secs)+ "S.");
          }
        }
        try {
          ScoringInfo scoringInfo=new ScoringInfo();
          scoringInfo.time_stamp_ms=System.currentTimeMillis();
          model=buildModel(params,grid,counter++,protoModelKey);
          if (model != null) {
            model.fillScoringInfo(scoringInfo);
            grid.setScoringInfos(ScoringInfo.prependScoringInfo(scoringInfo,grid.getScoringInfos()));
            ScoringInfo.sort(grid.getScoringInfos(),_hyperSpaceWalker.search_criteria().stopping_metric());
          }
        }
 catch (        RuntimeException e) {
          if (!Job.isCancelledException(e)) {
            StringWriter sw=new StringWriter();
            PrintWriter pw=new PrintWriter(sw);
            e.printStackTrace(pw);
            Log.warn("Grid search: model builder for parameters " + params + " failed! Exception: ",e,sw.toString());
          }
          grid.appendFailedModelParameters(params,e);
        }
      }
 catch (      IllegalArgumentException e) {
        Log.warn("Grid search: construction of model parameters failed! Exception: ",e);
        it.modelFailed(model);
        Object[] rawParams=it.getCurrentRawParameters();
        grid.appendFailedModelParameters(rawParams,e);
      }
 finally {
        _job.update(1);
        grid.update(_job);
      }
      if (model != null && grid.getScoringInfos() != null && _hyperSpaceWalker.stopEarly(model,grid.getScoringInfos())) {
        Log.info("Convergence detected based on simple moving average of the loss function. Grid building completed.");
        break;
      }
    }
    Log.info("For grid: " + grid._key + " built: "+ grid.getModelCount()+ " models.");
  }
  finally {
    grid.unlock(_job);
  }
}
