{
  final long gridSize=_hyperSpaceWalker.getMaxHyperSpaceSize();
  Log.info("Starting gridsearch: estimated size of search space = " + gridSize);
  final Grid<MP> grid;
  Keyed keyed=DKV.getGet(_result);
  if (keyed != null) {
    if (!(keyed instanceof Grid))     throw new H2OIllegalArgumentException("Name conflict: tried to create a Grid using the ID of a non-Grid object that's already in H2O: " + _job._result + "; it is a: "+ keyed.getClass());
    grid=(Grid)keyed;
    Frame specTrainFrame=_hyperSpaceWalker.getParams().train();
    Frame oldTrainFrame=grid.getTrainingFrame();
    if (oldTrainFrame != null && !specTrainFrame._key.equals(oldTrainFrame._key) || specTrainFrame.checksum() != oldTrainFrame.checksum())     throw new H2OIllegalArgumentException("training_frame","grid","Cannot append new models to a grid with different training input");
    grid.write_lock(_job);
  }
 else {
    grid=new Grid<>(_result,_hyperSpaceWalker.getParams(),_hyperSpaceWalker.getHyperParamNames(),_hyperSpaceWalker.getParametersBuilderFactory().getFieldNamingStrategy());
    grid.delete_and_lock(_job);
  }
  Model model=null;
  HyperSpaceWalker.HyperSpaceIterator<MP> it=_hyperSpaceWalker.iterator();
  long gridWork=0;
  if (gridSize > 0) {
    int count=0;
    while (it.hasNext(model) && (it.max_models() > 0 && count++ < it.max_models())) {
      try {
        Model.Parameters parms=it.nextModelParameters(model);
        gridWork+=(parms._nfolds > 0 ? (parms._nfolds + 1) : 1) * parms.progressUnits();
      }
 catch (      Throwable ex) {
      }
    }
  }
 else {
    gridWork=Long.MAX_VALUE;
  }
  it.reset();
  return _job.start(new H2O.H2OCountedCompleter(){
    @Override public void compute2(){
      gridSearch(grid);
      tryComplete();
    }
  }
,gridWork,it.max_runtime_secs());
}
