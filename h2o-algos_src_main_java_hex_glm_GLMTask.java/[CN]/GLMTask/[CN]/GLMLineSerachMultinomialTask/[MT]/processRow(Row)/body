{
  ++_nobs;
  double step=_initialStep;
  for (int i=0; i < _nSteps; ++i) {
    double maxrow=0;
    System.arraycopy(_betaMultinomial[_c],0,_betaC,0,_betaC.length);
    ArrayUtils.wadd(_betaC,_direction,step);
    double etaOffset=0;
    if (_dinfo._normMul != null && _dinfo._normSub != null) {
      int ns=_dinfo.numStart();
      for (int j=0; j < _dinfo._nums; ++j)       etaOffset-=_betaC[ns + j] * _dinfo._normSub[j] * _dinfo._normMul[j];
    }
    for (int c=0; c < _betaMultinomial.length; ++c) {
      double e;
      if (c != _c)       e=r.innerProduct(_betaMultinomial[c],_offsets[c]);
 else       e=r.innerProduct(_betaC,etaOffset);
      if (e > maxrow)       maxrow=e;
      _etas[c]=e;
    }
    double sumExp=0;
    for (int c=0; c < _betaMultinomial.length; ++c)     sumExp+=Math.exp(_etas[c] - maxrow);
    double logSumExp=Math.log(sumExp) + maxrow;
    _likelihoods[i]-=r.weight * (_etas[(int)r.response(0)] - logSumExp);
    step*=_stepDec;
  }
}
