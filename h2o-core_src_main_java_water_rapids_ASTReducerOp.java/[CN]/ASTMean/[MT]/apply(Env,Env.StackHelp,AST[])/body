{
  Frame fr=stk.track(asts[1].exec(env)).getFrame();
  boolean narm=asts[2].exec(env).getNum() == 1;
  if (fr.numCols() == 1) {
    if (!fr.anyVec().isNumeric())     return new ValNum(Double.NaN);
    if (!narm && (fr.anyVec().length() == 0 || fr.anyVec().naCnt() > 0))     return new ValNum(Double.NaN);
    return new ValNum(fr.anyVec().mean());
  }
  Futures fs=new Futures();
  Key key=Vec.VectorGroup.VG_LEN1.addVecs(1)[0];
  AppendableVec v=new AppendableVec(key,Vec.T_NUM);
  NewChunk chunk=new NewChunk(v,0);
  for (int i=0; i < fr.numCols(); ++i)   chunk.addNum((fr.vec(i).isNumeric() || fr.vec(i).naCnt() > 0) ? fr.vec(i).mean() : Double.NaN);
  chunk.close(0,fs);
  Vec vec=v.layout_and_close(fs);
  fs.blockForPending();
  Frame fr2=new Frame(Key.make(),new String[]{"C1"},new Vec[]{vec});
  DKV.put(fr2);
  return new ValFrame(fr2);
}
