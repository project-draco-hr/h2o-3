{
  int ssx=find_smallest();
  long k0=k(ssx);
  long k1=k(ssx + 1);
  _ths[ssx]=(_ths[ssx] * k0 + _ths[ssx + 1] * k1) / (k0 + k1);
  _sqe[ssx]=_sqe[ssx] + _sqe[ssx + 1] + compute_delta_error(_ths[ssx + 1],k1,_ths[ssx],k0);
  _tps[ssx]+=_tps[ssx + 1];
  _fps[ssx]+=_fps[ssx + 1];
  System.arraycopy(_ths,ssx + 2,_ths,ssx + 1,_n - ssx - 2);
  System.arraycopy(_sqe,ssx + 2,_sqe,ssx + 1,_n - ssx - 2);
  System.arraycopy(_tps,ssx + 2,_tps,ssx + 1,_n - ssx - 2);
  System.arraycopy(_fps,ssx + 2,_fps,ssx + 1,_n - ssx - 2);
  _n--;
  _ssx=-1;
}
