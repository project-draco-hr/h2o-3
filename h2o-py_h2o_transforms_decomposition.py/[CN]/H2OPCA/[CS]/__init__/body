def __init__(self, model_id=None, k=None, max_iterations=None, seed=None, transform=('NONE', 'DEMEAN', 'DESCALE', 'STANDARDIZE', 'NORMALIZE'), use_all_factor_levels=False, pca_method=('GramSVD', 'Power', 'GLRM')):
    '\n    Principal Components Analysis\n\n    Parameters\n    ----------\n      model_id : str, optional\n        The unique hex key assigned to the resulting model. Automatically generated if\n        none is provided.\n      k : int\n        The number of principal components to be computed. This must be between 1 and\n        min(ncol(training_frame), nrow(training_frame)) inclusive.\n      transform : str\n        A character string that indicates how the training data should be transformed\n        before running PCA. Possible values are\n          "NONE": for no transformation,\n          "DEMEAN": for subtracting the mean of each column,\n          "DESCALE": for dividing by the standard deviation of each column,\n          "STANDARDIZE": for demeaning and descaling, and\n          "NORMALIZE": for demeaning and dividing each column by its range (max - min).\n      seed : int, optional\n         Random seed used to initialize the right singular vectors at the beginning of\n         each power method iteration.\n      max_iterations : int, optional\n        The maximum number of iterations when pca_method is "Power"\n      use_all_factor_levels : bool, optional\n        A logical value indicating whether all factor levels should be included in each\n        categorical column expansion. If False, the indicator column corresponding to the\n        first factor level of every categorical variable will be dropped. Default False.\n      pca_method : str\n        A character string that indicates how PCA should be calculated. Possible values\n        are\n          "GramSVD": distributed computation of the Gram matrix followed by a local SVD\n                     using the JAMA package,\n          "Power": computation of the SVD using the power iteration method,\n          "GLRM": fit a generalized low rank model with an l2 loss function\n                  (no regularization) and solve for the SVD using local matrix algebra.\n\n    Returns\n    -------\n      A new instance of H2OPCA.\n    '
    super(H2OPCA, self).__init__()
    self.parms = locals()
    self.parms = {k: v for (k, v) in self.parms.iteritems() if (k != 'self')}
    self.parms['pca_method'] = ('GramSVD' if isinstance(pca_method, tuple) else pca_method)
    self.parms['transform'] = ('NONE' if isinstance(transform, tuple) else transform)
    self.parms['algo'] = 'pca'
