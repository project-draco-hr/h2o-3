import h2o
h2o.init()
small_test = ['bigdata/laptop/citibike-nyc/2013-10.csv']
big_test = ['bigdata/laptop/citibike-nyc/2013-07.csv', 'bigdata/laptop/citibike-nyc/2013-08.csv', 'bigdata/laptop/citibike-nyc/2013-09.csv', 'bigdata/laptop/citibike-nyc/2013-10.csv', 'bigdata/laptop/citibike-nyc/2013-11.csv', 'bigdata/laptop/citibike-nyc/2013-12.csv', 'bigdata/laptop/citibike-nyc/2014-01.csv', 'bigdata/laptop/citibike-nyc/2014-02.csv', 'bigdata/laptop/citibike-nyc/2014-03.csv', 'bigdata/laptop/citibike-nyc/2014-04.csv', 'bigdata/laptop/citibike-nyc/2014-05.csv', 'bigdata/laptop/citibike-nyc/2014-06.csv', 'bigdata/laptop/citibike-nyc/2014-07.csv', 'bigdata/laptop/citibike-nyc/2014-08.csv']
data = h2o.import_frame(path=big_test)
startime = data['starttime']
data['Days'] = (startime / (((1000 * 60) * 60) * 24)).floor()
data.describe()
bph = h2o.ddply(data, ['Days', 'start station name'], '(%nrow)')
bph['C1']._name = 'bikes'
bph.describe()
bph['bikes'].quantile().show()
r = bph['Days'].runif()
r.show()
train = bph[(r < 0.6)]
test = bph[((0.6 <= r) & (r < 0.9))]
hold = bph[(0.9 <= r)]
train.describe()
test.describe()
gbm = h2o.gbm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], ntrees=500, max_depth=6, min_rows=10, nbins=20, learn_rate=0.1)
glm = h2o.glm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'])
train_r2_gbm = gbm.model_performance(train).r2()
test_r2_gbm = gbm.model_performance(test).r2()
hold_r2_gbm = gbm.model_performance(hold).r2()
print 'GBM R2 TRAIN=', train_r2_gbm, ', R2 TEST=', test_r2_gbm, ', R2 HOLDOUT=', hold_r2_gbm
train_r2_glm = glm.model_performance(train).r2()
test_r2_glm = glm.model_performance(test).r2()
hold_r2_glm = glm.model_performance(hold).r2()
print 'GLM R2 TRAIN=', train_r2_glm, ', R2 TEST=', test_r2_glm, ', R2 HOLDOUT=', hold_r2_glm
