def split_fit_predict(data):
    r = data['Days'].runif()
    train = data[(r < 0.6)]
    test = data[((0.6 <= r) & (r < 0.9))]
    hold = data[(0.9 <= r)]
    print 'Training data has', train.ncol(), 'columns and', train.nrow(), 'rows, test has', test.nrow(), 'rows, holdout has', hold.nrow()
    gbm = h2o.gbm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], ntrees=500, max_depth=6, min_rows=10, nbins=20, learn_rate=0.1)
    glm = h2o.glm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], drop_na20_cols=True)
    train_r2_gbm = gbm.model_performance(train).r2()
    test_r2_gbm = gbm.model_performance(test).r2()
    hold_r2_gbm = gbm.model_performance(hold).r2()
    print 'GBM R2 TRAIN=', train_r2_gbm, ', R2 TEST=', test_r2_gbm, ', R2 HOLDOUT=', hold_r2_gbm
    train_r2_glm = glm.model_performance(train).r2()
    test_r2_glm = glm.model_performance(test).r2()
    hold_r2_glm = glm.model_performance(hold).r2()
    print 'GLM R2 TRAIN=', train_r2_glm, ', R2 TEST=', test_r2_glm, ', R2 HOLDOUT=', hold_r2_glm
