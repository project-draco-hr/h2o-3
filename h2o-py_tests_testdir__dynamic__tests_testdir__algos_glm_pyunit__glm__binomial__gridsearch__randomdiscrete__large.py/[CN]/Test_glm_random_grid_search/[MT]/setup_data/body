def setup_data(self):
    '\n        This function performs all initializations necessary:\n        1. generates all the random values for our dynamic tests like the Gaussian\n        noise std, column count and row count for training/test data sets.\n        2. generate the appropriate data sets.\n        '
    self.sandbox_dir = pyunit_utils.make_Rsandbox_dir(self.current_dir, self.test_name, True)
    self.noise_std = random.uniform(0, math.sqrt((pow((self.max_p_value - self.min_p_value), 2) / 12)))
    self.noise_var = (self.noise_std * self.noise_std)
    self.train_col_count = random.randint(1, self.max_col_count)
    self.train_row_count = round((self.train_col_count * random.uniform(self.min_col_count_ratio, self.max_col_count_ratio)))
    if ('gaussian' in self.family):
        self.max_p_value *= 50
        self.min_p_value *= 50
        self.max_w_value *= 50
        self.min_w_value *= 50
    pyunit_utils.write_syn_floating_point_dataset_glm(self.training1_data_file, '', '', self.weight_data_file, self.train_row_count, self.train_col_count, self.data_type, self.max_p_value, self.min_p_value, self.max_w_value, self.min_w_value, self.noise_std, self.family, self.train_row_count, self.train_row_count, class_number=self.class_number, class_method=[self.class_method, self.class_method, self.test_class_method], class_margin=[self.margin, self.margin, self.test_class_margin])
    self.training1_data = h2o.import_file(pyunit_utils.locate(self.training1_data_file))
    self.y_index = (self.training1_data.ncol - 1)
    self.x_indices = list(range(self.y_index))
    if ('binomial' in self.family):
        self.training1_data[self.y_index] = self.training1_data[self.y_index].round().asfactor()
        if (self.training1_data[self.y_index].nlevels()[0] < self.class_number):
            print('Response classes are not represented in training dataset.')
            sys.exit(0)
    pyunit_utils.remove_csv_files(self.current_dir, '.csv', action='copy', new_dir_path=self.sandbox_dir)
