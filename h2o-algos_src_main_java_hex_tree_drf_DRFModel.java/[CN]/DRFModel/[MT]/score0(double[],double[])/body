{
  super.score0(data,preds);
  int N=_parms._ntrees;
  if (_output.nclasses() == 1) {
    preds[0]/=N;
    return preds;
  }
 else {
    if (_output.nclasses() == 2) {
      preds[1]/=N;
      preds[2]=1. - preds[1];
    }
 else {
      double sum=MathUtils.sum(preds);
      if (sum > 0)       MathUtils.div(preds,sum);
    }
    if (_parms._balance_classes)     GenModel.correctProbabilities(preds,_output._priorClassDist,_output._modelClassDist);
    preds[0]=hex.genmodel.GenModel.getPrediction(preds,data,defaultThreshold());
  }
  return preds;
}
