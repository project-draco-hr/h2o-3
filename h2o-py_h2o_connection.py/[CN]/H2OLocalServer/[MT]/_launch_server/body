def _launch_server(self, port, baseport, mmax, mmin, ea, nthreads):
    u'Actually start the h2o.jar executable (helper method for `.start()`).'
    self._ip = u'127.0.0.1'
    java = self._find_java()
    jver_bytes = subprocess.check_output([java, u'-version'], stderr=subprocess.STDOUT)
    jver = jver_bytes.decode(encoding=u'utf-8', errors=u'ignore')
    if self._verbose:
        print((u'Java Version: ' + jver.strip().replace(u'\n', u'; ')))
    if (u'GNU libgcj' in jver):
        raise H2OStartupError(u'Sorry, GNU Java is not supported for H2O.\nPlease download the latest 64-bit Java SE JDK from Oracle.')
    if (u'Client VM' in jver):
        warn(u'You have a 32-bit version of Java. H2O works best with 64-bit Java.\nPlease download the latest 64-bit Java SE JDK from Oracle.\n')
    if self._verbose:
        print((u'Starting server from ' + self._jar_path))
        print((u'Ice root: ' + self._ice_root))
    cmd = [java]
    cmd += ([u'-ea'] if ea else [])
    for (mq, num) in [(u'-Xms', mmin), (u'-Xmx', mmax)]:
        if (num is None):
            continue
        numstr = ((u'%dG' % (num >> 30)) if (num == ((num >> 30) << 30)) else ((u'%dM' % (num >> 20)) if (num == ((num >> 20) << 20)) else str(num)))
        cmd += [(mq + numstr)]
    cmd += [u'-verbose:gc', u'-XX:+PrintGCDetails', u'-XX:+PrintGCTimeStamps']
    cmd += [u'-jar', self._jar_path]
    cmd += [u'-ip', self._ip]
    cmd += ([u'-port', str(port)] if port else [])
    cmd += ([u'-baseport', str(baseport)] if baseport else [])
    cmd += [u'-ice_root', self._ice_root]
    cmd += ([u'-nthreads', str(nthreads)] if (nthreads > 0) else [])
    cmd += [u'-name', (u'H2O_from_python_%s' % self._tmp_file(u'salt'))]
    cmd += [u'-log_level', u'INFO']
    self._stdout = self._tmp_file(u'stdout')
    self._stderr = self._tmp_file(u'stderr')
    cwd = os.path.abspath(os.getcwd())
    out = open(self._stdout, u'w')
    err = open(self._stderr, u'w')
    if self._verbose:
        print((u'JVM stdout: ' + out.name))
        print((u'JVM stderr: ' + err.name))
    win32 = (sys.platform == u'win32')
    flags = (subprocess.CREATE_NEW_PROCESS_GROUP if win32 else 0)
    prex = (os.setsid if (not win32) else None)
    try:
        proc = subprocess.Popen(args=cmd, stdout=out, stderr=err, cwd=cwd, creationflags=flags, preexec_fn=prex)
    except OSError as e:
        traceback = getattr(e, u'child_traceback', None)
        raise H2OServerError((u'Unable to start server: %s' % e), traceback)
    giveup_time = (time.time() + self._TIME_TO_START)
    while True:
        if (proc.poll() is not None):
            raise H2OServerError((u'Server process terminated with error code %d' % proc.returncode))
        ret = self._get_server_info_from_logs()
        if ret:
            self._ip = ret[0]
            self._port = ret[1]
            self._process = proc
            break
        if (time.time() > giveup_time):
            elapsed_time = (time.time() - (giveup_time - self._TIME_TO_START))
            raise H2OServerError((u"Server wasn't able to start in %f seconds." % elapsed_time))
        time.sleep(0.2)
