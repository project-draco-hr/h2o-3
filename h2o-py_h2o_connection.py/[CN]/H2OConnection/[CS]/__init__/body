def __init__(self, ip='localhost', port=54321, size=1, start_h2o=False, enable_assertions=False, license=None, max_mem_size_GB=1, min_mem_size_GB=1, ice_root=None, strict_version_check=False):
    '\n    Instantiate the package handle to the H2O cluster.\n    :param ip: An IP address, default is "localhost"\n    :param port: A port, default is 54321\n    :param size: THe expected number of h2o instances (ignored if start_h2o is True)\n    :param start_h2o: A boolean dictating whether this module should start the H2O jvm. An attempt is made anyways if _connect fails.\n    :param enable_assertions: If start_h2o, pass `-ea` as a VM option.s\n    :param license: If not None, is a path to a license file.\n    :param max_mem_size_GB: Maximum heap size (jvm option Xmx) in gigabytes.\n    :param min_mem_size_GB: Minimum heap size (jvm option Xms) in gigabytes.\n    :param ice_root: A temporary directory (default location is determined by tempfile.mkdtemp()) to hold H2O log files.\n    :return: None\n    '
    port = as_int(port)
    if (not (isinstance(port, int) and (0 <= port <= sys.maxint))):
        raise ValueError(('Port out of range, ' + port))
    global __H2OCONN__
    self._cld = None
    self._ip = ip
    self._port = port
    self._session_id = None
    self._rest_version = __H2O_REST_API_VERSION__
    self._child = (getattr(__H2OCONN__, '_child') if hasattr(__H2OCONN__, '_child') else None)
    __H2OCONN__ = self
    if start_h2o:
        if (not ice_root):
            ice_root = tempfile.mkdtemp()
        cld = self._start_local_h2o_jar(max_mem_size_GB, min_mem_size_GB, enable_assertions, license, ice_root)
    else:
        try:
            cld = self._connect(size)
        except:
            print 
            print 
            print (((('No instance found at ip and port: ' + ip) + ':') + str(port)) + '. Trying to start local jar...')
            print 
            print 
            if os.path.exists(os.path.join(sys.prefix, 'h2o_jar/h2o.jar')):
                if (not ice_root):
                    ice_root = tempfile.mkdtemp()
                cld = self._start_local_h2o_jar(max_mem_size_GB, min_mem_size_GB, enable_assertions, license, ice_root)
            else:
                print 'No jar file found. Could not start local instance.'
                raise
    __H2OCONN__._cld = cld
    self._cluster_info()
    ver_h2o = cld['version']
    try:
        ver_pkg = pkg_resources.get_distribution('h2o').version
    except:
        ver_pkg = 'UNKNOWN'
    if (ver_h2o != ver_pkg):
        message = 'Version mismatch. H2O is version {0}, but the python package is version {1}.'.format(ver_h2o, str(ver_pkg))
        if strict_version_check:
            raise EnvironmentError, message
        else:
            print 'Warning: {0}'.format(message)
