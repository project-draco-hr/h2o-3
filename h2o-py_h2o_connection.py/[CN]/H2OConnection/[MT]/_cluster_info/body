@staticmethod
def _cluster_info():
    global __H2OCONN__
    cld = __H2OCONN__._cld
    ncpus = sum([n['num_cpus'] for n in cld['nodes']])
    allowed_cpus = sum([n['cpus_allowed'] for n in cld['nodes']])
    mmax = sum([n['max_mem'] for n in cld['nodes']])
    cluster_health = all([n['healthy'] for n in cld['nodes']])
    ip = ('127.0.0.1' if (__H2OCONN__._ip == 'localhost') else __H2OCONN__._ip)
    cluster_info = [['H2O cluster uptime: ', get_human_readable_time(cld['cloud_uptime_millis'])], ['H2O cluster version: ', cld['version']], ['H2O cluster name: ', cld['cloud_name']], ['H2O cluster total nodes: ', cld['cloud_size']], ['H2O cluster total memory: ', get_human_readable_size(mmax)], ['H2O cluster total cores: ', str(ncpus)], ['H2O cluster allowed cores: ', str(allowed_cpus)], ['H2O cluster healthy: ', str(cluster_health)], ['H2O Connection ip: ', ip], ['H2O Connection port: ', __H2OCONN__._port]]
    __H2OCONN__._cld = H2OConnection.get_json(url_suffix='Cloud')
    h2o.H2ODisplay(cluster_info)
