@staticmethod
def _jar_paths(path0=None):
    u'\n        Produce potential paths for an h2o.jar executable. This function knows several locations where the H2O\n        library might get installed, and returns them in sequence.\n\n        :param path0: If given, this will be the first path yielded by this function\n        :return generator of potential paths for h2o.jar executable\n        '
    if path0:
        yield path0
    cwd_chunks = os.path.abspath(u'.').split(u'/')
    for i in range((len(cwd_chunks) - 1), (-1), (-1)):
        if (cwd_chunks[i] == u'h2o-3'):
            yield (u'/'.join(cwd_chunks[:(i + 1)]) + u'/build/h2o.jar')
            break
    prefix1 = prefix2 = sys.prefix.replace(u'\\', u'/')
    if prefix1.startswith(u'/Library'):
        prefix2 = (u'/System' + prefix1)
    elif prefix1.startswith(u'/System'):
        prefix2 = prefix1[len(u'/System'):]
    yield (prefix1 + u'/h2o_jar/h2o.jar')
    yield u'/usr/local/h2o_jar/h2o.jar'
    yield (prefix1 + u'/local/h2o_jar/h2o.jar')
    yield (get_config_var(u'userbase') + u'/h2o_jar/h2o.jar')
    yield (prefix2 + u'/h2o_jar/h2o.jar')
