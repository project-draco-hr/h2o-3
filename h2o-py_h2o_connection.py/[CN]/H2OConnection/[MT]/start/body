@staticmethod
@translate_args
def start(jar_path=None, nthreads=(-1), enable_assertions=True, max_mem_size=None, min_mem_size=None, ice_root=None, port=54321, verbose=True):
    u'\n        Start new H\u2082O server locally and then connect to to it.\n\n        :param jar_path: Path to the h2o.jar executable. If not given, then we will search for that executable in the\n                locations suggested by ._jar_paths().\n        :param nthreads: Number of threads in the thread pool. This relates very closely to the number of CPUs used.\n                -1 means use all CPUs on the host. A positive integer specifies the number of CPUs directly.\n        :param enable_assertions: If True, pass `-ea` option to the JVM.\n        :param max_mem_size: Maximum heap size (jvm option Xmx), in bytes.\n        :param min_mem_size: Minimum heap size (jvm option Xms), in bytes.\n        :param ice_root: A directory where H\u2082O stores its temporary files. Default location is determined by\n                tempfile.mkdtemp().\n        :param port: Port where to start the new server.\n        :param verbose: If True, then connection info will be printed to the stdout.\n        :return self\n        '
    assert ((jar_path is None) or isinstance(jar_path, str)), (u'`jar_path` should be string, got %r' % jar_path)
    assert isinstance(nthreads, int), (u'`nthreads` should be integer, got %r' % nthreads)
    assert ((-1) <= nthreads <= 1024), (u'`nthreads` is out of bounds: %d' % nthreads)
    assert ((max_mem_size is None) or isinstance(max_mem_size, int)), (u'`max_mem_size` should be integer, got %r' % max_mem_size)
    assert ((min_mem_size is None) or isinstance(min_mem_size, int)), (u'`min_mem_size` should be integer, got %r' % min_mem_size)
    assert ((max_mem_size is None) or (max_mem_size >= (1 << 25))), (u'`max_mem_size` too small: %d' % max_mem_size)
    assert ((min_mem_size is None) or (max_mem_size is None) or (min_mem_size <= max_mem_size)), (u'`min_mem_size`=%d is larger than the `max_mem_size`=%d' % (min_mem_size, max_mem_size))
    assert ((ice_root is None) or isinstance(ice_root, str)), (u'`ice_root` should be string, got %r' % ice_root)
    resolved_jar_path = None
    for jp in H2OConnection._jar_paths(jar_path):
        if os.path.exists(jp):
            resolved_jar_path = jp
            break
    if (not resolved_jar_path):
        if verbose:
            print(u'No jar file found. Paths searched:')
            print(u''.join(((u'    %s\n' % jp) for jp in H2OConnection._jar_paths(jar_path))))
        raise H2OStartupError(u'Cannot start local server: h2o.jar not found.')
    if (not ice_root):
        ice_root = tempfile.mkdtemp()
    if verbose:
        print((u'Starting server from ' + resolved_jar_path))
    (ip, port, child) = H2OConnection._start_h2o_server(port=port, jar_path=resolved_jar_path, nthreads=int(nthreads), ea=enable_assertions, logs_dir=ice_root, mmax=max_mem_size, mmin=min_mem_size, verbose=verbose)
    conn = H2OConnection.connect(ip=ip, port=port, verbose=verbose)
    conn._child = child
    return conn
