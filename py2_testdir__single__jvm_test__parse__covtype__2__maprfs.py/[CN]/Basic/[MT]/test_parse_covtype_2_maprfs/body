def test_parse_covtype_2_maprfs(self):
    csvFilenameAll = [('covtype.data', 75169317), ('TEST-poker1000.csv', 23582), ('WU_100KRows3KCols.csv', 1120591148), ('airlines_all.05p.csv', 607774430), ('and-testing.data', 23538333), ('arcene2_train.both', 2715738), ('arcene_train.both', 2715838), ('bestbuy_test.csv', 152488777), ('bestbuy_train.csv', 243806953), ('billion_rows.csv.gz', 1758523515), ('covtype.13x.data', 977210917), ('covtype.13x.shuffle.data', 977210917), ('covtype.4x.shuffle.data', 300678693), ('covtype4x.shuffle.data', 300678693), ('hhp.unbalanced.012.1x11.data.gz', 6566953), ('hhp.unbalanced.012.data.gz', 4233715), ('hhp.unbalanced.data.gz', 4235293), ('hhp2.os.noisy.0_1.data', 48381802), ('hhp2.os.noisy.9_4.data', 48397103), ('leads.csv', 2755), ('prostate_long_1G.csv', 1115287100), ('3G_poker_shuffle', 3145728000), ('covtype.169x.data', 12703751717)]
    if (1 == 0):
        csvFilenameList = random.sample(csvFilenameAll, 8)
    else:
        csvFilenameList = csvFilenameAll
    for (csvFilename, totalBytes) in csvFilenameList:
        totalBytes = float(totalBytes)
        timeoutSecs = 900
        multiplyExpected = 1
        importFolderPath = 'datasets'
        csvPathname = ((importFolderPath + '/') + csvFilename)
        start = time.time()
        parseResult = h2i.import_parse(path=csvPathname, schema='maprfs', timeoutSecs=timeoutSecs, doSummary=False)
        elapsed = (time.time() - start)
        fileMBS = ((totalBytes / 1000000.0) / elapsed)
        l = '{!s} jvms, {!s}GB heap, {:s} {:s} {:6.2f}MB {:6.2f} MB/sec for {:.2f} secs'.format(len(h2o.nodes), h2o.nodes[0].java_heap_GB, 'Parse', csvPathname, ((totalBytes + 0.0) / 1000000.0), fileMBS, elapsed)
        print ('\n' + l)
        h2o.cloudPerfH2O.message(l)
        pA = h2o_cmd.ParseObj(parseResult)
        iA = h2o_cmd.InspectObj(pA.parse_key)
        parse_key = pA.parse_key
        numRows = iA.numRows
        numCols = iA.numCols
        labelList = iA.labelList
        print iA.missingList, iA.labelList, iA.numRows, iA.numCols
        for i in range(1):
            print 'Summary on column', i
            co = h2o_cmd.runSummary(key=parse_key, column=i)
        k = parseResult['frames'][0]['key']['name']
        a_node = h2o.nodes[0]
        frames_result = a_node.frames(key=k, row_count=5)
        parseKeyIndexedCheck(frames_result, multiplyExpected)
