{
  ModelBuilder modelBuilder;
  Class<? extends ModelBuilder> clz=null;
  try {
    clz=ModelBuilder.getModelBuilder(algo);
  }
 catch (  Exception ignore) {
  }
  if (clz == null) {
    throw new H2OIllegalArgumentException("algo","createModelBuilder","Algo not known (" + algo + ")");
  }
  try {
    if (!(clz.getGenericSuperclass() instanceof ParameterizedType)) {
      throw H2O.fail("Class is not parameterized as expected: " + clz);
    }
    Type[] handler_type_parms=((ParameterizedType)(clz.getGenericSuperclass())).getActualTypeArguments();
    Class<? extends Model.Parameters> pclz=(Class<? extends Model.Parameters>)handler_type_parms[1];
    Constructor<ModelBuilder> constructor=(Constructor<ModelBuilder>)clz.getDeclaredConstructor(new Class[]{(Class)handler_type_parms[1]});
    Model.Parameters p=pclz.newInstance();
    modelBuilder=constructor.newInstance(p);
  }
 catch (  java.lang.reflect.InvocationTargetException e) {
    throw H2O.fail("Exception when trying to instantiate ModelBuilder for: " + algo + ": "+ e.getCause(),e);
  }
catch (  Exception e) {
    throw H2O.fail("Exception when trying to instantiate ModelBuilder for: " + algo + ": "+ e.getCause(),e);
  }
  return modelBuilder;
}
