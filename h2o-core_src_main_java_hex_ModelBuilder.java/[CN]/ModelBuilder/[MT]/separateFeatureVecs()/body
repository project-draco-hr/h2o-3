{
  int res=0;
  if (_parms._weights_column != null) {
    Vec w=_train.remove(_parms._weights_column);
    if (w == null)     error("_weights_column","Weights column '" + _parms._weights_column + "' not found in the training frame");
 else {
      if (!w.isNumeric())       error("_weights_column","Invalid weights column '" + _parms._weights_column + "', weights must be numeric");
      _weights=w;
      if (w.naCnt() > 0)       error("_weights_columns","Weights cannot have missing values.");
      if (w.min() < 0)       error("_weights_columns","Weights must be >= 0");
      if (w.max() == 0)       error("_weights_columns","Max. weight must be > 0");
      _train.add(_parms._weights_column,w);
      ++res;
    }
  }
 else {
    _weights=null;
    assert(!hasWeightCol());
  }
  if (_parms._offset_column != null) {
    Vec o=_train.remove(_parms._offset_column);
    if (o == null)     error("_offset_column","Offset column '" + _parms._offset_column + "' not found in the training frame");
 else {
      if (!o.isNumeric())       error("_offset_column","Invalid offset column '" + _parms._offset_column + "', offset must be numeric");
      _offset=o;
      if (o.naCnt() > 0)       error("_offset_column","Offset cannot have missing values.");
      if (_weights == _offset)       error("_offset_column","Offset must be different from weights");
      _train.add(_parms._offset_column,o);
      ++res;
    }
  }
 else {
    _offset=null;
    assert(!hasOffsetCol());
  }
  if (_parms._fold_column != null) {
    Vec f=_train.remove(_parms._fold_column);
    if (f == null)     error("_fold_column","Fold column '" + _parms._fold_column + "' not found in the training frame");
 else {
      if (!f.isInt() && !f.isCategorical())       error("_fold_column","Invalid fold column '" + _parms._fold_column + "', fold must be integer or categorical");
      if (f.min() < 0)       error("_fold_column","Invalid fold column '" + _parms._fold_column + "', fold must be non-negative");
      if (f.isConst())       error("_fold_column","Invalid fold column '" + _parms._fold_column + "', fold cannot be constant");
      _fold=f;
      if (f.naCnt() > 0)       error("_fold_column","Fold cannot have missing values.");
      if (_fold == _weights)       error("_fold_column","Fold must be different from weights");
      if (_fold == _offset)       error("_fold_column","Fold must be different from offset");
      _train.add(_parms._fold_column,f);
      ++res;
    }
  }
 else {
    _fold=null;
    assert(!hasFoldCol());
  }
  if (isSupervised() && _parms._response_column != null) {
    _response=_train.remove(_parms._response_column);
    if (_response == null) {
      if (isSupervised())       error("_response_column","Response column '" + _parms._response_column + "' not found in the training frame");
    }
 else {
      if (_response == _offset)       error("_response","Response must be different from offset_column");
      if (_response == _weights)       error("_response","Response must be different from weights_column");
      if (_response == _fold)       error("_response","Response must be different from fold_column");
      _train.add(_parms._response_column,_response);
      ++res;
    }
  }
 else {
    _response=null;
  }
  return res;
}
