{
  if (null == s.predictions_frame)   throw new H2OIllegalArgumentException("predictions_frame","make",s.predictions_frame);
  Frame pred=DKV.getGet(s.predictions_frame);
  if (null == pred)   throw new H2OKeyNotFoundArgumentException("predictions_frame","make",s.predictions_frame);
  if (null == s.actuals_frame)   throw new H2OIllegalArgumentException("actuals_frame","make",s.actuals_frame);
  Frame act=DKV.getGet(s.actuals_frame);
  if (null == act)   throw new H2OKeyNotFoundArgumentException("actuals_frame","make",s.actuals_frame);
  if (s.domain == null) {
    if (pred.numCols() != 1) {
      throw new H2OIllegalArgumentException("predictions_frame","make","For regression problems (domain=null), the predictions_frame must have exactly 1 column.");
    }
    ModelMetricsRegression mm=ModelMetricsRegression.make(pred.anyVec(),act.anyVec(),s.distribution);
    s.model_metrics=new ModelMetricsRegressionV3().fillFromImpl(mm);
  }
 else   if (s.domain.length == 2) {
    if (pred.numCols() != 1) {
      throw new H2OIllegalArgumentException("predictions_frame","make","For domains with 2 class labels, the predictions_frame must have exactly one column containing the class-1 probabilities.");
    }
    ModelMetricsBinomial mm=ModelMetricsBinomial.make(pred.anyVec(),act.anyVec(),s.domain);
    s.model_metrics=new ModelMetricsBinomialV3().fillFromImpl(mm);
  }
 else   if (s.domain.length > 2) {
    if (pred.numCols() != s.domain.length) {
      throw new H2OIllegalArgumentException("predictions_frame","make","For domains with " + s.domain.length + " class labels, the predictions_frame must have exactly "+ s.domain.length+ " columns containing the class-probabilities.");
    }
    ModelMetricsMultinomial mm=ModelMetricsMultinomial.make(pred,act.anyVec(),s.domain);
    s.model_metrics=new ModelMetricsMultinomialV3().fillFromImpl(mm);
  }
 else {
    throw H2O.unimpl();
  }
  return s;
}
