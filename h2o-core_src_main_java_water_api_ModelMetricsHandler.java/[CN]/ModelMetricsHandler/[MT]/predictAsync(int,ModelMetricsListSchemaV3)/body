{
  if (null == s.model)   throw new H2OIllegalArgumentException("model","predict",s.model);
  if (null == DKV.get(s.model.name))   throw new H2OKeyNotFoundArgumentException("model","predict",s.model.name);
  if (null == s.frame)   throw new H2OIllegalArgumentException("frame","predict",s.frame);
  if (null == DKV.get(s.frame.name))   throw new H2OKeyNotFoundArgumentException("frame","predict",s.frame.name);
  if (s.deviances || null != s.deviances_frame)   throw new H2OIllegalArgumentException("deviances","not supported for async",s.deviances_frame);
  final ModelMetricsList parms=s.createAndFillImpl();
  if (s.deep_features_hidden_layer > 0) {
    if (null == parms._predictions_name)     parms._predictions_name="deep_features" + Key.make().toString().substring(0,5) + "_"+ parms._model._key.toString()+ "_on_"+ parms._frame._key.toString();
  }
 else   if (null == parms._predictions_name) {
    if (parms._exemplar_index >= 0) {
      parms._predictions_name="members_" + parms._model._key.toString() + "_for_exemplar_"+ parms._exemplar_index;
    }
 else {
      parms._predictions_name="predictions" + Key.make().toString().substring(0,5) + "_"+ parms._model._key.toString()+ "_on_"+ parms._frame._key.toString();
    }
  }
  final Job<Frame> j=new Job(Key.make(parms._predictions_name),Frame.class.getName(),"prediction");
  H2O.H2OCountedCompleter work=new H2O.H2OCountedCompleter(){
    @Override public void compute2(){
      if (s.deep_features_hidden_layer < 0) {
        parms._model.score(parms._frame,parms._predictions_name,j,true);
      }
 else {
        Frame predictions=((Model.DeepFeatures)parms._model).scoreDeepFeatures(parms._frame,s.deep_features_hidden_layer,j);
        predictions=new Frame(Key.<Frame>make(parms._predictions_name),predictions.names(),predictions.vecs());
        DKV.put(predictions._key,predictions);
      }
      tryComplete();
    }
  }
;
  j.start(work,parms._frame.anyVec().nChunks());
  return new JobV3().fillFromImpl(j);
}
