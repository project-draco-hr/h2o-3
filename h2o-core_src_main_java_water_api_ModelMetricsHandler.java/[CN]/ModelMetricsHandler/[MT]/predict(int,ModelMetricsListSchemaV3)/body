{
  if (null == s.model)   throw new H2OIllegalArgumentException("model","predict",s.model);
  if (null == DKV.get(s.model.name))   throw new H2OKeyNotFoundArgumentException("model","predict",s.model.name);
  if (null == s.frame)   throw new H2OIllegalArgumentException("frame","predict",s.frame);
  if (null == DKV.get(s.frame.name))   throw new H2OKeyNotFoundArgumentException("frame","predict",s.frame.name);
  ModelMetricsList parms=s.createAndFillImpl();
  Frame predictions;
  if (!s.reconstruction_error && !s.reconstruction_error_per_feature && s.deep_features_hidden_layer < 0) {
    if (null == parms._predictions_name)     parms._predictions_name="predictions" + Key.make().toString().substring(0,5) + "_"+ parms._model._key.toString()+ "_on_"+ parms._frame._key.toString();
    predictions=parms._model.score(parms._frame,parms._predictions_name);
  }
 else {
    if (Model.DeepFeatures.class.isAssignableFrom(parms._model.getClass())) {
      if (s.reconstruction_error || s.reconstruction_error_per_feature) {
        if (s.deep_features_hidden_layer >= 0)         throw new H2OIllegalArgumentException("Can only compute either reconstruction error OR deep features.","");
        if (null == parms._predictions_name)         parms._predictions_name="reconstruction_error" + Key.make().toString().substring(0,5) + "_"+ parms._model._key.toString()+ "_on_"+ parms._frame._key.toString();
        predictions=((Model.DeepFeatures)parms._model).scoreAutoEncoder(parms._frame,Key.make(parms._predictions_name),parms._reconstruction_error_per_feature);
      }
 else {
        if (s.deep_features_hidden_layer < 0)         throw new H2OIllegalArgumentException("Deep features hidden layer index must be >= 0.","");
        if (null == parms._predictions_name)         parms._predictions_name="deep_features" + Key.make().toString().substring(0,5) + "_"+ parms._model._key.toString()+ "_on_"+ parms._frame._key.toString();
        predictions=((Model.DeepFeatures)parms._model).scoreDeepFeatures(parms._frame,s.deep_features_hidden_layer);
      }
      predictions=new Frame(Key.make(parms._predictions_name),predictions.names(),predictions.vecs());
      DKV.put(predictions._key,predictions);
    }
 else     throw new H2OIllegalArgumentException("Requires a Deep Learning model.","Model must implement specific methods.");
  }
  ModelMetricsListSchemaV3 mm=this.fetch(version,s);
  if (null == mm)   mm=new ModelMetricsListSchemaV3();
  mm.predictions_frame=new KeyV3.FrameKeyV3(predictions._key);
  if (null == mm.model_metrics || 0 == mm.model_metrics.length) {
  }
 else {
    mm.model_metrics[0].predictions=new FrameV3(predictions,0,100);
  }
  return mm;
}
