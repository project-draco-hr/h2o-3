def test_split_frame(self):
    csvFilename = 'covtype.data'
    csvPathname = ('standard/' + csvFilename)
    hex_key = 'covtype.hex'
    parseResultA = h2i.import_parse(bucket='home-0xdiag-datasets', path=csvPathname, hex_key=hex_key, timeoutSecs=20)
    pA = h2o_cmd.ParseObj(parseResultA)
    print pA.numRows
    print pA.numCols
    print pA.parse_key
    print 'Just split away and see if anything blows up'
    splitMe = hex_key
    iA = h2o_cmd.InspectObj(splitMe)
    origNumRows = iA.numRows
    origNumCols = iA.numCols
    for s in range(20):
        iA = h2o_cmd.InspectObj(splitMe)
        numRows = iA.numRows
        fsResult = h2o.n0.split_frame(dataset=splitMe, ratios='[0.5]')
        fs = OutputObj(fsResult, 'split_frame')
        d = fs.jobs[0].destination_frames
        split_keys = [split.name for split in d]
        iB = h2o_cmd.InspectObj(split_keys[0])
        iC = h2o_cmd.InspectObj(split_keys[1])
        numCols = iB.numCols
        split0_rows = iB.numRows
        split1_rows = iC.numRows
        splitMe = split_keys[1]
        self.assertLess(abs((split1_rows - split0_rows)), 2)
        self.assertEqual(numRows, (split1_rows + split0_rows))
        self.assertEqual(numCols, origNumCols)
        if (split1_rows <= 1):
            break
