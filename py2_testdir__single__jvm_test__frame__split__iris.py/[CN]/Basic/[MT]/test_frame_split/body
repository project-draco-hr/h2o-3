def test_frame_split(self):
    csvFilename = 'iris.csv'
    csvPathname = ('iris/' + csvFilename)
    hex_key = 'iris.hex'
    parseResultA = h2i.import_parse(bucket='smalldata', path=csvPathname, hex_key=hex_key, schema='local', timeoutSecs=10)
    print 'Just split away and see if anything blows up'
    splitMe = hex_key
    pA = h2o_cmd.ParseObj(parseResultA)
    print pA.numRows
    print pA.numCols
    print pA.parse_key
    print 'Just split away and see if anything blows up'
    splitMe = hex_key
    iA = h2o_cmd.InspectObj(splitMe)
    origNumRows = iA.numRows
    origNumCols = iA.numCols
    for s in range(10):
        iA = h2o_cmd.InspectObj(splitMe)
        numRows = iA.numRows
        fsResult = h2o.nodes[0].frame_split(training_frame=splitMe, ratios='[0.5]')
        fs = OutputObj(fsResult, 'frame_split')
        model_key = fs.jobs[0].dest.name
        modelResult = h2o.n0.models(key=model_key)
        model = OutputObj(modelResult['models'][0]['output'], 'frame_split')
        split_keys = [split._key.name for split in model.splits]
        iB = h2o_cmd.InspectObj(split_keys[0])
        iC = h2o_cmd.InspectObj(split_keys[1])
        numCols = iB.numCols
        split0_rows = iB.numRows
        split1_rows = iC.numRows
        splitMe = split_keys[1]
        self.assertLess(abs((split1_rows - split0_rows)), 2)
        self.assertEqual(numRows, (split1_rows + split0_rows))
        self.assertEqual(numCols, origNumCols)
