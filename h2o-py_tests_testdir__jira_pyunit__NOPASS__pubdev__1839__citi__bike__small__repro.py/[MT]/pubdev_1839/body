def pubdev_1839(ip, port):
    data = h2o.import_frame(h2o.locate('bigdata/laptop/citibike-nyc/2013-10.csv'))
    startime = data['starttime']
    secsPerDay = (((1000 * 60) * 60) * 24)
    data['Days'] = (startime / secsPerDay).floor()
    group_by_cols = ['Days', 'start station name']
    aggregates = {'bikes': ['count', 0, 'all'], }
    bpd = data.group_by(cols=group_by_cols, aggregates=aggregates)
    print 'Quantiles of bikes-per-day'
    bpd['bikes'].quantile().show()
    secs = (bpd['Days'] * secsPerDay)
    bpd['Month'] = secs.month().asfactor()
    bpd['DayOfWeek'] = secs.dayOfWeek()
    print 'Bikes-Per-Day'
    bpd.describe()

    def split_fit_predict(data):
        global gbm0, drf0, glm0, dl0
        train = h2o.import_frame(h2o.locate('smalldata/jira/pubdev_1839_repro_train.csv'))
        test = h2o.import_frame(h2o.locate('smalldata/jira/pubdev_1839_repro_test.csv'))
        print 'Training data has', train.ncol(), 'columns and', train.nrow(), 'rows, test has', test.nrow()
        glm0 = h2o.glm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], Lambda=[1e-05], family='poisson')
    wthr1 = h2o.import_frame(path=[h2o.locate('bigdata/laptop/citibike-nyc/31081_New_York_City__Hourly_2013.csv'), h2o.locate('bigdata/laptop/citibike-nyc/31081_New_York_City__Hourly_2014.csv')])
    wthr2 = wthr1[['Year Local', 'Month Local', 'Day Local', 'Hour Local', 'Dew Point (C)', 'Humidity Fraction', 'Precipitation One Hour (mm)', 'Temperature (C)', 'Weather Code 1/ Description']]
    wthr2.setName(wthr2.index('Precipitation One Hour (mm)'), 'Rain (mm)')
    wthr2.setName(wthr2.index('Weather Code 1/ Description'), 'WC1')
    wthr3 = wthr2[(wthr2['Hour Local'] == 12)]
    wthr3['msec'] = h2o.H2OFrame.mktime(year=wthr3['Year Local'], month=(wthr3['Month Local'] - 1), day=(wthr3['Day Local'] - 1), hour=wthr3['Hour Local'])
    secsPerDay = (((1000 * 60) * 60) * 24)
    wthr3['Days'] = (wthr3['msec'] / secsPerDay).floor()
    wthr4 = wthr3.drop('Year Local').drop('Month Local').drop('Day Local').drop('Hour Local').drop('msec')
    rain = wthr4['Rain (mm)']
    rain[rain.isna()] = 0
    print 'Merge Daily Weather with Bikes-Per-Day'
    bpd_with_weather = bpd.merge(wthr4, allLeft=True, allRite=False)
    bpd_with_weather.describe()
    bpd_with_weather.show()
    split_fit_predict(bpd_with_weather)
