{
  Arrays.fill(_hs,0);
  _when=System.currentTimeMillis();
  _eldest=eldest;
  _hStep=Math.max(1,(_when - eldest) / _hs.length);
  boolean clean=_dirty == Long.MAX_VALUE;
  Object[] kvs=H2O.STORE.raw_array();
  long cached=0;
  long total=0;
  long oldest=Long.MAX_VALUE;
  Value vold=null;
  for (int i=2; i < kvs.length; i+=2) {
    Object ok=kvs[i], ov=kvs[i + 1];
    if (!(ok instanceof Key))     continue;
    if (!(ov instanceof Value))     continue;
    Value val=(Value)ov;
    total+=val._max;
    int len=0;
    byte[] m=val.rawMem();
    Object p=val.rawPOJO();
    if (m != null)     len+=val._max;
    if (p != null)     len+=val._max;
    if (p instanceof Chunk)     len-=val._max;
    if (len == 0)     continue;
    cached+=len;
    if (val._lastAccessedTime < oldest) {
      vold=val;
      oldest=val._lastAccessedTime;
    }
    int idx=(int)((val._lastAccessedTime - eldest) / _hStep);
    if (idx < 0)     idx=0;
 else     if (idx >= _hs.length)     idx=_hs.length - 1;
    _hs[idx]+=len;
  }
  _cached=cached;
  _total=total;
  _oldest=oldest;
  _vold=vold;
  _clean=clean && _dirty == Long.MAX_VALUE;
}
