def test_parse_covtype(self):
    tryList = [(['covtype.data', 'covtype.shuffled.data', 'covtype.sorted.data'], 3, 30)]
    for (csvFilenameList, multiplyExpected, timeoutSecs) in tryList:
        a_node = h2o.nodes[0]
        importFolderPath = '/home/0xdiag/datasets/standard'
        kList = []
        for csvFilename in csvFilenameList:
            csvPathname = ((importFolderPath + '/') + csvFilename)
            if (not DO_IMPORT_PARSE):
                import_result = a_node.import_files(path=csvPathname)
                k = import_result['keys'][0]
                frames_result = a_node.frames(key=k, len=5, timeoutSecs=timeoutSecs)
                kList.append(k)
        print 'I think I imported these keys:', kList
        if DO_2X_SRC:
            kList2 = (kList + kList)
            multiplyExpected = (2 * multiplyExpected)
        else:
            kList2 = kList
        basename = string.printable
        if DO_TEST_BAD_COLNAME:
            basename = basename.translate(None, (",[]!#$%&'()*+-./:;<=>?@\\^_`{|}~" + '"'))
        else:
            basename = 'abcd012345'
        colLength = (1 if DO_TEST_BAD_COL_LENGTH else 55)
        expectedColumnNames = map((lambda x: ((basename + '_') + str((x + 1)))), range(colLength))
        columnNames = (('[' + ','.join(map((lambda x: (("'" + x) + "'")), expectedColumnNames))) + ']')
        kwargs = {'columnNames': columnNames, 'intermediateResults': False, }
        print kwargs
        if DO_IMPORT_PARSE:
            multiplyExpected = 1
            csvPathname = ((importFolderPath + '/') + SINGLE_CSVFILENAME)
            parse_result = h2i.import_parse(path=csvPathname, timeoutSecs=timeoutSecs, **kwargs)
        else:
            parse_result = a_node.parse(key=kList2, timeoutSecs=timeoutSecs, **kwargs)
        k = parse_result['frames'][0]['key']['name']
        frames_result = a_node.frames(key=k, len=5)
        parseKeyIndexedCheck(frames_result, multiplyExpected, expectedColumnNames)
