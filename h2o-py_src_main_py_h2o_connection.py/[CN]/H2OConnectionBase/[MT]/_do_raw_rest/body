@staticmethod
def _do_raw_rest(url_suffix=None, params=None, method=None, file_upload_info=None, **kwargs):
    H2OConnection.check_conn()
    if (not params):
        params = {}
    url = H2OConnection._calc_base_url(url_suffix)
    parts = {}
    for k in params:
        if isinstance(params[k], list):
            parts[k] = '['
            parts[k] += ','.join([str(l).encode('utf-8') for l in params[k]])
            parts[k] += ']'
        else:
            parts[k] = str(params[k]).encode('utf-8')
    query_string = '&'.join([('%s=%s' % (k, v)) for (k, v) in parts.items()])
    post_body = ''
    if (not file_upload_info):
        if (method == 'POST'):
            post_body = query_string
        elif (query_string != ''):
            url = '{}?{}'.format(url, query_string)
    else:
        if (not (method == 'POST')):
            raise ValueError(('Received file upload info and expected method to be POST. Got: ' + method))
        if (query_string != ''):
            url = '{}?{}'.format(url, query_string)
    begin_time_seconds = time.time()
    http_result = H2OConnectionBase._attempt_rest(url=url, method=method, post_body=post_body, file_upload_info=file_upload_info, params=params, **kwargs)
    end_time_seconds = time.time()
    elapsed_time_seconds = (end_time_seconds - begin_time_seconds)
    elapsed_time_millis = (elapsed_time_seconds * 1000)
    print ('Time to perform REST call (millis): ' + str(elapsed_time_millis))
    return http_result
