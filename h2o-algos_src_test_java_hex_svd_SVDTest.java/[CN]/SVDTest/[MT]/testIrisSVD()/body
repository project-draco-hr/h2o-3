{
  double[] d_expected=new double[]{96.2182677,19.0780817,7.2270380,3.1502152,1.8849634,1.1474731,0.5814097};
  double[][] v_expected=ard(ard(-0.03170407,-0.32247642,0.184499940,-0.12245506,-0.14348647,0.76017824,-0.497502783),ard(-0.04288799,0.04054823,-0.780684855,0.19827972,0.07363250,-0.12354271,-0.571881302),ard(-0.05018593,0.16796988,0.551546107,-0.07177990,0.08109974,-0.48442099,-0.647048040),ard(-0.74909171,-0.26482593,-0.102057243,-0.49272847,0.31969417,-0.09379235,0.067308615),ard(-0.37906736,-0.50824062,0.142810811,0.69139828,-0.25849391,-0.17606099,0.041908520),ard(-0.51162932,0.65943465,-0.004420703,0.05479795,-0.51969015,0.17392232,0.005674672),ard(-0.16745698,0.32071102,0.146484369,0.46553390,0.72685033,0.31962337,0.021274748));
  SVDModel model=null;
  Frame train=null;
  try {
    train=parse_test_file(Key.make("iris.hex"),"smalldata/iris/iris_wheader.csv");
    SVDModel.SVDParameters parms=new SVDModel.SVDParameters();
    parms._train=train._key;
    parms._nv=7;
    parms._seed=1234;
    parms._useAllFactorLevels=true;
    parms._only_v=false;
    SVD job=new SVD(parms);
    try {
      model=job.trainModel().get();
      TestUtil.checkEigvec(v_expected,model._output._v,TOLERANCE);
      Assert.assertArrayEquals(d_expected,model._output._d,TOLERANCE);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (train != null)     train.delete();
    if (model != null) {
      if (model._parms._keep_u)       model._parms._u_key.get().delete();
      model.delete();
    }
  }
}
