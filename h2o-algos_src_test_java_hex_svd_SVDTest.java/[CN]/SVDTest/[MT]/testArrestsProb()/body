{
  double[] d_expected=new double[]{11.024148,6.964086,4.179904,2.915146};
  double[][] v_expected=ard(ard(-0.5358995,0.4181809,-0.3412327,0.64922780),ard(-0.5831836,0.1879856,-0.2681484,-0.74340748),ard(-0.2781909,-0.8728062,-0.3780158,0.13387773),ard(-0.5434321,-0.1673186,0.8177779,0.08902432));
  SVDModel model=null;
  Frame train=null, score=null;
  try {
    train=parse_test_file(Key.make("arrests.hex"),"smalldata/pca_test/USArrests.csv");
    SVDModel.SVDParameters parms=new SVDModel.SVDParameters();
    parms._train=train._key;
    parms._nv=4;
    parms._keep_u=true;
    parms._transform=DataInfo.TransformType.STANDARDIZE;
    parms._svd_method=SVDParameters.Method.Probabilistic;
    parms._max_iterations=4;
    SVD job=new SVD(parms);
    try {
      model=job.trainModel().get();
      Assert.assertArrayEquals(d_expected,model._output._d,TOLERANCE);
      TestUtil.checkEigvec(v_expected,model._output._v,TOLERANCE);
      score=model.score(train);
    }
 catch (    Throwable t) {
      t.printStackTrace();
      throw new RuntimeException(t);
    }
 finally {
      job.remove();
    }
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (train != null)     train.delete();
    if (score != null)     score.delete();
    if (model != null) {
      if (model._parms._keep_u)       model._output._u_key.get().delete();
      model.delete();
    }
  }
}
