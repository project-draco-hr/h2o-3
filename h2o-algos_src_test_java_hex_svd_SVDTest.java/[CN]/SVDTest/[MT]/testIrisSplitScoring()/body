{
  SVD job=null;
  SVDModel model=null;
  Frame fr=null, fr2=null;
  Frame tr=null, te=null;
  try {
    fr=parse_test_file("smalldata/iris/iris_wheader.csv");
    SplitFrame sf=new SplitFrame();
    sf.dataset=fr;
    sf.ratios=new double[]{0.5,0.5};
    sf.destination_frames=new Key[]{Key.make("train.hex"),Key.make("test.hex")};
    sf.exec().get();
    Key[] ksplits=sf.destination_frames;
    tr=DKV.get(ksplits[0]).get();
    te=DKV.get(ksplits[1]).get();
    SVDModel.SVDParameters parms=new SVDModel.SVDParameters();
    parms._train=ksplits[0];
    parms._valid=ksplits[1];
    parms._nv=4;
    parms._max_iterations=1000;
    parms._svd_method=SVDParameters.Method.Power;
    parms._save_v_frame=false;
    try {
      job=new SVD(parms);
      model=job.trainModel().get();
    }
  finally {
      if (job != null)       job.remove();
    }
    fr2=model.score(te);
    Assert.assertTrue(model.testJavaScoring(te,fr2,1e-5));
  }
 catch (  Throwable t) {
    t.printStackTrace();
    throw new RuntimeException(t);
  }
 finally {
    if (fr != null)     fr.delete();
    if (fr2 != null)     fr2.delete();
    if (tr != null)     tr.delete();
    if (te != null)     te.delete();
    if (model != null) {
      if (model._parms._keep_u)       model._output._u_key.get().delete();
      if (model._parms._save_v_frame)       model._output._v_key.get().delete();
      model.delete();
    }
  }
}
