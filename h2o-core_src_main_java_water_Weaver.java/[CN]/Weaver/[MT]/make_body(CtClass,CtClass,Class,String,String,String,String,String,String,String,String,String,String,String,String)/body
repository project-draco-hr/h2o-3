{
  StringBuilder sb=new StringBuilder();
  sb.append(header);
  if (impl.equals("writeJSON")) {
    if (supers.isEmpty()) {
      sb.append("  boolean supers = false;");
    }
 else {
      sb.append("  int position = ab.position();\n");
      sb.append(supers);
      sb.append("  boolean supers = ab.position() != position;\n");
    }
  }
 else   sb.append(supers);
  String mimpl=impl + "_impl";
  for (  CtMethod mth : iced_cc.getDeclaredMethods())   if (mth.getName().equals(mimpl)) {
    int mods=mth.getModifiers();
    String ice_handle;
    String ice_args;
    if (javassist.Modifier.isStatic(mods)) {
      ice_handle=iced_clazz.getName() + ".";
      ice_args="(ice,ab)";
    }
 else     if (javassist.Modifier.isFinal(mods)) {
      ice_handle="ice.";
      ice_args="(ab)";
    }
 else     if (javassist.Modifier.isAbstract(mods)) {
      ice_handle=null;
      ice_args=null;
    }
 else     throw barf(iced_cc," Custom serialization methods must be declared either static or final. Failed for method " + mimpl);
    if (javassist.Modifier.isAbstract(mods) || javassist.Modifier.isVolatile(mods))     sb.append(impl.startsWith("write") ? "    return ab;\n  }" : "    return ice;\n  }");
 else {
      if (!supers.isEmpty() && impl.equals("writeJSON")) {
        sb.append("    if(supers) {\n");
        sb.append("       ab.put1(',');\n");
        sb.append("       int pos = ab.position();\n");
        sb.append("    " + ice_handle).append(mimpl).append(ice_args).append(";\n");
        sb.append("      if(ab.position() == pos) ab.position(pos-1);\n");
        sb.append("      return ab;\n    } \n");
        sb.append("    return " + ice_handle).append(mimpl).append(ice_args).append(";\n  }");
      }
 else       sb.append("    return " + ice_handle).append(mimpl).append(ice_args).append(";\n  }");
    }
    mimpl=null;
    break;
  }
  CtField ctfs[]=iced_cc.getDeclaredFields();
  for (  CtField ctf : ctfs) {
    if (mimpl == null)     break;
    int mods=ctf.getModifiers();
    if (javassist.Modifier.isTransient(mods) || javassist.Modifier.isStatic(mods))     continue;
    if (ctf.hasAnnotation(API.class))     if (((API)ctf.getAvailableAnnotations()[0]).json() == false)     continue;
    if (field_sep1 != null) {
      sb.append(field_sep1);
      field_sep1=null;
    }
 else     if (field_sep2 != null)     sb.append(field_sep2);
    CtClass ctft=ctf.getType();
    CtClass base=ctft;
    while (base.isArray())     base=base.getComponentType();
    boolean can_access=!javassist.Modifier.isPrivate(mods);
    if ((impl.equals("read") || impl.equals("copyOver")) && javassist.Modifier.isFinal(mods))     can_access=false;
    long off=_unsafe.objectFieldOffset(iced_clazz.getDeclaredField(ctf.getName()));
    int ftype=ftype(iced_cc,ctf.getSignature());
    if (ftype % 20 == 9 || ftype % 20 == 11) {
      sb.append(can_access ? iced : iced_unsafe);
    }
 else     if (ftype % 20 == 10) {
      sb.append(can_access ? enums : enums_unsafe);
    }
 else {
      sb.append(can_access ? prims : prims_unsafe);
    }
    String z=FLDSZ1[ftype % 20];
    for (int i=0; i < ftype / 20; ++i)     z='A' + z;
    subsub(sb,"%z",z);
    subsub(sb,"%s",ctf.getName());
    subsub(sb,"%c",dollarsub(base.getName()));
    subsub(sb,"%C",dollarsub(ctft.getName()));
    subsub(sb,"%d","" + off);
    subsub(sb,"%u",utype(ctf.getSignature()));
  }
  if (mimpl != null)   sb.append(trailer);
  String body=sb.toString();
  addMethod(body,icer_cc);
  return body;
}
