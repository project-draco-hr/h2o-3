def infoFromInspect(inspect):
    if (not inspect):
        raise Exception('inspect is empty for infoFromInspect')
    if ('frames' not in inspect):
        raise Exception(('infoFromInspect expects inspect= param from Frames result (single): %s' % inspect))
    if (len(inspect['frames']) != 1):
        raise Exception(('infoFromInspect expects inspect= param from Frames result (single): %s ' % inspect['frames']))
    frame = inspect['frames'][0]
    if frame['isText']:
        raise Exception(('infoFromInspect only for parsed frames?: %s ' % frame['isText']))
    columns = frame['columns']
    key_name = frame['key']['name']
    missingList = []
    labelList = []
    typeList = []
    for (i, colDict) in enumerate(columns):
        mins = colDict['mins']
        maxs = colDict['maxs']
        missing = colDict['missing']
        label = colDict['label']
        stype = colDict['type']
        missingList.append(missing)
        labelList.append(label)
        typeList.append(stype)
        if (missing != 0):
            print ('%s: col: %s %s, missing: %d' % (key_name, i, label, missing))
    print 'inspect typeList:', typeList
    if (sum(missingList) == 0):
        missingList = []
    numCols = len(frame['columns'])
    numRows = frame['rows']
    byteSize = frame['byteSize']
    print ('\n%s numRows: %s, numCols: %s, byteSize: %s' % (key_name, numRows, numCols, byteSize))
    return (missingList, labelList, numRows, numCols)
