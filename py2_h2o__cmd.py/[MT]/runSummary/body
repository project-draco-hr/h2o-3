def runSummary(node=None, key=None, column=None, expected=None, maxDelta=None, noPrint=False, **kwargs):
    if (not key):
        raise Exception('No key for Summary')
    if (not node):
        node = h2o_nodes.nodes[0]
    i = InspectObj(key=key)
    missingList = i.missingList
    labelList = i.labelList
    numRows = i.numRows
    numCols = i.numCols
    print 'labelList:', labelList
    assert (labelList is not None)
    if (not ((column is None) or isinstance(column, (basestring, int)))):
        raise Exception(('column param should be string or integer index or None %s %s' % (type(column), column)))
    if (column is None):
        colNameToDo = labelList
        colIndexToDo = range(len(labelList))
    elif isinstance(column, int):
        colNameToDo = [labelList[column]]
        colIndexToDo = [column]
    elif isinstance(column, basestring):
        colNameToDo = [column]
        if (column not in labelList):
            raise Exception(('% not in labellist: %s' % (column, labellist)))
        colIndexToDo = [labelList.index(column)]
    else:
        raise Exception(('wrong type %s for column %s' % (type(column), column)))
    desiredResult = None
    for (colIndex, colName) in zip(colIndexToDo, colNameToDo):
        print ('doing summary on %s %s' % (colIndex, colName))
        co = SummaryObj(key=key, colIndex=colIndex, colName=colName)
        if (not desiredResult):
            desiredResult = co
        if (not noPrint):
            for (k, v) in co:
                if ((k == 'mins') or (k == 'maxs')):
                    print ('%s[0]' % k), v[0]
                else:
                    print k, v
        if (expected is not None):
            print 'len(co.bins):', len(co.bins)
            print 'co.label:', co.label, 'mean (2 places):', h2o_util.twoDecimals(co.mean)
            print 'co.label:', co.label, 'std dev. (2 places):', h2o_util.twoDecimals(co.sigma)
            print "FIX! hacking the co.pctiles because it's short by two"
            if co.pctiles:
                pctiles = (([0] + co.pctiles) + [0])
            else:
                pctiles = None
            if (maxDelta is None):
                maxDelta = ((co.maxs[0] - co.mins[0]) / 1000)
            if expected[0]:
                h2o_util.assertApproxEqual(co.mins[0], expected[0], tol=maxDelta, msg='min is not approx. expected')
            if expected[1]:
                h2o_util.assertApproxEqual(pctiles[3], expected[1], tol=maxDelta, msg='25th percentile is not approx. expected')
            if expected[2]:
                h2o_util.assertApproxEqual(pctiles[5], expected[2], tol=maxDelta, msg='50th percentile (median) is not approx. expected')
            if expected[3]:
                h2o_util.assertApproxEqual(pctiles[7], expected[3], tol=maxDelta, msg='75th percentile is not approx. expected')
            if expected[4]:
                h2o_util.assertApproxEqual(co.maxs[0], expected[4], tol=maxDelta, msg='max is not approx. expected')
            MAX_QBINS = 1000
            if (expected[0] and expected[4]):
                expectedRange = (expected[4] - expected[0])
                expectedBin = (expectedRange / (MAX_QBINS - 2))
                maxErr = expectedBin
            else:
                print "Test won't calculate max expected error"
                maxErr = 0
            pt = h2o_util.twoDecimals(pctiles)
            mx = h2o_util.twoDecimals(co.maxs[0])
            mn = h2o_util.twoDecimals(co.mins[0])
            print 'co.label:', co.label, 'co.pctiles (2 places):', pt
            print 'co.default_pctiles:', co.default_pctiles
            print 'co.label:', co.label, 'co.maxs: (2 places):', mx
            print 'co.label:', co.label, 'co.mins: (2 places):', mn
            if (pt is None):
                compareActual = (mn, ([None] * 3), mx)
            else:
                compareActual = (mn, pt[3], pt[5], pt[7], mx)
            h2p.green_print('actual min/25/50/75/max co.label:', co.label, '(2 places):', compareActual)
            h2p.green_print('expected min/25/50/75/max co.label:', co.label, '(2 places):', expected)
    return desiredResult
