{
  Arrays.fill(z,0);
  if (_lambda > 0 || _addedL2 > 0)   gram.addDiag(_lambda * (1 - _alpha) + _addedL2);
  if (_alpha > 0 && _lambda > 0)   gram.addDiag(rho);
  if (_proximalPenalty > 0 && _wgiven != null) {
    gram.addDiag(_proximalPenalty,true);
    for (int i=0; i < xy.length; ++i)     xy[i]+=_proximalPenalty * _wgiven[i];
  }
  int attempts=0;
  long t1=System.currentTimeMillis();
  chol=gram.cholesky(null,true,_id);
  long t2=System.currentTimeMillis();
  while (!chol.isSPD() && attempts < 10) {
    if (_addedL2 == 0)     _addedL2=1e-5;
 else     _addedL2*=10;
    ++attempts;
    gram.addDiag(_addedL2);
    gram.cholesky(chol);
  }
  decompTime=(t2 - t1);
  if (!chol.isSPD())   throw new NonSPDMatrixException(gram);
  if (_alpha == 0 || _lambda == 0) {
    System.arraycopy(xy,0,z,0,xy.length);
    chol.parSolver(this,z,_iBlock,_rBlock).fork();
    return;
  }
  gerr=Double.POSITIVE_INFINITY;
  _xyPrime=xy.clone();
  _orlx=1.8;
  new ADMMIteration(this).fork();
}
