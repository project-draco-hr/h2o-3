{
  if (_sparseLen != _len) {
    if (_is != null) {
      int[] is=MemoryManager.malloc4(_len);
      Arrays.fill(is,-1);
      for (int i=0; i < _sparseLen; i++)       is[_id[i]]=_is[i];
      _is=is;
    }
 else     if (_ds == null) {
      Exponents xs=new Exponents(_len);
      Mantissas ms=new Mantissas(_len);
      BitSet missing=new BitSet();
      if (_sparseNA)       missing.set(0,_len);
      for (int i=0; i < _sparseLen; ++i) {
        xs.set(_id[i],_xs.get(i));
        ms.set(_id[i],_ms.get(i));
        missing.set(_id[i],_sparseNA || _missing == null ? false : _missing.get(i));
      }
      ms._nzs=_ms._nzs;
      _xs=xs;
      _missing=missing;
      _ms=ms;
    }
 else {
      double[] ds=MemoryManager.malloc8d(_len);
      _missing=new BitSet();
      if (_sparseNA)       Arrays.fill(ds,Double.NaN);
      for (int i=0; i < _sparseLen; ++i) {
        ds[_id[i]]=_ds[i];
        if (_sparseNA)         _missing.set(_id[i]);
      }
      _ds=ds;
    }
    set_sparseLen(_len);
  }
  _id=null;
  _sparseNA=false;
}
