{
  long pinfs=0, ninfs=0, naCnt=0, nzCnt=0;
  boolean isInt=true;
  boolean hasNA=false;
  double dmin=_rs._mins[_rs._mins.length - 1];
  double dmax=_rs._maxs[_rs._maxs.length - 1];
  assert(_rs._pinfs == 0);
  assert(_rs._ninfs == 0);
  assert(_rs._naCnt == 0);
  assert(_rs._nzCnt == 0);
  assert(dmin == Double.MAX_VALUE);
  assert(dmax == -Double.MAX_VALUE);
  long rows=0;
  double mean=0;
  double M2=0;
  int len=c._len;
  for (int i=0; i < len; ++i) {
    if (hasNA && c.isNA(i))     naCnt++;
 else {
      long l=c.at8(i);
      double x=(double)l;
      if (l != 0)       checksum^=(17 * (start + i)) ^ 23 * l;
{
        if (x != 0)         nzCnt++;
        if (x < dmin)         dmin=_rs.min(x);
        if (x > dmax)         dmax=_rs.max(x);
        rows++;
        double delta=x - mean;
        mean+=delta / rows;
        M2+=delta * (x - mean);
      }
    }
  }
  _rs._pinfs=pinfs;
  _rs._ninfs=ninfs;
  _rs._naCnt=naCnt;
  _rs._nzCnt=nzCnt;
  _rs._rows+=rows;
  _rs._isInt=isInt;
  _rs._mean=mean;
  _rs._sigma=M2;
  return checksum;
}
