{
  long pinfs=_rs._pinfs;
  long ninfs=_rs._ninfs;
  long naCnt=_rs._naCnt;
  long nzCnt=_rs._nzCnt;
  boolean isInt=_rs._isInt;
  boolean hasNA=c.hasNA();
  boolean hasFloat=c.hasFloat();
  double dmin=_rs._mins[_rs._mins.length - 1];
  double dmax=_rs._maxs[_rs._maxs.length - 1];
  long rows=0;
  double mean=0;
  double M2=0;
  for (int i=c.nextNZ(-1); i < c._len; i=c.nextNZ(i)) {
    if (hasNA && c.isNA(i))     naCnt++;
 else {
      double x=c.atd(i);
      long l=hasFloat ? Double.doubleToRawLongBits(x) : c.at8(i);
      if (l != 0)       checksum^=(17 * (start + i)) ^ 23 * l;
      if (x == Double.POSITIVE_INFINITY)       pinfs++;
 else       if (x == Double.NEGATIVE_INFINITY)       ninfs++;
 else {
        if (x != 0)         nzCnt++;
        if (x < dmin)         dmin=_rs.min(x);
        if (x > dmax)         dmax=_rs.max(x);
        if (isInt)         isInt=(long)x == x;
        rows++;
        double delta=x - mean;
        mean+=delta / rows;
        M2+=delta * (x - mean);
      }
    }
  }
  double variance=0;
  if (rows > 1) {
    variance=M2;
  }
  _rs._pinfs=pinfs;
  _rs._ninfs=ninfs;
  _rs._naCnt=naCnt;
  _rs._nzCnt=nzCnt;
  _rs._rows+=rows;
  _rs._isInt=isInt;
  _rs._mean=mean;
  _rs._sigma=variance;
  return checksum;
}
