{
  int nout=_m._parms._family == Family.multinomial ? _m._output.nclasses() + 1 : _m._parms._family == Family.binomial ? 3 : 1;
  Chunk[] outputs=Arrays.copyOfRange(chks,chks.length - nout,chks.length);
  chks=Arrays.copyOf(chks,chks.length - nout);
  Chunk off=new C0DChunk(0,chks[0]._len);
  Chunk w=new C0DChunk(1,chks[0]._len);
  double[] tmp=new double[_m._output._dinfo._cats + _m._output._dinfo._nums];
  double[] predictions=new double[nout];
  if (_offset) {
    off=chks[chks.length - 1];
    chks=Arrays.copyOf(chks,chks.length - 1);
  }
  if (_weights) {
    w=chks[chks.length - 1];
    chks=Arrays.copyOf(chks,chks.length - 1);
  }
  if (_weights || _offset) {
    for (int i=0; i < chks[0]._len; ++i) {
      _m.score0(chks,w.atd(i),off.atd(i),i,tmp,predictions);
      for (int j=0; j < predictions.length; ++j)       assertEquals("mismatch at row " + (i + chks[0].start()) + ", p = "+ j+ ": "+ outputs[j].atd(i)+ " != "+ predictions[j],outputs[j].atd(i),predictions[j],1e-6);
    }
  }
 else {
    for (int i=0; i < chks[0]._len; ++i) {
      _m.score0(chks,i,tmp,predictions);
      for (int j=0; j < predictions.length; ++j)       assertEquals("mismatch at row " + (i + chks[0].start()) + ", p = "+ j+ ": "+ outputs[j].atd(i)+ " != "+ predictions[j]+ ", preds = "+ Arrays.toString(predictions),outputs[j].atd(i),predictions[j],1e-6);
    }
  }
}
