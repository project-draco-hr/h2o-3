{
  GLMModel model=null, model2=null, model3=null, model4=null;
  Frame fr=parse_test_file("smalldata/glm_test/prostate_cat_replaced.csv");
  try {
    Scope.enter();
    String[] cfs1=new String[]{"Intercept","AGE","RACE.R2","RACE.R3","DPROS","DCAPS","PSA","VOL","GLEASON"};
    double[] vals=new double[]{-8.14867,-0.01368,0.32337,-0.38028,0.55964,0.49548,0.02794,-0.01104,0.97704};
    GLMParameters params=new GLMParameters(Family.binomial);
    params._response_column="CAPSULE";
    params._ignored_columns=new String[]{"ID"};
    params._train=fr._key;
    params._lambda=new double[]{0};
    params._standardize=false;
    GLM glm=new GLM(params,glmkey("prostate_model"));
    model=glm.trainModel().get();
    HashMap<String,Double> coefs=model.coefficients();
    System.out.println(coefs);
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
    assertEquals(512.3,nullDeviance(model),1e-1);
    assertEquals(378.3,residualDeviance(model),1e-1);
    assertEquals(371,resDOF(model),0);
    assertEquals(396.3,aic(model),1e-1);
    testScoring(model,fr);
    model.score(fr).delete();
    hex.ModelMetricsBinomial mm=hex.ModelMetricsBinomial.getFromDKV(model,fr);
    hex.AUC2 adata=mm._auc;
    assertEquals(model._output._training_metrics.auc_obj()._auc,adata._auc,1e-8);
    assertEquals(model._output._training_metrics._MSE,mm._MSE,1e-8);
    assertEquals(((ModelMetricsBinomialGLM)model._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
    model.score(fr).delete();
    mm=hex.ModelMetricsBinomial.getFromDKV(model,fr);
    assertEquals(model._output._training_metrics.auc_obj()._auc,adata._auc,1e-8);
    assertEquals(model._output._training_metrics._MSE,mm._MSE,1e-8);
    assertEquals(((ModelMetricsBinomialGLM)model._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm)._resDev,1e-8);
    double prior=1e-5;
    params._prior=prior;
    glm=new GLM(params,glmkey("prostate_model2"));
    model2=glm.trainModel().get();
    for (int i=0; i < model2.beta().length - 1; ++i)     assertEquals(model.beta()[i],model2.beta()[i],1e-8);
    assertEquals(model.beta()[model.beta().length - 1] - Math.log(model._ymu[0] * (1 - prior) / (prior * (1 - model._ymu[0]))),model2.beta()[model.beta().length - 1],1e-10);
    params._lambda_search=true;
    params._lambda=null;
    params._alpha=new double[]{0};
    params._prior=-1;
    params._obj_reg=-1;
    params._max_iterations=500;
    params._objective_epsilon=1e-6;
    glm=new GLM(params,glmkey("prostate_model2"));
    model3=glm.trainModel().get();
    double lambda=model3._output._submodels[model3._output._best_lambda_idx].lambda_value;
    params._lambda_search=false;
    params._lambda=new double[]{lambda};
    ModelMetrics mm3=ModelMetrics.getFromDKV(model3,fr);
    assertEquals("mse don't match, " + model3._output._training_metrics._MSE + " != "+ mm3._MSE,model3._output._training_metrics._MSE,mm3._MSE,1e-8);
    assertEquals("res-devs don't match, " + ((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev + " != "+ ((ModelMetricsBinomialGLM)mm3)._resDev,((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm3)._resDev,1e-4);
    fr.add("CAPSULE",fr.remove("CAPSULE"));
    fr.remove("ID").remove();
    DKV.put(fr._key,fr);
    DataInfo dinfo=new DataInfo(fr,null,1,true,TransformType.NONE,DataInfo.TransformType.NONE,true,false,false,false,false,false);
    model3.score(fr).delete();
    mm3=ModelMetrics.getFromDKV(model3,fr);
    assertEquals("mse don't match, " + model3._output._training_metrics._MSE + " != "+ mm3._MSE,model3._output._training_metrics._MSE,mm3._MSE,1e-8);
    assertEquals("res-devs don't match, " + ((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev + " != "+ ((ModelMetricsBinomialGLM)mm3)._resDev,((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)mm3)._resDev,1e-4);
    glm=new GLM(params,glmkey("prostate_model2"));
    model4=glm.trainModel().get();
    assertEquals("mse don't match, " + model3._output._training_metrics._MSE + " != "+ model4._output._training_metrics._MSE,model3._output._training_metrics._MSE,model4._output._training_metrics._MSE,1e-6);
    assertEquals("res-devs don't match, " + ((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev + " != "+ ((ModelMetricsBinomialGLM)model4._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)model3._output._training_metrics)._resDev,((ModelMetricsBinomialGLM)model4._output._training_metrics)._resDev,1e-4);
    model4.score(fr).delete();
    ModelMetrics mm4=ModelMetrics.getFromDKV(model4,fr);
    assertEquals("mse don't match, " + mm3._MSE + " != "+ mm4._MSE,mm3._MSE,mm4._MSE,1e-6);
    assertEquals("res-devs don't match, " + ((ModelMetricsBinomialGLM)mm3)._resDev + " != "+ ((ModelMetricsBinomialGLM)mm4)._resDev,((ModelMetricsBinomialGLM)mm3)._resDev,((ModelMetricsBinomialGLM)mm4)._resDev,1e-4);
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
    if (model2 != null)     model2.delete();
    if (model3 != null)     model3.delete();
    if (model4 != null)     model4.delete();
    Scope.exit();
  }
}
