{
  GLM job=null;
  GLMModel model=null, model2=null;
  Frame fr=parse_test_file("smalldata/glm_test/prostate_cat_replaced.csv");
  Frame score=null;
  try {
    Scope.enter();
    String[] cfs1=new String[]{"Intercept","AGE","RACE.R2","RACE.R3","DPROS","DCAPS","PSA","VOL","GLEASON"};
    double[] vals=new double[]{-8.14867,-0.01368,0.32337,-0.38028,0.55964,0.49548,0.02794,-0.01104,0.97704};
    GLMParameters params=new GLMParameters(Family.binomial);
    params._response_column="CAPSULE";
    params._ignored_columns=new String[]{"ID"};
    params._train=fr._key;
    params._lambda=new double[]{0};
    params._standardize=false;
    job=new GLM(Key.make("prostate_model"),"glm test simple poisson",params);
    model=job.trainModel().get();
    HashMap<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-4);
    GLMValidation val=model.validation();
    assertEquals(512.3,val.nullDeviance(),1e-1);
    assertEquals(378.3,val.residualDeviance(),1e-1);
    assertEquals(371,val.resDOF());
    assertEquals(396.3,val.aic,1e-1);
    score=model.score(fr);
    hex.ModelMetricsBinomial mm=hex.ModelMetricsBinomial.getFromDKV(model,fr);
    hex.AUC2 adata=mm._auc;
    assertEquals(model._output._training_metrics.auc()._auc,adata._auc,1e-2);
    assertEquals(val.computeAUC(model,fr),adata._auc,1e-2);
    double prior=1e-5;
    params._prior=prior;
    job.remove();
    job=new GLM(Key.make("prostate_model2"),"glm test simple poisson",params);
    model2=job.trainModel().get();
    for (int i=0; i < model2.beta().length - 1; ++i)     assertEquals(model.beta()[i],model2.beta()[i],1e-8);
    assertEquals(model.beta()[model.beta().length - 1] - Math.log(model._ymu * (1 - prior) / (prior * (1 - model._ymu))),model2.beta()[model.beta().length - 1],1e-10);
  }
  finally {
    fr.delete();
    if (model != null)     model.delete();
    if (model2 != null)     model2.delete();
    if (score != null)     score.delete();
    if (job != null)     job.remove();
    Scope.exit();
  }
}
