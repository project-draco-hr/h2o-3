{
  Random rnd=new Random(123456789l);
  double[] d0=MemoryManager.malloc8d(1000);
  double[] d1=MemoryManager.malloc8d(1000);
  double[] d2=MemoryManager.malloc8d(1000);
  double[] d3=MemoryManager.malloc8d(1000);
  double[] d4=MemoryManager.malloc8d(1000);
  double[] d5=MemoryManager.malloc8d(1000);
  double[] d6=MemoryManager.malloc8d(1000);
  double[] d7=MemoryManager.malloc8d(1000);
  double[] d8=MemoryManager.malloc8d(1000);
  double[] d9=MemoryManager.malloc8d(1000);
  long[] c1=MemoryManager.malloc8(1000);
  long[] c2=MemoryManager.malloc8(1000);
  String[] dom=new String[]{"a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"};
  for (int i=0; i < d1.length; ++i) {
    c1[i]=rnd.nextInt(dom.length);
    c2[i]=rnd.nextInt(dom.length);
    d0[i]=rnd.nextDouble();
    d1[i]=rnd.nextDouble();
  }
  for (int i=0; i < 30; ++i) {
    d2[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d3[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d4[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d5[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d6[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d7[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d8[rnd.nextInt(d2.length)]=rnd.nextDouble();
    d9[rnd.nextInt(d2.length)]=1;
  }
  Vec v01=Vec.makeVec(c1,dom,Vec.newKey());
  Vec v02=Vec.makeVec(c2,dom,Vec.newKey());
  Vec v03=Vec.makeVec(d0,Vec.newKey());
  Vec v04=Vec.makeVec(d1,Vec.newKey());
  Vec v05=Vec.makeVec(d2,Vec.newKey());
  Vec v06=Vec.makeVec(d3,Vec.newKey());
  Vec v07=Vec.makeVec(d4,Vec.newKey());
  Vec v08=Vec.makeVec(d5,Vec.newKey());
  Vec v09=Vec.makeVec(d6,Vec.newKey());
  Vec v10=Vec.makeVec(d7,Vec.newKey());
  Vec v11=Vec.makeVec(d8,Vec.newKey());
  Vec v12=Vec.makeVec(d9,Vec.newKey());
  Key k=Key.make("TestData");
  Frame f=new Frame(v01,v02,v03,v04,v05,v05,v06,v07,v08,v09,v10,v11,v12);
  DKV.put(k,f);
  DataInfo dinfo=new DataInfo(Key.make(),f,null,1,true,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE,true,false,false,false,false,false);
  GLMParameters params=new GLMParameters(Family.gaussian);
  final GLMIterationTask glmtSparse=new GLMIterationTask(null,dinfo,1e-5,params,false,null,0,true,null).setSparse(true).doAll(dinfo._adaptedFrame);
  final GLMIterationTask glmtDense=new GLMIterationTask(null,dinfo,1e-5,params,false,null,0,true,null).setSparse(false).doAll(dinfo._adaptedFrame);
  for (int i=0; i < glmtDense._xy.length; ++i) {
    for (int j=0; j <= i; ++j) {
      assertEquals(glmtDense._gram.get(i,j),glmtSparse._gram.get(i,j),1e-8);
    }
    assertEquals(glmtDense._xy[i],glmtSparse._xy[i],1e-8);
  }
  final double[] beta=MemoryManager.malloc8d(dinfo.fullN() + 1);
  H2O.submitTask(new H2OCountedCompleter(){
    @Override protected void compute2(){
      new GLM.GramSolver(glmtDense._gram,glmtDense._xy,true,1e-5,0,null,null,0,null,null).solve(null,beta);
      tryComplete();
    }
  }
).join();
  final GLMIterationTask glmtSparse2=new GLMIterationTask(null,dinfo,1e-5,params,false,beta,0,true,null).setSparse(true).doAll(dinfo._adaptedFrame);
  final GLMIterationTask glmtDense2=new GLMIterationTask(null,dinfo,1e-5,params,false,beta,0,true,null).setSparse(false).doAll(dinfo._adaptedFrame);
  for (int i=0; i < glmtDense2._xy.length; ++i) {
    for (int j=0; j <= i; ++j) {
      assertEquals(glmtDense2._gram.get(i,j),glmtSparse2._gram.get(i,j),1e-8);
    }
    assertEquals(glmtDense2._xy[i],glmtSparse2._xy[i],1e-8);
  }
  dinfo.remove();
  DKV.remove(k);
  f.remove();
}
