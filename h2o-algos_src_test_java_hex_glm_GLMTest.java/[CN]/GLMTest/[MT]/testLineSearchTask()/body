{
  GLM job=null;
  Key parsed=Key.make("cars_parsed");
  Key modelKey=Key.make("cars_model");
  Frame fr=null;
  GLMModel model=null;
  Frame score=null;
  DataInfo dinfo=null;
  double ymu=0;
  try {
    fr=parse_test_file(parsed,"smalldata/junit/mixcat_train.csv");
    GLMParameters params=new GLMParameters(Family.binomial,Family.binomial.defaultLink,new double[]{0},new double[]{0});
    params._train=parsed;
    params._lambda=new double[]{0};
    params._use_all_factor_levels=true;
    fr.add("Useless",fr.remove("Useless"));
    dinfo=new DataInfo(Key.make(),fr,null,1,params._use_all_factor_levels || params._lambda_search,params._standardize ? DataInfo.TransformType.STANDARDIZE : DataInfo.TransformType.NONE,DataInfo.TransformType.NONE,true);
    DKV.put(dinfo._key,dinfo);
    double[] beta=MemoryManager.malloc8d(dinfo.fullN() + 1);
    double[] pk=MemoryManager.malloc8d(dinfo.fullN() + 1);
    Random rnd=new Random(987654321);
    for (int i=0; i < beta.length; ++i) {
      beta[i]=1 - 2 * rnd.nextDouble();
      pk[i]=10 * (1 - 2 * rnd.nextDouble());
    }
    GLMLineSearchTask glst=new GLMLineSearchTask(dinfo,params,1,beta,pk,.7,16).doAll(dinfo._adaptedFrame);
    double step=1, stepDec=.7;
    for (int i=0; i < glst._nSteps; ++i) {
      double[] b=beta.clone();
      for (int j=0; j < b.length; ++j) {
        b[j]+=step * pk[j];
      }
      GLMIterationTask glmt=new GLMTask.GLMIterationTask(null,dinfo,0,params,true,b,ymu,null,null).doAll(dinfo._adaptedFrame);
      assertEquals("objective values differ at step " + i + ": "+ step,glmt._likelihood,glst._likelihoods[i],1e-8);
      System.out.println("step = " + step + ", obj = "+ glmt._likelihood+ ", "+ glst._likelihoods[i]);
      step*=stepDec;
    }
  }
  finally {
    if (fr != null)     fr.delete();
    if (score != null)     score.delete();
    if (model != null)     model.delete();
    if (job != null)     job.remove();
    if (dinfo != null)     dinfo.remove();
  }
}
