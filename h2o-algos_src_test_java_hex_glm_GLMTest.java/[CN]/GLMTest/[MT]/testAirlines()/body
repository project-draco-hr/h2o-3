{
  GLM job=null;
  GLMModel model1=null, model2=null, model3=null, model4=null;
  Frame frMM=parse_test_file(Key.make("AirlinesMM"),"smalldata/airlines/AirlinesTrainMM.csv.zip");
  Frame frG=parse_test_file(Key.make("gram"),"smalldata/airlines/gram_std.csv",true);
  Vec xy=frG.remove("xy");
  frMM.remove("").remove();
  frMM.add("IsDepDelayed",frMM.remove("IsDepDelayed"));
  DKV.put(frMM._key,frMM);
  Frame fr=parse_test_file(Key.make("Airlines"),"smalldata/airlines/AirlinesTrain.csv.zip"), res=null;
  String[] ignoredCols=new String[]{"fYear","fMonth","fDayofMonth","fDayOfWeek","DepTime","ArrTime","IsDepDelayed_REC"};
  try {
    Scope.enter();
    GLMParameters params=new GLMParameters(Family.gaussian);
    params._response_column="IsDepDelayed";
    params._ignored_columns=ignoredCols;
    params._train=fr._key;
    params._lambda=new double[]{0};
    params._standardize=false;
    job=new GLM(Key.make("airlines_cat_nostd"),"Airlines with auto-expanded categoricals, no standardization",params);
    model1=job.trainModel().get();
    Frame score1=model1.score(fr);
    ModelMetricsRegressionGLM mm=(ModelMetricsRegressionGLM)ModelMetrics.getFromDKV(model1,fr);
    Assert.assertEquals(((ModelMetricsRegressionGLM)model1._output._training_metrics)._resDev,mm._resDev,1e-4);
    Assert.assertEquals(((ModelMetricsRegressionGLM)model1._output._training_metrics)._resDev,mm._MSE * score1.numRows(),1e-4);
    mm.remove();
    res=model1.score(fr);
    Assert.assertTrue(model1.testJavaScoring(fr,res,1e-15));
    params._train=frMM._key;
    params._ignored_columns=new String[]{"X"};
    job=new GLM(Key.make("airlines_mm"),"Airlines with pre-expanded (mode.matrix) categoricals, no standardization",params);
    model2=job.trainModel().get();
    params._standardize=true;
    params._train=frMM._key;
    params._use_all_factor_levels=true;
    DataInfo dinfo=new DataInfo(Key.make(),frMM,null,1,true,DataInfo.TransformType.STANDARDIZE,DataInfo.TransformType.NONE,true,false);
    GLMIterationTask glmt=new GLMIterationTask(null,dinfo,1e-5,params,false,null,0,null,null).doAll(dinfo._adaptedFrame);
    for (int i=0; i < glmt._xy.length; ++i) {
      for (int j=0; j <= i; ++j) {
        assertEquals(frG.vec(j).at(i),glmt._gram.get(i,j),1e-5);
      }
      assertEquals(xy.at(i),glmt._xy[i],1e-5);
    }
    xy.remove();
    params=(GLMParameters)params.clone();
    params._standardize=true;
    params._family=Family.binomial;
    params._link=Link.logit;
    job=new GLM(Key.make("airlines_mm"),"Airlines with pre-expanded (mode.matrix) categoricals, no standardization",params);
    model3=job.trainModel().get();
    params._train=fr._key;
    params._ignored_columns=ignoredCols;
    job=new GLM(Key.make("airlines_mm"),"Airlines with pre-expanded (mode.matrix) categoricals, no standardization",params);
    model4=job.trainModel().get();
    assertEquals(nullDeviance(model3),nullDeviance(model4),1e-4);
    assertEquals(residualDeviance(model4),residualDeviance(model3),nullDeviance(model3) * 1e-3);
    HashMap<String,Double> coefs1=model1.coefficients();
    HashMap<String,Double> coefs2=model2.coefficients();
    for (    String s : coefs2.keySet()) {
      String s1=s;
      if (s.startsWith("Origin"))       s1="Origin." + s.substring(6);
      if (s.startsWith("Dest"))       s1="Dest." + s.substring(4);
      if (s.startsWith("UniqueCarrier"))       s1="UniqueCarrier." + s.substring(13);
      assertEquals("coeff " + s1 + " differs, "+ coefs1.get(s1)+ " != "+ coefs2.get(s),coefs1.get(s1),coefs2.get(s),1e-4);
      DKV.put(frMM._key,frMM);
    }
    assertEquals(nullDeviance(model1),nullDeviance(model2),1e-4);
    assertEquals(residualDeviance(model1),residualDeviance(model2),1e-4);
    assertEquals(5336.918,residualDeviance(model1),1);
    assertEquals(6051.613,nullDeviance(model2),1);
  }
  finally {
    fr.delete();
    frMM.delete();
    frG.delete();
    if (res != null)     res.delete();
    if (model1 != null)     model1.delete();
    if (model2 != null)     model2.delete();
    if (model3 != null)     model3.delete();
    if (model4 != null)     model4.delete();
    if (job != null)     job.remove();
    Scope.exit();
  }
}
