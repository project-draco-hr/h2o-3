{
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  GLMModel model=null;
  Frame fr=parse_test_file(parsed,"smalldata/logreg/prostate.csv");
  fr.remove("ID").remove();
  DKV.put(fr._key,fr);
  Key betaConsKey=Key.make("beta_constraints");
  FVecTest.makeByteVec(betaConsKey,"names, beta_given, rho\n AGE, 0.1, 1\n RACE, -0.1, 1 \n DPROS, 10, 1 \n DCAPS, -10, 1 \n PSA, 0, 1\n VOL, 0, 1\nGLEASON, 0, 1\n Intercept, 0, 0 \n");
  Frame betaConstraints=ParseDataset.parse(Key.make("beta_constraints.hex"),betaConsKey);
  try {
    GLMParameters params=new GLMParameters();
    params._standardize=false;
    params._family=Family.binomial;
    params._beta_constraints=betaConstraints._key;
    params._response_column="CAPSULE";
    params._ignored_columns=new String[]{"ID"};
    params._train=fr._key;
    params._alpha=new double[]{0};
    params._lambda=new double[]{0};
    GLM job=new GLM(modelKey,"glm test simple poisson",params);
    job.trainModel().get();
    model=DKV.get(modelKey).get();
    double[] beta_1=model.beta();
    params._solver=Solver.L_BFGS;
    params._max_iterations=1000;
    job=new GLM(modelKey,"glm test simple poisson",params);
    job.trainModel().get();
    model=DKV.get(modelKey).get();
    fr.add("CAPSULE",fr.remove("CAPSULE"));
    DataInfo dinfo=new DataInfo(Key.make(),fr,null,1,true,TransformType.NONE,DataInfo.TransformType.NONE,true,false,false,false,false,false);
    LBFGS_LogisticGradientTask lt=(LBFGS_LogisticGradientTask)new LBFGS_LogisticGradientTask(dinfo,params,0,beta_1,1.0 / 380.0,null,true).doAll(dinfo._adaptedFrame);
    new GLMGradientTask(dinfo,params,0,beta_1,1.0 / 380,true).doAll(dinfo._adaptedFrame);
    double[] grad=lt._gradient;
    for (int i=0; i < beta_1.length; ++i)     assertEquals(0,grad[i] + betaConstraints.vec("rho").at(i) * (beta_1[i] - betaConstraints.vec("beta_given").at(i)),1e-4);
  }
  finally {
    betaConstraints.delete();
    fr.delete();
    if (model != null)     model.delete();
  }
}
