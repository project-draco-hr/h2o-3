{
  GLMModel model=null;
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  Frame fr=parse_test_file(parsed,"smalldata/logreg/prostate.csv");
  Key betaConsKey=Key.make("beta_constraints");
  String[] cfs1=new String[]{"AGE","RACE","DPROS","DCAPS","PSA","VOL","GLEASON","Intercept"};
  double[] vals=new double[]{-0.006502588,-0.500000000,0.500000000,0.400000000,0.034826559,-0.011661747,0.500000000,-4.564024};
  FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n AGE, -.5, .5\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
  Frame betaConstraints=ParseDataset.parse(Key.make("beta_constraints.hex"),new Key[]{betaConsKey});
  try {
    GLMParameters params=new GLMParameters();
    params._standardize=true;
    params._family=Family.binomial;
    params._beta_constraint=betaConstraints._key;
    params._response_column="CAPSULE";
    params._ignored_columns=new String[]{"ID"};
    params._train=fr._key;
    params._alpha=new double[]{1};
    params._lambda=new double[]{0.001607};
    GLM job=new GLM(modelKey,"glm test simple poisson",params);
    job.trainModel().get();
    assertTrue(job.isDone());
    model=DKV.get(modelKey).get();
    System.out.println("coefs = " + model.coefficients());
    System.out.println("beta = " + Arrays.toString(model.beta()));
    Map<String,Double> coefs=model.coefficients();
    for (int i=0; i < cfs1.length; ++i)     assertEquals(vals[i],coefs.get(cfs1[i]),1e-2);
    GLMValidation val=model.validation();
    assertEquals(512.2888,val.nullDeviance(),1e-1);
    assertEquals(388.4686,val.residualDeviance(),1e-1);
  }
  finally {
    fr.delete();
    betaConstraints.delete();
    if (model != null)     model.delete();
  }
}
