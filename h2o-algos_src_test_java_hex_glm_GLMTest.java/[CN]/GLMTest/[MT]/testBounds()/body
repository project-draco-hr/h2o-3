{
  GLMModel model=null;
  Key parsed=Key.make("prostate_parsed");
  Key modelKey=Key.make("prostate_model");
  Frame fr=parse_test_file(parsed,"smalldata/logreg/prostate.csv");
  Key betaConsKey=Key.make("beta_constraints");
  String[] cfs1=new String[]{"AGE","RACE","DPROS","DCAPS","PSA","VOL","GLEASON","Intercept"};
  double[] vals=new double[]{-0.006502588,-0.500000000,0.500000000,0.400000000,0.034826559,-0.011661747,0.500000000,-4.564024};
  FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n AGE, -.5, .5\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5\nGLEASON, -.5, .5");
  Frame betaConstraints=ParseDataset.parse(Key.make("beta_constraints.hex"),new Key[]{betaConsKey});
  try {
    GLMParameters params=new GLMParameters();
    params._standardize=true;
    params._family=Family.binomial;
    params._beta_constraint=betaConstraints._key;
    params._response_column="CAPSULE";
    params._ignored_columns=new String[]{"ID"};
    params._train=fr._key;
    params._alpha=new double[]{1};
    params._lambda=new double[]{0.001607};
    GLM job=new GLM(modelKey,"glm test simple poisson",params);
    job.trainModel().get();
    assertTrue(job.isDone());
    model=DKV.get(modelKey).get();
    GLMValidation val=model.validation();
    System.out.println("val = " + val);
    assertEquals(512.2888,val.nullDeviance(),1e-1);
    assertEquals(388.4686,val.residualDeviance(),1e-1);
    model.delete();
    params._lambda=new double[]{0};
    params._alpha=new double[]{0};
    FVecTest.makeByteVec(betaConsKey,"names, lower_bounds, upper_bounds\n RACE, -.5, .5\n DCAPS, -.4, .4\n DPROS, -.5, .5 \nPSA, -.5, .5\n VOL, -.5, .5");
    betaConstraints=ParseDataset.parse(Key.make("beta_constraints.hex"),new Key[]{betaConsKey});
    job=new GLM(modelKey,"glm test simple poisson",params);
    job.trainModel().get();
    assertTrue(job.isDone());
    model=DKV.get(modelKey).get();
    double[] beta=model.beta();
    System.out.println("beta = " + Arrays.toString(beta));
    fr.add("CAPSULE",fr.remove("CAPSULE"));
    fr.remove("ID").remove();
    DKV.put(fr._key,fr);
    DataInfo dinfo=new DataInfo(Key.make(),fr,null,1,true,TransformType.NONE,DataInfo.TransformType.NONE,true);
    LBFGS_LogisticGradientTask lt=(LBFGS_LogisticGradientTask)new LBFGS_LogisticGradientTask(dinfo,params,0,beta,1.0 / 380.0,null).doAll(dinfo._adaptedFrame);
    double[] grad=lt._gradient;
    String[] names=model._dinfo.coefNames();
    System.out.println("coefs = " + Arrays.toString(names));
    System.out.println("grad = " + Arrays.toString(grad));
    ValueString vs=new ValueString();
    outer:     for (int i=0; i < names.length; ++i) {
      for (int j=0; j < betaConstraints.numRows(); ++j) {
        if (betaConstraints.vec("names").atStr(vs,j).toString().equals(names[i])) {
          if (Math.abs(beta[i] - betaConstraints.vec("lower_bounds").at(j)) < 1e-4 || Math.abs(beta[i] - betaConstraints.vec("upper_bounds").at(j)) < 1e-4) {
            continue outer;
          }
        }
      }
      assertEquals(0,grad[i],1e-2);
    }
  }
  finally {
    fr.delete();
    betaConstraints.delete();
    if (model != null)     model.delete();
  }
}
