{
  Key raw=Key.make("poisson_test_data_raw");
  Key parsed=Key.make("poisson_test_data_parsed");
  Key modelKey=Key.make("poisson_test");
  GLMModel model=null;
  Frame fr=null, res=null;
  try {
    FVecTest.makeByteVec(raw,"x,y\n0,2\n1,4\n2,8\n3,16\n4,32\n5,64\n6,128\n7,256");
    fr=ParseDataset.parse(parsed,raw);
    Vec v=fr.vec(0);
    System.out.println(v.min() + ", " + v.max()+ ", mean = "+ v.mean());
    GLMParameters params=new GLMParameters(Family.poisson);
    params._train=fr._key;
    params._response_column=fr._names[1];
    params._lambda=new double[]{0};
    params._standardize=false;
    model=new GLM(modelKey,"glm test simple poisson",params).trainModel().get();
    for (    double c : model.beta())     assertEquals(Math.log(2),c,1e-2);
    model.delete();
    fr.delete();
    FVecTest.makeByteVec(raw,"x,y\n1,0\n2,1\n3,2\n4,3\n5,1\n6,4\n7,9\n8,18\n9,23\n10,31\n11,20\n12,25\n13,37\n14,45\n");
    fr=ParseDataset.parse(parsed,raw);
    GLMParameters params2=new GLMParameters(Family.poisson);
    params2._train=fr._key;
    params2._response_column=fr._names[1];
    params2._lambda=new double[]{0};
    params2._standardize=false;
    params2._beta_epsilon=1e-5;
    model=new GLM(modelKey,"glm test simple poisson",params2).trainModel().get();
    assertEquals(0.3396,model.beta()[1],1e-4);
    assertEquals(0.2565,model.beta()[0],1e-4);
    res=model.score(fr);
    Assert.assertTrue(model.testJavaScoring(fr,res,1e-15));
  }
  finally {
    if (fr != null)     fr.delete();
    if (res != null)     res.delete();
    if (model != null)     model.delete();
  }
}
