def validate_model_parameters(self, algo, training_frame, parameters, timeoutSecs=60, **kwargs):
    assert (algo is not None), 'FAIL: "algo" parameter is null'
    assert (parameters is not None), 'FAIL: "parameters" parameter is null'
    model_builders = self.model_builders(timeoutSecs=timeoutSecs)
    assert (model_builders is not None), 'FAIL: /ModelBuilders REST call failed'
    assert (algo in model_builders['model_builders']), ((('FAIL: algo ' + algo) + ' not found in model_builders list: ') + repr(model_builders))
    builder = model_builders['model_builders'][algo]
    if (training_frame is not None):
        frames = self.frames(key=training_frame)
        assert (frames is not None), 'FAIL: /Frames/{0} REST call failed'.format(training_frame)
        assert (frames['frames'][0]['frame_id']['name'] == training_frame), 'FAIL: /Frames/{0} returned Frame {1} rather than Frame {2}'.format(training_frame, frames['frames'][0]['frame_id']['name'], training_frame)
        parameters['training_frame'] = training_frame
    result = self.__do_json_request((('/3/ModelBuilders/' + algo) + '/parameters'), cmd='post', timeout=timeoutSecs, postData=parameters, ignoreH2oError=True, noExtraErrorCheck=True, raiseIfNon200=False)
    H2O.verboseprint(('model parameters validation: ' + repr(result)))
    return result
