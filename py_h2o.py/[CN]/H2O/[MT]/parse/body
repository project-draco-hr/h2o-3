def parse(self, key, key2=None, timeoutSecs=300, retryDelaySecs=0.2, initialDelaySecs=None, pollTimeoutSecs=180, noise=None, benchmarkLogging=None, noPoll=False, **kwargs):
    if benchmarkLogging:
        cloudPerfH2O.get_log_save(initOnly=True)
    parse_setup_params = {'srcs': (('[' + key) + ']'), }
    setup_result = self.__do_json_request(jsonRequest='ParseSetup.json', timeout=timeoutSecs, params=parse_setup_params)
    H2O.verboseprint('ParseSetup result:', h2o_util.dump_json(setup_result))
    parse_params = {'srcs': (('[' + setup_result['srcs'][0]['name']) + ']'), 'hex': setup_result['hexName'], 'pType': setup_result['pType'], 'sep': setup_result['sep'], 'ncols': setup_result['ncols'], 'checkHeader': setup_result['checkHeader'], 'singleQuotes': setup_result['singleQuotes'], 'columnNames': repr(setup_result['columnNames']), }
    h2o_util.check_params_update_kwargs(parse_params, kwargs, 'parse', print_params=True)
    parse_result = self.__do_json_request(jsonRequest='Parse.json', timeout=timeoutSecs, params=parse_params, **kwargs)
    H2O.verboseprint('Parse result:', h2o_util.dump_json(parse_result))
    job_key = parse_result['job']['name']
    if noPoll:
        return this.jobs(job_key)
    job_json = self.poll_job(job_key, timeoutSecs=timeoutSecs)
    if job_json:
        dest_key = job_json['jobs'][0]['dest']['name']
        return self.frames(dest_key)
    return None
