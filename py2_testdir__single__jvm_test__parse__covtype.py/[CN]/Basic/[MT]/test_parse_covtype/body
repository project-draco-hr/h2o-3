def test_parse_covtype(self):
    tryList = [('covtype.data', 1, 30), ('covtype20x.data', 20, 120)]
    for (csvFilename, multiplyExpected, timeoutSecs) in tryList:
        a_node = h2o.nodes[0]
        importFolderPath = os.path.expanduser('~/home-0xdiag-datasets/standard')
        csvPathname = ((importFolderPath + '/') + csvFilename)
        importResult = a_node.import_files(path=csvPathname)
        hex_key = importResult['keys'][0]
        if CAUSE_FAIL:
            frames_result = a_node.frames(key=k, len=5, timeoutSecs=timeoutSecs)
        parseResult = a_node.parse(key=hex_key, timeoutSecs=timeoutSecs, chunkSize=(4194304 * 4))
        pA = h2o_cmd.ParseObj(parseResult)
        iA = h2o_cmd.InspectObj(pA.parse_key, expectedNumRows=(581012 * multiplyExpected), expectedNumCols=55, expectedMissinglist=[])
        print iA.missingList, iA.labelList, iA.numRows, iA.numCols
        for i in range(0):
            print 'Summary on column', i
            co = h2o_cmd.runSummary(key=hex_key, column=i)
            coList = [co.base, len(co.bins), len(co.data), co.domain, co.label, co.maxs, co.mean, co.mins, co.missing, co.ninfs, co.pctiles, co.pinfs, co.precision, co.sigma, co.str_data, co.stride, co.type, co.zeros]
            for (k, v) in co:
                print k, v
        k = parseResult['frames'][0]['key']['name']
        frames_result = a_node.frames(key=k, len=5)
        parseKeyIndexedCheck(frames_result, multiplyExpected)
