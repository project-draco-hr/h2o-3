def make_random_grid_space(algo, ncols=None, nrows=None):
    '\n    Construct a dictionary of the form {gbm_parameter:list_of_values, ...}, which will eventually be passed to\n    H2OGridSearch to build a grid object. The gbm parameters, and their associated values, are randomly selected.\n    :param algo: a string {"gbm", "rf", "dl", "km", "glm"} representing the algo dimension of the grid space\n    :param ncols: Used for mtries selection or k (pca)\n    :param nrows: Used for k (pca)\n    :return: a dictionary of parameter_name:list_of_values\n    '
    grid_space = {}
    if (algo in ['gbm', 'rf']):
        if random.randint(0, 1):
            grid_space['ntrees'] = random.sample(list(range(1, 6)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['max_depth'] = random.sample(list(range(1, 6)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['min_rows'] = random.sample(list(range(1, 11)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['nbins'] = random.sample(list(range(2, 21)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['nbins_cats'] = random.sample(list(range(2, 1025)), random.randint(2, 3))
        if (algo == 'gbm'):
            if random.randint(0, 1):
                grid_space['learn_rate'] = [random.random() for _ in range(random.randint(2, 3))]
            grid_space['distribution'] = random.sample(['bernoulli', 'multinomial', 'gaussian', 'poisson', 'tweedie', 'gamma'], 1)
        if (algo == 'rf'):
            if random.randint(0, 1):
                grid_space['mtries'] = random.sample(list(range(1, (ncols + 1))), random.randint(2, 3))
            if random.randint(0, 1):
                grid_space['sample_rate'] = [random.random() for r in range(random.randint(2, 3))]
    elif (algo == 'km'):
        grid_space['k'] = random.sample(list(range(1, 10)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['max_iterations'] = random.sample(list(range(1, 1000)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['standardize'] = [True, False]
        if random.randint(0, 1):
            grid_space['seed'] = random.sample(list(range(1, 1000)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['init'] = random.sample(['Random', 'PlusPlus', 'Furthest'], random.randint(2, 3))
    elif (algo == 'glm'):
        if random.randint(0, 1):
            grid_space['alpha'] = [random.random() for r in range(random.randint(2, 3))]
        grid_space['family'] = random.sample(['binomial', 'gaussian', 'poisson', 'tweedie', 'gamma'], 1)
        if (grid_space['family'] == 'tweedie'):
            if random.randint(0, 1):
                grid_space['tweedie_variance_power'] = [round((random.random() + 1), 6) for r in range(random.randint(2, 3))]
                grid_space['tweedie_link_power'] = (1 - grid_space['tweedie_variance_power'])
    elif (algo == 'dl'):
        if random.randint(0, 1):
            grid_space['activation'] = random.sample(['Rectifier', 'Tanh', 'TanhWithDropout', 'RectifierWithDropout', 'MaxoutWithDropout'], random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['l2'] = [(0.001 * random.random()) for r in range(random.randint(2, 3))]
        grid_space['distribution'] = random.sample(['bernoulli', 'multinomial', 'gaussian', 'poisson', 'tweedie', 'gamma'], 1)
        return grid_space
    elif (algo == 'naiveBayes'):
        grid_space['laplace'] = 0
        if random.randint(0, 1):
            grid_space['laplace'] = [round((random.random() + r), 6) for r in random.sample(list(range(0, 11)), random.randint(2, 3))]
        if random.randint(0, 1):
            grid_space['min_sdev'] = [round(random.random(), 6) for r in range(random.randint(2, 3))]
        if random.randint(0, 1):
            grid_space['eps_sdev'] = [round(random.random(), 6) for r in range(random.randint(2, 3))]
    elif (algo == 'pca'):
        if random.randint(0, 1):
            grid_space['max_iterations'] = random.sample(list(range(1, 1000)), random.randint(2, 3))
        if random.randint(0, 1):
            grid_space['transform'] = random.sample(['NONE', 'STANDARDIZE', 'NORMALIZE', 'DEMEAN', 'DESCALE'], random.randint(2, 3))
        grid_space['k'] = random.sample(list(range(1, min(ncols, nrows))), random.randint(2, 3))
    else:
        raise ValueError
    return grid_space
