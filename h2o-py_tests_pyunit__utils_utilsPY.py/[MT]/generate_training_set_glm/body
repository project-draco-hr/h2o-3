def generate_training_set_glm(csv_filename, row_count, col_count, min_p_value, max_p_value, data_type, family_type, noise_std, weight, class_method='probability', class_margin=0.0):
    "\n    Generate supervised data set given weights for the GLM algo.  First randomly generate the predictors, then\n    call function generate_response_glm to generate the corresponding response y using the formula: y = w^T x+b+e\n    where T is transpose, e is a random Gaussian noise added.  For the Binomial family, the relationship between\n    the response Y and predictor vector X is assumed to be Prob(Y = 1|X) = exp(W^T * X + e)/(1+exp(W^T * X + e)).\n    For the Multinomial family, the relationship between the response Y (K possible classes) and predictor vector\n    X is assumed to be Prob(Y = c|X) = exp(Wc^T * X + e)/(sum k=0 to K-1 (ep(Wk^T *X+e)).  The predictors and\n    responses are saved in a file specified by csv_filename.\n\n    :param csv_filename: string representing full path filename to store supervised data set\n    :param row_count: integer representing the number of training samples in the data set\n    :param col_count: integer representing the number of predictors in the data set\n    :param max_p_value: integer representing maximum predictor values\n    :param min_p_value: integer representing minimum predictor values\n    :param data_type: integer representing the type of predictors or weights (1: integers, 2: real)\n    :param family_type: string represents the various distribution families (gaussian, multinomial, binomial) supported\n    by our GLM algo\n    :param noise_std: Gaussian noise standard deviation used to generate noise e to add to response\n    :param weight: vector representing w in our formula to generate the response.\n    :param class_method: string tuple, optional, describing how we derive the final response from the class\n    probabilities generated for binomial and multinomial family-type for training/validation/test data set respectively.\n    If set to 'probability', response y is generated randomly according to the class probabilities calculated.  If set\n    to 'threshold', response y is set to the class with the maximum class probability if the maximum class probability\n    exceeds the second highest class probability by the value set in the margin.  If the maximum class probability fails\n    to be greater by the margin than the second highest class probability, the data sample is discarded.\n    :param class_margin: float tuple, optional, denotes the threshold by how much the maximum class probability has to\n     exceed the second highest class probability in order for us to keep the data sample for\n     training/validation/test data set respectively.  This field is only meaningful if class_method is set to\n    'threshold'\n\n    :return: None\n    "
    if (data_type == 1):
        x_mat = np.random.random_integers(min_p_value, max_p_value, [row_count, col_count])
    elif (data_type == 2):
        x_mat = np.random.uniform(min_p_value, max_p_value, [row_count, col_count])
    else:
        print('dataType must be 1 or 2 for now. ')
        sys.exit(1)
    response_y = generate_response_glm(weight, x_mat, noise_std, family_type, class_method=class_method, class_margin=class_margin)
    if (('multinomial' in family_type.lower()) or ('binomial' in family_type.lower())):
        if ('threshold' in class_method.lower()):
            if np.any((response_y < 0)):
                (x_mat, response_y) = remove_negative_response(x_mat, response_y)
    np.savetxt(csv_filename, np.concatenate((x_mat, response_y), axis=1), delimiter=',')
