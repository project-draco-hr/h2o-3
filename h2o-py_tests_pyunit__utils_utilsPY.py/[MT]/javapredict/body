def javapredict(algo, equality, train, test, x, y, compile_only=False, **kwargs):
    print 'Creating model in H2O'
    if (algo == 'gbm'):
        model = H2OGradientBoostingEstimator(**kwargs)
    elif (algo == 'random_forest'):
        model = H2ORandomForestEstimator(**kwargs)
    elif (algo == 'deeplearning'):
        model = H2ODeepLearningEstimator(**kwargs)
    elif (algo == 'glm'):
        model = H2OGeneralizedLinearEstimator(**kwargs)
    else:
        raise (ValueError, 'algo {0} is not supported'.format(algo))
    model.train(x=x, y=y, training_frame=train)
    print model
    print 'Downloading Java prediction model code from H2O'
    tmpdir = os.path.normpath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..', 'results', model._id))
    os.mkdir(tmpdir)
    h2o.download_pojo(model, path=tmpdir)
    h2o_genmodel_jar = os.path.join(tmpdir, 'h2o-genmodel.jar')
    assert os.path.exists(h2o_genmodel_jar), 'Expected file {0} to exist, but it does not.'.format(h2o_genmodel_jar)
    print 'h2o-genmodel.jar saved in {0}'.format(h2o_genmodel_jar)
    java_file = os.path.join(tmpdir, (model._id + '.java'))
    assert os.path.exists(java_file), 'Expected file {0} to exist, but it does not.'.format(java_file)
    print 'java code saved in {0}'.format(java_file)
    print 'Compiling Java Pojo'
    javac_cmd = ['javac', '-cp', h2o_genmodel_jar, '-J-Xmx12g', '-J-XX:MaxPermSize=256m', java_file]
    subprocess.check_call(javac_cmd)
    if (not compile_only):
        print 'Predicting in H2O'
        predictions = model.predict(test)
        predictions.summary()
        predictions.head()
        out_h2o_csv = os.path.join(tmpdir, 'out_h2o.csv')
        h2o.download_csv(predictions, out_h2o_csv)
        assert os.path.exists(out_h2o_csv), 'Expected file {0} to exist, but it does not.'.format(out_h2o_csv)
        print 'H2O Predictions saved in {0}'.format(out_h2o_csv)
        print 'Setting up for Java POJO'
        in_csv = os.path.join(tmpdir, 'in.csv')
        h2o.download_csv(test[x], in_csv)
        f = open(in_csv, 'r+')
        csv = f.read()
        csv = re.sub('"', '', csv)
        f.seek(0)
        f.write(csv)
        f.truncate()
        f.close()
        assert os.path.exists(in_csv), 'Expected file {0} to exist, but it does not.'.format(in_csv)
        print 'Input CSV to PredictCsv saved in {0}'.format(in_csv)
        print 'Running PredictCsv Java Program'
        out_pojo_csv = os.path.join(tmpdir, 'out_pojo.csv')
        cp_sep = (';' if (sys.platform == 'win32') else ':')
        java_cmd = ['java', '-ea', '-cp', ((h2o_genmodel_jar + cp_sep) + tmpdir), '-Xmx12g', '-XX:MaxPermSize=2g', '-XX:ReservedCodeCacheSize=256m', 'hex.genmodel.tools.PredictCsv', '--header', '--model', model._id, '--input', in_csv, '--output', out_pojo_csv]
        p = subprocess.Popen(java_cmd, stdout=PIPE, stderr=STDOUT)
        (o, e) = p.communicate()
        print 'Java output: {0}'.format(o)
        assert os.path.exists(out_pojo_csv), 'Expected file {0} to exist, but it does not.'.format(out_pojo_csv)
        predictions2 = h2o.upload_file(path=out_pojo_csv)
        print 'Pojo predictions saved in {0}'.format(out_pojo_csv)
        print 'Comparing predictions between H2O and Java POJO'
        (hr, hc) = predictions.dim
        (pr, pc) = predictions2.dim
        assert (hr == pr), 'Expected the same number of rows, but got {0} and {1}'.format(hr, pr)
        assert (hc == pc), 'Expected the same number of cols, but got {0} and {1}'.format(hc, pc)
        for r in range(hr):
            hp = predictions[(r, 0)]
            if (equality == 'numeric'):
                pp = float.fromhex(predictions2[(r, 0)])
                assert (abs((hp - pp)) < 0.0001), 'Expected predictions to be the same (within 1e-4) for row {0}, but got {1} and {2}'.format(r, hp, pp)
            elif (equality == 'class'):
                pp = predictions2[(r, 0)]
                assert (hp == pp), 'Expected predictions to be the same for row {0}, but got {1} and {2}'.format(r, hp, pp)
            else:
                raise (ValueError, 'equality type {0} is not supported'.format(equality))
