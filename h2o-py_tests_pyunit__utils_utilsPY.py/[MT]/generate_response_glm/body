def generate_response_glm(weight, x_mat, noise_std, family_type, class_method='probability', class_margin=0.0):
    "\n    Generate response vector given weight matrix, predictors matrix for the GLM algo.\n\n    :param weight: vector representing w in our formula to generate the response\n    :param x_mat: random numpy matrix (2-D ndarray) containing the predictors\n    :param noise_std: Gaussian noise standard deviation used to generate noise e to add to response\n    :param family_type: string represents the various distribution families (Gaussian, multinomial, binomial)\n    supported by our GLM algo\n    :param class_method: string, optional, describing how we derive the final response from the class probabilities\n    generated for binomial and multinomial familyType.  If set to 'probability', response y is generated randomly\n    according to the class probabilities calculated.  If set to 'threshold', response y is set to the class with the\n    maximum class probability if the maximum class probability exceeds the second highest class probability by the\n    value set in the margin.  If the maximum class probability fails to be greater by margin than the second highest\n    class probability, the data sample is discarded.\n    :param class_margin: float, optional, denotes the threshold by how much the maximum class probability has to exceed\n    the second highest class probability in order for us to keep the data set sample.  This field is only meaningful if\n    class_method is set to 'threshold'\n\n    :return: vector representing the response\n    "
    (num_row, num_col) = x_mat.shape
    temp_ones_col = np.asmatrix(np.ones(num_row)).transpose()
    x_mat = np.concatenate((temp_ones_col, x_mat), axis=1)
    response_y = ((x_mat * weight) + (noise_std * np.random.standard_normal([num_row, 1])))
    if (('multinomial' in family_type.lower()) or ('binomial' in family_type.lower())):
        temp_mat = np.exp(response_y)
        if ('binomial' in family_type.lower()):
            ntemp_mat = (temp_mat + 1)
            btemp_mat = (temp_mat / ntemp_mat)
            temp_mat = np.concatenate(((1 - btemp_mat), btemp_mat), axis=1)
        response_y = derive_discrete_response(temp_mat, class_method, class_margin)
    return response_y
