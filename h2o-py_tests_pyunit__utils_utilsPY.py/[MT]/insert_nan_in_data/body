def insert_nan_in_data(old_filename, new_filename, missing_fraction):
    '\n    Give the filename of a data set stored in old_filename, this function will randomly determine\n    for each predictor to replace its value with nan or not with probability missing_frac.  The\n    new data set will be stored in filename new_filename.\n\n    :param old_filename: string representing full directory path and filename where data set is stored\n    :param new_filename: string representing full directory path and filename where new data set with missing\n        values is to be stored\n    :param missing_fraction: real value representing the probability of replacing a predictor with nan.\n\n\n    :return: None\n    '
    np_frame = np.asmatrix(np.genfromtxt(old_filename, delimiter=',', dtype=None))
    (row_count, col_count) = np_frame.shape
    random_matrix = np.random.uniform(0, 1, [row_count, (col_count - 1)])
    for indr in range(row_count):
        for indc in range((col_count - 1)):
            if (random_matrix[(indr, indc)] < missing_fraction):
                np_frame[(indr, indc)] = np.nan
    np.savetxt(new_filename, np_frame, delimiter=',')
