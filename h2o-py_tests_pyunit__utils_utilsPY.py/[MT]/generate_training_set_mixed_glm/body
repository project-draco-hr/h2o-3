def generate_training_set_mixed_glm(csv_filename, csv_filename_true_one_hot, row_count, col_count, min_p_value, max_p_value, family_type, noise_std, weight, enum_col, enum_level_vec, class_number=2, class_method='probability', class_margin=0.0):
    "\n    Generate supervised data set given weights for the GLM algo with mixed categorical and real value\n    predictors.  First randomly generate the predictors, then call function generate_response_glm to generate the\n    corresponding response y using the formula: y = w^T x+b+e where T is transpose, e is a random Gaussian noise\n    added.  For the Binomial family, the relationship between the response Y and predictor vector X is assumed to\n    be Prob(Y = 1|X) = exp(W^T * X + e)/(1+exp(W^T * X + e)).  For the Multinomial family, the relationship between\n    the response Y (K possible classes) and predictor vector X is assumed to be\n    Prob(Y = c|X) = exp(Wc^T * X + e)/(sum k=0 to K-1 (ep(Wk^T *X+e)) e is the random Gaussian noise added to the\n    response.  The predictors and responses are saved in a file specified by csv_filename.\n\n    :param csv_filename: string representing full path filename to store supervised data set\n    :param csv_filename_true_one_hot: string representing full path filename to store data set with true one-hot\n        encoding.\n    :param row_count: integer representing the number of training samples in the data set\n    :param col_count: integer representing the number of predictors in the data set\n    :param max_p_value: integer representing maximum predictor values\n    :param min_p_value: integer representing minimum predictor values\n    :param family_type: string represents the various distribution families (gaussian, multinomial, binomial)\n    supported by our GLM algo\n    :param noise_std: Gaussian noise standard deviation used to generate noise e to add to response\n    :param weight: vector representing w in our formula to generate the response.\n    :param enum_col: integer representing actual number of categorical columns in data set\n    :param enum_level_vec: vector containing maximum integer value for each categorical column\n    :param class_number: integer, optional, representing number classes for binomial and multinomial\n    :param class_method: string, optional, describing how we derive the final response from the class probabilities\n    generated for binomial and multinomial family_type.  If set to 'probability', response y is generated randomly\n    according to the class probabilities calculated.  If set to 'threshold', response y is set to the class with\n    the maximum class probability if the maximum class probability exceeds the second highest class probability by\n    the value set in margin.  If the maximum class probability fails to be greater by margin than the second highest\n    class probability, the data sample is discarded.\n    :param class_margin: float, optional, denotes the threshold by how much the maximum class probability has to\n    exceed the second highest class probability by in order for us to keep the data set sample.  This field is only\n    meaningful if class_method is set to 'threshold'\n\n    :return: None\n    "
    enum_dataset = np.zeros((row_count, enum_col), dtype=np.int)
    for indc in range(enum_col):
        enum_dataset[:, indc] = np.random.random_integers(0, enum_level_vec[indc], row_count)
    x_mat = np.random.uniform(min_p_value, max_p_value, [row_count, (col_count - enum_col)])
    x_mat = np.concatenate((enum_dataset, x_mat), axis=1)
    if (len(csv_filename_true_one_hot) > 0):
        generate_and_save_mixed_glm(csv_filename_true_one_hot, x_mat, enum_level_vec, enum_col, True, weight, noise_std, family_type, class_method=class_method, class_margin=class_margin)
    if (len(csv_filename) > 0):
        generate_and_save_mixed_glm(csv_filename, x_mat, enum_level_vec, enum_col, False, weight, noise_std, family_type, class_method=class_method, class_margin=class_margin)
