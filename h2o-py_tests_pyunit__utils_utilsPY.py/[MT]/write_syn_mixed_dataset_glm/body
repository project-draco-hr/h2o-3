def write_syn_mixed_dataset_glm(csv_training_data_filename, csv_training_data_filename_true_one_hot, csv_validation_data_filename, csv_validation_filename_true_one_hot, csv_test_data_filename, csv_test_filename_true_one_hot, csv_weight_filename, row_count, col_count, max_p_value, min_p_value, max_w_value, min_w_value, noise_std, family_type, valid_row_count, test_row_count, enum_col, enum_level_vec, class_number=2, class_method=['probability', 'probability', 'probability'], class_margin=[0.0, 0.0, 0.0]):
    "\n    This function differs from write_syn_floating_point_dataset_glm in one small point.  The predictors in this case\n    contains categorical data as well as real data.\n\n    Generate random data sets to test the GLM algo using the following steps:\n    1. randomly generate the intercept and weight vector;\n    2. generate a set of predictors X;\n    3. generate the corresponding response y using the formula: y = w^T x+b+e where T is transpose, e is a random\n     Gaussian noise added.  For the Binomial family, the relationship between the response Y and predictor vector X\n     is assumed to be Prob(Y = 1|X) = exp(W^T * X + e)/(1+exp(W^T * X + e)).  For the Multinomial family, the\n     relationship between the response Y (K possible classes) and predictor vector X is assumed to be\n     Prob(Y = c|X) = exp(Wc^T * X + e)/(sum k=0 to K-1 (ep(Wk^T *X+e))\n\n\n    :param csv_training_data_filename: string representing full path filename to store training data set.  Set to null\n     string if no training data set is to be generated.\n    :param csv_training_data_filename_true_one_hot: string representing full path filename to store training data set\n    with true one-hot encoding.  Set to null string if no training data set is to be generated.\n    :param csv_validation_data_filename: string representing full path filename to store validation data set.  Set to\n     null string if no validation data set is to be generated.\n    :param csv_validation_filename_true_one_hot: string representing full path filename to store validation data set\n     with true one-hot.  Set to null string if no validation data set is to be generated.\n    :param csv_test_data_filename: string representing full path filename to store test data set.  Set to null\n    string if no test data set is to be generated.\n    :param csv_test_filename_true_one_hot: string representing full path filename to store test data set with true\n     one-hot encoding.  Set to null string if no test data set is to be generated.\n    :param csv_weight_filename: string representing full path filename to store intercept and weight used to generate\n     all data sets.\n    :param row_count: integer representing number of samples (predictor, response) in training data set\n    :param col_count: integer representing the number of predictors in the data set\n    :param max_p_value: integer representing maximum predictor values\n    :param min_p_value: integer representing minimum predictor values\n    :param max_w_value: integer representing maximum intercept/weight values\n    :param min_w_value: integer representing minimum intercept/weight values\n    :param noise_std: Gaussian noise standard deviation used to generate noise e to add to response\n    :param family_type: string represents the various distribution families (gaussian, multinomial, binomial) supported\n     by our GLM algo\n    :param valid_row_count: integer representing number of samples (predictor, response) in validation data set\n    :param test_row_count: integer representing number of samples (predictor, response) in test data set\n    :param enum_col: integer representing actual number of categorical columns in data set\n    :param enum_level_vec: vector containing maximum integer value for each categorical column\n    :param class_number: integer, optional, representing number classes for binomial and multinomial\n    :param class_method: string tuple, optional, describing how we derive the final response from the class\n    probabilities generated for binomial and multinomial family_type for training/validation/test data set respectively.\n    If set to 'probability', response y is generated randomly according to the class probabilities calculated.  If set\n    to 'threshold', response y is set to the class with the maximum class probability if the maximum class probability\n    exceeds the second highest class probability by the value set in margin.  If the maximum class probability fails\n    to be greater by margin than the second highest class probability, the data sample is discarded.\n    :param class_margin: float tuple, optional, denotes the threshold by how much the maximum class probability has to\n     exceed the second highest class probability by in order for us to keep the data sample for\n     training/validation/test data set respectively.  This field is only meaningful if class_method is set to\n    'threshold'\n\n    :return: None\n    "
    new_col_count = (((col_count - enum_col) + sum(enum_level_vec)) + enum_level_vec.shape[0])
    weights = generate_weights_glm(csv_weight_filename, new_col_count, 2, min_w_value, max_w_value, family_type=family_type, class_number=class_number)
    if (len(csv_training_data_filename) > 0):
        generate_training_set_mixed_glm(csv_training_data_filename, csv_training_data_filename_true_one_hot, row_count, col_count, min_p_value, max_p_value, family_type, noise_std, weights, enum_col, enum_level_vec, class_number=class_number, class_method=class_method[0], class_margin=class_margin[0])
    if (len(csv_validation_data_filename) > 0):
        generate_training_set_mixed_glm(csv_validation_data_filename, csv_validation_filename_true_one_hot, valid_row_count, col_count, min_p_value, max_p_value, family_type, noise_std, weights, enum_col, enum_level_vec, class_number=class_number, class_method=class_method[1], class_margin=class_margin[1])
    if (len(csv_test_data_filename) > 0):
        generate_training_set_mixed_glm(csv_test_data_filename, csv_test_filename_true_one_hot, test_row_count, col_count, min_p_value, max_p_value, family_type, noise_std, weights, enum_col, enum_level_vec, class_number=class_number, class_method=class_method[2], class_margin=class_margin[2])
