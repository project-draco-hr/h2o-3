def extract_comparison_attributes_and_print(model_h2o, h2o_model_test_metrics, end_test_str, want_p_values, attr1_bool, attr2_bool, att1_template, att2_template, att3_template, att4_template, compare_att1_str, h2o_att1_str, template_att1_str, att1_str_fail, att1_str_success, compare_att2_str, h2o_att2_str, template_att2_str, att2_str_fail, att2_str_success, compare_att3_str, h2o_att3_str, template_att3_str, att3_str_fail, att3_str_success, compare_att4_str, h2o_att4_str, template_att4_str, att4_str_fail, att4_str_success, failed_test_number, ignored_eps, allowed_diff, noise_var, template_must_be_better, attr3_bool=True, attr4_bool=True):
    '\n    This function basically will compare four attributes (weight, p-values, training data MSE, test data MSE) of a test\n    with a template model.  If the difference of comparison exceeds a certain threshold, the test will be determined as\n    failed and vice versa.  There are times when we do not care about p-values and/or weight comparisons but mainly\n    concerned with MSEs.  We can set the input parameters to indicate if this is the case.\n\n    :param model_h2o:  H2O model that we want to evaluate\n    :param h2o_model_test_metrics: test performance of H2O model under evaluation\n    :param end_test_str: string representing end test banner to be printed\n    :param want_p_values: bool True if we want to care about p-values and False if we don\'t\n    :param attr1_bool: bool True if we want to compare weight difference between H2O model and template model\n        and False otherwise.\n    :param attr2_bool: bool True if we want to compare p-value difference between H2O model and template model\n        and False otherwise.\n    :param att1_template: value of first template attribute, the weight vector\n    :param att2_template: value of second template attribute, the p-value vector\n    :param att3_template: value of third template attribute, the training data set MSE\n    :param att4_template: value of fourth template attribute, the test data set MSE\n    :param compare_att1_str: string describing the comparison of first attribute, e.g. "Comparing intercept and\n    weights ...."\n    :param h2o_att1_str: string describing H2O model first attribute values, e.g. "H2O intercept and weights: "\n    :param template_att1_str: string describing template first attribute values, e.g. "Theoretical intercept and\n    weights: "\n    :param att1_str_fail: string describing message to print out if difference exceeds threshold, e.g.\n    "Intercept and weights are not equal!"\n    :param att1_str_success: string describing message to print out if difference < threshold, e.g.\n    "Intercept and weights are close enough!"\n    :param compare_att2_str: string describing the comparison of first attribute, e.g. "Comparing p-values ...."\n    :param h2o_att2_str: string describing H2O model first attribute values, e.g. "H2O p-values: "\n    :param template_att2_str: string describing template first attribute values, e.g. "Theoretical p-values: "\n    :param att2_str_fail: string describing message to print out if difference exceeds threshold, e.g.\n    "P-values are not equal!"\n    :param att2_str_success: string describing message to print out if difference < threshold, e.g.\n    "P-values are close enough!"\n    :param compare_att3_str: string describing the comparison of first attribute, e.g. "Comparing training MSEs ...."\n    :param h2o_att3_str: string describing H2O model first attribute values, e.g. "H2O training MSE: "\n    :param template_att3_str: string describing template first attribute values, e.g. "Theoretical train MSE: "\n    :param att3_str_fail: string describing message to print out if difference exceeds threshold, e.g.\n    "Training MSEs are not equal!"\n    :param att3_str_success: string describing message to print out if difference < threshold, e.g.\n    "Training MSEs are close enough!"\n    :param compare_att4_str: string describing the comparison of first attribute, e.g. "Comparing test MSEs ...."\n    :param h2o_att4_str: string describing H2O model first attribute values, e.g. "H2O test MSE: "\n    :param template_att4_str: string describing template first attribute values, e.g. "Theoretical test MSE: "\n    :param att4_str_fail: string describing message to print out if difference exceeds threshold, e.g.\n    "Test MSEs are not equal!"\n    :param att4_str_success: string describing message to print out if difference < threshold, e.g.\n    "Test MSEs are close enough!"\n    :param failed_test_number: integer denote the number of tests failed\n    :param ignored_eps: if value < than this value, no comparison is performed\n    :param allowed_diff: threshold if exceeded will fail a test\n    :param noise_var: Gaussian noise variance used to generate data set\n    :param template_must_be_better: bool: True: template value must be lower, False: don\'t care\n    :param attr3_bool: bool denoting if we should compare attribute 3 values\n    :param attr4_bool: bool denoting if we should compare attribute 4 values\n\n\n    :return: a tuple containing test h2o model training and test performance metrics that include: weight, pValues,\n    mse_train, r2_train, mse_test, r2_test\n    '
    test1_weight = get_train_glm_params(model_h2o, 'weights')
    test1_p_values = []
    if want_p_values:
        test1_p_values = get_train_glm_params(model_h2o, 'p-values')
    test1_mse_train = model_h2o.mse()
    test1_r2_train = model_h2o.r2()
    test1_mse_test = h2o_model_test_metrics.mse()
    test1_r2_test = h2o_model_test_metrics.r2()
    failed_test_number += compare_two_arrays(test1_weight, att1_template, ignored_eps, (allowed_diff * 100), compare_att1_str, h2o_att1_str, template_att1_str, att1_str_fail, att1_str_success, attr1_bool)
    if want_p_values:
        if np.isnan(np.asarray(test1_p_values)).any():
            failed_test_number += 1
        failed_test_number += compare_two_arrays(test1_p_values, att2_template, ignored_eps, allowed_diff, compare_att2_str, h2o_att2_str, template_att2_str, att2_str_fail, att2_str_success, attr2_bool)
    need_to_compare = less_than(att3_template, test1_mse_train)
    if ((not need_to_compare) and template_must_be_better):
        failed_test_number += 1
    failed_test_number += compare_two_arrays([test1_mse_train], [att3_template], ignored_eps, noise_var, compare_att3_str, h2o_att3_str, template_att3_str, att3_str_fail, att3_str_success, attr3_bool)
    need_to_compare = less_than(att4_template, test1_mse_test)
    failed_test_number += compare_two_arrays([test1_mse_test], [att4_template], ignored_eps, noise_var, compare_att4_str, h2o_att4_str, template_att4_str, att4_str_fail, att4_str_success, need_to_compare, attr4_bool)
    print(end_test_str)
    print('*******************************************************************************************')
    sys.stdout.flush()
    return (test1_weight, test1_p_values, test1_mse_train, test1_r2_train, test1_mse_test, test1_r2_test, failed_test_number)
