def generate_redundant_parameters(hyper_params, gridable_parameters, gridable_defaults, error_number):
    '\n    This function will randomly choose a set of hyper_params and make a dict out of it so we can\n    duplicate the parameter specification in both the model and grid search.\n\n    :param hyper_params: dict containing all griddable parameters as hyper_param to grid search\n    :param gridable_parameters: list of gridable parameters (not truly)\n    :param gridable_defaults: list of default values for gridable parameters\n    :param error_number: int, indicate ways to change the model parameter and the hyper-parameter\n\n    Here are the actions performed on the model parameter and hyper-parameters.\n    error_number = 0: set model parameter to be  a value out of the hyper-parameter value list, should not\n    generate error;\n    error_number = 1: set model parameter to be default value, should not generate error in this case;\n    error_number = 3: make sure model parameter is not set to default and choose a value not in the\n    hyper-parameter value list.\n\n    :return: 2 dicts containing duplicated parameters with specification, new hyperparameter specification\n    '
    error_hyper_params = copy.deepcopy(hyper_params)
    params_dict = {}
    num_params = random.randint(1, len(error_hyper_params))
    params_list = list(error_hyper_params)
    for key in params_list:
        default_value = gridable_defaults[gridable_parameters.index(key)]
        if (default_value in error_hyper_params[key]):
            error_hyper_params[key].remove(default_value)
    for index in range(num_params):
        param_name = params_list[index]
        hyper_params_len = len(error_hyper_params[param_name])
        if (error_number == 0):
            param_value_index = random.randint(0, (len(error_hyper_params[param_name]) - 1))
            params_dict[param_name] = error_hyper_params[param_name][param_value_index]
        elif (error_number == 1):
            param_value_index = gridable_parameters.index(param_name)
            params_dict[param_name] = gridable_defaults[param_value_index]
        else:
            param_value_index = random.randint(0, (hyper_params_len - 1))
            params_dict[param_name] = error_hyper_params[param_name][param_value_index]
    if ('lambda' in list(params_dict)):
        params_dict['Lambda'] = params_dict['lambda']
        del params_dict['lambda']
    return (params_dict, error_hyper_params)
