{
  Family f=null;
  if (gaussian.equals("x")) {
    f=Family.gaussian;
  }
 else   if (binomial.equals("x")) {
    f=Family.binomial;
  }
 else   if (poisson.equals("x")) {
    f=Family.poisson;
  }
 else   if (gamma.equals("x")) {
    f=Family.gamma;
  }
  GLMParameters params=null != f ? new GLMParameters(f) : new GLMParameters();
  if (irlsm.equals("x")) {
    params._solver=Solver.IRLSM;
  }
 else   if (lbfgs.equals("x")) {
    params._solver=Solver.L_BFGS;
  }
  params._lambda=lambda.equals("") ? null : new double[]{Double.parseDouble(lambda)};
  params._alpha=alpha.equals("") ? null : new double[]{Double.parseDouble(alpha)};
  params._standardize=standardize.equals("x");
  params._lambda_search=lambdaSearch.equals("x");
switch (train_dataset_filename) {
case "airquality_train1.csv":
    params._train=_airquality_train1._key;
  params._valid=_airquality_validation1._key;
params._response_column="Ozone";
break;
case "airquality_train2.csv":
params._train=_airquality_train2._key;
params._valid=_airquality_validation2._key;
params._response_column="Ozone";
break;
case "insurance_train1.csv":
params._train=_insurance_train1._key;
params._valid=_insurance_validation1._key;
params._response_column="Claims";
break;
case "iris_train1.csv":
params._train=_iris_train1._key;
params._valid=_iris_validation1._key;
params._response_column="Species";
break;
}
GLM job=null;
GLMModel model=null;
Frame score=null;
try {
Scope.enter();
if (train_dataset_filename.equals("airquality_train1.csv")) {
job=new GLM(Key.make("model"),"basic glm test",params);
model=job.trainModel().get();
if (gaussian.equals("x")) {
assertTrue(model._output._validation_metrics._MSE >= 0.0,"Expected mse to be greater than 0.0");
}
 else if (binomial.equals("x")) {
assertTrue(model._output._validation_metrics.auc()._auc >= 0.0,"Expected mse to be greater than 0.0");
}
}
}
  finally {
if (model != null) model.delete();
if (job != null) job.remove();
Scope.exit();
}
}
