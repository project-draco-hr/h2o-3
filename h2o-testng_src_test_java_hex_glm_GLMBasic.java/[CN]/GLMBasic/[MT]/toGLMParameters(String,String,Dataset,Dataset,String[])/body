{
  System.out.println("Create GLMParameter object");
  GLMParameters glmParams=new GLMParameters();
  Family f=(Family)familyOptionsParams.getValue(rawInput,tcHeaders);
  Solver s=(Solver)solverOptionsParams.getValue(rawInput,tcHeaders);
  if (f != null) {
    System.out.println("Set _family: " + f);
    glmParams._family=f;
  }
  if (s != null) {
    System.out.println("Set _solver: " + s);
    glmParams._solver=s;
  }
  for (  Param p : params) {
    if (p.isAutoSet) {
      p.parseAndSet(glmParams,rawInput[tcHeaders.indexOf(p.name)]);
    }
  }
  Frame trainFrame=null;
  Frame validateFrame=null;
  try {
    System.out.println("Create train frame: " + trainDatasetId);
    trainFrame=trainDataset.getFrame();
    if (StringUtils.isNotEmpty(validateDatasetId) && validateDataset != null && validateDataset.isAvailabel()) {
      System.out.println("Create validate frame: " + validateDatasetId);
      validateFrame=validateDataset.getFrame();
    }
  }
 catch (  Exception e) {
    if (trainFrame != null) {
      trainFrame.remove();
    }
    if (validateFrame != null) {
      validateFrame.remove();
    }
    throw e;
  }
  System.out.println("Set train frame");
  glmParams._train=trainFrame._key;
  if (validateFrame != null) {
    System.out.println("Set validate frame");
    glmParams._valid=validateFrame._key;
  }
  Frame betaConstraints=null;
  boolean isBetaConstraints=Param.parseBoolean(rawInput[tcHeaders.indexOf("betaConstraints")]);
  String lowerBound=rawInput[tcHeaders.indexOf("lowerBound")];
  String upperBound=rawInput[tcHeaders.indexOf("upperBound")];
  if (isBetaConstraints) {
    String betaConstraintsString="names, lower_bounds, upper_bounds\n";
    List<String> predictorNames=Arrays.asList(trainFrame._names);
    for (    String name : predictorNames) {
      if (!name.equals(glmParams._response_column)) {
        if (trainFrame.vec(name).isEnum()) {
          for (          String level : trainFrame.vec(name).domain()) {
            betaConstraintsString+=String.format("%s.%s,%s,%s\n",name,level,lowerBound,upperBound);
          }
        }
 else {
          betaConstraintsString+=String.format("%s,%s,%s\n",name,lowerBound,upperBound);
        }
      }
    }
    Key betaConsKey=Key.make("beta_constraints");
    FVecTest.makeByteVec(betaConsKey,betaConstraintsString);
    betaConstraints=ParseDataset.parse(Key.make("beta_constraints.hex"),betaConsKey);
    glmParams._beta_constraints=betaConstraints._key;
  }
  return glmParams;
}
