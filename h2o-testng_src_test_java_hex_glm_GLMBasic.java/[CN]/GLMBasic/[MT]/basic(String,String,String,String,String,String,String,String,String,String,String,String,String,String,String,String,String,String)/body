{
  Family f=null;
  if (gaussian.equals("x")) {
    f=Family.gaussian;
  }
 else   if (binomial.equals("x")) {
    f=Family.binomial;
  }
 else   if (poissan.equals("x")) {
    f=Family.poisson;
  }
 else   if (gamma.equals("x")) {
    f=Family.gamma;
  }
  Solver s=Solver.L_BFGS;
  if (irlsm.equals("x")) {
    s=Solver.IRLSM;
  }
  double[] a=alpha.equals("") ? null : new double[]{Double.parseDouble(alpha)};
  double[] l=lambda.equals("") ? null : new double[]{Double.parseDouble(lambda)};
  boolean ls=lambdaSearch.equals("x");
  boolean std=standardize.equals("x");
  boolean bc=betaConstraints.equals("x");
  boolean uafl=useAllFactorLevels.equals("x");
  GLM job=null;
  GLMModel model=null;
  Frame score=null;
  try {
    Scope.enter();
    GLMParameters params=null != f ? new GLMParameters(f) : new GLMParameters();
    params._response_column="Ozone";
    params._train=_airquality._key;
    params._lambda=l;
    params._alpha=a;
    params._standardize=std;
    params._lambda_search=ls;
    params._use_all_factor_levels=uafl;
    params._solver=s;
    if (gaussian.equals("x") && dataset.equals("airquality.csv")) {
      job=new GLM(Key.make("model"),"basic glm test",params);
      model=job.trainModel().get();
      model.delete();
      if (dataset.equals("airquality.csv")) {
        score=model.score(_airquality);
      }
 else       if (dataset.equals("insurance.csv")) {
        score=model.score(_insurance);
      }
      hex.ModelMetricsRegression mm=hex.ModelMetricsRegression.getFromDKV(model,_airquality);
      double mse=mm._MSE;
      System.out.println(mse);
      assertTrue(mse >= 0.0,"Expected mse to be greater than 0.0");
    }
  }
  finally {
    if (model != null)     model.delete();
    if (score != null)     score.delete();
    if (job != null)     job.remove();
    Scope.exit();
  }
}
