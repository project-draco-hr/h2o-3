{
  Family f=null;
  if (gaussian.equals("x")) {
    f=Family.gaussian;
  }
 else   if (binomial.equals("x")) {
    f=Family.binomial;
  }
 else   if (poissan.equals("x")) {
    f=Family.poisson;
  }
 else   if (gamma.equals("x")) {
    f=Family.gamma;
  }
  GLMParameters params=null != f ? new GLMParameters(f) : new GLMParameters();
  if (irlsm.equals("x")) {
    params._solver=Solver.IRLSM;
  }
 else   if (lbfgs.equals("x")) {
    params._solver=Solver.L_BFGS;
  }
  params._lambda=lambda.equals("") ? null : new double[]{Double.parseDouble(lambda)};
  params._alpha=alpha.equals("") ? null : new double[]{Double.parseDouble(alpha)};
  params._standardize=standardize.equals("x");
  params._lambda_search=lambdaSearch.equals("x");
  params._use_all_factor_levels=useAllFactorLevels.equals("x");
switch (dataset) {
case "airquality.csv":
    params._train=_airquality._key;
  break;
case "insurance.csv":
params._train=_insurance._key;
break;
}
params._response_column="Ozone";
GLM job=null;
GLMModel model=null;
Frame score=null;
try {
Scope.enter();
if (gaussian.equals("x") && dataset.equals("airquality.csv")) {
job=new GLM(params,Key.<GLMModel>make("model"));
model=job.trainModel().get();
score=model.score(_airquality);
hex.ModelMetricsRegression mm=hex.ModelMetricsRegression.getFromDKV(model,_airquality);
double mse=mm._MSE;
System.out.println(mse);
assertTrue(mse >= 0.0,"Expected mse to be greater than 0.0");
}
}
  finally {
if (model != null) model.delete();
if (score != null) score.delete();
Scope.exit();
}
}
