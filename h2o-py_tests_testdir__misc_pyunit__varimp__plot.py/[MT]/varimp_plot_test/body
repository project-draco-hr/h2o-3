def varimp_plot_test():
    kwargs = {}
    kwargs['server'] = True
    cars = h2o.import_file(pyunit_utils.locate('smalldata/junit/cars_20mpg.csv'))
    s = cars[0].runif()
    cars_train = cars[(s <= 0.8)]
    cars_valid = cars[(s > 0.8)]
    predictors = ['displacement', 'power', 'weight', 'acceleration', 'year']
    response_col = 'economy_20mpg'
    cars[response_col] = cars[response_col].asfactor()
    cars_rf = H2ORandomForestEstimator()
    cars_rf.train(x=predictors, y=response_col, training_frame=cars_train, validation_frame=cars_valid)
    cars_rf.varimp_plot(server=True)
    cars_rf.varimp_plot(num_of_features=2, server=True)
    cars_gbm = H2OGradientBoostingEstimator()
    cars_gbm.train(x=predictors, y=response_col, training_frame=cars_train, validation_frame=cars_valid)
    cars_gbm.varimp_plot(server=True)
    cars_gbm.varimp_plot(num_of_features=2, server=True)
    cars_dl = H2ODeepLearningEstimator(variable_importances=True)
    cars_dl.train(x=predictors, y=response_col, training_frame=cars_train, validation_frame=cars_valid)
    cars_dl.varimp_plot(server=True)
    cars_dl.varimp_plot(num_of_features=2, server=True)
    cars_glm = H2OGeneralizedLinearEstimator()
    cars_glm.train(x=predictors, y=response_col, training_frame=cars_train, validation_frame=cars_valid)
    cars_glm.varimp_plot(server=True)
    cars_glm.varimp_plot(num_of_features=2, server=True)
