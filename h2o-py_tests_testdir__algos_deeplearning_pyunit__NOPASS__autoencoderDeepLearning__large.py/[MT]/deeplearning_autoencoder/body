def deeplearning_autoencoder(ip, port):
    h2o.init(ip, port)
    resp = 784
    nfeatures = 20
    train_hex = h2o.import_frame(h2o.locate('bigdata/laptop/mnist/train.csv.gz'))
    test_hex = h2o.import_frame(h2o.locate('bigdata/laptop/mnist/test.csv.gz'))
    sid = train_hex[1].runif(1234)
    train_unsupervised = train_hex[(sid >= 0.5)]
    train_unsupervised.describe()
    train_supervised = train_hex[(sid < 0.5)]
    train_supervised.describe()
    ae_model = h2o.deeplearning(x=train_unsupervised.drop(resp), y=train_unsupervised[resp], activation='Tanh', autoencoder=True, hidden=[nfeatures], epochs=1, reproducible=True, seed=1234)
    train_supervised_features = ae_model.deepfeatures(train_supervised, 0)
    train_supervised_features.describe()
    assert (train_supervised_features.ncol() == nfeatures), 'Dimensionality of reconstruction is wrong!'
    drf_model = h2o.random_forest(x=train_supervised_features, y=train_supervised[resp].asfactor(), ntrees=10, seed=1234)
    test_features = ae_model.deepfeatures(test_hex.drop(resp), 0)
    test_features.cbind(test_hex[resp])
    cm = drf_model.confusion_matrix(test_features)
    cm.show()
    assert (abs((cm[('Totals', 'Error')] - 0.1038)) < 0.001), 'Error not as expected'
