{
  int sz=H2O.CLOUD.size();
  Vec vec=Vec.makeZero((sz + 1) * FileVec.DFLT_CHUNK_SIZE + 1);
  try {
    for (int i=0; i < H2O.CLOUD._memary.length; ++i) {
      final ByteHistoThrow bh=new ByteHistoThrow(H2O.CLOUD._memary[i]);
      final boolean[] ok=new boolean[]{false};
      try {
        bh.setCompleter(new CountedCompleter(){
          @Override public void compute(){
            tryComplete();
          }
          @Override public boolean onExceptionalCompletion(          Throwable ex,          CountedCompleter cc){
            ok[0]=ex.getMessage().contains("test");
            return super.onExceptionalCompletion(ex,cc);
          }
        }
);
        bh.dfork(vec);
        int MAX_CNT=50;
        while (!ok[0] && MAX_CNT-- > 0) {
          Thread.sleep(100);
        }
      }
 catch (      DException.DistributedException e) {
        assertTrue(e.getMessage().contains("test"));
      }
catch (      java.lang.AssertionError ae) {
        throw ae;
      }
catch (      Throwable ex) {
        ex.printStackTrace();
        fail("Unexpected exception" + ex.toString());
      }
    }
  }
  finally {
    if (vec != null)     vec.remove();
  }
}
