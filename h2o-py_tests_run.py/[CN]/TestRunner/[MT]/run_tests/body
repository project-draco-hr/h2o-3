def run_tests(self):
    '\n        Run all tests.\n\n        @return: none\n        '
    if self.terminated:
        return
    num_tests = len(self.tests)
    num_nodes = (self.num_clouds * self.nodes_per_cloud)
    self._log('')
    if self.use_cloud:
        self._log('Starting {} tests...'.format(num_tests))
    elif self.use_cloud2:
        self._log('Starting {} tests on {} clouds...'.format(num_tests, len(self.clouds)))
    else:
        self._log('Starting {} tests on {} clouds with {} total H2O nodes...'.format(num_tests, self.num_clouds, num_nodes))
    self._log('')
    start_count = min(len(self.tests_not_started), len(self.clouds), 30)
    if g_use_cloud2:
        start_count = min(start_count, 75)
    for i in range(start_count):
        cloud = self.clouds[i]
        ip = cloud.get_ip()
        port = cloud.get_port()
        self._start_next_test_on_ip_port(ip, port)
    while (len(self.tests_not_started) > 0):
        if self.terminated:
            return
        completed_test = self._wait_for_one_test_to_complete()
        if self.terminated:
            return
        self._report_test_result(completed_test)
        ip_of_completed_test = completed_test.get_ip()
        port_of_completed_test = completed_test.get_port()
        self._start_next_test_on_ip_port(ip_of_completed_test, port_of_completed_test)
    while (len(self.tests_running) > 0):
        if self.terminated:
            return
        completed_test = self._wait_for_one_test_to_complete()
        if self.terminated:
            return
        self._report_test_result(completed_test)
