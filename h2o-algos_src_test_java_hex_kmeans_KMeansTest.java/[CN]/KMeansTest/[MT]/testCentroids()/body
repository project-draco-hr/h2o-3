{
  Frame fr=ArrayUtils.frame(ard(d(1,0,0),d(0,1,0),d(0,0,1)));
  Frame fr2=null;
  try {
    KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
    parms._train=fr._key;
    parms._k=3;
    parms._standardize=true;
    parms._max_iterations=100;
    parms._init=KMeans.Initialization.Random;
    double[][] exp1=new double[][]{d(1,0,0),d(0,1,0),d(0,0,1)};
    double[][] exp2=new double[][]{d(0,1,0),d(1,0,0),d(0,0,1)};
    double[][] exp3=new double[][]{d(0,1,0),d(0,0,1),d(1,0,0)};
    double[][] exp4=new double[][]{d(1,0,0),d(0,0,1),d(0,1,0)};
    double[][] exp5=new double[][]{d(0,0,1),d(1,0,0),d(0,1,0)};
    double[][] exp6=new double[][]{d(0,0,1),d(0,1,0),d(1,0,0)};
    for (int i=0; i < 10; i++) {
      KMeansModel kmm=doSeed(parms,System.nanoTime());
      Assert.assertTrue(kmm._output._centers_raw.length == 3);
      fr2=kmm.score(fr);
      Assert.assertTrue(kmm.testJavaScoring(fr,fr2,1e-15));
      fr2.delete();
      boolean gotit=false;
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp1[j],kmm._output._centers_raw[j]);
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp2[j],kmm._output._centers_raw[j]);
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp3[j],kmm._output._centers_raw[j]);
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp4[j],kmm._output._centers_raw[j]);
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp5[j],kmm._output._centers_raw[j]);
      for (int j=0; j < parms._k; ++j)       gotit|=close(exp6[j],kmm._output._centers_raw[j]);
      Assert.assertTrue(gotit);
      kmm.delete();
    }
  }
  finally {
    if (fr != null)     fr.delete();
  }
}
