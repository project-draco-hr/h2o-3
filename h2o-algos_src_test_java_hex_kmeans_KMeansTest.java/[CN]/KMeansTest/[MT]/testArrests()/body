{
  Frame init=ArrayUtils.frame(ard(ard(13.2,236,58,21.2),ard(10.0,263,48,44.5),ard(8.1,294,80,31.0),ard(8.8,190,50,19.5)));
  double totssR=355807.8216;
  double btwssR=318155.162076;
  double[] wssR=new double[]{2546.350000,6705.906667,9136.642857,19263.760000};
  double[][] centersR=ard(ard(4.270000,87.550000,59.750000,14.390000),ard(8.214286,173.285714,70.642857,22.842857),ard(11.766667,257.916667,68.416667,28.933333),ard(11.950000,316.500000,68.000000,26.700000));
  Frame predR=ArrayUtils.frame(ar("predict"),ear(1,1,2,0,1,0,3,1,2,0,3,3,1,3,3,3,3,1,3,2,0,1,3,1,0,3,3,1,3,0,1,1,2,3,3,0,0,3,0,1,3,0,0,3,3,0,0,3,3,0));
  KMeansModel kmm=null;
  Frame fr=null, fr2=null;
  try {
    fr=parse_test_file("smalldata/pca_test/USArrests.csv");
    KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
    parms._train=fr._key;
    parms._k=4;
    parms._standardize=false;
    parms._init=KMeans.Initialization.User;
    parms._user_points=init._key;
    kmm=doSeed(parms,0);
    double[][] centers=new double[parms._k][];
    for (int i=0; i < parms._k; i++)     centers[i]=kmm._output._centers_raw[i].clone();
    Arrays.sort(centers,new Comparator<double[]>(){
      @Override public int compare(      final double[] a,      final double[] b){
        Double d1=a[0];
        Double d2=b[0];
        return d1.compareTo(d2);
      }
    }
);
    for (int i=0; i < centers.length; i++)     assertArrayEquals(centersR[i],centers[i],threshold);
    Arrays.sort(kmm._output._withinss);
    assertArrayEquals(wssR,kmm._output._withinss,threshold);
    assertEquals(totssR,kmm._output._totss,threshold);
    assertEquals(btwssR,kmm._output._betweenss,threshold);
    fr2=kmm.score(fr);
    Assert.assertTrue(kmm.testJavaScoring(fr,fr2,1e-15));
    assertVecEquals(predR.vec(0),fr2.vec(0),threshold);
    fr2.delete();
  }
  finally {
    init.delete();
    predR.delete();
    if (fr != null)     fr.delete();
    if (fr2 != null)     fr2.delete();
    if (kmm != null)     kmm.delete();
  }
}
