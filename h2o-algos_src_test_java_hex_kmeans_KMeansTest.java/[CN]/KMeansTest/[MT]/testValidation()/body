{
  KMeansModel kmm=null;
  for (  boolean standardize : new boolean[]{true,false}) {
    Frame fr=null, fr2=null;
    Frame tr=null, te=null;
    try {
      fr=parse_test_file("smalldata/iris/iris_wheader.csv");
      SplitFrame sf=new SplitFrame();
      sf.dataset=fr;
      sf.ratios=new double[]{0.5,0.5};
      sf.destination_frames=new Key[]{Key.make("train.hex"),Key.make("test.hex")};
      sf.exec().get();
      Key<Frame>[] ksplits=sf.destination_frames;
      tr=DKV.get(ksplits[0]).get();
      te=DKV.get(ksplits[1]).get();
      KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
      parms._train=ksplits[0];
      parms._valid=ksplits[1];
      parms._k=3;
      parms._standardize=standardize;
      parms._max_iterations=10;
      parms._init=KMeans.Initialization.Random;
      kmm=doSeed(parms,0);
      double[][] centers=kmm._output._centers_raw;
      for (int k=0; k < parms._k; k++) {
        double flower=centers[k][4];
        Assert.assertTrue("categorical column expected",flower == (int)flower);
      }
      fr2=kmm.score(te);
      Assert.assertTrue(kmm.testJavaScoring(te,fr2,1e-15));
      fr2.delete();
      tr.delete();
      te.delete();
    }
  finally {
      if (fr != null)       fr.delete();
      if (fr2 != null)       fr2.delete();
      if (tr != null)       tr.delete();
      if (te != null)       te.delete();
      if (kmm != null)       kmm.delete();
    }
  }
}
