{
  if (false) {
    KMeansModel.KMeansParameters parms=kmm._parms;
    Assert.assertTrue((ArrayUtils.sum(kmm._output._size) - parms.train().numRows()) <= 1);
    kmm.score(parms.train()).delete();
    ModelMetricsClustering mm=(ModelMetricsClustering)ModelMetrics.getFromDKV(kmm,parms.train());
    Assert.assertTrue(Arrays.equals(mm._size,((ModelMetricsClustering)kmm._output._training_metrics)._size));
    for (int i=0; i < parms._k; ++i) {
      Assert.assertTrue(MathUtils.compare(mm._withinss[i],((ModelMetricsClustering)kmm._output._training_metrics)._withinss[i],1e-6,1e-6));
    }
    Assert.assertTrue(MathUtils.compare(mm._totss,((ModelMetricsClustering)kmm._output._training_metrics)._totss,1e-6,1e-6));
    Assert.assertTrue(MathUtils.compare(mm._betweenss,((ModelMetricsClustering)kmm._output._training_metrics)._betweenss,1e-6,1e-6));
    Assert.assertTrue(MathUtils.compare(mm._tot_withinss,((ModelMetricsClustering)kmm._output._training_metrics)._tot_withinss,1e-6,1e-6));
  }
}
