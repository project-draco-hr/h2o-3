{
  KMeansModel kmm=null;
  KMeansModel kmm2=null;
  Frame fr=null;
  try {
    fr=parse_test_file("smalldata/junit/weather.csv");
    KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
    parms._train=fr._key;
    parms._ignored_columns=new String[]{"Date"};
    parms._k=100;
    parms._max_iterations=20;
    parms._standardize=true;
    parms._estimate_k=true;
    kmm=doSeed(parms,0);
    for (int i=0; i < kmm._output._centers_raw.length; ++i) {
      Log.info(Arrays.toString(kmm._output._centers_raw[i]));
    }
    Assert.assertEquals("expected 4 centroids",4,kmm._output._k[kmm._output._k.length - 1]);
    double auto=kmm._output._tot_withinss;
    parms._estimate_k=false;
    parms._k=kmm._output._k[kmm._output._k.length - 1];
    Random rnd=RandomUtils.getRNG(1234);
    double manual=0;
    double N=10;
    for (int i=0; i < N; ++i) {
      kmm2=doSeed(parms,rnd.nextLong());
      manual+=kmm2._output._tot_withinss;
      Assert.assertEquals("expected 4 centroids",4,kmm2._output._k[kmm2._output._k.length - 1]);
      kmm2.remove();
    }
    manual/=N;
    Log.info("estimate_k tot_within_ss: " + auto);
    Log.info("manual k=4 tot_within_ss (mean over " + N + " trials): "+ manual);
    Assert.assertTrue("estimate_k solution must be better than manual",auto < manual);
  }
  finally {
    if (fr != null)     fr.remove();
    if (kmm != null)     kmm.remove();
  }
}
