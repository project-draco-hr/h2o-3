{
  for (  boolean categorical : new boolean[]{true,false}) {
    for (    boolean missing : new boolean[]{false}) {
      for (      boolean standardize : new boolean[]{false}) {
        Log.info("categorical: " + categorical);
        Log.info("missing: " + missing);
        Log.info("standardize: " + standardize);
        KMeansModel kmm=null;
        Frame fr=null, fr2=null;
        Frame train=null, valid=null;
        try {
          fr=parse_test_file("smalldata/iris/iris_wheader.csv");
          if (missing) {
            FrameUtils.MissingInserter mi=new FrameUtils.MissingInserter(fr._key,1234,0.1f);
            mi.execImpl();
            fr=mi.get();
            mi.remove();
          }
          train=new Frame(Key.make("train"),fr.names(),fr.vecs());
          DKV.put(train);
          valid=new Frame(Key.make("valid"),fr.names(),fr.vecs());
          DKV.put(valid);
          KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
          parms._train=train._key;
          parms._valid=valid._key;
          if (!categorical) {
            parms._ignored_columns=new String[]{fr._names[4]};
          }
          parms._k=3;
          parms._standardize=standardize;
          parms._max_iterations=10;
          parms._init=KMeans.Initialization.PlusPlus;
          kmm=doSeed(parms,0);
          if (categorical) {
            double[][] centers=kmm._output._centers_raw;
            for (int k=0; k < parms._k; k++) {
              double flower=centers[k][4];
              Assert.assertTrue("categorical column expected",flower == (int)flower);
            }
          }
          Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._avg_ss,((ModelMetricsClustering)kmm._output._validation_metrics)._avg_ss,1e-5);
          Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._avg_between_ss,((ModelMetricsClustering)kmm._output._validation_metrics)._avg_between_ss,1e-5);
          Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._avg_within_ss,((ModelMetricsClustering)kmm._output._validation_metrics)._avg_within_ss,1e-5);
          for (int i=0; i < parms._k; ++i) {
            Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._within_mse[i],((ModelMetricsClustering)kmm._output._validation_metrics)._within_mse[i],1e-5);
            Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._size[i],((ModelMetricsClustering)kmm._output._validation_metrics)._size[i]);
          }
          fr2=kmm.score(fr);
          Assert.assertTrue(kmm.testJavaScoring(fr,fr2,1e-15));
          fr.delete();
          fr2.delete();
          train.delete();
          valid.delete();
        }
  finally {
          if (fr != null)           fr.delete();
          if (fr2 != null)           fr2.delete();
          if (train != null)           train.delete();
          if (valid != null)           valid.delete();
          if (kmm != null)           kmm.delete();
        }
      }
    }
  }
}
