{
  KMeansModel kmm=null;
  for (  boolean standardize : new boolean[]{false}) {
    Frame fr=null, fr2=null;
    try {
      fr=parse_test_file("smalldata/iris/iris_wheader.csv");
      KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
      parms._train=fr._key;
      parms._valid=fr._key;
      parms._k=3;
      parms._standardize=standardize;
      parms._max_iterations=10;
      parms._init=KMeans.Initialization.Random;
      kmm=doSeed(parms,0);
      double[][] centers=kmm._output._centers_raw;
      for (int k=0; k < parms._k; k++) {
        double flower=centers[k][4];
        Assert.assertTrue("categorical column expected",flower == (int)flower);
      }
      Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._avg_between_ss,((ModelMetricsClustering)kmm._output._validation_metrics)._avg_between_ss,1e-5);
      for (int i=0; i < parms._k; ++i) {
        Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._within_mse[i],((ModelMetricsClustering)kmm._output._validation_metrics)._within_mse[i],1e-5);
        Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._size[i],((ModelMetricsClustering)kmm._output._validation_metrics)._size[i],0);
      }
      fr2=kmm.score(fr);
      Assert.assertTrue(kmm.testJavaScoring(fr,fr2,1e-15));
      fr2.delete();
    }
  finally {
      if (fr != null)       fr.delete();
      if (fr2 != null)       fr2.delete();
      if (kmm != null)       kmm.delete();
    }
  }
}
