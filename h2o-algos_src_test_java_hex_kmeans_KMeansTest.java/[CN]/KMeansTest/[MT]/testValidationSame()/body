{
  KMeansModel kmm=null;
  for (  boolean standardize : new boolean[]{true}) {
    Frame fr=null, fr2=null;
    Frame test=null;
    try {
      fr=parse_test_file("smalldata/iris/iris_wheader.csv");
      SplitFrame sf=new SplitFrame(Key.make());
      sf.dataset=fr;
      sf.ratios=new double[]{0.02,0.6};
      sf.dest_keys=new Key[]{Key.make("train.hex"),Key.make("test.hex"),Key.make()};
      sf.exec().get();
      Key[] ksplits=sf.dest_keys;
      test=DKV.get(ksplits[0]).get();
      KMeansModel.KMeansParameters parms=new KMeansModel.KMeansParameters();
      parms._train=test._key;
      parms._valid=test._key;
      parms._k=3;
      parms._standardize=standardize;
      parms._max_iterations=10;
      parms._init=KMeans.Initialization.Furthest;
      kmm=doSeed(parms,0);
      fr2=kmm.score(test);
      Log.info(fr2.toString(0,150));
      Assert.assertTrue(kmm.testJavaScoring(test,fr2,1e-15));
      fr2.delete();
      test.delete();
      ksplits[0].remove();
      ksplits[1].remove();
      ksplits[2].remove();
      Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._avg_between_ss,((ModelMetricsClustering)kmm._output._validation_metrics)._avg_between_ss,1e-5);
      for (int i=0; i < parms._k; ++i) {
        Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._within_mse[i],((ModelMetricsClustering)kmm._output._validation_metrics)._within_mse[i],1e-5);
        Assert.assertEquals(((ModelMetricsClustering)kmm._output._training_metrics)._size[i],((ModelMetricsClustering)kmm._output._validation_metrics)._size[i],0);
      }
    }
  finally {
      if (fr != null)       fr.delete();
      if (fr2 != null)       fr2.delete();
      if (kmm != null)       kmm.delete();
    }
  }
}
