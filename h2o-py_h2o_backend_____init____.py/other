u'\nClasses for communication with backend H2O servers.\n\n:class:`H2OConnection`\n    Connect to an existing H2O server and send requests to it.\n\n:class:`H2OLocalServer`\n    Start an H2O server on your local machine.\n\nThe :mod:`h2o` module has convenience functions for accessing these classes, and those are the ones that are\nrecommended for everyday use. The following are the common use cases:\n\n(1) Connect to an existing remote H2O server::\n\n        h2o.connect(url="...")\n\n(2) Connect to a local server, or if there isn\'t one start it and then connect::\n\n        h2o.init()\n\n(3) Start multiple H2O servers locally (forming a cluster), and then connect to one of them::\n\n        from h2o.backend import H2OLocalServer\n        for _ in range(5):\n            hs = H2OLocalServer.start()\n        h2o.connect(server=hs)\n\nFunctions :func:`h2o.connect` and :func:`h2o.init` take many parameters that allow you to fine-tune the connection\nsettings. When used, they will create a new :class:`H2OConnection` object and store it in a global variable -- this\nconnection will be used by all subsequent calls to ``h2o.`` functions. At this moment there is no effective way to\nhave multiple connections to separate H2O servers open at the same time. Such facility may be added in the future.\n'
from __future__ import absolute_import, division, print_function, unicode_literals
from .connection import H2OConnection
from .server import H2OLocalServer
from .exceptions import H2OStartupError, H2OConnectionError, H2OServerError, H2OResponseError
__all__ = (u'H2OConnection', u'H2OLocalServer', u'H2OStartupError', u'H2OConnectionError', u'H2OServerError', u'H2OResponseError')
