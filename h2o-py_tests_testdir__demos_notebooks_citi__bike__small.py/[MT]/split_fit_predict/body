def split_fit_predict(data):
    global gbm0, drf0, glm0, dl0
    r = data['Days'].runif()
    train = data[(r < 0.6)]
    test = data[((0.6 <= r) & (r < 0.9))]
    hold = data[(0.9 <= r)]
    print 'Training data has', train.ncol(), 'columns and', train.nrow(), 'rows, test has', test.nrow(), 'rows, holdout has', hold.nrow()
    s = time.time()
    gbm0 = h2o.gbm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], ntrees=500, max_depth=6, learn_rate=0.1)
    gbm_elapsed = (time.time() - s)
    s = time.time()
    drf0 = h2o.random_forest(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], ntrees=250, max_depth=30)
    drf_elapsed = (time.time() - s)
    s = time.time()
    glm0 = h2o.glm(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], Lambda=[1e-05], family='poisson')
    glm_elapsed = (time.time() - s)
    s = time.time()
    dl0 = h2o.deeplearning(x=train.drop('bikes'), y=train['bikes'], validation_x=test.drop('bikes'), validation_y=test['bikes'], hidden=[50, 50, 50, 50], epochs=50)
    dl_elapsed = (time.time() - s)
    train_r2_gbm = gbm0.model_performance(train).r2()
    test_r2_gbm = gbm0.model_performance(test).r2()
    hold_r2_gbm = gbm0.model_performance(hold).r2()
    train_r2_drf = drf0.model_performance(train).r2()
    test_r2_drf = drf0.model_performance(test).r2()
    hold_r2_drf = drf0.model_performance(hold).r2()
    train_r2_glm = glm0.model_performance(train).r2()
    test_r2_glm = glm0.model_performance(test).r2()
    hold_r2_glm = glm0.model_performance(hold).r2()
    train_r2_dl = dl0.model_performance(train).r2()
    test_r2_dl = dl0.model_performance(test).r2()
    hold_r2_dl = dl0.model_performance(hold).r2()
    header = ['Model', 'R2 TRAIN', 'R2 TEST', 'R2 HOLDOUT', 'Model Training Time (s)']
    table = [['GBM', train_r2_gbm, test_r2_gbm, hold_r2_gbm, round(gbm_elapsed, 3)], ['DRF', train_r2_drf, test_r2_drf, hold_r2_drf, round(drf_elapsed, 3)], ['GLM', train_r2_glm, test_r2_glm, hold_r2_glm, round(glm_elapsed, 3)], ['DL ', train_r2_dl, test_r2_dl, hold_r2_dl, round(dl_elapsed, 3)]]
    h2o.H2ODisplay(table, header)
