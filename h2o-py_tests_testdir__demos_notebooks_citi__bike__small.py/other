import h2o
import time
data_source_is_s3 = False
small_test = [mylocate('bigdata/laptop/citibike-nyc/2013-10.csv')]
big_test = [mylocate('bigdata/laptop/citibike-nyc/2013-07.csv'), mylocate('bigdata/laptop/citibike-nyc/2013-08.csv'), mylocate('bigdata/laptop/citibike-nyc/2013-09.csv'), mylocate('bigdata/laptop/citibike-nyc/2013-10.csv'), mylocate('bigdata/laptop/citibike-nyc/2013-11.csv'), mylocate('bigdata/laptop/citibike-nyc/2013-12.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-01.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-02.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-03.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-04.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-05.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-06.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-07.csv'), mylocate('bigdata/laptop/citibike-nyc/2014-08.csv')]
print 'Import and Parse bike data'
data = h2o.import_frame(path=small_test)
startime = data['starttime']
secsPerDay = (((1000 * 60) * 60) * 24)
data['Days'] = (startime / secsPerDay).floor()
data.describe()
group_by_cols = ['Days', 'start station name']
aggregates = {'bikes': ['count', 0, 'all'], }
bpd = data.group_by(cols=group_by_cols, aggregates=aggregates)
bpd.show()
bpd.describe()
bpd.dim()
print 'Quantiles of bikes-per-day'
bpd['bikes'].quantile().show()
secs = (bpd['Days'] * secsPerDay)
bpd['Month'] = secs.month().asfactor()
bpd['DayOfWeek'] = secs.dayOfWeek()
print 'Bikes-Per-Day'
bpd.describe()
split_fit_predict(bpd)
wthr1 = h2o.import_frame(path=[mylocate('bigdata/laptop/citibike-nyc/31081_New_York_City__Hourly_2013.csv'), mylocate('bigdata/laptop/citibike-nyc/31081_New_York_City__Hourly_2014.csv')])
wthr1.describe()
wthr2 = wthr1[['Year Local', 'Month Local', 'Day Local', 'Hour Local', 'Dew Point (C)', 'Humidity Fraction', 'Precipitation One Hour (mm)', 'Temperature (C)', 'Weather Code 1/ Description']]
wthr2.setName(wthr2.index('Precipitation One Hour (mm)'), 'Rain (mm)')
wthr2.setName(wthr2.index('Weather Code 1/ Description'), 'WC1')
wthr2.describe()
wthr3 = wthr2[(wthr2['Hour Local'] == 12)]
wthr3['msec'] = h2o.H2OFrame.mktime(year=wthr3['Year Local'], month=(wthr3['Month Local'] - 1), day=(wthr3['Day Local'] - 1), hour=wthr3['Hour Local'])
secsPerDay = (((1000 * 60) * 60) * 24)
wthr3['Days'] = (wthr3['msec'] / secsPerDay).floor()
wthr3.describe()
wthr4 = wthr3.drop('Year Local').drop('Month Local').drop('Day Local').drop('Hour Local').drop('msec')
rain = wthr4['Rain (mm)']
rain[rain.isna()] = 0
print 'Merge Daily Weather with Bikes-Per-Day'
bpd_with_weather = bpd.merge(wthr4, allLeft=True, allRite=False)
bpd_with_weather.describe()
bpd_with_weather.show()
split_fit_predict(bpd_with_weather)
