{
  double[][] newCenters=Arrays.copyOf(centers,centers.length + 1);
  for (int i=0; i < centers.length; ++i)   newCenters[i]=centers[i].clone();
  double maxRange=0;
  int clusterToSplit=0;
  int dimToSplit=0;
  for (int i=0; i < centers.length; ++i) {
    double[] range=new double[hi[i].length];
    for (int col=0; col < hi[i].length; col++) {
      if (_isCats[col] != null)       continue;
      range[col]=hi[i][col] - lo[i][col];
      if (range[col] > maxRange) {
        clusterToSplit=i;
        dimToSplit=col;
        maxRange=range[col];
      }
    }
  }
  assert(_isCats[dimToSplit] == null);
  double splitPoint=newCenters[clusterToSplit][dimToSplit];
  SplitTask task=new SplitTask(newCenters,means,mults,impute_cat,_isCats,k + 1,hasWeightCol(),clusterToSplit,dimToSplit,splitPoint).doAll(vecs2);
  newCenters[clusterToSplit]=task._cMeans[clusterToSplit].clone();
  newCenters[newCenters.length - 1]=task._cMeans[newCenters.length - 1].clone();
  return newCenters;
}
