{
  model._output._categorical_column_count=0;
  _isCats=new String[vecs.length][];
  for (int v=0; v < vecs.length; v++) {
    _isCats[v]=vecs[v].isEnum() ? new String[0] : null;
    if (_isCats[v] != null)     model._output._categorical_column_count++;
  }
  Random rand=water.util.RandomUtils.getRNG(_parms._seed - 1);
  double centers[][];
  if (null != _parms._user_points) {
    Frame user_points=_parms._user_points.get();
    int numCenters=(int)user_points.numRows();
    int numCols=model._output.nfeatures();
    centers=new double[numCenters][numCols];
    Vec[] centersVecs=user_points.vecs();
    for (int r=0; r < numCenters; r++) {
      for (int c=0; c < numCols; c++) {
        centers[r][c]=centersVecs[c].at(r);
        centers[r][c]=data(centers[r][c],c,means,mults,vecs[c].cardinality());
      }
    }
  }
 else {
    if (_parms._init == Initialization.Random) {
      centers=new double[_parms._k][model._output.nfeatures()];
      for (      double[] center : centers)       randomRow(vecs,rand,center,means,mults);
    }
 else {
      centers=new double[1][model._output.nfeatures()];
      randomRow(vecs,rand,centers[0],means,mults);
      model._output._iterations=0;
      while (model._output._iterations < 5) {
        SumSqr sqr=new SumSqr(centers,means,mults,_isCats).doAll(vecs);
        Sampler sampler=new Sampler(centers,means,mults,_isCats,sqr._sqr,_parms._k * 3,_parms._seed,hasWeightCol()).doAll(vecs);
        centers=ArrayUtils.append(centers,sampler._sampled);
        if (!isRunning())         return null;
        model._output._centers_raw=destandardize(centers,_isCats,means,mults);
        model._output._tot_withinss=sqr._sqr / _train.numRows();
        model._output._iterations++;
        model.update(_key);
      }
      centers=recluster(centers,rand,_parms._k,_parms._init,_isCats);
      model._output._iterations=0;
    }
  }
  return centers;
}
