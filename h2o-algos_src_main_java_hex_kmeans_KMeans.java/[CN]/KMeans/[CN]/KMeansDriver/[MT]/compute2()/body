{
  KMeansModel model=null;
  try {
    init(true);
    if (error_count() > 0)     throw H2OModelBuilderIllegalArgumentException.makeFromBuilder(KMeans.this);
    _parms.read_lock_frames(KMeans.this);
    model=new KMeansModel(dest(),_parms,new KMeansModel.KMeansOutput(KMeans.this));
    model.delete_and_lock(_key);
    final Vec vecs[]=_train.vecs();
    final double[] means=_train.means();
    final double[] mults=_parms._standardize ? _train.mults() : null;
    model._output._normSub=means;
    model._output._normMul=mults;
    double[][] centers=initial_centers(model,vecs,means,mults);
    if (centers == null)     return;
    double[][] oldCenters=null;
    while (!isDone(model,centers,oldCenters)) {
      Lloyds task=new Lloyds(centers,means,mults,_isCats,_parms._k).doAll(vecs);
      max_cats(task._cMeans,task._cats,_isCats);
      if (cleanupBadClusters(task,vecs,centers,means,mults))       continue;
      oldCenters=centers;
      centers=computeStatsFillModel(task,model,vecs,centers,means,mults);
      model.update(_key);
      update(1);
      if (model._parms._score_each_iteration)       Log.info(model._output._model_summary);
    }
    Log.info(model._output._model_summary);
    if (false) {
      assert((ArrayUtils.sum(model._output._size) - _parms.train().numRows()) <= 1);
      model.score(_parms.train()).delete();
      ModelMetricsClustering mm=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      assert(Arrays.equals(mm._size,((ModelMetricsClustering)model._output._training_metrics)._size));
      for (int i=0; i < _parms._k; ++i) {
        assert(MathUtils.compare(mm._withinss[i],((ModelMetricsClustering)model._output._training_metrics)._withinss[i],1e-6,1e-6));
      }
      assert(MathUtils.compare(mm._totss,((ModelMetricsClustering)model._output._training_metrics)._totss,1e-6,1e-6));
      assert(MathUtils.compare(mm._betweenss,((ModelMetricsClustering)model._output._training_metrics)._betweenss,1e-6,1e-6));
      assert(MathUtils.compare(mm._tot_withinss,((ModelMetricsClustering)model._output._training_metrics)._tot_withinss,1e-6,1e-6));
    }
    if (_valid != null) {
      Frame pred=model.score(_parms.valid());
      model._output._validation_metrics=DKV.getGet(model._output._model_metrics[model._output._model_metrics.length - 1]);
      pred.delete();
      model.update(_key);
    }
    done();
  }
 catch (  Throwable t) {
    Job thisJob=DKV.getGet(_key);
    if (thisJob._state == JobState.CANCELLED) {
      Log.info("Job cancelled by user.");
    }
 else {
      t.printStackTrace();
      failed(t);
      throw t;
    }
  }
 finally {
    if (model != null)     model.unlock(_key);
    _parms.read_unlock_frames(KMeans.this);
  }
  tryComplete();
}
