{
  if (model._parms._standardize) {
    model._output._centers_std_raw=centers;
  }
  model._output._centers_raw=destandardize(centers,_isCats,means,mults);
  model._output._size=task._size;
  model._output._within_mse=task._cSqr;
  double ssq=0;
  for (int i=0; i < _parms._k; i++) {
    ssq+=model._output._within_mse[i];
    model._output._within_mse[i]/=task._size[i];
  }
  model._output._avg_within_ss=ssq / _train.numRows();
  if (_parms._k == 1)   model._output._avg_ss=model._output._avg_within_ss;
 else {
    TotSS totss=new TotSS(means,mults,_parms.train().domains()).doAll(vecs);
    model._output._avg_ss=totss._tss / _train.numRows();
  }
  model._output._avg_between_ss=model._output._avg_ss - model._output._avg_within_ss;
  model._output._iterations++;
  model._output._history_avg_within_ss=ArrayUtils.copyAndFillOf(model._output._history_avg_within_ss,model._output._history_avg_within_ss.length + 1,model._output._avg_within_ss);
  model._output._model_summary=createModelSummaryTable(model._output);
  model._output._scoring_history=createScoringHistoryTable(model._output);
  model._output._training_metrics=makeTrainingMetrics(model);
  return task._cMeans;
}
