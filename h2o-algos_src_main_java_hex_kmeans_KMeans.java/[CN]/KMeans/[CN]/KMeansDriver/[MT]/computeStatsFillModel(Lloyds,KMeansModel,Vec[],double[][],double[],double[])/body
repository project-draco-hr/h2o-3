{
  String[] rowHeaders=new String[_parms._k];
  for (int i=0; i < _parms._k; i++)   rowHeaders[i]=String.valueOf(i + 1);
  String[] colTypes=new String[_train.numCols()];
  String[] colFormats=new String[_train.numCols()];
  Arrays.fill(colTypes,"double");
  Arrays.fill(colFormats,"%5f");
  if (model._parms._standardize) {
    model._output._centers_std_raw=centers;
    model._output._centers_std=new TwoDimTable("Cluster means (standardized)",null,rowHeaders,_train.names(),colTypes,colFormats,"",new String[_parms._k][],model._output._centers_std_raw);
  }
  model._output._centers_raw=destandardize(centers,_isCats,means,mults);
  model._output._centers=new TwoDimTable("Cluster means",null,rowHeaders,_train.names(),colTypes,colFormats,"",new String[_parms._k][],model._output._centers_raw);
  model._output._size=task._size;
  model._output._within_mse=task._cSqr;
  double ssq=0;
  for (int i=0; i < _parms._k; i++) {
    ssq+=model._output._within_mse[i];
    model._output._within_mse[i]/=task._size[i];
  }
  model._output._avg_within_ss=ssq / _train.numRows();
  if (_parms._k == 1)   model._output._avg_ss=model._output._avg_within_ss;
 else {
    TotSS totss=new TotSS(means,mults).doAll(vecs);
    model._output._avg_ss=totss._tss / _train.numRows();
  }
  model._output._avg_between_ss=model._output._avg_ss - model._output._avg_within_ss;
  return task._cMeans;
}
