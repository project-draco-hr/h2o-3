{
  model._output._centersraw=destandardize(centers,_ncats,means,mults);
  String[] rowHeaders=new String[_parms._k];
  for (int i=0; i < _parms._k; i++)   rowHeaders[i]=String.valueOf(i + 1);
  String[] colTypes=new String[_train.numCols()];
  Arrays.fill(colTypes,"double");
  model._output._centers=new TwoDimTable("Cluster means",rowHeaders,_train.names(),colTypes,null,new String[_parms._k][],model._output._centersraw);
  model._output._size=task._size;
  model._output._withinmse=task._cSqr;
  double ssq=0;
  for (int i=0; i < _parms._k; i++) {
    ssq+=model._output._withinmse[i];
    model._output._withinmse[i]/=task._size[i];
  }
  model._output._avgwithinss=ssq / _train.numRows();
  if (_parms._k == 1)   model._output._avgss=model._output._avgwithinss;
 else {
    TotSS totss=new TotSS(means).doAll(vecs);
    model._output._avgss=totss._tss / _train.numRows();
  }
  model._output._avgbetweenss=model._output._avgss - model._output._avgwithinss;
  return task._cMeans;
}
