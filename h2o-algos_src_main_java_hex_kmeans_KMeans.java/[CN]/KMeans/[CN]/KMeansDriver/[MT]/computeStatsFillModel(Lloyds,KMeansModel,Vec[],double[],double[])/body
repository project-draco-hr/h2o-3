{
  if (model._parms._standardize) {
    model._output._centers_std_raw=task._cMeans;
  }
  model._output._centers_raw=destandardize(task._cMeans,_isCats,means,mults);
  model._output._size=task._size;
  model._output._withinss=task._cSqr;
  double ssq=0;
  for (int i=0; i < _parms._k; i++)   ssq+=model._output._withinss[i];
  model._output._tot_withinss=ssq;
  if (_parms._k == 1)   model._output._totss=model._output._tot_withinss;
 else {
    TotSS totss=new TotSS(means,mults,_parms.train().domains()).doAll(vecs);
    model._output._totss=totss._tss;
  }
  model._output._betweenss=model._output._totss - model._output._tot_withinss;
  model._output._iterations++;
  model._output._history_withinss=ArrayUtils.copyAndFillOf(model._output._history_withinss,model._output._history_withinss.length + 1,model._output._tot_withinss);
  model._output._model_summary=createModelSummaryTable(model._output);
  model._output._scoring_history=createScoringHistoryTable(model._output);
  model._output._training_metrics=makeTrainingMetrics(model);
  return task._cMeans;
}
